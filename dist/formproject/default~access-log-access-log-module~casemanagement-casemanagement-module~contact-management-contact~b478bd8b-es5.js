var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~access-log-access-log-module~casemanagement-casemanagement-module~contact-management-contact~b478bd8b"], {
        /***/ "./node_modules/@angular/cdk/esm2015/a11y.js": 
        /*!***************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/a11y.js ***!
          \***************************************************/
        /*! exports provided: ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_DEFAULT_OPTIONS, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARIA_DESCRIBER_PROVIDER_FACTORY", function () { return ARIA_DESCRIBER_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MESSAGES_CONTAINER_ID", function () { return MESSAGES_CONTAINER_ID; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_DESCRIBEDBY_ID_PREFIX", function () { return CDK_DESCRIBEDBY_ID_PREFIX; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_DESCRIBEDBY_HOST_ATTRIBUTE", function () { return CDK_DESCRIBEDBY_HOST_ATTRIBUTE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AriaDescriber", function () { return AriaDescriber; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARIA_DESCRIBER_PROVIDER", function () { return ARIA_DESCRIBER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActiveDescendantKeyManager", function () { return ActiveDescendantKeyManager; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusKeyManager", function () { return FocusKeyManager; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListKeyManager", function () { return ListKeyManager; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusTrap", function () { return FocusTrap; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusTrapFactory", function () { return FocusTrapFactory; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTrapFocus", function () { return CdkTrapFocus; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InteractivityChecker", function () { return InteractivityChecker; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_PROVIDER_FACTORY", function () { return LIVE_ANNOUNCER_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LiveAnnouncer", function () { return LiveAnnouncer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkAriaLive", function () { return CdkAriaLive; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_PROVIDER", function () { return LIVE_ANNOUNCER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY", function () { return LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_ELEMENT_TOKEN", function () { return LIVE_ANNOUNCER_ELEMENT_TOKEN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_DEFAULT_OPTIONS", function () { return LIVE_ANNOUNCER_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUS_MONITOR_PROVIDER_FACTORY", function () { return FOCUS_MONITOR_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOUCH_BUFFER_MS", function () { return TOUCH_BUFFER_MS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusMonitor", function () { return FocusMonitor; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkMonitorFocus", function () { return CdkMonitorFocus; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUS_MONITOR_PROVIDER", function () { return FOCUS_MONITOR_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFakeMousedownFromScreenReader", function () { return isFakeMousedownFromScreenReader; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A11yModule", function () { return A11yModule; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/observers */ "./node_modules/@angular/cdk/esm2015/observers.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * IDs are deliminated by an empty space, as per the spec.
             * @type {?}
             */
            var ID_DELIMINATOR = ' ';
            /**
             * Adds the given ID to the specified ARIA attribute on an element.
             * Used for attributes such as aria-labelledby, aria-owns, etc.
             * @param {?} el
             * @param {?} attr
             * @param {?} id
             * @return {?}
             */
            function addAriaReferencedId(el, attr, id) {
                /** @type {?} */
                var ids = getAriaReferenceIds(el, attr);
                if (ids.some(( /**
                 * @param {?} existingId
                 * @return {?}
                 */function (/**
                 * @param {?} existingId
                 * @return {?}
                 */ existingId) { return existingId.trim() == id.trim(); }))) {
                    return;
                }
                ids.push(id.trim());
                el.setAttribute(attr, ids.join(ID_DELIMINATOR));
            }
            /**
             * Removes the given ID from the specified ARIA attribute on an element.
             * Used for attributes such as aria-labelledby, aria-owns, etc.
             * @param {?} el
             * @param {?} attr
             * @param {?} id
             * @return {?}
             */
            function removeAriaReferencedId(el, attr, id) {
                /** @type {?} */
                var ids = getAriaReferenceIds(el, attr);
                /** @type {?} */
                var filteredIds = ids.filter(( /**
                 * @param {?} val
                 * @return {?}
                 */function (/**
                 * @param {?} val
                 * @return {?}
                 */ val) { return val != id.trim(); }));
                if (filteredIds.length) {
                    el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));
                }
                else {
                    el.removeAttribute(attr);
                }
            }
            /**
             * Gets the list of IDs referenced by the given ARIA attribute on an element.
             * Used for attributes such as aria-labelledby, aria-owns, etc.
             * @param {?} el
             * @param {?} attr
             * @return {?}
             */
            function getAriaReferenceIds(el, attr) {
                // Get string array of all individual ids (whitespace deliminated) in the attribute value
                return (el.getAttribute(attr) || '').match(/\S+/g) || [];
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * ID used for the body container where all messages are appended.
             * @type {?}
             */
            var MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';
            /**
             * ID prefix used for each created message element.
             * @type {?}
             */
            var CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';
            /**
             * Attribute given to each host element that is described by a message element.
             * @type {?}
             */
            var CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';
            /**
             * Global incremental identifier for each registered message element.
             * @type {?}
             */
            var nextId = 0;
            /**
             * Global map of all registered message elements that have been placed into the document.
             * @type {?}
             */
            var messageRegistry = new Map();
            /**
             * Container for all registered messages.
             * @type {?}
             */
            var messagesContainer = null;
            /**
             * Utility that creates visually hidden elements with a message content. Useful for elements that
             * want to use aria-describedby to further describe themselves without adding additional visual
             * content.
             */
            var AriaDescriber = /** @class */ (function () {
                /**
                 * @param {?} _document
                 */
                function AriaDescriber(_document) {
                    this._document = _document;
                }
                /**
                 * Adds to the host element an aria-describedby reference to a hidden element that contains
                 * the message. If the same message has already been registered, then it will reuse the created
                 * message element.
                 * @param {?} hostElement
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype.describe = function (hostElement, message) {
                    if (!this._canBeDescribed(hostElement, message)) {
                        return;
                    }
                    if (typeof message !== 'string') {
                        // We need to ensure that the element has an ID.
                        this._setMessageId(message);
                        messageRegistry.set(message, { messageElement: message, referenceCount: 0 });
                    }
                    else if (!messageRegistry.has(message)) {
                        this._createMessageElement(message);
                    }
                    if (!this._isElementDescribedByMessage(hostElement, message)) {
                        this._addMessageReference(hostElement, message);
                    }
                };
                /**
                 * Removes the host element's aria-describedby reference to the message element.
                 * @param {?} hostElement
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype.removeDescription = function (hostElement, message) {
                    if (!this._isElementNode(hostElement)) {
                        return;
                    }
                    if (this._isElementDescribedByMessage(hostElement, message)) {
                        this._removeMessageReference(hostElement, message);
                    }
                    // If the message is a string, it means that it's one that we created for the
                    // consumer so we can remove it safely, otherwise we should leave it in place.
                    if (typeof message === 'string') {
                        /** @type {?} */
                        var registeredMessage = messageRegistry.get(message);
                        if (registeredMessage && registeredMessage.referenceCount === 0) {
                            this._deleteMessageElement(message);
                        }
                    }
                    if (messagesContainer && messagesContainer.childNodes.length === 0) {
                        this._deleteMessagesContainer();
                    }
                };
                /**
                 * Unregisters all created message elements and removes the message container.
                 * @return {?}
                 */
                AriaDescriber.prototype.ngOnDestroy = function () {
                    /** @type {?} */
                    var describedElements = this._document.querySelectorAll("[" + CDK_DESCRIBEDBY_HOST_ATTRIBUTE + "]");
                    for (var i = 0; i < describedElements.length; i++) {
                        this._removeCdkDescribedByReferenceIds(describedElements[i]);
                        describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
                    }
                    if (messagesContainer) {
                        this._deleteMessagesContainer();
                    }
                    messageRegistry.clear();
                };
                /**
                 * Creates a new element in the visually hidden message container element with the message
                 * as its content and adds it to the message registry.
                 * @private
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype._createMessageElement = function (message) {
                    /** @type {?} */
                    var messageElement = this._document.createElement('div');
                    this._setMessageId(messageElement);
                    messageElement.textContent = message;
                    this._createMessagesContainer();
                    ( /** @type {?} */(messagesContainer)).appendChild(messageElement);
                    messageRegistry.set(message, { messageElement: messageElement, referenceCount: 0 });
                };
                /**
                 * Assigns a unique ID to an element, if it doesn't have one already.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                AriaDescriber.prototype._setMessageId = function (element) {
                    if (!element.id) {
                        element.id = CDK_DESCRIBEDBY_ID_PREFIX + "-" + nextId++;
                    }
                };
                /**
                 * Deletes the message element from the global messages container.
                 * @private
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype._deleteMessageElement = function (message) {
                    /** @type {?} */
                    var registeredMessage = messageRegistry.get(message);
                    /** @type {?} */
                    var messageElement = registeredMessage && registeredMessage.messageElement;
                    if (messagesContainer && messageElement) {
                        messagesContainer.removeChild(messageElement);
                    }
                    messageRegistry.delete(message);
                };
                /**
                 * Creates the global container for all aria-describedby messages.
                 * @private
                 * @return {?}
                 */
                AriaDescriber.prototype._createMessagesContainer = function () {
                    if (!messagesContainer) {
                        /** @type {?} */
                        var preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);
                        // When going from the server to the client, we may end up in a situation where there's
                        // already a container on the page, but we don't have a reference to it. Clear the
                        // old container so we don't get duplicates. Doing this, instead of emptying the previous
                        // container, should be slightly faster.
                        if (preExistingContainer) {
                            ( /** @type {?} */(preExistingContainer.parentNode)).removeChild(preExistingContainer);
                        }
                        messagesContainer = this._document.createElement('div');
                        messagesContainer.id = MESSAGES_CONTAINER_ID;
                        messagesContainer.setAttribute('aria-hidden', 'true');
                        messagesContainer.style.display = 'none';
                        this._document.body.appendChild(messagesContainer);
                    }
                };
                /**
                 * Deletes the global messages container.
                 * @private
                 * @return {?}
                 */
                AriaDescriber.prototype._deleteMessagesContainer = function () {
                    if (messagesContainer && messagesContainer.parentNode) {
                        messagesContainer.parentNode.removeChild(messagesContainer);
                        messagesContainer = null;
                    }
                };
                /**
                 * Removes all cdk-describedby messages that are hosted through the element.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                AriaDescriber.prototype._removeCdkDescribedByReferenceIds = function (element) {
                    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX
                    /** @type {?} */
                    var originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')
                        .filter(( /**
                 * @param {?} id
                 * @return {?}
                 */function (/**
                 * @param {?} id
                 * @return {?}
                 */ id) { return id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0; }));
                    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));
                };
                /**
                 * Adds a message reference to the element using aria-describedby and increments the registered
                 * message's reference count.
                 * @private
                 * @param {?} element
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype._addMessageReference = function (element, message) {
                    /** @type {?} */
                    var registeredMessage = ( /** @type {?} */(messageRegistry.get(message)));
                    // Add the aria-describedby reference and set the
                    // describedby_host attribute to mark the element.
                    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
                    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');
                    registeredMessage.referenceCount++;
                };
                /**
                 * Removes a message reference from the element using aria-describedby
                 * and decrements the registered message's reference count.
                 * @private
                 * @param {?} element
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype._removeMessageReference = function (element, message) {
                    /** @type {?} */
                    var registeredMessage = ( /** @type {?} */(messageRegistry.get(message)));
                    registeredMessage.referenceCount--;
                    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
                    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
                };
                /**
                 * Returns true if the element has been described by the provided message ID.
                 * @private
                 * @param {?} element
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype._isElementDescribedByMessage = function (element, message) {
                    /** @type {?} */
                    var referenceIds = getAriaReferenceIds(element, 'aria-describedby');
                    /** @type {?} */
                    var registeredMessage = messageRegistry.get(message);
                    /** @type {?} */
                    var messageId = registeredMessage && registeredMessage.messageElement.id;
                    return !!messageId && referenceIds.indexOf(messageId) != -1;
                };
                /**
                 * Determines whether a message can be described on a particular element.
                 * @private
                 * @param {?} element
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype._canBeDescribed = function (element, message) {
                    if (!this._isElementNode(element)) {
                        return false;
                    }
                    if (message && typeof message === 'object') {
                        // We'd have to make some assumptions about the description element's text, if the consumer
                        // passed in an element. Assume that if an element is passed in, the consumer has verified
                        // that it can be used as a description.
                        return true;
                    }
                    /** @type {?} */
                    var trimmedMessage = message == null ? '' : ("" + message).trim();
                    /** @type {?} */
                    var ariaLabel = element.getAttribute('aria-label');
                    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the
                    // element, because screen readers will end up reading out the same text twice in a row.
                    return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;
                };
                /**
                 * Checks whether a node is an Element node.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                AriaDescriber.prototype._isElementNode = function (element) {
                    return element.nodeType === this._document.ELEMENT_NODE;
                };
                return AriaDescriber;
            }());
            AriaDescriber.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            AriaDescriber.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ AriaDescriber.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function AriaDescriber_Factory() { return new AriaDescriber(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"])); }, token: AriaDescriber, providedIn: "root" });
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} parentDispatcher
             * @param {?} _document
             * @return {?}
             */
            function ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {
                return parentDispatcher || new AriaDescriber(_document);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var ARIA_DESCRIBER_PROVIDER = {
                // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.
                provide: AriaDescriber,
                deps: [
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"](), AriaDescriber],
                    ( /** @type {?} */(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]))
                ],
                useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * This class manages keyboard events for selectable lists. If you pass it a query list
             * of items, it will set the active item correctly when arrow events occur.
             * @template T
             */
            var ListKeyManager = /** @class */ (function () {
                /**
                 * @param {?} _items
                 */
                function ListKeyManager(_items) {
                    var _this = this;
                    this._items = _items;
                    this._activeItemIndex = -1;
                    this._activeItem = null;
                    this._wrap = false;
                    this._letterKeyStream = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    this._typeaheadSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
                    this._vertical = true;
                    this._allowedModifierKeys = [];
                    /**
                     * Predicate function that can be used to check whether an item should be skipped
                     * by the key manager. By default, disabled items are skipped.
                     */
                    this._skipPredicateFn = ( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return item.disabled; });
                    // Buffer for the letters that the user has pressed when the typeahead option is turned on.
                    this._pressedLetters = [];
                    /**
                     * Stream that emits any time the TAB key is pressed, so components can react
                     * when focus is shifted off of the list.
                     */
                    this.tabOut = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Stream that emits whenever the active item of the list manager changes.
                     */
                    this.change = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    // We allow for the items to be an array because, in some cases, the consumer may
                    // not have access to a QueryList of the items they want to manage (e.g. when the
                    // items aren't being collected via `ViewChildren` or `ContentChildren`).
                    if (_items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"]) {
                        _items.changes.subscribe(( /**
                         * @param {?} newItems
                         * @return {?}
                         */function (newItems) {
                            if (_this._activeItem) {
                                /** @type {?} */
                                var itemArray = newItems.toArray();
                                /** @type {?} */
                                var newIndex = itemArray.indexOf(_this._activeItem);
                                if (newIndex > -1 && newIndex !== _this._activeItemIndex) {
                                    _this._activeItemIndex = newIndex;
                                }
                            }
                        }));
                    }
                }
                /**
                 * Sets the predicate function that determines which items should be skipped by the
                 * list key manager.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} predicate Function that determines whether the given item should be skipped.
                 * @return {THIS}
                 */
                ListKeyManager.prototype.skipPredicate = function (predicate) {
                    ( /** @type {?} */(this))._skipPredicateFn = predicate;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Configures wrapping mode, which determines whether the active item will wrap to
                 * the other end of list when there are no more items in the given direction.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} shouldWrap Whether the list should wrap when reaching the end.
                 * @return {THIS}
                 */
                ListKeyManager.prototype.withWrap = function (shouldWrap) {
                    if (shouldWrap === void 0) { shouldWrap = true; }
                    ( /** @type {?} */(this))._wrap = shouldWrap;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Configures whether the key manager should be able to move the selection vertically.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} enabled Whether vertical selection should be enabled.
                 * @return {THIS}
                 */
                ListKeyManager.prototype.withVerticalOrientation = function (enabled) {
                    if (enabled === void 0) { enabled = true; }
                    ( /** @type {?} */(this))._vertical = enabled;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Configures the key manager to move the selection horizontally.
                 * Passing in `null` will disable horizontal movement.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} direction Direction in which the selection can be moved.
                 * @return {THIS}
                 */
                ListKeyManager.prototype.withHorizontalOrientation = function (direction) {
                    ( /** @type {?} */(this))._horizontal = direction;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Modifier keys which are allowed to be held down and whose default actions will be prevented
                 * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} keys
                 * @return {THIS}
                 */
                ListKeyManager.prototype.withAllowedModifierKeys = function (keys) {
                    ( /** @type {?} */(this))._allowedModifierKeys = keys;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Turns on typeahead mode which allows users to set the active item by typing.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.
                 * @return {THIS}
                 */
                ListKeyManager.prototype.withTypeAhead = function (debounceInterval) {
                    var _this = this;
                    if (debounceInterval === void 0) { debounceInterval = 200; }
                    if (( /** @type {?} */(this))._items.length && ( /** @type {?} */(this))._items.some(( /**
                     * @param {?} item
                     * @return {?}
                     */function (/**
                     * @param {?} item
                     * @return {?}
                     */ item) { return typeof item.getLabel !== 'function'; }))) {
                        throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');
                    }
                    ( /** @type {?} */(this))._typeaheadSubscription.unsubscribe();
                    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters
                    // and convert those letters back into a string. Afterwards find the first item that starts
                    // with that string and select it.
                    ( /** @type {?} */(this))._typeaheadSubscription = ( /** @type {?} */(this))._letterKeyStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["tap"])(( /**
                     * @param {?} keyCode
                     * @return {?}
                     */function (/**
                     * @param {?} keyCode
                     * @return {?}
                     */ keyCode) { return ( /** @type {?} */(_this))._pressedLetters.push(keyCode); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["debounceTime"])(debounceInterval), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["filter"])(( /**
                     * @return {?}
                     */function () { return ( /** @type {?} */(_this))._pressedLetters.length > 0; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(( /**
                     * @return {?}
                     */function () { return ( /** @type {?} */(_this))._pressedLetters.join(''); }))).subscribe(( /**
                     * @param {?} inputString
                     * @return {?}
                     */function (/**
                     * @param {?} inputString
                     * @return {?}
                     */ inputString) {
                        /** @type {?} */
                        var items = ( /** @type {?} */(_this))._getItemsArray();
                        // Start at 1 because we want to start searching at the item immediately
                        // following the current active item.
                        for (var i = 1; i < items.length + 1; i++) {
                            /** @type {?} */
                            var index = (( /** @type {?} */(_this))._activeItemIndex + i) % items.length;
                            /** @type {?} */
                            var item = items[index];
                            if (!( /** @type {?} */(_this))._skipPredicateFn(item) &&
                                ( /** @type {?} */(item.getLabel))().toUpperCase().trim().indexOf(inputString) === 0) {
                                ( /** @type {?} */(_this)).setActiveItem(index);
                                break;
                            }
                        }
                        ( /** @type {?} */(_this))._pressedLetters = [];
                    }));
                    return ( /** @type {?} */(this));
                };
                /**
                 * @param {?} item
                 * @return {?}
                 */
                ListKeyManager.prototype.setActiveItem = function (item) {
                    /** @type {?} */
                    var previousIndex = this._activeItemIndex;
                    this.updateActiveItem(item);
                    if (this._activeItemIndex !== previousIndex) {
                        this.change.next(this._activeItemIndex);
                    }
                };
                /**
                 * Sets the active item depending on the key event passed in.
                 * @param {?} event Keyboard event to be used for determining which element should be active.
                 * @return {?}
                 */
                ListKeyManager.prototype.onKeydown = function (event) {
                    var _this = this;
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    /** @type {?} */
                    var modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];
                    /** @type {?} */
                    var isModifierAllowed = modifiers.every(( /**
                     * @param {?} modifier
                     * @return {?}
                     */function (/**
                     * @param {?} modifier
                     * @return {?}
                     */ modifier) {
                        return !event[modifier] || _this._allowedModifierKeys.indexOf(modifier) > -1;
                    }));
                    switch (keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["TAB"]:
                            this.tabOut.next();
                            return;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"]:
                            if (this._vertical && isModifierAllowed) {
                                this.setNextItemActive();
                                break;
                            }
                            else {
                                return;
                            }
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]:
                            if (this._vertical && isModifierAllowed) {
                                this.setPreviousItemActive();
                                break;
                            }
                            else {
                                return;
                            }
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["RIGHT_ARROW"]:
                            if (this._horizontal && isModifierAllowed) {
                                this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();
                                break;
                            }
                            else {
                                return;
                            }
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["LEFT_ARROW"]:
                            if (this._horizontal && isModifierAllowed) {
                                this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();
                                break;
                            }
                            else {
                                return;
                            }
                        default:
                            if (isModifierAllowed || Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["hasModifierKey"])(event, 'shiftKey')) {
                                // Attempt to use the `event.key` which also maps it to the user's keyboard language,
                                // otherwise fall back to resolving alphanumeric characters via the keyCode.
                                if (event.key && event.key.length === 1) {
                                    this._letterKeyStream.next(event.key.toLocaleUpperCase());
                                }
                                else if ((keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["A"] && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["Z"]) || (keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ZERO"] && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["NINE"])) {
                                    this._letterKeyStream.next(String.fromCharCode(keyCode));
                                }
                            }
                            // Note that we return here, in order to avoid preventing
                            // the default action of non-navigational keys.
                            return;
                    }
                    this._pressedLetters = [];
                    event.preventDefault();
                };
                Object.defineProperty(ListKeyManager.prototype, "activeItemIndex", {
                    /**
                     * Index of the currently active item.
                     * @return {?}
                     */
                    get: function () {
                        return this._activeItemIndex;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ListKeyManager.prototype, "activeItem", {
                    /**
                     * The active item.
                     * @return {?}
                     */
                    get: function () {
                        return this._activeItem;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Sets the active item to the first enabled item in the list.
                 * @return {?}
                 */
                ListKeyManager.prototype.setFirstItemActive = function () {
                    this._setActiveItemByIndex(0, 1);
                };
                /**
                 * Sets the active item to the last enabled item in the list.
                 * @return {?}
                 */
                ListKeyManager.prototype.setLastItemActive = function () {
                    this._setActiveItemByIndex(this._items.length - 1, -1);
                };
                /**
                 * Sets the active item to the next enabled item in the list.
                 * @return {?}
                 */
                ListKeyManager.prototype.setNextItemActive = function () {
                    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);
                };
                /**
                 * Sets the active item to a previous enabled item in the list.
                 * @return {?}
                 */
                ListKeyManager.prototype.setPreviousItemActive = function () {
                    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()
                        : this._setActiveItemByDelta(-1);
                };
                /**
                 * @param {?} item
                 * @return {?}
                 */
                ListKeyManager.prototype.updateActiveItem = function (item) {
                    /** @type {?} */
                    var itemArray = this._getItemsArray();
                    /** @type {?} */
                    var index = typeof item === 'number' ? item : itemArray.indexOf(item);
                    /** @type {?} */
                    var activeItem = itemArray[index];
                    // Explicitly check for `null` and `undefined` because other falsy values are valid.
                    this._activeItem = activeItem == null ? null : activeItem;
                    this._activeItemIndex = index;
                };
                /**
                 * Allows setting of the activeItemIndex without any other effects.
                 * @deprecated Use `updateActiveItem` instead.
                 * \@breaking-change 8.0.0
                 * @param {?} index The new activeItemIndex.
                 * @return {?}
                 */
                ListKeyManager.prototype.updateActiveItemIndex = function (index) {
                    this.updateActiveItem(index);
                };
                /**
                 * This method sets the active item, given a list of items and the delta between the
                 * currently active item and the new active item. It will calculate differently
                 * depending on whether wrap mode is turned on.
                 * @private
                 * @param {?} delta
                 * @return {?}
                 */
                ListKeyManager.prototype._setActiveItemByDelta = function (delta) {
                    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);
                };
                /**
                 * Sets the active item properly given "wrap" mode. In other words, it will continue to move
                 * down the list until it finds an item that is not disabled, and it will wrap if it
                 * encounters either end of the list.
                 * @private
                 * @param {?} delta
                 * @return {?}
                 */
                ListKeyManager.prototype._setActiveInWrapMode = function (delta) {
                    /** @type {?} */
                    var items = this._getItemsArray();
                    for (var i = 1; i <= items.length; i++) {
                        /** @type {?} */
                        var index = (this._activeItemIndex + (delta * i) + items.length) % items.length;
                        /** @type {?} */
                        var item = items[index];
                        if (!this._skipPredicateFn(item)) {
                            this.setActiveItem(index);
                            return;
                        }
                    }
                };
                /**
                 * Sets the active item properly given the default mode. In other words, it will
                 * continue to move down the list until it finds an item that is not disabled. If
                 * it encounters either end of the list, it will stop and not wrap.
                 * @private
                 * @param {?} delta
                 * @return {?}
                 */
                ListKeyManager.prototype._setActiveInDefaultMode = function (delta) {
                    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);
                };
                /**
                 * Sets the active item to the first enabled item starting at the index specified. If the
                 * item is disabled, it will move in the fallbackDelta direction until it either
                 * finds an enabled item or encounters the end of the list.
                 * @private
                 * @param {?} index
                 * @param {?} fallbackDelta
                 * @return {?}
                 */
                ListKeyManager.prototype._setActiveItemByIndex = function (index, fallbackDelta) {
                    /** @type {?} */
                    var items = this._getItemsArray();
                    if (!items[index]) {
                        return;
                    }
                    while (this._skipPredicateFn(items[index])) {
                        index += fallbackDelta;
                        if (!items[index]) {
                            return;
                        }
                    }
                    this.setActiveItem(index);
                };
                /**
                 * Returns the items as an array.
                 * @private
                 * @return {?}
                 */
                ListKeyManager.prototype._getItemsArray = function () {
                    return this._items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"] ? this._items.toArray() : this._items;
                };
                return ListKeyManager;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @template T
             */
            var ActiveDescendantKeyManager = /** @class */ (function (_super) {
                __extends(ActiveDescendantKeyManager, _super);
                function ActiveDescendantKeyManager() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} index
                 * @return {?}
                 */
                ActiveDescendantKeyManager.prototype.setActiveItem = function (index) {
                    if (this.activeItem) {
                        this.activeItem.setInactiveStyles();
                    }
                    _super.prototype.setActiveItem.call(this, index);
                    if (this.activeItem) {
                        this.activeItem.setActiveStyles();
                    }
                };
                return ActiveDescendantKeyManager;
            }(ListKeyManager));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @template T
             */
            var FocusKeyManager = /** @class */ (function (_super) {
                __extends(FocusKeyManager, _super);
                function FocusKeyManager() {
                    var _this = _super.apply(this, arguments) || this;
                    _this._origin = 'program';
                    return _this;
                }
                /**
                 * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} origin Focus origin to be used when focusing items.
                 * @return {THIS}
                 */
                FocusKeyManager.prototype.setFocusOrigin = function (origin) {
                    ( /** @type {?} */(this))._origin = origin;
                    return ( /** @type {?} */(this));
                };
                /**
                 * @param {?} item
                 * @return {?}
                 */
                FocusKeyManager.prototype.setActiveItem = function (item) {
                    _super.prototype.setActiveItem.call(this, item);
                    if (this.activeItem) {
                        this.activeItem.focus(this._origin);
                    }
                };
                return FocusKeyManager;
            }(ListKeyManager));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // The InteractivityChecker leans heavily on the ally.js accessibility utilities.
            // Methods like `isTabbable` are only covering specific edge-cases for the browsers which are
            // supported.
            /**
             * Utility for checking the interactivity of an element, such as whether is is focusable or
             * tabbable.
             */
            var InteractivityChecker = /** @class */ (function () {
                /**
                 * @param {?} _platform
                 */
                function InteractivityChecker(_platform) {
                    this._platform = _platform;
                }
                /**
                 * Gets whether an element is disabled.
                 *
                 * @param {?} element Element to be checked.
                 * @return {?} Whether the element is disabled.
                 */
                InteractivityChecker.prototype.isDisabled = function (element) {
                    // This does not capture some cases, such as a non-form control with a disabled attribute or
                    // a form control inside of a disabled form, but should capture the most common cases.
                    return element.hasAttribute('disabled');
                };
                /**
                 * Gets whether an element is visible for the purposes of interactivity.
                 *
                 * This will capture states like `display: none` and `visibility: hidden`, but not things like
                 * being clipped by an `overflow: hidden` parent or being outside the viewport.
                 *
                 * @param {?} element
                 * @return {?} Whether the element is visible.
                 */
                InteractivityChecker.prototype.isVisible = function (element) {
                    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';
                };
                /**
                 * Gets whether an element can be reached via Tab key.
                 * Assumes that the element has already been checked with isFocusable.
                 *
                 * @param {?} element Element to be checked.
                 * @return {?} Whether the element is tabbable.
                 */
                InteractivityChecker.prototype.isTabbable = function (element) {
                    // Nothing is tabbable on the server 😎
                    if (!this._platform.isBrowser) {
                        return false;
                    }
                    /** @type {?} */
                    var frameElement = getFrameElement(getWindow(element));
                    if (frameElement) {
                        /** @type {?} */
                        var frameType = frameElement && frameElement.nodeName.toLowerCase();
                        // Frame elements inherit their tabindex onto all child elements.
                        if (getTabIndexValue(frameElement) === -1) {
                            return false;
                        }
                        // Webkit and Blink consider anything inside of an <object> element as non-tabbable.
                        if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {
                            return false;
                        }
                        // Webkit and Blink disable tabbing to an element inside of an invisible frame.
                        if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {
                            return false;
                        }
                    }
                    /** @type {?} */
                    var nodeName = element.nodeName.toLowerCase();
                    /** @type {?} */
                    var tabIndexValue = getTabIndexValue(element);
                    if (element.hasAttribute('contenteditable')) {
                        return tabIndexValue !== -1;
                    }
                    if (nodeName === 'iframe') {
                        // The frames may be tabbable depending on content, but it's not possibly to reliably
                        // investigate the content of the frames.
                        return false;
                    }
                    if (nodeName === 'audio') {
                        if (!element.hasAttribute('controls')) {
                            // By default an <audio> element without the controls enabled is not tabbable.
                            return false;
                        }
                        else if (this._platform.BLINK) {
                            // In Blink <audio controls> elements are always tabbable.
                            return true;
                        }
                    }
                    if (nodeName === 'video') {
                        if (!element.hasAttribute('controls') && this._platform.TRIDENT) {
                            // In Trident a <video> element without the controls enabled is not tabbable.
                            return false;
                        }
                        else if (this._platform.BLINK || this._platform.FIREFOX) {
                            // In Chrome and Firefox <video controls> elements are always tabbable.
                            return true;
                        }
                    }
                    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {
                        // In all Blink and WebKit based browsers <object> elements are never tabbable.
                        return false;
                    }
                    // In iOS the browser only considers some specific elements as tabbable.
                    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {
                        return false;
                    }
                    return element.tabIndex >= 0;
                };
                /**
                 * Gets whether an element can be focused by the user.
                 *
                 * @param {?} element Element to be checked.
                 * @return {?} Whether the element is focusable.
                 */
                InteractivityChecker.prototype.isFocusable = function (element) {
                    // Perform checks in order of left to most expensive.
                    // Again, naive approach that does not capture many edge cases and browser quirks.
                    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);
                };
                return InteractivityChecker;
            }());
            InteractivityChecker.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            InteractivityChecker.ctorParameters = function () { return [
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"] }
            ]; };
            /** @nocollapse */ InteractivityChecker.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"])); }, token: InteractivityChecker, providedIn: "root" });
            /**
             * Returns the frame element from a window object. Since browsers like MS Edge throw errors if
             * the frameElement property is being accessed from a different host address, this property
             * should be accessed carefully.
             * @param {?} window
             * @return {?}
             */
            function getFrameElement(window) {
                try {
                    return ( /** @type {?} */(window.frameElement));
                }
                catch (_a) {
                    return null;
                }
            }
            /**
             * Checks whether the specified element has any geometry / rectangles.
             * @param {?} element
             * @return {?}
             */
            function hasGeometry(element) {
                // Use logic from jQuery to check for an invisible element.
                // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12
                return !!(element.offsetWidth || element.offsetHeight ||
                    (typeof element.getClientRects === 'function' && element.getClientRects().length));
            }
            /**
             * Gets whether an element's
             * @param {?} element
             * @return {?}
             */
            function isNativeFormElement(element) {
                /** @type {?} */
                var nodeName = element.nodeName.toLowerCase();
                return nodeName === 'input' ||
                    nodeName === 'select' ||
                    nodeName === 'button' ||
                    nodeName === 'textarea';
            }
            /**
             * Gets whether an element is an `<input type="hidden">`.
             * @param {?} element
             * @return {?}
             */
            function isHiddenInput(element) {
                return isInputElement(element) && element.type == 'hidden';
            }
            /**
             * Gets whether an element is an anchor that has an href attribute.
             * @param {?} element
             * @return {?}
             */
            function isAnchorWithHref(element) {
                return isAnchorElement(element) && element.hasAttribute('href');
            }
            /**
             * Gets whether an element is an input element.
             * @param {?} element
             * @return {?}
             */
            function isInputElement(element) {
                return element.nodeName.toLowerCase() == 'input';
            }
            /**
             * Gets whether an element is an anchor element.
             * @param {?} element
             * @return {?}
             */
            function isAnchorElement(element) {
                return element.nodeName.toLowerCase() == 'a';
            }
            /**
             * Gets whether an element has a valid tabindex.
             * @param {?} element
             * @return {?}
             */
            function hasValidTabIndex(element) {
                if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {
                    return false;
                }
                /** @type {?} */
                var tabIndex = element.getAttribute('tabindex');
                // IE11 parses tabindex="" as the value "-32768"
                if (tabIndex == '-32768') {
                    return false;
                }
                return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
            }
            /**
             * Returns the parsed tabindex from the element attributes instead of returning the
             * evaluated tabindex from the browsers defaults.
             * @param {?} element
             * @return {?}
             */
            function getTabIndexValue(element) {
                if (!hasValidTabIndex(element)) {
                    return null;
                }
                // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
                /** @type {?} */
                var tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);
                return isNaN(tabIndex) ? -1 : tabIndex;
            }
            /**
             * Checks whether the specified element is potentially tabbable on iOS
             * @param {?} element
             * @return {?}
             */
            function isPotentiallyTabbableIOS(element) {
                /** @type {?} */
                var nodeName = element.nodeName.toLowerCase();
                /** @type {?} */
                var inputType = nodeName === 'input' && (( /** @type {?} */(element))).type;
                return inputType === 'text'
                    || inputType === 'password'
                    || nodeName === 'select'
                    || nodeName === 'textarea';
            }
            /**
             * Gets whether an element is potentially focusable without taking current visible/disabled state
             * into account.
             * @param {?} element
             * @return {?}
             */
            function isPotentiallyFocusable(element) {
                // Inputs are potentially focusable *unless* they're type="hidden".
                if (isHiddenInput(element)) {
                    return false;
                }
                return isNativeFormElement(element) ||
                    isAnchorWithHref(element) ||
                    element.hasAttribute('contenteditable') ||
                    hasValidTabIndex(element);
            }
            /**
             * Gets the parent window of a DOM node with regards of being inside of an iframe.
             * @param {?} node
             * @return {?}
             */
            function getWindow(node) {
                // ownerDocument is null if `node` itself *is* a document.
                return node.ownerDocument && node.ownerDocument.defaultView || window;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Class that allows for trapping focus within a DOM element.
             *
             * This class currently uses a relatively simple approach to focus trapping.
             * It assumes that the tab order is the same as DOM order, which is not necessarily true.
             * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.
             */
            var FocusTrap = /** @class */ (function () {
                /**
                 * @param {?} _element
                 * @param {?} _checker
                 * @param {?} _ngZone
                 * @param {?} _document
                 * @param {?=} deferAnchors
                 */
                function FocusTrap(_element, _checker, _ngZone, _document, deferAnchors) {
                    var _this = this;
                    if (deferAnchors === void 0) { deferAnchors = false; }
                    this._element = _element;
                    this._checker = _checker;
                    this._ngZone = _ngZone;
                    this._document = _document;
                    this._hasAttached = false;
                    // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.
                    this.startAnchorListener = ( /**
                     * @return {?}
                     */function () { return _this.focusLastTabbableElement(); });
                    this.endAnchorListener = ( /**
                     * @return {?}
                     */function () { return _this.focusFirstTabbableElement(); });
                    this._enabled = true;
                    if (!deferAnchors) {
                        this.attachAnchors();
                    }
                }
                Object.defineProperty(FocusTrap.prototype, "enabled", {
                    /**
                     * Whether the focus trap is active.
                     * @return {?}
                     */
                    get: function () { return this._enabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._enabled = value;
                        if (this._startAnchor && this._endAnchor) {
                            this._toggleAnchorTabIndex(value, this._startAnchor);
                            this._toggleAnchorTabIndex(value, this._endAnchor);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Destroys the focus trap by cleaning up the anchors.
                 * @return {?}
                 */
                FocusTrap.prototype.destroy = function () {
                    /** @type {?} */
                    var startAnchor = this._startAnchor;
                    /** @type {?} */
                    var endAnchor = this._endAnchor;
                    if (startAnchor) {
                        startAnchor.removeEventListener('focus', this.startAnchorListener);
                        if (startAnchor.parentNode) {
                            startAnchor.parentNode.removeChild(startAnchor);
                        }
                    }
                    if (endAnchor) {
                        endAnchor.removeEventListener('focus', this.endAnchorListener);
                        if (endAnchor.parentNode) {
                            endAnchor.parentNode.removeChild(endAnchor);
                        }
                    }
                    this._startAnchor = this._endAnchor = null;
                };
                /**
                 * Inserts the anchors into the DOM. This is usually done automatically
                 * in the constructor, but can be deferred for cases like directives with `*ngIf`.
                 * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case
                 * if the target element isn't currently in the DOM.
                 */
                FocusTrap.prototype.attachAnchors = function () {
                    var _this = this;
                    // If we're not on the browser, there can be no focus to trap.
                    if (this._hasAttached) {
                        return true;
                    }
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        if (!_this._startAnchor) {
                            _this._startAnchor = _this._createAnchor();
                            ( /** @type {?} */(_this._startAnchor)).addEventListener('focus', _this.startAnchorListener);
                        }
                        if (!_this._endAnchor) {
                            _this._endAnchor = _this._createAnchor();
                            ( /** @type {?} */(_this._endAnchor)).addEventListener('focus', _this.endAnchorListener);
                        }
                    }));
                    if (this._element.parentNode) {
                        this._element.parentNode.insertBefore(( /** @type {?} */(this._startAnchor)), this._element);
                        this._element.parentNode.insertBefore(( /** @type {?} */(this._endAnchor)), this._element.nextSibling);
                        this._hasAttached = true;
                    }
                    return this._hasAttached;
                };
                /**
                 * Waits for the zone to stabilize, then either focuses the first element that the
                 * user specified, or the first tabbable element.
                 * @return {?} Returns a promise that resolves with a boolean, depending
                 * on whether focus was moved successfuly.
                 */
                FocusTrap.prototype.focusInitialElementWhenReady = function () {
                    var _this = this;
                    return new Promise(( /**
                     * @param {?} resolve
                     * @return {?}
                     */function (/**
                     * @param {?} resolve
                     * @return {?}
                     */ resolve) {
                        _this._executeOnStable(( /**
                         * @return {?}
                         */function () { return resolve(_this.focusInitialElement()); }));
                    }));
                };
                /**
                 * Waits for the zone to stabilize, then focuses
                 * the first tabbable element within the focus trap region.
                 * @return {?} Returns a promise that resolves with a boolean, depending
                 * on whether focus was moved successfuly.
                 */
                FocusTrap.prototype.focusFirstTabbableElementWhenReady = function () {
                    var _this = this;
                    return new Promise(( /**
                     * @param {?} resolve
                     * @return {?}
                     */function (/**
                     * @param {?} resolve
                     * @return {?}
                     */ resolve) {
                        _this._executeOnStable(( /**
                         * @return {?}
                         */function () { return resolve(_this.focusFirstTabbableElement()); }));
                    }));
                };
                /**
                 * Waits for the zone to stabilize, then focuses
                 * the last tabbable element within the focus trap region.
                 * @return {?} Returns a promise that resolves with a boolean, depending
                 * on whether focus was moved successfuly.
                 */
                FocusTrap.prototype.focusLastTabbableElementWhenReady = function () {
                    var _this = this;
                    return new Promise(( /**
                     * @param {?} resolve
                     * @return {?}
                     */function (/**
                     * @param {?} resolve
                     * @return {?}
                     */ resolve) {
                        _this._executeOnStable(( /**
                         * @return {?}
                         */function () { return resolve(_this.focusLastTabbableElement()); }));
                    }));
                };
                /**
                 * Get the specified boundary element of the trapped region.
                 * @private
                 * @param {?} bound The boundary to get (start or end of trapped region).
                 * @return {?} The boundary element.
                 */
                FocusTrap.prototype._getRegionBoundary = function (bound) {
                    // Contains the deprecated version of selector, for temporary backwards comparability.
                    /** @type {?} */
                    var markers = ( /** @type {?} */(this._element.querySelectorAll("[cdk-focus-region-" + bound + "], " +
                        ("[cdkFocusRegion" + bound + "], ") +
                        ("[cdk-focus-" + bound + "]"))));
                    for (var i = 0; i < markers.length; i++) {
                        // @breaking-change 8.0.0
                        if (markers[i].hasAttribute("cdk-focus-" + bound)) {
                            console.warn("Found use of deprecated attribute 'cdk-focus-" + bound + "', " +
                                ("use 'cdkFocusRegion" + bound + "' instead. The deprecated ") +
                                "attribute will be removed in 8.0.0.", markers[i]);
                        }
                        else if (markers[i].hasAttribute("cdk-focus-region-" + bound)) {
                            console.warn("Found use of deprecated attribute 'cdk-focus-region-" + bound + "', " +
                                ("use 'cdkFocusRegion" + bound + "' instead. The deprecated attribute ") +
                                "will be removed in 8.0.0.", markers[i]);
                        }
                    }
                    if (bound == 'start') {
                        return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);
                    }
                    return markers.length ?
                        markers[markers.length - 1] : this._getLastTabbableElement(this._element);
                };
                /**
                 * Focuses the element that should be focused when the focus trap is initialized.
                 * @return {?} Whether focus was moved successfuly.
                 */
                FocusTrap.prototype.focusInitialElement = function () {
                    // Contains the deprecated version of selector, for temporary backwards comparability.
                    /** @type {?} */
                    var redirectToElement = ( /** @type {?} */(this._element.querySelector("[cdk-focus-initial], " +
                        "[cdkFocusInitial]")));
                    if (redirectToElement) {
                        // @breaking-change 8.0.0
                        if (redirectToElement.hasAttribute("cdk-focus-initial")) {
                            console.warn("Found use of deprecated attribute 'cdk-focus-initial', " +
                                "use 'cdkFocusInitial' instead. The deprecated attribute " +
                                "will be removed in 8.0.0", redirectToElement);
                        }
                        // Warn the consumer if the element they've pointed to
                        // isn't focusable, when not in production mode.
                        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && !this._checker.isFocusable(redirectToElement)) {
                            console.warn("Element matching '[cdkFocusInitial]' is not focusable.", redirectToElement);
                        }
                        redirectToElement.focus();
                        return true;
                    }
                    return this.focusFirstTabbableElement();
                };
                /**
                 * Focuses the first tabbable element within the focus trap region.
                 * @return {?} Whether focus was moved successfuly.
                 */
                FocusTrap.prototype.focusFirstTabbableElement = function () {
                    /** @type {?} */
                    var redirectToElement = this._getRegionBoundary('start');
                    if (redirectToElement) {
                        redirectToElement.focus();
                    }
                    return !!redirectToElement;
                };
                /**
                 * Focuses the last tabbable element within the focus trap region.
                 * @return {?} Whether focus was moved successfuly.
                 */
                FocusTrap.prototype.focusLastTabbableElement = function () {
                    /** @type {?} */
                    var redirectToElement = this._getRegionBoundary('end');
                    if (redirectToElement) {
                        redirectToElement.focus();
                    }
                    return !!redirectToElement;
                };
                /**
                 * Checks whether the focus trap has successfuly been attached.
                 * @return {?}
                 */
                FocusTrap.prototype.hasAttached = function () {
                    return this._hasAttached;
                };
                /**
                 * Get the first tabbable element from a DOM subtree (inclusive).
                 * @private
                 * @param {?} root
                 * @return {?}
                 */
                FocusTrap.prototype._getFirstTabbableElement = function (root) {
                    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
                        return root;
                    }
                    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall
                    // back to `childNodes` which includes text nodes, comments etc.
                    /** @type {?} */
                    var children = root.children || root.childNodes;
                    for (var i = 0; i < children.length; i++) {
                        /** @type {?} */
                        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?
                            this._getFirstTabbableElement(( /** @type {?} */(children[i]))) :
                            null;
                        if (tabbableChild) {
                            return tabbableChild;
                        }
                    }
                    return null;
                };
                /**
                 * Get the last tabbable element from a DOM subtree (inclusive).
                 * @private
                 * @param {?} root
                 * @return {?}
                 */
                FocusTrap.prototype._getLastTabbableElement = function (root) {
                    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
                        return root;
                    }
                    // Iterate in reverse DOM order.
                    /** @type {?} */
                    var children = root.children || root.childNodes;
                    for (var i = children.length - 1; i >= 0; i--) {
                        /** @type {?} */
                        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?
                            this._getLastTabbableElement(( /** @type {?} */(children[i]))) :
                            null;
                        if (tabbableChild) {
                            return tabbableChild;
                        }
                    }
                    return null;
                };
                /**
                 * Creates an anchor element.
                 * @private
                 * @return {?}
                 */
                FocusTrap.prototype._createAnchor = function () {
                    /** @type {?} */
                    var anchor = this._document.createElement('div');
                    this._toggleAnchorTabIndex(this._enabled, anchor);
                    anchor.classList.add('cdk-visually-hidden');
                    anchor.classList.add('cdk-focus-trap-anchor');
                    anchor.setAttribute('aria-hidden', 'true');
                    return anchor;
                };
                /**
                 * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.
                 * @private
                 * @param {?} isEnabled Whether the focus trap is enabled.
                 * @param {?} anchor Anchor on which to toggle the tabindex.
                 * @return {?}
                 */
                FocusTrap.prototype._toggleAnchorTabIndex = function (isEnabled, anchor) {
                    // Remove the tabindex completely, rather than setting it to -1, because if the
                    // element has a tabindex, the user might still hit it when navigating with the arrow keys.
                    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');
                };
                /**
                 * Executes a function when the zone is stable.
                 * @private
                 * @param {?} fn
                 * @return {?}
                 */
                FocusTrap.prototype._executeOnStable = function (fn) {
                    if (this._ngZone.isStable) {
                        fn();
                    }
                    else {
                        this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["take"])(1)).subscribe(fn);
                    }
                };
                return FocusTrap;
            }());
            /**
             * Factory that allows easy instantiation of focus traps.
             */
            var FocusTrapFactory = /** @class */ (function () {
                /**
                 * @param {?} _checker
                 * @param {?} _ngZone
                 * @param {?} _document
                 */
                function FocusTrapFactory(_checker, _ngZone, _document) {
                    this._checker = _checker;
                    this._ngZone = _ngZone;
                    this._document = _document;
                }
                /**
                 * Creates a focus-trapped region around the given element.
                 * @param {?} element The element around which focus will be trapped.
                 * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done
                 *     manually by the user.
                 * @return {?} The created focus trap instance.
                 */
                FocusTrapFactory.prototype.create = function (element, deferCaptureElements) {
                    if (deferCaptureElements === void 0) { deferCaptureElements = false; }
                    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);
                };
                return FocusTrapFactory;
            }());
            FocusTrapFactory.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            FocusTrapFactory.ctorParameters = function () { return [
                { type: InteractivityChecker },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ FocusTrapFactory.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(InteractivityChecker), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"])); }, token: FocusTrapFactory, providedIn: "root" });
            /**
             * Directive for trapping focus within a region.
             */
            var CdkTrapFocus = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _focusTrapFactory
                 * @param {?} _document
                 */
                function CdkTrapFocus(_elementRef, _focusTrapFactory, _document) {
                    this._elementRef = _elementRef;
                    this._focusTrapFactory = _focusTrapFactory;
                    /**
                     * Previously focused element to restore focus to upon destroy when using autoCapture.
                     */
                    this._previouslyFocusedElement = null;
                    this._document = _document;
                    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);
                }
                Object.defineProperty(CdkTrapFocus.prototype, "enabled", {
                    /**
                     * Whether the focus trap is active.
                     * @return {?}
                     */
                    get: function () { return this.focusTrap.enabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this.focusTrap.enabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTrapFocus.prototype, "autoCapture", {
                    /**
                     * Whether the directive should automatially move focus into the trapped region upon
                     * initialization and return focus to the previous activeElement upon destruction.
                     * @return {?}
                     */
                    get: function () { return this._autoCapture; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._autoCapture = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkTrapFocus.prototype.ngOnDestroy = function () {
                    this.focusTrap.destroy();
                    // If we stored a previously focused element when using autoCapture, return focus to that
                    // element now that the trapped region is being destroyed.
                    if (this._previouslyFocusedElement) {
                        this._previouslyFocusedElement.focus();
                        this._previouslyFocusedElement = null;
                    }
                };
                /**
                 * @return {?}
                 */
                CdkTrapFocus.prototype.ngAfterContentInit = function () {
                    this.focusTrap.attachAnchors();
                    if (this.autoCapture) {
                        this._previouslyFocusedElement = ( /** @type {?} */(this._document.activeElement));
                        this.focusTrap.focusInitialElementWhenReady();
                    }
                };
                /**
                 * @return {?}
                 */
                CdkTrapFocus.prototype.ngDoCheck = function () {
                    if (!this.focusTrap.hasAttached()) {
                        this.focusTrap.attachAnchors();
                    }
                };
                return CdkTrapFocus;
            }());
            CdkTrapFocus.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkTrapFocus]',
                            exportAs: 'cdkTrapFocus',
                        },] },
            ];
            /** @nocollapse */
            CdkTrapFocus.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: FocusTrapFactory },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] }
            ]; };
            CdkTrapFocus.propDecorators = {
                enabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkTrapFocus',] }],
                autoCapture: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkTrapFocusAutoCapture',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var LIVE_ANNOUNCER_ELEMENT_TOKEN = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('liveAnnouncerElement', {
                providedIn: 'root',
                factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {
                return null;
            }
            /**
             * Injection token that can be used to configure the default options for the LiveAnnouncer.
             * @type {?}
             */
            var LIVE_ANNOUNCER_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('LIVE_ANNOUNCER_DEFAULT_OPTIONS');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var LiveAnnouncer = /** @class */ (function () {
                /**
                 * @param {?} elementToken
                 * @param {?} _ngZone
                 * @param {?} _document
                 * @param {?=} _defaultOptions
                 */
                function LiveAnnouncer(elementToken, _ngZone, _document, _defaultOptions) {
                    this._ngZone = _ngZone;
                    this._defaultOptions = _defaultOptions;
                    // We inject the live element and document as `any` because the constructor signature cannot
                    // reference browser globals (HTMLElement, Document) on non-browser environments, since having
                    // a class decorator causes TypeScript to preserve the constructor signature types.
                    this._document = _document;
                    this._liveElement = elementToken || this._createLiveElement();
                }
                /**
                 * @param {?} message
                 * @param {...?} args
                 * @return {?}
                 */
                LiveAnnouncer.prototype.announce = function (message) {
                    var _this = this;
                    var args = [];
                    for (var _b = 1; _b < arguments.length; _b++) {
                        args[_b - 1] = arguments[_b];
                    }
                    /** @type {?} */
                    var defaultOptions = this._defaultOptions;
                    /** @type {?} */
                    var politeness;
                    /** @type {?} */
                    var duration;
                    if (args.length === 1 && typeof args[0] === 'number') {
                        duration = args[0];
                    }
                    else {
                        politeness = args[0], duration = args[1];
                    }
                    this.clear();
                    clearTimeout(this._previousTimeout);
                    if (!politeness) {
                        politeness =
                            (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';
                    }
                    if (duration == null && defaultOptions) {
                        duration = defaultOptions.duration;
                    }
                    // TODO: ensure changing the politeness works on all environments we support.
                    this._liveElement.setAttribute('aria-live', politeness);
                    // This 100ms timeout is necessary for some browser + screen-reader combinations:
                    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.
                    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a
                    //   second time without clearing and then using a non-zero delay.
                    // (using JAWS 17 at time of this writing).
                    return this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        return new Promise(( /**
                         * @param {?} resolve
                         * @return {?}
                         */function (/**
                         * @param {?} resolve
                         * @return {?}
                         */ resolve) {
                            clearTimeout(_this._previousTimeout);
                            _this._previousTimeout = setTimeout(( /**
                             * @return {?}
                             */function () {
                                _this._liveElement.textContent = message;
                                resolve();
                                if (typeof duration === 'number') {
                                    _this._previousTimeout = setTimeout(( /**
                                     * @return {?}
                                     */function () { return _this.clear(); }), duration);
                                }
                            }), 100);
                        }));
                    }));
                };
                /**
                 * Clears the current text from the announcer element. Can be used to prevent
                 * screen readers from reading the text out again while the user is going
                 * through the page landmarks.
                 * @return {?}
                 */
                LiveAnnouncer.prototype.clear = function () {
                    if (this._liveElement) {
                        this._liveElement.textContent = '';
                    }
                };
                /**
                 * @return {?}
                 */
                LiveAnnouncer.prototype.ngOnDestroy = function () {
                    clearTimeout(this._previousTimeout);
                    if (this._liveElement && this._liveElement.parentNode) {
                        this._liveElement.parentNode.removeChild(this._liveElement);
                        this._liveElement = ( /** @type {?} */(null));
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                LiveAnnouncer.prototype._createLiveElement = function () {
                    /** @type {?} */
                    var elementClass = 'cdk-live-announcer-element';
                    /** @type {?} */
                    var previousElements = this._document.getElementsByClassName(elementClass);
                    /** @type {?} */
                    var liveEl = this._document.createElement('div');
                    // Remove any old containers. This can happen when coming in from a server-side-rendered page.
                    for (var i = 0; i < previousElements.length; i++) {
                        ( /** @type {?} */(previousElements[i].parentNode)).removeChild(previousElements[i]);
                    }
                    liveEl.classList.add(elementClass);
                    liveEl.classList.add('cdk-visually-hidden');
                    liveEl.setAttribute('aria-atomic', 'true');
                    liveEl.setAttribute('aria-live', 'polite');
                    this._document.body.appendChild(liveEl);
                    return liveEl;
                };
                return LiveAnnouncer;
            }());
            LiveAnnouncer.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            LiveAnnouncer.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS,] }] }
            ]; };
            /** @nocollapse */ LiveAnnouncer.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); }, token: LiveAnnouncer, providedIn: "root" });
            /**
             * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility
             * with a wider range of browsers and screen readers.
             */
            var CdkAriaLive = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _liveAnnouncer
                 * @param {?} _contentObserver
                 * @param {?} _ngZone
                 */
                function CdkAriaLive(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {
                    this._elementRef = _elementRef;
                    this._liveAnnouncer = _liveAnnouncer;
                    this._contentObserver = _contentObserver;
                    this._ngZone = _ngZone;
                    this._politeness = 'off';
                }
                Object.defineProperty(CdkAriaLive.prototype, "politeness", {
                    /**
                     * The aria-live politeness level to use when announcing messages.
                     * @return {?}
                     */
                    get: function () { return this._politeness; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        var _this = this;
                        this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';
                        if (this._politeness === 'off') {
                            if (this._subscription) {
                                this._subscription.unsubscribe();
                                this._subscription = null;
                            }
                        }
                        else if (!this._subscription) {
                            this._subscription = this._ngZone.runOutsideAngular(( /**
                             * @return {?}
                             */function () {
                                return _this._contentObserver
                                    .observe(_this._elementRef)
                                    .subscribe(( /**
                             * @return {?}
                             */function () {
                                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.
                                    /** @type {?} */
                                    var elementText = _this._elementRef.nativeElement.textContent;
                                    // The `MutationObserver` fires also for attribute
                                    // changes which we don't want to announce.
                                    if (elementText !== _this._previousAnnouncedText) {
                                        _this._liveAnnouncer.announce(elementText, _this._politeness);
                                        _this._previousAnnouncedText = elementText;
                                    }
                                }));
                            }));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkAriaLive.prototype.ngOnDestroy = function () {
                    if (this._subscription) {
                        this._subscription.unsubscribe();
                    }
                };
                return CdkAriaLive;
            }());
            CdkAriaLive.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkAriaLive]',
                            exportAs: 'cdkAriaLive',
                        },] },
            ];
            /** @nocollapse */
            CdkAriaLive.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: LiveAnnouncer },
                { type: _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ContentObserver"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] }
            ]; };
            CdkAriaLive.propDecorators = {
                politeness: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkAriaLive',] }]
            };
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} parentAnnouncer
             * @param {?} liveElement
             * @param {?} _document
             * @param {?} ngZone
             * @return {?}
             */
            function LIVE_ANNOUNCER_PROVIDER_FACTORY(parentAnnouncer, liveElement, _document, ngZone) {
                return parentAnnouncer || new LiveAnnouncer(liveElement, ngZone, _document);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var LIVE_ANNOUNCER_PROVIDER = {
                // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.
                provide: LiveAnnouncer,
                deps: [
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"](), LiveAnnouncer],
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"](LIVE_ANNOUNCER_ELEMENT_TOKEN)],
                    _angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"],
                ],
                useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found
            // that a value of around 650ms seems appropriate.
            /** @type {?} */
            var TOUCH_BUFFER_MS = 650;
            /**
             * Event listener options that enable capturing and also
             * mark the listener as passive if the browser supports it.
             * @type {?}
             */
            var captureEventListenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["normalizePassiveListenerOptions"])({
                passive: true,
                capture: true
            });
            /**
             * Monitors mouse and keyboard events to determine the cause of focus events.
             */
            var FocusMonitor = /** @class */ (function () {
                /**
                 * @param {?} _ngZone
                 * @param {?} _platform
                 */
                function FocusMonitor(_ngZone, _platform) {
                    var _this = this;
                    this._ngZone = _ngZone;
                    this._platform = _platform;
                    /**
                     * The focus origin that the next focus event is a result of.
                     */
                    this._origin = null;
                    /**
                     * Whether the window has just been focused.
                     */
                    this._windowFocused = false;
                    /**
                     * Map of elements being monitored to their info.
                     */
                    this._elementInfo = new Map();
                    /**
                     * The number of elements currently being monitored.
                     */
                    this._monitoredElementCount = 0;
                    /**
                     * Event listener for `keydown` events on the document.
                     * Needs to be an arrow function in order to preserve the context when it gets bound.
                     */
                    this._documentKeydownListener = ( /**
                     * @return {?}
                     */function () {
                        // On keydown record the origin and clear any touch event that may be in progress.
                        _this._lastTouchTarget = null;
                        _this._setOriginForCurrentEventQueue('keyboard');
                    });
                    /**
                     * Event listener for `mousedown` events on the document.
                     * Needs to be an arrow function in order to preserve the context when it gets bound.
                     */
                    this._documentMousedownListener = ( /**
                     * @return {?}
                     */function () {
                        // On mousedown record the origin only if there is not touch
                        // target, since a mousedown can happen as a result of a touch event.
                        if (!_this._lastTouchTarget) {
                            _this._setOriginForCurrentEventQueue('mouse');
                        }
                    });
                    /**
                     * Event listener for `touchstart` events on the document.
                     * Needs to be an arrow function in order to preserve the context when it gets bound.
                     */
                    this._documentTouchstartListener = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        // When the touchstart event fires the focus event is not yet in the event queue. This means
                        // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to
                        // see if a focus happens.
                        if (_this._touchTimeoutId != null) {
                            clearTimeout(_this._touchTimeoutId);
                        }
                        // Since this listener is bound on the `document` level, any events coming from the shadow DOM
                        // will have their `target` set to the shadow root. If available, use `composedPath` to
                        // figure out the event target.
                        _this._lastTouchTarget = event.composedPath ? event.composedPath()[0] : event.target;
                        _this._touchTimeoutId = setTimeout(( /**
                         * @return {?}
                         */function () { return _this._lastTouchTarget = null; }), TOUCH_BUFFER_MS);
                    });
                    /**
                     * Event listener for `focus` events on the window.
                     * Needs to be an arrow function in order to preserve the context when it gets bound.
                     */
                    this._windowFocusListener = ( /**
                     * @return {?}
                     */function () {
                        // Make a note of when the window regains focus, so we can
                        // restore the origin info for the focused element.
                        _this._windowFocused = true;
                        _this._windowFocusTimeoutId = setTimeout(( /**
                         * @return {?}
                         */function () { return _this._windowFocused = false; }));
                    });
                }
                /**
                 * @param {?} element
                 * @param {?=} checkChildren
                 * @return {?}
                 */
                FocusMonitor.prototype.monitor = function (element, checkChildren) {
                    var _this = this;
                    if (checkChildren === void 0) { checkChildren = false; }
                    // Do nothing if we're not on the browser platform.
                    if (!this._platform.isBrowser) {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(null);
                    }
                    /** @type {?} */
                    var nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceElement"])(element);
                    // Check if we're already monitoring this element.
                    if (this._elementInfo.has(nativeElement)) {
                        /** @type {?} */
                        var cachedInfo = this._elementInfo.get(nativeElement);
                        ( /** @type {?} */(cachedInfo)).checkChildren = checkChildren;
                        return ( /** @type {?} */(cachedInfo)).subject.asObservable();
                    }
                    // Create monitored element info.
                    /** @type {?} */
                    var info = {
                        unlisten: ( /**
                         * @return {?}
                         */function () { }),
                        checkChildren: checkChildren,
                        subject: new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]()
                    };
                    this._elementInfo.set(nativeElement, info);
                    this._incrementMonitoredElementCount();
                    // Start listening. We need to listen in capture phase since focus events don't bubble.
                    /** @type {?} */
                    var focusListener = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) { return _this._onFocus(event, nativeElement); });
                    /** @type {?} */
                    var blurListener = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) { return _this._onBlur(event, nativeElement); });
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        nativeElement.addEventListener('focus', focusListener, true);
                        nativeElement.addEventListener('blur', blurListener, true);
                    }));
                    // Create an unlisten function for later.
                    info.unlisten = ( /**
                     * @return {?}
                     */function () {
                        nativeElement.removeEventListener('focus', focusListener, true);
                        nativeElement.removeEventListener('blur', blurListener, true);
                    });
                    return info.subject.asObservable();
                };
                /**
                 * @param {?} element
                 * @return {?}
                 */
                FocusMonitor.prototype.stopMonitoring = function (element) {
                    /** @type {?} */
                    var nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceElement"])(element);
                    /** @type {?} */
                    var elementInfo = this._elementInfo.get(nativeElement);
                    if (elementInfo) {
                        elementInfo.unlisten();
                        elementInfo.subject.complete();
                        this._setClasses(nativeElement);
                        this._elementInfo.delete(nativeElement);
                        this._decrementMonitoredElementCount();
                    }
                };
                /**
                 * @param {?} element
                 * @param {?} origin
                 * @param {?=} options
                 * @return {?}
                 */
                FocusMonitor.prototype.focusVia = function (element, origin, options) {
                    /** @type {?} */
                    var nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceElement"])(element);
                    this._setOriginForCurrentEventQueue(origin);
                    // `focus` isn't available on the server
                    if (typeof nativeElement.focus === 'function') {
                        // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.
                        (( /** @type {?} */(nativeElement))).focus(options);
                    }
                };
                /**
                 * @return {?}
                 */
                FocusMonitor.prototype.ngOnDestroy = function () {
                    var _this = this;
                    this._elementInfo.forEach(( /**
                     * @param {?} _info
                     * @param {?} element
                     * @return {?}
                     */function (_info, element) { return _this.stopMonitoring(element); }));
                };
                /**
                 * @private
                 * @param {?} element
                 * @param {?} className
                 * @param {?} shouldSet
                 * @return {?}
                 */
                FocusMonitor.prototype._toggleClass = function (element, className, shouldSet) {
                    if (shouldSet) {
                        element.classList.add(className);
                    }
                    else {
                        element.classList.remove(className);
                    }
                };
                /**
                 * Sets the focus classes on the element based on the given focus origin.
                 * @private
                 * @param {?} element The element to update the classes on.
                 * @param {?=} origin The focus origin.
                 * @return {?}
                 */
                FocusMonitor.prototype._setClasses = function (element, origin) {
                    /** @type {?} */
                    var elementInfo = this._elementInfo.get(element);
                    if (elementInfo) {
                        this._toggleClass(element, 'cdk-focused', !!origin);
                        this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');
                        this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');
                        this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');
                        this._toggleClass(element, 'cdk-program-focused', origin === 'program');
                    }
                };
                /**
                 * Sets the origin and schedules an async function to clear it at the end of the event queue.
                 * @private
                 * @param {?} origin The origin to set.
                 * @return {?}
                 */
                FocusMonitor.prototype._setOriginForCurrentEventQueue = function (origin) {
                    var _this = this;
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._origin = origin;
                        // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*
                        // tick after the interaction event fired. To ensure the focus origin is always correct,
                        // the focus origin will be determined at the beginning of the next tick.
                        _this._originTimeoutId = setTimeout(( /**
                         * @return {?}
                         */function () { return _this._origin = null; }), 1);
                    }));
                };
                /**
                 * Checks whether the given focus event was caused by a touchstart event.
                 * @private
                 * @param {?} event The focus event to check.
                 * @return {?} Whether the event was caused by a touch.
                 */
                FocusMonitor.prototype._wasCausedByTouch = function (event) {
                    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.
                    // Consider the following dom structure:
                    //
                    // <div #parent tabindex="0" cdkFocusClasses>
                    //   <div #child (click)="#parent.focus()"></div>
                    // </div>
                    //
                    // If the user touches the #child element and the #parent is programmatically focused as a
                    // result, this code will still consider it to have been caused by the touch event and will
                    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a
                    // relatively small edge-case that can be worked around by using
                    // focusVia(parentEl, 'program') to focus the parent element.
                    //
                    // If we decide that we absolutely must handle this case correctly, we can do so by listening
                    // for the first focus event after the touchstart, and then the first blur event after that
                    // focus event. When that blur event fires we know that whatever follows is not a result of the
                    // touchstart.
                    /** @type {?} */
                    var focusTarget = event.target;
                    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&
                        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));
                };
                /**
                 * Handles focus events on a registered element.
                 * @private
                 * @param {?} event The focus event.
                 * @param {?} element The monitored element.
                 * @return {?}
                 */
                FocusMonitor.prototype._onFocus = function (event, element) {
                    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent
                    // focus event affecting the monitored element. If we want to use the origin of the first event
                    // instead we should check for the cdk-focused class here and return if the element already has
                    // it. (This only matters for elements that have includesChildren = true).
                    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent
                    // focus event affecting the monitored element. If we want to use the origin of the first event
                    // instead we should check for the cdk-focused class here and return if the element already has
                    // it. (This only matters for elements that have includesChildren = true).
                    // If we are not counting child-element-focus as focused, make sure that the event target is the
                    // monitored element itself.
                    /** @type {?} */
                    var elementInfo = this._elementInfo.get(element);
                    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {
                        return;
                    }
                    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:
                    // 1) The window has just regained focus, in which case we want to restore the focused state of
                    //    the element from before the window blurred.
                    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.
                    // 3) The element was programmatically focused, in which case we should mark the origin as
                    //    'program'.
                    /** @type {?} */
                    var origin = this._origin;
                    if (!origin) {
                        if (this._windowFocused && this._lastFocusOrigin) {
                            origin = this._lastFocusOrigin;
                        }
                        else if (this._wasCausedByTouch(event)) {
                            origin = 'touch';
                        }
                        else {
                            origin = 'program';
                        }
                    }
                    this._setClasses(element, origin);
                    this._emitOrigin(elementInfo.subject, origin);
                    this._lastFocusOrigin = origin;
                };
                /**
                 * Handles blur events on a registered element.
                 * @param {?} event The blur event.
                 * @param {?} element The monitored element.
                 * @return {?}
                 */
                FocusMonitor.prototype._onBlur = function (event, element) {
                    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in
                    // order to focus another child of the monitored element.
                    /** @type {?} */
                    var elementInfo = this._elementInfo.get(element);
                    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&
                        element.contains(event.relatedTarget))) {
                        return;
                    }
                    this._setClasses(element);
                    this._emitOrigin(elementInfo.subject, null);
                };
                /**
                 * @private
                 * @param {?} subject
                 * @param {?} origin
                 * @return {?}
                 */
                FocusMonitor.prototype._emitOrigin = function (subject, origin) {
                    this._ngZone.run(( /**
                     * @return {?}
                     */function () { return subject.next(origin); }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                FocusMonitor.prototype._incrementMonitoredElementCount = function () {
                    var _this = this;
                    // Register global listeners when first element is monitored.
                    if (++this._monitoredElementCount == 1 && this._platform.isBrowser) {
                        // Note: we listen to events in the capture phase so we
                        // can detect them even if the user stops propagation.
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () {
                            document.addEventListener('keydown', _this._documentKeydownListener, captureEventListenerOptions);
                            document.addEventListener('mousedown', _this._documentMousedownListener, captureEventListenerOptions);
                            document.addEventListener('touchstart', _this._documentTouchstartListener, captureEventListenerOptions);
                            window.addEventListener('focus', _this._windowFocusListener);
                        }));
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                FocusMonitor.prototype._decrementMonitoredElementCount = function () {
                    // Unregister global listeners when last element is unmonitored.
                    if (!--this._monitoredElementCount) {
                        document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);
                        document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);
                        document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);
                        window.removeEventListener('focus', this._windowFocusListener);
                        // Clear timeouts for all potentially pending timeouts to prevent the leaks.
                        clearTimeout(this._windowFocusTimeoutId);
                        clearTimeout(this._touchTimeoutId);
                        clearTimeout(this._originTimeoutId);
                    }
                };
                return FocusMonitor;
            }());
            FocusMonitor.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            FocusMonitor.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"] }
            ]; };
            /** @nocollapse */ FocusMonitor.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function FocusMonitor_Factory() { return new FocusMonitor(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"])); }, token: FocusMonitor, providedIn: "root" });
            /**
             * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or
             * programmatically) and adds corresponding classes to the element.
             *
             * There are two variants of this directive:
             * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is
             *    focused.
             * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.
             */
            var CdkMonitorFocus = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _focusMonitor
                 */
                function CdkMonitorFocus(_elementRef, _focusMonitor) {
                    var _this = this;
                    this._elementRef = _elementRef;
                    this._focusMonitor = _focusMonitor;
                    this.cdkFocusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))
                        .subscribe(( /**
                 * @param {?} origin
                 * @return {?}
                 */function (/**
                 * @param {?} origin
                 * @return {?}
                 */ origin) { return _this.cdkFocusChange.emit(origin); }));
                }
                /**
                 * @return {?}
                 */
                CdkMonitorFocus.prototype.ngOnDestroy = function () {
                    this._focusMonitor.stopMonitoring(this._elementRef);
                    this._monitorSubscription.unsubscribe();
                };
                return CdkMonitorFocus;
            }());
            CdkMonitorFocus.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',
                        },] },
            ];
            /** @nocollapse */
            CdkMonitorFocus.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: FocusMonitor }
            ]; };
            CdkMonitorFocus.propDecorators = {
                cdkFocusChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }]
            };
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} parentDispatcher
             * @param {?} ngZone
             * @param {?} platform
             * @return {?}
             */
            function FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {
                return parentDispatcher || new FocusMonitor(ngZone, platform);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var FOCUS_MONITOR_PROVIDER = {
                // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.
                provide: FocusMonitor,
                deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"](), FocusMonitor], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"]],
                useFactory: FOCUS_MONITOR_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Screenreaders will often fire fake mousedown events when a focusable element
             * is activated using the keyboard. We can typically distinguish between these faked
             * mousedown events and real mousedown events using the "buttons" property. While
             * real mousedowns will indicate the mouse button that was pressed (e.g. "1" for
             * the left mouse button), faked mousedowns will usually set the property value to 0.
             * @param {?} event
             * @return {?}
             */
            function isFakeMousedownFromScreenReader(event) {
                return event.buttons === 0;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var A11yModule = /** @class */ (function () {
                function A11yModule() {
                }
                return A11yModule;
            }());
            A11yModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["PlatformModule"], _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ObserversModule"]],
                            declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],
                            exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=a11y.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/accordion.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/accordion.js ***!
          \********************************************************/
        /*! exports provided: CdkAccordionItem, CdkAccordion, CdkAccordionModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkAccordionItem", function () { return CdkAccordionItem; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkAccordion", function () { return CdkAccordion; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkAccordionModule", function () { return CdkAccordionModule; });
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Used to generate unique ID for each accordion.
             * @type {?}
             */
            var nextId = 0;
            /**
             * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.
             */
            var CdkAccordion = /** @class */ (function () {
                function CdkAccordion() {
                    /**
                     * Emits when the state of the accordion changes
                     */
                    this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Stream that emits true/false when openAll/closeAll is triggered.
                     */
                    this._openCloseAllActions = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * A readonly id value to use for unique selection coordination.
                     */
                    this.id = "cdk-accordion-" + nextId++;
                    this._multi = false;
                }
                Object.defineProperty(CdkAccordion.prototype, "multi", {
                    /**
                     * Whether the accordion should allow multiple expanded accordion items simultaneously.
                     * @return {?}
                     */
                    get: function () { return this._multi; },
                    /**
                     * @param {?} multi
                     * @return {?}
                     */
                    set: function (multi) { this._multi = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(multi); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Opens all enabled accordion items in an accordion where multi is enabled.
                 * @return {?}
                 */
                CdkAccordion.prototype.openAll = function () {
                    this._openCloseAll(true);
                };
                /**
                 * Closes all enabled accordion items in an accordion where multi is enabled.
                 * @return {?}
                 */
                CdkAccordion.prototype.closeAll = function () {
                    this._openCloseAll(false);
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                CdkAccordion.prototype.ngOnChanges = function (changes) {
                    this._stateChanges.next(changes);
                };
                /**
                 * @return {?}
                 */
                CdkAccordion.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                };
                /**
                 * @private
                 * @param {?} expanded
                 * @return {?}
                 */
                CdkAccordion.prototype._openCloseAll = function (expanded) {
                    if (this.multi) {
                        this._openCloseAllActions.next(expanded);
                    }
                };
                return CdkAccordion;
            }());
            CdkAccordion.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'cdk-accordion, [cdkAccordion]',
                            exportAs: 'cdkAccordion',
                        },] },
            ];
            CdkAccordion.propDecorators = {
                multi: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Used to generate unique ID for each accordion item.
             * @type {?}
             */
            var nextId$1 = 0;
            var ɵ0 = undefined;
            /**
             * An basic directive expected to be extended and decorated as a component.  Sets up all
             * events and attributes needed to be managed by a CdkAccordion parent.
             */
            var CdkAccordionItem = /** @class */ (function () {
                /**
                 * @param {?} accordion
                 * @param {?} _changeDetectorRef
                 * @param {?} _expansionDispatcher
                 */
                function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {
                    var _this = this;
                    this.accordion = accordion;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._expansionDispatcher = _expansionDispatcher;
                    /**
                     * Subscription to openAll/closeAll events.
                     */
                    this._openCloseAllSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
                    /**
                     * Event emitted every time the AccordionItem is closed.
                     */
                    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    /**
                     * Event emitted every time the AccordionItem is opened.
                     */
                    this.opened = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    /**
                     * Event emitted when the AccordionItem is destroyed.
                     */
                    this.destroyed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    /**
                     * Emits whenever the expanded state of the accordion changes.
                     * Primarily used to facilitate two-way binding.
                     * \@docs-private
                     */
                    this.expandedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    /**
                     * The unique AccordionItem id.
                     */
                    this.id = "cdk-accordion-child-" + nextId$1++;
                    this._expanded = false;
                    this._disabled = false;
                    /**
                     * Unregister function for _expansionDispatcher.
                     */
                    this._removeUniqueSelectionListener = ( /**
                     * @return {?}
                     */function () { });
                    this._removeUniqueSelectionListener =
                        _expansionDispatcher.listen(( /**
                         * @param {?} id
                         * @param {?} accordionId
                         * @return {?}
                         */function (id, accordionId) {
                            if (_this.accordion && !_this.accordion.multi &&
                                _this.accordion.id === accordionId && _this.id !== id) {
                                _this.expanded = false;
                            }
                        }));
                    // When an accordion item is hosted in an accordion, subscribe to open/close events.
                    if (this.accordion) {
                        this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();
                    }
                }
                Object.defineProperty(CdkAccordionItem.prototype, "expanded", {
                    /**
                     * Whether the AccordionItem is expanded.
                     * @return {?}
                     */
                    get: function () { return this._expanded; },
                    /**
                     * @param {?} expanded
                     * @return {?}
                     */
                    set: function (expanded) {
                        expanded = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(expanded);
                        // Only emit events and update the internal value if the value changes.
                        if (this._expanded !== expanded) {
                            this._expanded = expanded;
                            this.expandedChange.emit(expanded);
                            if (expanded) {
                                this.opened.emit();
                                /**
                                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,
                                 * the name value is the id of the accordion.
                                 * @type {?}
                                 */
                                var accordionId = this.accordion ? this.accordion.id : this.id;
                                this._expansionDispatcher.notify(this.id, accordionId);
                            }
                            else {
                                this.closed.emit();
                            }
                            // Ensures that the animation will run when the value is set outside of an `@Input`.
                            // This includes cases like the open, close and toggle methods.
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkAccordionItem.prototype, "disabled", {
                    /**
                     * Whether the AccordionItem is disabled.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} disabled
                     * @return {?}
                     */
                    set: function (disabled) { this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(disabled); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Emits an event for the accordion item being destroyed.
                 * @return {?}
                 */
                CdkAccordionItem.prototype.ngOnDestroy = function () {
                    this.opened.complete();
                    this.closed.complete();
                    this.destroyed.emit();
                    this.destroyed.complete();
                    this._removeUniqueSelectionListener();
                    this._openCloseAllSubscription.unsubscribe();
                };
                /**
                 * Toggles the expanded state of the accordion item.
                 * @return {?}
                 */
                CdkAccordionItem.prototype.toggle = function () {
                    if (!this.disabled) {
                        this.expanded = !this.expanded;
                    }
                };
                /**
                 * Sets the expanded state of the accordion item to false.
                 * @return {?}
                 */
                CdkAccordionItem.prototype.close = function () {
                    if (!this.disabled) {
                        this.expanded = false;
                    }
                };
                /**
                 * Sets the expanded state of the accordion item to true.
                 * @return {?}
                 */
                CdkAccordionItem.prototype.open = function () {
                    if (!this.disabled) {
                        this.expanded = true;
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                CdkAccordionItem.prototype._subscribeToOpenCloseAllActions = function () {
                    var _this = this;
                    return this.accordion._openCloseAllActions.subscribe(( /**
                     * @param {?} expanded
                     * @return {?}
                     */function (/**
                     * @param {?} expanded
                     * @return {?}
                     */ expanded) {
                        // Only change expanded state if item is enabled
                        if (!_this.disabled) {
                            _this.expanded = expanded;
                        }
                    }));
                };
                return CdkAccordionItem;
            }());
            CdkAccordionItem.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'cdk-accordion-item, [cdkAccordionItem]',
                            exportAs: 'cdkAccordionItem',
                            providers: [
                                // Provide CdkAccordion as undefined to prevent nested accordion items from registering
                                // to the same accordion.
                                { provide: CdkAccordion, useValue: ɵ0 },
                            ],
                        },] },
            ];
            /** @nocollapse */
            CdkAccordionItem.ctorParameters = function () { return [
                { type: CdkAccordion, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
                { type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__["UniqueSelectionDispatcher"] }
            ]; };
            CdkAccordionItem.propDecorators = {
                closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
                opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
                destroyed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
                expandedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
                expanded: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var CdkAccordionModule = /** @class */ (function () {
                function CdkAccordionModule() {
                }
                return CdkAccordionModule;
            }());
            CdkAccordionModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            exports: [CdkAccordion, CdkAccordionItem],
                            declarations: [CdkAccordion, CdkAccordionItem],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=accordion.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/bidi.js": 
        /*!***************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/bidi.js ***!
          \***************************************************/
        /*! exports provided: Directionality, DIR_DOCUMENT, Dir, BidiModule, ɵa */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Directionality", function () { return Directionality; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DIR_DOCUMENT", function () { return DIR_DOCUMENT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dir", function () { return Dir; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BidiModule", function () { return BidiModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function () { return DIR_DOCUMENT_FACTORY; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token used to inject the document into Directionality.
             * This is used so that the value can be faked in tests.
             *
             * We can't use the real document in tests because changing the real `dir` causes geometry-based
             * tests in Safari to fail.
             *
             * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests
             * themselves use things like `querySelector` in test code.
             *
             * This token is defined in a separate file from Directionality as a workaround for
             * https://github.com/angular/angular/issues/22559
             *
             * \@docs-private
             * @type {?}
             */
            var DIR_DOCUMENT = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('cdk-dir-doc', {
                providedIn: 'root',
                factory: DIR_DOCUMENT_FACTORY,
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function DIR_DOCUMENT_FACTORY() {
                return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]);
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The directionality (LTR / RTL) context for the application (or a subtree of it).
             * Exposes the current direction and a stream of direction changes.
             */
            var Directionality = /** @class */ (function () {
                /**
                 * @param {?=} _document
                 */
                function Directionality(_document) {
                    /**
                     * The current 'ltr' or 'rtl' value.
                     */
                    this.value = 'ltr';
                    /**
                     * Stream that emits whenever the 'ltr' / 'rtl' state changes.
                     */
                    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    if (_document) {
                        // TODO: handle 'auto' value -
                        // We still need to account for dir="auto".
                        // It looks like HTMLElemenet.dir is also "auto" when that's set to the attribute,
                        // but getComputedStyle return either "ltr" or "rtl". avoiding getComputedStyle for now
                        /** @type {?} */
                        var bodyDir = _document.body ? _document.body.dir : null;
                        /** @type {?} */
                        var htmlDir = _document.documentElement ? _document.documentElement.dir : null;
                        /** @type {?} */
                        var value = bodyDir || htmlDir;
                        this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';
                    }
                }
                /**
                 * @return {?}
                 */
                Directionality.prototype.ngOnDestroy = function () {
                    this.change.complete();
                };
                return Directionality;
            }());
            Directionality.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            Directionality.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [DIR_DOCUMENT,] }] }
            ]; };
            /** @nocollapse */ Directionality.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function Directionality_Factory() { return new Directionality(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(DIR_DOCUMENT, 8)); }, token: Directionality, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Directive to listen for changes of direction of part of the DOM.
             *
             * Provides itself as Directionality such that descendant directives only need to ever inject
             * Directionality to get the closest direction.
             */
            var Dir = /** @class */ (function () {
                function Dir() {
                    /**
                     * Normalized direction that accounts for invalid/unsupported values.
                     */
                    this._dir = 'ltr';
                    /**
                     * Whether the `value` has been set to its initial value.
                     */
                    this._isInitialized = false;
                    /**
                     * Event emitted when the direction changes.
                     */
                    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                }
                Object.defineProperty(Dir.prototype, "dir", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () { return this._dir; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var old = this._dir;
                        /** @type {?} */
                        var normalizedValue = value ? value.toLowerCase() : value;
                        this._rawDir = value;
                        this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';
                        if (old !== this._dir && this._isInitialized) {
                            this.change.emit(this._dir);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Dir.prototype, "value", {
                    /**
                     * Current layout direction of the element.
                     * @return {?}
                     */
                    get: function () { return this.dir; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Initialize once default value has been set.
                 * @return {?}
                 */
                Dir.prototype.ngAfterContentInit = function () {
                    this._isInitialized = true;
                };
                /**
                 * @return {?}
                 */
                Dir.prototype.ngOnDestroy = function () {
                    this.change.complete();
                };
                return Dir;
            }());
            Dir.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[dir]',
                            providers: [{ provide: Directionality, useExisting: Dir }],
                            host: { '[attr.dir]': '_rawDir' },
                            exportAs: 'dir',
                        },] },
            ];
            Dir.propDecorators = {
                change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"], args: ['dirChange',] }],
                dir: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var BidiModule = /** @class */ (function () {
                function BidiModule() {
                }
                return BidiModule;
            }());
            BidiModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            exports: [Dir],
                            declarations: [Dir],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=bidi.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/cdk.js": 
        /*!**************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/cdk.js ***!
          \**************************************************/
        /*! exports provided: VERSION */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function () { return VERSION; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Current version of the Angular Component Development Kit.
             * @type {?}
             */
            var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('8.2.3');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=cdk.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/coercion.js": 
        /*!*******************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/coercion.js ***!
          \*******************************************************/
        /*! exports provided: coerceBooleanProperty, coerceNumberProperty, _isNumberValue, coerceArray, coerceCssPixelValue, coerceElement */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceBooleanProperty", function () { return coerceBooleanProperty; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceNumberProperty", function () { return coerceNumberProperty; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_isNumberValue", function () { return _isNumberValue; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceArray", function () { return coerceArray; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceCssPixelValue", function () { return coerceCssPixelValue; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceElement", function () { return coerceElement; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Coerces a data-bound value (typically a string) to a boolean.
             * @param {?} value
             * @return {?}
             */
            function coerceBooleanProperty(value) {
                return value != null && "" + value !== 'false';
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @param {?} value
             * @param {?=} fallbackValue
             * @return {?}
             */
            function coerceNumberProperty(value, fallbackValue) {
                if (fallbackValue === void 0) { fallbackValue = 0; }
                return _isNumberValue(value) ? Number(value) : fallbackValue;
            }
            /**
             * Whether the provided value is considered a number.
             * \@docs-private
             * @param {?} value
             * @return {?}
             */
            function _isNumberValue(value) {
                // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
                // and other non-number values as NaN, where Number just uses 0) but it considers the string
                // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
                return !isNaN(parseFloat(( /** @type {?} */(value)))) && !isNaN(Number(value));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Wraps the provided value in an array, unless the provided value is an array.
             * @template T
             * @param {?} value
             * @return {?}
             */
            function coerceArray(value) {
                return Array.isArray(value) ? value : [value];
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Coerces a value to a CSS pixel value.
             * @param {?} value
             * @return {?}
             */
            function coerceCssPixelValue(value) {
                if (value == null) {
                    return '';
                }
                return typeof value === 'string' ? value : value + "px";
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Coerces an ElementRef or an Element into an element.
             * Useful for APIs that can accept either a ref or the native element itself.
             * @template T
             * @param {?} elementOrRef
             * @return {?}
             */
            function coerceElement(elementOrRef) {
                return elementOrRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] ? elementOrRef.nativeElement : elementOrRef;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=coercion.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/collections.js": 
        /*!**********************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/collections.js ***!
          \**********************************************************/
        /*! exports provided: UniqueSelectionDispatcher, ArrayDataSource, isDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UniqueSelectionDispatcher", function () { return UniqueSelectionDispatcher; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayDataSource", function () { return ArrayDataSource; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDataSource", function () { return isDataSource; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataSource", function () { return DataSource; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMultipleValuesInSingleSelectionError", function () { return getMultipleValuesInSingleSelectionError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectionModel", function () { return SelectionModel; });
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @abstract
             * @template T
             */
            var DataSource = /** @class */ (function () {
                function DataSource() {
                }
                return DataSource;
            }());
            /**
             * Checks whether an object is a data source.
             * @param {?} value
             * @return {?}
             */
            function isDataSource(value) {
                // Check if the value is a DataSource by observing if it has a connect function. Cannot
                // be checked as an `instanceof DataSource` since people could create their own sources
                // that match the interface, but don't extend DataSource.
                return value && typeof value.connect === 'function';
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * DataSource wrapper for a native array.
             * @template T
             */
            var ArrayDataSource = /** @class */ (function (_super) {
                __extends(ArrayDataSource, _super);
                /**
                 * @param {?} _data
                 */
                function ArrayDataSource(_data) {
                    var _this = _super.call(this) || this;
                    _this._data = _data;
                    return _this;
                }
                /**
                 * @return {?}
                 */
                ArrayDataSource.prototype.connect = function () {
                    return this._data instanceof rxjs__WEBPACK_IMPORTED_MODULE_0__["Observable"] ? this._data : Object(rxjs__WEBPACK_IMPORTED_MODULE_0__["of"])(this._data);
                };
                /**
                 * @return {?}
                 */
                ArrayDataSource.prototype.disconnect = function () { };
                return ArrayDataSource;
            }(DataSource));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Class to be used to power selecting one or more options from a list.
             * @template T
             */
            var SelectionModel = /** @class */ (function () {
                /**
                 * @param {?=} _multiple
                 * @param {?=} initiallySelectedValues
                 * @param {?=} _emitChanges
                 */
                function SelectionModel(_multiple, initiallySelectedValues, _emitChanges) {
                    var _this = this;
                    if (_multiple === void 0) { _multiple = false; }
                    if (_emitChanges === void 0) { _emitChanges = true; }
                    this._multiple = _multiple;
                    this._emitChanges = _emitChanges;
                    /**
                     * Currently-selected values.
                     */
                    this._selection = new Set();
                    /**
                     * Keeps track of the deselected options that haven't been emitted by the change event.
                     */
                    this._deselectedToEmit = [];
                    /**
                     * Keeps track of the selected options that haven't been emitted by the change event.
                     */
                    this._selectedToEmit = [];
                    /**
                     * Event emitted when the value has changed.
                     */
                    this.changed = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                    /**
                     * Event emitted when the value has changed.
                     * @deprecated Use `changed` instead.
                     * \@breaking-change 8.0.0 To be changed to `changed`
                     */
                    this.onChange = this.changed;
                    if (initiallySelectedValues && initiallySelectedValues.length) {
                        if (_multiple) {
                            initiallySelectedValues.forEach(( /**
                             * @param {?} value
                             * @return {?}
                             */function (/**
                             * @param {?} value
                             * @return {?}
                             */ value) { return _this._markSelected(value); }));
                        }
                        else {
                            this._markSelected(initiallySelectedValues[0]);
                        }
                        // Clear the array in order to avoid firing the change event for preselected values.
                        this._selectedToEmit.length = 0;
                    }
                }
                Object.defineProperty(SelectionModel.prototype, "selected", {
                    /**
                     * Selected values.
                     * @return {?}
                     */
                    get: function () {
                        if (!this._selected) {
                            this._selected = Array.from(this._selection.values());
                        }
                        return this._selected;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Selects a value or an array of values.
                 * @param {...?} values
                 * @return {?}
                 */
                SelectionModel.prototype.select = function () {
                    var _this = this;
                    var values = [];
                    for (var _b = 0; _b < arguments.length; _b++) {
                        values[_b] = arguments[_b];
                    }
                    this._verifyValueAssignment(values);
                    values.forEach(( /**
                     * @param {?} value
                     * @return {?}
                     */function (/**
                     * @param {?} value
                     * @return {?}
                     */ value) { return _this._markSelected(value); }));
                    this._emitChangeEvent();
                };
                /**
                 * Deselects a value or an array of values.
                 * @param {...?} values
                 * @return {?}
                 */
                SelectionModel.prototype.deselect = function () {
                    var _this = this;
                    var values = [];
                    for (var _b = 0; _b < arguments.length; _b++) {
                        values[_b] = arguments[_b];
                    }
                    this._verifyValueAssignment(values);
                    values.forEach(( /**
                     * @param {?} value
                     * @return {?}
                     */function (/**
                     * @param {?} value
                     * @return {?}
                     */ value) { return _this._unmarkSelected(value); }));
                    this._emitChangeEvent();
                };
                /**
                 * Toggles a value between selected and deselected.
                 * @param {?} value
                 * @return {?}
                 */
                SelectionModel.prototype.toggle = function (value) {
                    this.isSelected(value) ? this.deselect(value) : this.select(value);
                };
                /**
                 * Clears all of the selected values.
                 * @return {?}
                 */
                SelectionModel.prototype.clear = function () {
                    this._unmarkAll();
                    this._emitChangeEvent();
                };
                /**
                 * Determines whether a value is selected.
                 * @param {?} value
                 * @return {?}
                 */
                SelectionModel.prototype.isSelected = function (value) {
                    return this._selection.has(value);
                };
                /**
                 * Determines whether the model does not have a value.
                 * @return {?}
                 */
                SelectionModel.prototype.isEmpty = function () {
                    return this._selection.size === 0;
                };
                /**
                 * Determines whether the model has a value.
                 * @return {?}
                 */
                SelectionModel.prototype.hasValue = function () {
                    return !this.isEmpty();
                };
                /**
                 * Sorts the selected values based on a predicate function.
                 * @param {?=} predicate
                 * @return {?}
                 */
                SelectionModel.prototype.sort = function (predicate) {
                    if (this._multiple && this.selected) {
                        ( /** @type {?} */(this._selected)).sort(predicate);
                    }
                };
                /**
                 * Gets whether multiple values can be selected.
                 * @return {?}
                 */
                SelectionModel.prototype.isMultipleSelection = function () {
                    return this._multiple;
                };
                /**
                 * Emits a change event and clears the records of selected and deselected values.
                 * @private
                 * @return {?}
                 */
                SelectionModel.prototype._emitChangeEvent = function () {
                    // Clear the selected values so they can be re-cached.
                    this._selected = null;
                    if (this._selectedToEmit.length || this._deselectedToEmit.length) {
                        this.changed.next({
                            source: this,
                            added: this._selectedToEmit,
                            removed: this._deselectedToEmit
                        });
                        this._deselectedToEmit = [];
                        this._selectedToEmit = [];
                    }
                };
                /**
                 * Selects a value.
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                SelectionModel.prototype._markSelected = function (value) {
                    if (!this.isSelected(value)) {
                        if (!this._multiple) {
                            this._unmarkAll();
                        }
                        this._selection.add(value);
                        if (this._emitChanges) {
                            this._selectedToEmit.push(value);
                        }
                    }
                };
                /**
                 * Deselects a value.
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                SelectionModel.prototype._unmarkSelected = function (value) {
                    if (this.isSelected(value)) {
                        this._selection.delete(value);
                        if (this._emitChanges) {
                            this._deselectedToEmit.push(value);
                        }
                    }
                };
                /**
                 * Clears out the selected values.
                 * @private
                 * @return {?}
                 */
                SelectionModel.prototype._unmarkAll = function () {
                    var _this = this;
                    if (!this.isEmpty()) {
                        this._selection.forEach(( /**
                         * @param {?} value
                         * @return {?}
                         */function (/**
                         * @param {?} value
                         * @return {?}
                         */ value) { return _this._unmarkSelected(value); }));
                    }
                };
                /**
                 * Verifies the value assignment and throws an error if the specified value array is
                 * including multiple values while the selection model is not supporting multiple values.
                 * @private
                 * @param {?} values
                 * @return {?}
                 */
                SelectionModel.prototype._verifyValueAssignment = function (values) {
                    if (values.length > 1 && !this._multiple) {
                        throw getMultipleValuesInSingleSelectionError();
                    }
                };
                return SelectionModel;
            }());
            /**
             * Returns an error that reports that multiple values are passed into a selection model
             * with a single value.
             * \@docs-private
             * @return {?}
             */
            function getMultipleValuesInSingleSelectionError() {
                return Error('Cannot pass multiple values into SelectionModel with single-value mode.');
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Class to coordinate unique selection based on name.
             * Intended to be consumed as an Angular service.
             * This service is needed because native radio change events are only fired on the item currently
             * being selected, and we still need to uncheck the previous selection.
             *
             * This service does not *store* any IDs and names because they may change at any time, so it is
             * less error-prone if they are simply passed through when the events occur.
             */
            var UniqueSelectionDispatcher = /** @class */ (function () {
                function UniqueSelectionDispatcher() {
                    this._listeners = [];
                }
                /**
                 * Notify other items that selection for the given name has been set.
                 * @param {?} id ID of the item.
                 * @param {?} name Name of the item.
                 * @return {?}
                 */
                UniqueSelectionDispatcher.prototype.notify = function (id, name) {
                    for (var _b = 0, _c = this._listeners; _b < _c.length; _b++) {
                        var listener = _c[_b];
                        listener(id, name);
                    }
                };
                /**
                 * Listen for future changes to item selection.
                 * @param {?} listener
                 * @return {?} Function used to deregister listener
                 */
                UniqueSelectionDispatcher.prototype.listen = function (listener) {
                    var _this = this;
                    this._listeners.push(listener);
                    return ( /**
                     * @return {?}
                     */function () {
                        _this._listeners = _this._listeners.filter(( /**
                         * @param {?} registered
                         * @return {?}
                         */function (registered) {
                            return listener !== registered;
                        }));
                    });
                };
                /**
                 * @return {?}
                 */
                UniqueSelectionDispatcher.prototype.ngOnDestroy = function () {
                    this._listeners = [];
                };
                return UniqueSelectionDispatcher;
            }());
            UniqueSelectionDispatcher.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=collections.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/drag-drop.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/drag-drop.js ***!
          \********************************************************/
        /*! exports provided: DragDrop, DragRef, DropListRef, CdkDropList, CDK_DROP_LIST, CDK_DROP_LIST_CONTAINER, moveItemInArray, transferArrayItem, copyArrayItem, DragDropModule, DragDropRegistry, CdkDropListGroup, CDK_DRAG_CONFIG_FACTORY, CDK_DRAG_CONFIG, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder, ɵb */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragDrop", function () { return DragDrop; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragRef", function () { return DragRef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropListRef", function () { return DropListRef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkDropList", function () { return CdkDropList; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_DROP_LIST", function () { return CDK_DROP_LIST; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_DROP_LIST_CONTAINER", function () { return CDK_DROP_LIST_CONTAINER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moveItemInArray", function () { return moveItemInArray; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transferArrayItem", function () { return transferArrayItem; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyArrayItem", function () { return copyArrayItem; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragDropModule", function () { return DragDropModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragDropRegistry", function () { return DragDropRegistry; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkDropListGroup", function () { return CdkDropListGroup; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_DRAG_CONFIG_FACTORY", function () { return CDK_DRAG_CONFIG_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_DRAG_CONFIG", function () { return CDK_DRAG_CONFIG; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkDrag", function () { return CdkDrag; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkDragHandle", function () { return CdkDragHandle; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkDragPreview", function () { return CdkDragPreview; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkDragPlaceholder", function () { return CdkDragPlaceholder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function () { return CDK_DRAG_PARENT; });
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm2015/scrolling.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Shallow-extends a stylesheet object with another stylesheet object.
             * \@docs-private
             * @param {?} dest
             * @param {?} source
             * @return {?}
             */
            function extendStyles(dest, source) {
                for (var key in source) {
                    if (source.hasOwnProperty(key)) {
                        dest[key] = ( /** @type {?} */(source[key]));
                    }
                }
                return dest;
            }
            /**
             * Toggles whether the native drag interactions should be enabled for an element.
             * \@docs-private
             * @param {?} element Element on which to toggle the drag interactions.
             * @param {?} enable Whether the drag interactions should be enabled.
             * @return {?}
             */
            function toggleNativeDragInteractions(element, enable) {
                /** @type {?} */
                var userSelect = enable ? '' : 'none';
                extendStyles(element.style, {
                    touchAction: enable ? '' : 'none',
                    webkitUserDrag: enable ? '' : 'none',
                    webkitTapHighlightColor: enable ? '' : 'transparent',
                    userSelect: userSelect,
                    msUserSelect: userSelect,
                    webkitUserSelect: userSelect,
                    MozUserSelect: userSelect
                });
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Parses a CSS time value to milliseconds.
             * @param {?} value
             * @return {?}
             */
            function parseCssTimeUnitsToMs(value) {
                // Some browsers will return it in seconds, whereas others will return milliseconds.
                /** @type {?} */
                var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;
                return parseFloat(value) * multiplier;
            }
            /**
             * Gets the transform transition duration, including the delay, of an element in milliseconds.
             * @param {?} element
             * @return {?}
             */
            function getTransformTransitionDurationInMs(element) {
                /** @type {?} */
                var computedStyle = getComputedStyle(element);
                /** @type {?} */
                var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');
                /** @type {?} */
                var property = transitionedProperties.find(( /**
                 * @param {?} prop
                 * @return {?}
                 */function (/**
                 * @param {?} prop
                 * @return {?}
                 */ prop) { return prop === 'transform' || prop === 'all'; }));
                // If there's no transition for `all` or `transform`, we shouldn't do anything.
                if (!property) {
                    return 0;
                }
                // Get the index of the property that we're interested in and match
                // it up to the same index in `transition-delay` and `transition-duration`.
                /** @type {?} */
                var propertyIndex = transitionedProperties.indexOf(property);
                /** @type {?} */
                var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');
                /** @type {?} */
                var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');
                return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +
                    parseCssTimeUnitsToMs(rawDelays[propertyIndex]);
            }
            /**
             * Parses out multiple values from a computed style into an array.
             * @param {?} computedStyle
             * @param {?} name
             * @return {?}
             */
            function parseCssPropertyValue(computedStyle, name) {
                /** @type {?} */
                var value = computedStyle.getPropertyValue(name);
                return value.split(',').map(( /**
                 * @param {?} part
                 * @return {?}
                 */function (/**
                 * @param {?} part
                 * @return {?}
                 */ part) { return part.trim(); }));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Options that can be used to bind a passive event listener.
             * @type {?}
             */
            var passiveEventListenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["normalizePassiveListenerOptions"])({ passive: true });
            /**
             * Options that can be used to bind an active event listener.
             * @type {?}
             */
            var activeEventListenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["normalizePassiveListenerOptions"])({ passive: false });
            /**
             * Time in milliseconds for which to ignore mouse events, after
             * receiving a touch event. Used to avoid doing double work for
             * touch devices where the browser fires fake mouse events, in
             * addition to touch events.
             * @type {?}
             */
            var MOUSE_EVENT_IGNORE_TIME = 800;
            /**
             * Reference to a draggable item. Used to manipulate or dispose of the item.
             * \@docs-private
             * @template T
             */
            var DragRef = /** @class */ (function () {
                /**
                 * @param {?} element
                 * @param {?} _config
                 * @param {?} _document
                 * @param {?} _ngZone
                 * @param {?} _viewportRuler
                 * @param {?} _dragDropRegistry
                 */
                function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {
                    var _this = this;
                    this._config = _config;
                    this._document = _document;
                    this._ngZone = _ngZone;
                    this._viewportRuler = _viewportRuler;
                    this._dragDropRegistry = _dragDropRegistry;
                    /**
                     * CSS `transform` applied to the element when it isn't being dragged. We need a
                     * passive transform in order for the dragged element to retain its new position
                     * after the user has stopped dragging and because we need to know the relative
                     * position in case they start dragging again. This corresponds to `element.style.transform`.
                     */
                    this._passiveTransform = { x: 0, y: 0 };
                    /**
                     * CSS `transform` that is applied to the element while it's being dragged.
                     */
                    this._activeTransform = { x: 0, y: 0 };
                    /**
                     * Emits when the item is being moved.
                     */
                    this._moveEvents = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Subscription to pointer movement events.
                     */
                    this._pointerMoveSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
                    /**
                     * Subscription to the event that is dispatched when the user lifts their pointer.
                     */
                    this._pointerUpSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
                    /**
                     * Subscription to the viewport being scrolled.
                     */
                    this._scrollSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
                    /**
                     * Subscription to the viewport being resized.
                     */
                    this._resizeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
                    /**
                     * Cached reference to the boundary element.
                     */
                    this._boundaryElement = null;
                    /**
                     * Whether the native dragging interactions have been enabled on the root element.
                     */
                    this._nativeInteractionsEnabled = true;
                    /**
                     * Elements that can be used to drag the draggable item.
                     */
                    this._handles = [];
                    /**
                     * Registered handles that are currently disabled.
                     */
                    this._disabledHandles = new Set();
                    /**
                     * Layout direction of the item.
                     */
                    this._direction = 'ltr';
                    /**
                     * Amount of milliseconds to wait after the user has put their
                     * pointer down before starting to drag the element.
                     */
                    this.dragStartDelay = 0;
                    this._disabled = false;
                    /**
                     * Emits as the drag sequence is being prepared.
                     */
                    this.beforeStarted = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits when the user starts dragging the item.
                     */
                    this.started = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits when the user has released a drag item, before any animations have started.
                     */
                    this.released = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits when the user stops dragging an item in the container.
                     */
                    this.ended = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits when the user has moved the item into a new container.
                     */
                    this.entered = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits when the user removes the item its container by dragging it into another container.
                     */
                    this.exited = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits when the user drops the item inside a container.
                     */
                    this.dropped = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits as the user is dragging the item. Use with caution,
                     * because this event will fire for every pixel that the user has dragged.
                     */
                    this.moved = this._moveEvents.asObservable();
                    /**
                     * Handler for the `mousedown`/`touchstart` events.
                     */
                    this._pointerDown = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        _this.beforeStarted.next();
                        // Delegate the event based on whether it started from a handle or the element itself.
                        if (_this._handles.length) {
                            /** @type {?} */
                            var targetHandle = _this._handles.find(( /**
                             * @param {?} handle
                             * @return {?}
                             */function (/**
                             * @param {?} handle
                             * @return {?}
                             */ handle) {
                                /** @type {?} */
                                var target = event.target;
                                return !!target && (target === handle || handle.contains(( /** @type {?} */(target))));
                            }));
                            if (targetHandle && !_this._disabledHandles.has(targetHandle) && !_this.disabled) {
                                _this._initializeDragSequence(targetHandle, event);
                            }
                        }
                        else if (!_this.disabled) {
                            _this._initializeDragSequence(_this._rootElement, event);
                        }
                    });
                    /**
                     * Handler that is invoked when the user moves their pointer after they've initiated a drag.
                     */
                    this._pointerMove = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        if (!_this._hasStartedDragging) {
                            /** @type {?} */
                            var pointerPosition = _this._getPointerPositionOnPage(event);
                            /** @type {?} */
                            var distanceX = Math.abs(pointerPosition.x - _this._pickupPositionOnPage.x);
                            /** @type {?} */
                            var distanceY = Math.abs(pointerPosition.y - _this._pickupPositionOnPage.y);
                            /** @type {?} */
                            var isOverThreshold = distanceX + distanceY >= _this._config.dragStartThreshold;
                            // Only start dragging after the user has moved more than the minimum distance in either
                            // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`
                            // in the `pointerMove` subscription, because we're not guaranteed to have one move event
                            // per pixel of movement (e.g. if the user moves their pointer quickly).
                            if (isOverThreshold) {
                                /** @type {?} */
                                var isDelayElapsed = Date.now() >= _this._dragStartTime + (_this.dragStartDelay || 0);
                                if (!isDelayElapsed) {
                                    _this._endDragSequence(event);
                                    return;
                                }
                                // Prevent other drag sequences from starting while something in the container is still
                                // being dragged. This can happen while we're waiting for the drop animation to finish
                                // and can cause errors, because some elements might still be moving around.
                                if (!_this._dropContainer || !_this._dropContainer.isDragging()) {
                                    _this._hasStartedDragging = true;
                                    _this._ngZone.run(( /**
                                     * @return {?}
                                     */function () { return _this._startDragSequence(event); }));
                                }
                            }
                            return;
                        }
                        // We only need the preview dimensions if we have a boundary element.
                        if (_this._boundaryElement) {
                            // Cache the preview element rect if we haven't cached it already or if
                            // we cached it too early before the element dimensions were computed.
                            if (!_this._previewRect || (!_this._previewRect.width && !_this._previewRect.height)) {
                                _this._previewRect = (_this._preview || _this._rootElement).getBoundingClientRect();
                            }
                        }
                        /** @type {?} */
                        var constrainedPointerPosition = _this._getConstrainedPointerPosition(event);
                        _this._hasMoved = true;
                        event.preventDefault();
                        _this._updatePointerDirectionDelta(constrainedPointerPosition);
                        if (_this._dropContainer) {
                            _this._updateActiveDropContainer(constrainedPointerPosition);
                        }
                        else {
                            /** @type {?} */
                            var activeTransform = _this._activeTransform;
                            activeTransform.x =
                                constrainedPointerPosition.x - _this._pickupPositionOnPage.x + _this._passiveTransform.x;
                            activeTransform.y =
                                constrainedPointerPosition.y - _this._pickupPositionOnPage.y + _this._passiveTransform.y;
                            _this._applyRootElementTransform(activeTransform.x, activeTransform.y);
                            // Apply transform as attribute if dragging and svg element to work for IE
                            if (typeof SVGElement !== 'undefined' && _this._rootElement instanceof SVGElement) {
                                /** @type {?} */
                                var appliedTransform = "translate(" + activeTransform.x + " " + activeTransform.y + ")";
                                _this._rootElement.setAttribute('transform', appliedTransform);
                            }
                        }
                        // Since this event gets fired for every pixel while dragging, we only
                        // want to fire it if the consumer opted into it. Also we have to
                        // re-enter the zone because we run all of the events on the outside.
                        if (_this._moveEvents.observers.length) {
                            _this._ngZone.run(( /**
                             * @return {?}
                             */function () {
                                _this._moveEvents.next({
                                    source: _this,
                                    pointerPosition: constrainedPointerPosition,
                                    event: event,
                                    distance: _this._getDragDistance(constrainedPointerPosition),
                                    delta: _this._pointerDirectionDelta
                                });
                            }));
                        }
                    });
                    /**
                     * Handler that is invoked when the user lifts their pointer up, after initiating a drag.
                     */
                    this._pointerUp = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        _this._endDragSequence(event);
                    });
                    this.withRootElement(element);
                    _dragDropRegistry.registerDragItem(this);
                }
                Object.defineProperty(DragRef.prototype, "disabled", {
                    /**
                     * Whether starting to drag this element is disabled.
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        if (newValue !== this._disabled) {
                            this._disabled = newValue;
                            this._toggleNativeDragInteractions();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Returns the element that is being used as a placeholder
                 * while the current element is being dragged.
                 * @return {?}
                 */
                DragRef.prototype.getPlaceholderElement = function () {
                    return this._placeholder;
                };
                /**
                 * Returns the root draggable element.
                 * @return {?}
                 */
                DragRef.prototype.getRootElement = function () {
                    return this._rootElement;
                };
                /**
                 * Registers the handles that can be used to drag the element.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} handles
                 * @return {THIS}
                 */
                DragRef.prototype.withHandles = function (handles) {
                    ( /** @type {?} */(this))._handles = handles.map(( /**
                     * @param {?} handle
                     * @return {?}
                     */function (/**
                     * @param {?} handle
                     * @return {?}
                     */ handle) { return Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(handle); }));
                    ( /** @type {?} */(this))._handles.forEach(( /**
                     * @param {?} handle
                     * @return {?}
                     */function (/**
                     * @param {?} handle
                     * @return {?}
                     */ handle) { return toggleNativeDragInteractions(handle, false); }));
                    ( /** @type {?} */(this))._toggleNativeDragInteractions();
                    return ( /** @type {?} */(this));
                };
                /**
                 * Registers the template that should be used for the drag preview.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} template Template that from which to stamp out the preview.
                 * @return {THIS}
                 */
                DragRef.prototype.withPreviewTemplate = function (template) {
                    ( /** @type {?} */(this))._previewTemplate = template;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Registers the template that should be used for the drag placeholder.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} template Template that from which to stamp out the placeholder.
                 * @return {THIS}
                 */
                DragRef.prototype.withPlaceholderTemplate = function (template) {
                    ( /** @type {?} */(this))._placeholderTemplate = template;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets an alternate drag root element. The root element is the element that will be moved as
                 * the user is dragging. Passing an alternate root element is useful when trying to enable
                 * dragging on an element that you might not have access to.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} rootElement
                 * @return {THIS}
                 */
                DragRef.prototype.withRootElement = function (rootElement) {
                    /** @type {?} */
                    var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(rootElement);
                    if (element !== ( /** @type {?} */(this))._rootElement) {
                        if (( /** @type {?} */(this))._rootElement) {
                            ( /** @type {?} */(this))._removeRootElementListeners(( /** @type {?} */(this))._rootElement);
                        }
                        element.addEventListener('mousedown', ( /** @type {?} */(this))._pointerDown, activeEventListenerOptions);
                        element.addEventListener('touchstart', ( /** @type {?} */(this))._pointerDown, passiveEventListenerOptions);
                        ( /** @type {?} */(this))._initialTransform = undefined;
                        ( /** @type {?} */(this))._rootElement = element;
                    }
                    return ( /** @type {?} */(this));
                };
                /**
                 * Element to which the draggable's position will be constrained.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} boundaryElement
                 * @return {THIS}
                 */
                DragRef.prototype.withBoundaryElement = function (boundaryElement) {
                    var _this = this;
                    ( /** @type {?} */(this))._boundaryElement = boundaryElement ? Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(boundaryElement) : null;
                    ( /** @type {?} */(this))._resizeSubscription.unsubscribe();
                    if (boundaryElement) {
                        ( /** @type {?} */(this))._resizeSubscription = ( /** @type {?} */(this))._viewportRuler
                            .change(10)
                            .subscribe(( /**
                     * @return {?}
                     */function () { return ( /** @type {?} */(_this))._containInsideBoundaryOnResize(); }));
                    }
                    return ( /** @type {?} */(this));
                };
                /**
                 * Removes the dragging functionality from the DOM element.
                 * @return {?}
                 */
                DragRef.prototype.dispose = function () {
                    this._removeRootElementListeners(this._rootElement);
                    // Do this check before removing from the registry since it'll
                    // stop being considered as dragged once it is removed.
                    if (this.isDragging()) {
                        // Since we move out the element to the end of the body while it's being
                        // dragged, we have to make sure that it's removed if it gets destroyed.
                        removeElement(this._rootElement);
                    }
                    this._destroyPreview();
                    this._destroyPlaceholder();
                    this._dragDropRegistry.removeDragItem(this);
                    this._removeSubscriptions();
                    this.beforeStarted.complete();
                    this.started.complete();
                    this.released.complete();
                    this.ended.complete();
                    this.entered.complete();
                    this.exited.complete();
                    this.dropped.complete();
                    this._moveEvents.complete();
                    this._handles = [];
                    this._disabledHandles.clear();
                    this._dropContainer = undefined;
                    this._boundaryElement = this._rootElement = this._placeholderTemplate =
                        this._previewTemplate = this._nextSibling = ( /** @type {?} */(null));
                };
                /**
                 * Checks whether the element is currently being dragged.
                 * @return {?}
                 */
                DragRef.prototype.isDragging = function () {
                    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);
                };
                /**
                 * Resets a standalone drag item to its initial position.
                 * @return {?}
                 */
                DragRef.prototype.reset = function () {
                    this._rootElement.style.transform = this._initialTransform || '';
                    this._activeTransform = { x: 0, y: 0 };
                    this._passiveTransform = { x: 0, y: 0 };
                };
                /**
                 * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.
                 * @param {?} handle Handle element that should be disabled.
                 * @return {?}
                 */
                DragRef.prototype.disableHandle = function (handle) {
                    if (this._handles.indexOf(handle) > -1) {
                        this._disabledHandles.add(handle);
                    }
                };
                /**
                 * Enables a handle, if it has been disabled.
                 * @param {?} handle Handle element to be enabled.
                 * @return {?}
                 */
                DragRef.prototype.enableHandle = function (handle) {
                    this._disabledHandles.delete(handle);
                };
                /**
                 * Sets the layout direction of the draggable item.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} direction
                 * @return {THIS}
                 */
                DragRef.prototype.withDirection = function (direction) {
                    ( /** @type {?} */(this))._direction = direction;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the container that the item is part of.
                 * @param {?} container
                 * @return {?}
                 */
                DragRef.prototype._withDropContainer = function (container) {
                    this._dropContainer = container;
                };
                /**
                 * Gets the current position in pixels the draggable outside of a drop container.
                 * @return {?}
                 */
                DragRef.prototype.getFreeDragPosition = function () {
                    /** @type {?} */
                    var position = this.isDragging() ? this._activeTransform : this._passiveTransform;
                    return { x: position.x, y: position.y };
                };
                /**
                 * Sets the current position in pixels the draggable outside of a drop container.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} value New position to be set.
                 * @return {THIS}
                 */
                DragRef.prototype.setFreeDragPosition = function (value) {
                    ( /** @type {?} */(this))._activeTransform = { x: 0, y: 0 };
                    ( /** @type {?} */(this))._passiveTransform.x = value.x;
                    ( /** @type {?} */(this))._passiveTransform.y = value.y;
                    if (!( /** @type {?} */(this))._dropContainer) {
                        ( /** @type {?} */(this))._applyRootElementTransform(value.x, value.y);
                    }
                    return ( /** @type {?} */(this));
                };
                /**
                 * Updates the item's sort order based on the last-known pointer position.
                 * @return {?}
                 */
                DragRef.prototype._sortFromLastPointerPosition = function () {
                    /** @type {?} */
                    var position = this._pointerPositionAtLastDirectionChange;
                    if (position && this._dropContainer) {
                        this._updateActiveDropContainer(position);
                    }
                };
                /**
                 * Unsubscribes from the global subscriptions.
                 * @private
                 * @return {?}
                 */
                DragRef.prototype._removeSubscriptions = function () {
                    this._pointerMoveSubscription.unsubscribe();
                    this._pointerUpSubscription.unsubscribe();
                    this._scrollSubscription.unsubscribe();
                };
                /**
                 * Destroys the preview element and its ViewRef.
                 * @private
                 * @return {?}
                 */
                DragRef.prototype._destroyPreview = function () {
                    if (this._preview) {
                        removeElement(this._preview);
                    }
                    if (this._previewRef) {
                        this._previewRef.destroy();
                    }
                    this._preview = this._previewRef = ( /** @type {?} */(null));
                };
                /**
                 * Destroys the placeholder element and its ViewRef.
                 * @private
                 * @return {?}
                 */
                DragRef.prototype._destroyPlaceholder = function () {
                    if (this._placeholder) {
                        removeElement(this._placeholder);
                    }
                    if (this._placeholderRef) {
                        this._placeholderRef.destroy();
                    }
                    this._placeholder = this._placeholderRef = ( /** @type {?} */(null));
                };
                /**
                 * Clears subscriptions and stops the dragging sequence.
                 * @private
                 * @param {?} event Browser event object that ended the sequence.
                 * @return {?}
                 */
                DragRef.prototype._endDragSequence = function (event) {
                    var _this = this;
                    // Note that here we use `isDragging` from the service, rather than from `this`.
                    // The difference is that the one from the service reflects whether a dragging sequence
                    // has been initiated, whereas the one on `this` includes whether the user has passed
                    // the minimum dragging threshold.
                    if (!this._dragDropRegistry.isDragging(this)) {
                        return;
                    }
                    this._removeSubscriptions();
                    this._dragDropRegistry.stopDragging(this);
                    this._toggleNativeDragInteractions();
                    if (this._handles) {
                        this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;
                    }
                    if (!this._hasStartedDragging) {
                        return;
                    }
                    this.released.next({ source: this });
                    if (this._dropContainer) {
                        // Stop scrolling immediately, instead of waiting for the animation to finish.
                        this._dropContainer._stopScrolling();
                        this._animatePreviewToPlaceholder().then(( /**
                         * @return {?}
                         */function () {
                            _this._cleanupDragArtifacts(event);
                            _this._cleanupCachedDimensions();
                            _this._dragDropRegistry.stopDragging(_this);
                        }));
                    }
                    else {
                        // Convert the active transform into a passive one. This means that next time
                        // the user starts dragging the item, its position will be calculated relatively
                        // to the new passive transform.
                        this._passiveTransform.x = this._activeTransform.x;
                        this._passiveTransform.y = this._activeTransform.y;
                        this._ngZone.run(( /**
                         * @return {?}
                         */function () {
                            _this.ended.next({
                                source: _this,
                                distance: _this._getDragDistance(_this._getPointerPositionOnPage(event))
                            });
                        }));
                        this._cleanupCachedDimensions();
                        this._dragDropRegistry.stopDragging(this);
                    }
                };
                /**
                 * Starts the dragging sequence.
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                DragRef.prototype._startDragSequence = function (event) {
                    // Emit the event on the item before the one on the container.
                    this.started.next({ source: this });
                    if (isTouchEvent(event)) {
                        this._lastTouchEventTime = Date.now();
                    }
                    this._toggleNativeDragInteractions();
                    if (this._dropContainer) {
                        /** @type {?} */
                        var element = this._rootElement;
                        // Grab the `nextSibling` before the preview and placeholder
                        // have been created so we don't get the preview by accident.
                        this._nextSibling = element.nextSibling;
                        /** @type {?} */
                        var preview = this._preview = this._createPreviewElement();
                        /** @type {?} */
                        var placeholder = this._placeholder = this._createPlaceholderElement();
                        // We move the element out at the end of the body and we make it hidden, because keeping it in
                        // place will throw off the consumer's `:last-child` selectors. We can't remove the element
                        // from the DOM completely, because iOS will stop firing all subsequent events in the chain.
                        element.style.display = 'none';
                        this._document.body.appendChild(( /** @type {?} */(element.parentNode)).replaceChild(placeholder, element));
                        getPreviewInsertionPoint(this._document).appendChild(preview);
                        this._dropContainer.start();
                    }
                };
                /**
                 * Sets up the different variables and subscriptions
                 * that will be necessary for the dragging sequence.
                 * @private
                 * @param {?} referenceElement Element that started the drag sequence.
                 * @param {?} event Browser event object that started the sequence.
                 * @return {?}
                 */
                DragRef.prototype._initializeDragSequence = function (referenceElement, event) {
                    var _this = this;
                    // Always stop propagation for the event that initializes
                    // the dragging sequence, in order to prevent it from potentially
                    // starting another sequence for a draggable parent somewhere up the DOM tree.
                    event.stopPropagation();
                    /** @type {?} */
                    var isDragging = this.isDragging();
                    /** @type {?} */
                    var isTouchSequence = isTouchEvent(event);
                    /** @type {?} */
                    var isAuxiliaryMouseButton = !isTouchSequence && (( /** @type {?} */(event))).button !== 0;
                    /** @type {?} */
                    var rootElement = this._rootElement;
                    /** @type {?} */
                    var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&
                        this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();
                    // If the event started from an element with the native HTML drag&drop, it'll interfere
                    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action
                    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but
                    // it's flaky and it fails if the user drags it away quickly. Also note that we only want
                    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`
                    // events from firing on touch devices.
                    if (event.target && (( /** @type {?} */(event.target))).draggable && event.type === 'mousedown') {
                        event.preventDefault();
                    }
                    // Abort if the user is already dragging or is using a mouse button other than the primary one.
                    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {
                        return;
                    }
                    // If we've got handles, we need to disable the tap highlight on the entire root element,
                    // otherwise iOS will still add it, even though all the drag interactions on the handle
                    // are disabled.
                    if (this._handles.length) {
                        this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;
                        rootElement.style.webkitTapHighlightColor = 'transparent';
                    }
                    this._hasStartedDragging = this._hasMoved = false;
                    this._initialContainer = ( /** @type {?} */(this._dropContainer));
                    // Avoid multiple subscriptions and memory leaks when multi touch
                    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)
                    this._removeSubscriptions();
                    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);
                    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);
                    this._scrollSubscription = this._dragDropRegistry.scroll.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(null)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._scrollPosition = _this._viewportRuler.getViewportScrollPosition();
                    }));
                    if (this._boundaryElement) {
                        this._boundaryRect = this._boundaryElement.getBoundingClientRect();
                    }
                    // If we have a custom preview template, the element won't be visible anyway so we avoid the
                    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.
                    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?
                        { x: 0, y: 0 } :
                        this._getPointerPositionInElement(referenceElement, event);
                    /** @type {?} */
                    var pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);
                    this._pointerDirectionDelta = { x: 0, y: 0 };
                    this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };
                    this._dragStartTime = Date.now();
                    this._dragDropRegistry.startDragging(this, event);
                };
                /**
                 * Cleans up the DOM artifacts that were added to facilitate the element being dragged.
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                DragRef.prototype._cleanupDragArtifacts = function (event) {
                    var _this = this;
                    // Restore the element's visibility and insert it at its old position in the DOM.
                    // It's important that we maintain the position, because moving the element around in the DOM
                    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,
                    // while moving the existing elements in all other cases.
                    this._rootElement.style.display = '';
                    if (this._nextSibling) {
                        ( /** @type {?} */(this._nextSibling.parentNode)).insertBefore(this._rootElement, this._nextSibling);
                    }
                    else {
                        Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(this._initialContainer.element).appendChild(this._rootElement);
                    }
                    this._destroyPreview();
                    this._destroyPlaceholder();
                    this._boundaryRect = this._previewRect = undefined;
                    // Re-enter the NgZone since we bound `document` events on the outside.
                    this._ngZone.run(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var container = ( /** @type {?} */(_this._dropContainer));
                        /** @type {?} */
                        var currentIndex = container.getItemIndex(_this);
                        /** @type {?} */
                        var pointerPosition = _this._getPointerPositionOnPage(event);
                        /** @type {?} */
                        var distance = _this._getDragDistance(_this._getPointerPositionOnPage(event));
                        /** @type {?} */
                        var isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);
                        _this.ended.next({ source: _this, distance: distance });
                        _this.dropped.next({
                            item: _this,
                            currentIndex: currentIndex,
                            previousIndex: _this._initialContainer.getItemIndex(_this),
                            container: container,
                            previousContainer: _this._initialContainer,
                            isPointerOverContainer: isPointerOverContainer,
                            distance: distance
                        });
                        container.drop(_this, currentIndex, _this._initialContainer, isPointerOverContainer, distance);
                        _this._dropContainer = _this._initialContainer;
                    }));
                };
                /**
                 * Updates the item's position in its drop container, or moves it
                 * into a new one, depending on its current drag position.
                 * @private
                 * @param {?} __0
                 * @return {?}
                 */
                DragRef.prototype._updateActiveDropContainer = function (_b) {
                    var _this = this;
                    var x = _b.x, y = _b.y;
                    // Drop container that draggable has been moved into.
                    /** @type {?} */
                    var newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);
                    // If we couldn't find a new container to move the item into, and the item has left its
                    // initial container, check whether the it's over the initial container. This handles the
                    // case where two containers are connected one way and the user tries to undo dragging an
                    // item into a new container.
                    if (!newContainer && this._dropContainer !== this._initialContainer &&
                        this._initialContainer._isOverContainer(x, y)) {
                        newContainer = this._initialContainer;
                    }
                    if (newContainer && newContainer !== this._dropContainer) {
                        this._ngZone.run(( /**
                         * @return {?}
                         */function () {
                            // Notify the old container that the item has left.
                            _this.exited.next({ item: _this, container: ( /** @type {?} */(_this._dropContainer)) });
                            ( /** @type {?} */(_this._dropContainer)).exit(_this);
                            // Notify the new container that the item has entered.
                            _this._dropContainer = ( /** @type {?} */(newContainer));
                            _this._dropContainer.enter(_this, x, y);
                            _this.entered.next({
                                item: _this,
                                container: ( /** @type {?} */(newContainer)),
                                currentIndex: ( /** @type {?} */(newContainer)).getItemIndex(_this)
                            });
                        }));
                    }
                    ( /** @type {?} */(this._dropContainer))._startScrollingIfNecessary(x, y);
                    ( /** @type {?} */(this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);
                    this._preview.style.transform =
                        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);
                };
                /**
                 * Creates the element that will be rendered next to the user's pointer
                 * and will be used as a preview of the element that is being dragged.
                 * @private
                 * @return {?}
                 */
                DragRef.prototype._createPreviewElement = function () {
                    /** @type {?} */
                    var previewConfig = this._previewTemplate;
                    /** @type {?} */
                    var previewTemplate = previewConfig ? previewConfig.template : null;
                    /** @type {?} */
                    var preview;
                    if (previewTemplate) {
                        /** @type {?} */
                        var viewRef = ( /** @type {?} */(previewConfig)).viewContainer.createEmbeddedView(previewTemplate, ( /** @type {?} */(previewConfig)).context);
                        preview = getRootNode(viewRef, this._document);
                        this._previewRef = viewRef;
                        preview.style.transform =
                            getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);
                    }
                    else {
                        /** @type {?} */
                        var element = this._rootElement;
                        /** @type {?} */
                        var elementRect = element.getBoundingClientRect();
                        preview = deepCloneNode(element);
                        preview.style.width = elementRect.width + "px";
                        preview.style.height = elementRect.height + "px";
                        preview.style.transform = getTransform(elementRect.left, elementRect.top);
                    }
                    extendStyles(preview.style, {
                        // It's important that we disable the pointer events on the preview, because
                        // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.
                        pointerEvents: 'none',
                        // We have to reset the margin, because can throw off positioning relative to the viewport.
                        margin: '0',
                        position: 'fixed',
                        top: '0',
                        left: '0',
                        zIndex: '1000'
                    });
                    toggleNativeDragInteractions(preview, false);
                    preview.classList.add('cdk-drag-preview');
                    preview.setAttribute('dir', this._direction);
                    return preview;
                };
                /**
                 * Animates the preview element from its current position to the location of the drop placeholder.
                 * @private
                 * @return {?} Promise that resolves when the animation completes.
                 */
                DragRef.prototype._animatePreviewToPlaceholder = function () {
                    var _this = this;
                    // If the user hasn't moved yet, the transitionend event won't fire.
                    if (!this._hasMoved) {
                        return Promise.resolve();
                    }
                    /** @type {?} */
                    var placeholderRect = this._placeholder.getBoundingClientRect();
                    // Apply the class that adds a transition to the preview.
                    this._preview.classList.add('cdk-drag-animating');
                    // Move the preview to the placeholder position.
                    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);
                    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since
                    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to
                    // apply its style, we take advantage of the available info to figure out whether we need to
                    // bind the event in the first place.
                    /** @type {?} */
                    var duration = getTransformTransitionDurationInMs(this._preview);
                    if (duration === 0) {
                        return Promise.resolve();
                    }
                    return this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        return new Promise(( /**
                         * @param {?} resolve
                         * @return {?}
                         */function (/**
                         * @param {?} resolve
                         * @return {?}
                         */ resolve) {
                            /** @type {?} */
                            var handler = ( /** @type {?} */((( /**
                             * @param {?} event
                             * @return {?}
                             */function (event) {
                                if (!event || (event.target === _this._preview && event.propertyName === 'transform')) {
                                    _this._preview.removeEventListener('transitionend', handler);
                                    resolve();
                                    clearTimeout(timeout);
                                }
                            }))));
                            // If a transition is short enough, the browser might not fire the `transitionend` event.
                            // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll
                            // fire if the transition hasn't completed when it was supposed to.
                            /** @type {?} */
                            var timeout = setTimeout(( /** @type {?} */(handler)), duration * 1.5);
                            _this._preview.addEventListener('transitionend', handler);
                        }));
                    }));
                };
                /**
                 * Creates an element that will be shown instead of the current element while dragging.
                 * @private
                 * @return {?}
                 */
                DragRef.prototype._createPlaceholderElement = function () {
                    /** @type {?} */
                    var placeholderConfig = this._placeholderTemplate;
                    /** @type {?} */
                    var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;
                    /** @type {?} */
                    var placeholder;
                    if (placeholderTemplate) {
                        this._placeholderRef = ( /** @type {?} */(placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, ( /** @type {?} */(placeholderConfig)).context);
                        placeholder = getRootNode(this._placeholderRef, this._document);
                    }
                    else {
                        placeholder = deepCloneNode(this._rootElement);
                    }
                    placeholder.classList.add('cdk-drag-placeholder');
                    return placeholder;
                };
                /**
                 * Figures out the coordinates at which an element was picked up.
                 * @private
                 * @param {?} referenceElement Element that initiated the dragging.
                 * @param {?} event Event that initiated the dragging.
                 * @return {?}
                 */
                DragRef.prototype._getPointerPositionInElement = function (referenceElement, event) {
                    /** @type {?} */
                    var elementRect = this._rootElement.getBoundingClientRect();
                    /** @type {?} */
                    var handleElement = referenceElement === this._rootElement ? null : referenceElement;
                    /** @type {?} */
                    var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;
                    /** @type {?} */
                    var point = isTouchEvent(event) ? event.targetTouches[0] : event;
                    /** @type {?} */
                    var x = point.pageX - referenceRect.left - this._scrollPosition.left;
                    /** @type {?} */
                    var y = point.pageY - referenceRect.top - this._scrollPosition.top;
                    return {
                        x: referenceRect.left - elementRect.left + x,
                        y: referenceRect.top - elementRect.top + y
                    };
                };
                /**
                 * Determines the point of the page that was touched by the user.
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                DragRef.prototype._getPointerPositionOnPage = function (event) {
                    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.
                    /** @type {?} */
                    var point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;
                    return {
                        x: point.pageX - this._scrollPosition.left,
                        y: point.pageY - this._scrollPosition.top
                    };
                };
                /**
                 * Gets the pointer position on the page, accounting for any position constraints.
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                DragRef.prototype._getConstrainedPointerPosition = function (event) {
                    /** @type {?} */
                    var point = this._getPointerPositionOnPage(event);
                    /** @type {?} */
                    var constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;
                    /** @type {?} */
                    var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;
                    if (this.lockAxis === 'x' || dropContainerLock === 'x') {
                        constrainedPoint.y = this._pickupPositionOnPage.y;
                    }
                    else if (this.lockAxis === 'y' || dropContainerLock === 'y') {
                        constrainedPoint.x = this._pickupPositionOnPage.x;
                    }
                    if (this._boundaryRect) {
                        var _b = this._pickupPositionInElement, pickupX = _b.x, pickupY = _b.y;
                        /** @type {?} */
                        var boundaryRect = this._boundaryRect;
                        /** @type {?} */
                        var previewRect = ( /** @type {?} */(this._previewRect));
                        /** @type {?} */
                        var minY = boundaryRect.top + pickupY;
                        /** @type {?} */
                        var maxY = boundaryRect.bottom - (previewRect.height - pickupY);
                        /** @type {?} */
                        var minX = boundaryRect.left + pickupX;
                        /** @type {?} */
                        var maxX = boundaryRect.right - (previewRect.width - pickupX);
                        constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);
                        constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);
                    }
                    return constrainedPoint;
                };
                /**
                 * Updates the current drag delta, based on the user's current pointer position on the page.
                 * @private
                 * @param {?} pointerPositionOnPage
                 * @return {?}
                 */
                DragRef.prototype._updatePointerDirectionDelta = function (pointerPositionOnPage) {
                    var x = pointerPositionOnPage.x, y = pointerPositionOnPage.y;
                    /** @type {?} */
                    var delta = this._pointerDirectionDelta;
                    /** @type {?} */
                    var positionSinceLastChange = this._pointerPositionAtLastDirectionChange;
                    // Amount of pixels the user has dragged since the last time the direction changed.
                    /** @type {?} */
                    var changeX = Math.abs(x - positionSinceLastChange.x);
                    /** @type {?} */
                    var changeY = Math.abs(y - positionSinceLastChange.y);
                    // Because we handle pointer events on a per-pixel basis, we don't want the delta
                    // to change for every pixel, otherwise anything that depends on it can look erratic.
                    // To make the delta more consistent, we track how much the user has moved since the last
                    // delta change and we only update it after it has reached a certain threshold.
                    if (changeX > this._config.pointerDirectionChangeThreshold) {
                        delta.x = x > positionSinceLastChange.x ? 1 : -1;
                        positionSinceLastChange.x = x;
                    }
                    if (changeY > this._config.pointerDirectionChangeThreshold) {
                        delta.y = y > positionSinceLastChange.y ? 1 : -1;
                        positionSinceLastChange.y = y;
                    }
                    return delta;
                };
                /**
                 * Toggles the native drag interactions, based on how many handles are registered.
                 * @private
                 * @return {?}
                 */
                DragRef.prototype._toggleNativeDragInteractions = function () {
                    if (!this._rootElement || !this._handles) {
                        return;
                    }
                    /** @type {?} */
                    var shouldEnable = this._handles.length > 0 || !this.isDragging();
                    if (shouldEnable !== this._nativeInteractionsEnabled) {
                        this._nativeInteractionsEnabled = shouldEnable;
                        toggleNativeDragInteractions(this._rootElement, shouldEnable);
                    }
                };
                /**
                 * Removes the manually-added event listeners from the root element.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                DragRef.prototype._removeRootElementListeners = function (element) {
                    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);
                    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);
                };
                /**
                 * Applies a `transform` to the root element, taking into account any existing transforms on it.
                 * @private
                 * @param {?} x New transform value along the X axis.
                 * @param {?} y New transform value along the Y axis.
                 * @return {?}
                 */
                DragRef.prototype._applyRootElementTransform = function (x, y) {
                    /** @type {?} */
                    var transform = getTransform(x, y);
                    // Cache the previous transform amount only after the first drag sequence, because
                    // we don't want our own transforms to stack on top of each other.
                    if (this._initialTransform == null) {
                        this._initialTransform = this._rootElement.style.transform || '';
                    }
                    // Preserve the previous `transform` value, if there was one. Note that we apply our own
                    // transform before the user's, because things like rotation can affect which direction
                    // the element will be translated towards.
                    this._rootElement.style.transform = this._initialTransform ?
                        transform + ' ' + this._initialTransform : transform;
                };
                /**
                 * Gets the distance that the user has dragged during the current drag sequence.
                 * @private
                 * @param {?} currentPosition Current position of the user's pointer.
                 * @return {?}
                 */
                DragRef.prototype._getDragDistance = function (currentPosition) {
                    /** @type {?} */
                    var pickupPosition = this._pickupPositionOnPage;
                    if (pickupPosition) {
                        return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };
                    }
                    return { x: 0, y: 0 };
                };
                /**
                 * Cleans up any cached element dimensions that we don't need after dragging has stopped.
                 * @private
                 * @return {?}
                 */
                DragRef.prototype._cleanupCachedDimensions = function () {
                    this._boundaryRect = this._previewRect = undefined;
                };
                /**
                 * Checks whether the element is still inside its boundary after the viewport has been resized.
                 * If not, the position is adjusted so that the element fits again.
                 * @private
                 * @return {?}
                 */
                DragRef.prototype._containInsideBoundaryOnResize = function () {
                    var _b = this._passiveTransform, x = _b.x, y = _b.y;
                    if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {
                        return;
                    }
                    /** @type {?} */
                    var boundaryRect = this._boundaryElement.getBoundingClientRect();
                    /** @type {?} */
                    var elementRect = this._rootElement.getBoundingClientRect();
                    /** @type {?} */
                    var leftOverflow = boundaryRect.left - elementRect.left;
                    /** @type {?} */
                    var rightOverflow = elementRect.right - boundaryRect.right;
                    /** @type {?} */
                    var topOverflow = boundaryRect.top - elementRect.top;
                    /** @type {?} */
                    var bottomOverflow = elementRect.bottom - boundaryRect.bottom;
                    // If the element has become wider than the boundary, we can't
                    // do much to make it fit so we just anchor it to the left.
                    if (boundaryRect.width > elementRect.width) {
                        if (leftOverflow > 0) {
                            x += leftOverflow;
                        }
                        if (rightOverflow > 0) {
                            x -= rightOverflow;
                        }
                    }
                    else {
                        x = 0;
                    }
                    // If the element has become taller than the boundary, we can't
                    // do much to make it fit so we just anchor it to the top.
                    if (boundaryRect.height > elementRect.height) {
                        if (topOverflow > 0) {
                            y += topOverflow;
                        }
                        if (bottomOverflow > 0) {
                            y -= bottomOverflow;
                        }
                    }
                    else {
                        y = 0;
                    }
                    if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {
                        this.setFreeDragPosition({ y: y, x: x });
                    }
                };
                return DragRef;
            }());
            /**
             * Gets a 3d `transform` that can be applied to an element.
             * @param {?} x Desired position of the element along the X axis.
             * @param {?} y Desired position of the element along the Y axis.
             * @return {?}
             */
            function getTransform(x, y) {
                // Round the transforms since some browsers will
                // blur the elements for sub-pixel transforms.
                return "translate3d(" + Math.round(x) + "px, " + Math.round(y) + "px, 0)";
            }
            /**
             * Creates a deep clone of an element.
             * @param {?} node
             * @return {?}
             */
            function deepCloneNode(node) {
                /** @type {?} */
                var clone = ( /** @type {?} */(node.cloneNode(true)));
                /** @type {?} */
                var descendantsWithId = clone.querySelectorAll('[id]');
                /** @type {?} */
                var descendantCanvases = node.querySelectorAll('canvas');
                // Remove the `id` to avoid having multiple elements with the same id on the page.
                clone.removeAttribute('id');
                for (var i = 0; i < descendantsWithId.length; i++) {
                    descendantsWithId[i].removeAttribute('id');
                }
                // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.
                // We match up the cloned canvas to their sources using their index in the DOM.
                if (descendantCanvases.length) {
                    /** @type {?} */
                    var cloneCanvases = clone.querySelectorAll('canvas');
                    for (var i = 0; i < descendantCanvases.length; i++) {
                        /** @type {?} */
                        var correspondingCloneContext = cloneCanvases[i].getContext('2d');
                        if (correspondingCloneContext) {
                            correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);
                        }
                    }
                }
                return clone;
            }
            /**
             * Clamps a value between a minimum and a maximum.
             * @param {?} value
             * @param {?} min
             * @param {?} max
             * @return {?}
             */
            function clamp(value, min, max) {
                return Math.max(min, Math.min(max, value));
            }
            /**
             * Helper to remove an element from the DOM and to do all the necessary null checks.
             * @param {?} element Element to be removed.
             * @return {?}
             */
            function removeElement(element) {
                if (element && element.parentNode) {
                    element.parentNode.removeChild(element);
                }
            }
            /**
             * Determines whether an event is a touch event.
             * @param {?} event
             * @return {?}
             */
            function isTouchEvent(event) {
                // This function is called for every pixel that the user has dragged so we need it to be
                // as fast as possible. Since we only bind mouse events and touch events, we can assume
                // that if the event's name starts with `t`, it's a touch event.
                return event.type[0] === 't';
            }
            /**
             * Gets the element into which the drag preview should be inserted.
             * @param {?} documentRef
             * @return {?}
             */
            function getPreviewInsertionPoint(documentRef) {
                // We can't use the body if the user is in fullscreen mode,
                // because the preview will render under the fullscreen element.
                // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.
                return documentRef.fullscreenElement ||
                    documentRef.webkitFullscreenElement ||
                    documentRef.mozFullScreenElement ||
                    documentRef.msFullscreenElement ||
                    documentRef.body;
            }
            /**
             * Gets the root HTML element of an embedded view.
             * If the root is not an HTML element it gets wrapped in one.
             * @param {?} viewRef
             * @param {?} _document
             * @return {?}
             */
            function getRootNode(viewRef, _document) {
                /** @type {?} */
                var rootNode = viewRef.rootNodes[0];
                if (rootNode.nodeType !== _document.ELEMENT_NODE) {
                    /** @type {?} */
                    var wrapper = _document.createElement('div');
                    wrapper.appendChild(rootNode);
                    return wrapper;
                }
                return ( /** @type {?} */(rootNode));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Moves an item one index in an array to another.
             * @template T
             * @param {?} array Array in which to move the item.
             * @param {?} fromIndex Starting index of the item.
             * @param {?} toIndex Index to which the item should be moved.
             * @return {?}
             */
            function moveItemInArray(array, fromIndex, toIndex) {
                /** @type {?} */
                var from = clamp$1(fromIndex, array.length - 1);
                /** @type {?} */
                var to = clamp$1(toIndex, array.length - 1);
                if (from === to) {
                    return;
                }
                /** @type {?} */
                var target = array[from];
                /** @type {?} */
                var delta = to < from ? -1 : 1;
                for (var i = from; i !== to; i += delta) {
                    array[i] = array[i + delta];
                }
                array[to] = target;
            }
            /**
             * Moves an item from one array to another.
             * @template T
             * @param {?} currentArray Array from which to transfer the item.
             * @param {?} targetArray Array into which to put the item.
             * @param {?} currentIndex Index of the item in its current array.
             * @param {?} targetIndex Index at which to insert the item.
             * @return {?}
             */
            function transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {
                /** @type {?} */
                var from = clamp$1(currentIndex, currentArray.length - 1);
                /** @type {?} */
                var to = clamp$1(targetIndex, targetArray.length);
                if (currentArray.length) {
                    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);
                }
            }
            /**
             * Copies an item from one array to another, leaving it in its
             * original position in current array.
             * @template T
             * @param {?} currentArray Array from which to copy the item.
             * @param {?} targetArray Array into which is copy the item.
             * @param {?} currentIndex Index of the item in its current array.
             * @param {?} targetIndex Index at which to insert the item.
             *
             * @return {?}
             */
            function copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {
                /** @type {?} */
                var to = clamp$1(targetIndex, targetArray.length);
                if (currentArray.length) {
                    targetArray.splice(to, 0, currentArray[currentIndex]);
                }
            }
            /**
             * Clamps a number between zero and a maximum.
             * @param {?} value
             * @param {?} max
             * @return {?}
             */
            function clamp$1(value, max) {
                return Math.max(0, Math.min(max, value));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Counter used to generate unique ids for drop refs.
             * @type {?}
             */
            var _uniqueIdCounter = 0;
            /**
             * Proximity, as a ratio to width/height, at which a
             * dragged item will affect the drop container.
             * @type {?}
             */
            var DROP_PROXIMITY_THRESHOLD = 0.05;
            /**
             * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the
             * viewport. The value comes from trying it out manually until it feels right.
             * @type {?}
             */
            var SCROLL_PROXIMITY_THRESHOLD = 0.05;
            /**
             * Number of pixels to scroll for each frame when auto-scrolling an element.
             * The value comes from trying it out manually until it feels right.
             * @type {?}
             */
            var AUTO_SCROLL_STEP = 2;
            /**
             * Reference to a drop list. Used to manipulate or dispose of the container.
             * \@docs-private
             * @template T
             */
            var DropListRef = /** @class */ (function () {
                /**
                 * @param {?} element
                 * @param {?} _dragDropRegistry
                 * @param {?} _document
                 * @param {?=} _ngZone
                 * @param {?=} _viewportRuler
                 */
                function DropListRef(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {
                    var _this = this;
                    this._dragDropRegistry = _dragDropRegistry;
                    this._ngZone = _ngZone;
                    this._viewportRuler = _viewportRuler;
                    /**
                     * Unique ID for the drop list.
                     * @deprecated No longer being used. To be removed.
                     * \@breaking-change 8.0.0
                     */
                    this.id = "cdk-drop-list-ref-" + _uniqueIdCounter++;
                    /**
                     * Whether starting a dragging sequence from this container is disabled.
                     */
                    this.disabled = false;
                    /**
                     * Whether sorting items within the list is disabled.
                     */
                    this.sortingDisabled = false;
                    /**
                     * Whether auto-scrolling the view when the user
                     * moves their pointer close to the edges is disabled.
                     */
                    this.autoScrollDisabled = false;
                    /**
                     * Function that is used to determine whether an item
                     * is allowed to be moved into a drop container.
                     */
                    this.enterPredicate = ( /**
                     * @return {?}
                     */function () { return true; });
                    /**
                     * Emits right before dragging has started.
                     */
                    this.beforeStarted = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits when the user has moved a new drag item into this container.
                     */
                    this.entered = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits when the user removes an item from the container
                     * by dragging it into another container.
                     */
                    this.exited = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits when the user drops an item inside the container.
                     */
                    this.dropped = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits as the user is swapping items while actively dragging.
                     */
                    this.sorted = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Whether an item in the list is being dragged.
                     */
                    this._isDragging = false;
                    /**
                     * Cache of the dimensions of all the items inside the container.
                     */
                    this._itemPositions = [];
                    /**
                     * Keeps track of the container's scroll position.
                     */
                    this._scrollPosition = { top: 0, left: 0 };
                    /**
                     * Keeps track of the scroll position of the viewport.
                     */
                    this._viewportScrollPosition = { top: 0, left: 0 };
                    /**
                     * Keeps track of the item that was last swapped with the dragged item, as
                     * well as what direction the pointer was moving in when the swap occured.
                     */
                    this._previousSwap = { drag: ( /** @type {?} */(null)), delta: 0 };
                    /**
                     * Drop lists that are connected to the current one.
                     */
                    this._siblings = [];
                    /**
                     * Direction in which the list is oriented.
                     */
                    this._orientation = 'vertical';
                    /**
                     * Connected siblings that currently have a dragged item.
                     */
                    this._activeSiblings = new Set();
                    /**
                     * Layout direction of the drop list.
                     */
                    this._direction = 'ltr';
                    /**
                     * Subscription to the window being scrolled.
                     */
                    this._viewportScrollSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
                    /**
                     * Vertical direction in which the list is currently scrolling.
                     */
                    this._verticalScrollDirection = 0 /* NONE */;
                    /**
                     * Horizontal direction in which the list is currently scrolling.
                     */
                    this._horizontalScrollDirection = 0 /* NONE */;
                    /**
                     * Used to signal to the current auto-scroll sequence when to stop.
                     */
                    this._stopScrollTimers = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Handles the container being scrolled. Has to be an arrow function to preserve the context.
                     */
                    this._handleScroll = ( /**
                     * @return {?}
                     */function () {
                        if (!_this.isDragging()) {
                            return;
                        }
                        /** @type {?} */
                        var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(_this.element);
                        _this._updateAfterScroll(_this._scrollPosition, element.scrollTop, element.scrollLeft);
                    });
                    /**
                     * Starts the interval that'll auto-scroll the element.
                     */
                    this._startScrollInterval = ( /**
                     * @return {?}
                     */function () {
                        _this._stopScrolling();
                        Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["interval"])(0, rxjs__WEBPACK_IMPORTED_MODULE_2__["animationFrameScheduler"])
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(_this._stopScrollTimers))
                            .subscribe(( /**
                     * @return {?}
                     */function () {
                            /** @type {?} */
                            var node = _this._scrollNode;
                            if (_this._verticalScrollDirection === 1 /* UP */) {
                                incrementVerticalScroll(node, -AUTO_SCROLL_STEP);
                            }
                            else if (_this._verticalScrollDirection === 2 /* DOWN */) {
                                incrementVerticalScroll(node, AUTO_SCROLL_STEP);
                            }
                            if (_this._horizontalScrollDirection === 1 /* LEFT */) {
                                incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);
                            }
                            else if (_this._horizontalScrollDirection === 2 /* RIGHT */) {
                                incrementHorizontalScroll(node, AUTO_SCROLL_STEP);
                            }
                        }));
                    });
                    /** @type {?} */
                    var nativeNode = this.element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(element);
                    this._shadowRoot = getShadowRoot(nativeNode) || _document;
                    _dragDropRegistry.registerDropContainer(this);
                }
                /**
                 * Removes the drop list functionality from the DOM element.
                 * @return {?}
                 */
                DropListRef.prototype.dispose = function () {
                    this._stopScrolling();
                    this._stopScrollTimers.complete();
                    this._removeListeners();
                    this.beforeStarted.complete();
                    this.entered.complete();
                    this.exited.complete();
                    this.dropped.complete();
                    this.sorted.complete();
                    this._activeSiblings.clear();
                    this._scrollNode = ( /** @type {?} */(null));
                    this._dragDropRegistry.removeDropContainer(this);
                };
                /**
                 * Whether an item from this list is currently being dragged.
                 * @return {?}
                 */
                DropListRef.prototype.isDragging = function () {
                    return this._isDragging;
                };
                /**
                 * Starts dragging an item.
                 * @return {?}
                 */
                DropListRef.prototype.start = function () {
                    var _this = this;
                    /** @type {?} */
                    var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(this.element);
                    this.beforeStarted.next();
                    this._isDragging = true;
                    this._cacheItems();
                    this._siblings.forEach(( /**
                     * @param {?} sibling
                     * @return {?}
                     */function (/**
                     * @param {?} sibling
                     * @return {?}
                     */ sibling) { return sibling._startReceiving(_this); }));
                    this._removeListeners();
                    // @breaking-change 9.0.0 Remove check for _ngZone once it's marked as a required param.
                    if (this._ngZone) {
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () { return element.addEventListener('scroll', _this._handleScroll); }));
                    }
                    else {
                        element.addEventListener('scroll', this._handleScroll);
                    }
                    // @breaking-change 9.0.0 Remove check for _viewportRuler once it's marked as a required param.
                    if (this._viewportRuler) {
                        this._listenToScrollEvents();
                    }
                };
                /**
                 * Emits an event to indicate that the user moved an item into the container.
                 * @param {?} item Item that was moved into the container.
                 * @param {?} pointerX Position of the item along the X axis.
                 * @param {?} pointerY Position of the item along the Y axis.
                 * @return {?}
                 */
                DropListRef.prototype.enter = function (item, pointerX, pointerY) {
                    this.start();
                    // If sorting is disabled, we want the item to return to its starting
                    // position if the user is returning it to its initial container.
                    /** @type {?} */
                    var newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;
                    if (newIndex === -1) {
                        // We use the coordinates of where the item entered the drop
                        // zone to figure out at which index it should be inserted.
                        newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);
                    }
                    /** @type {?} */
                    var activeDraggables = this._activeDraggables;
                    /** @type {?} */
                    var currentIndex = activeDraggables.indexOf(item);
                    /** @type {?} */
                    var placeholder = item.getPlaceholderElement();
                    /** @type {?} */
                    var newPositionReference = activeDraggables[newIndex];
                    // If the item at the new position is the same as the item that is being dragged,
                    // it means that we're trying to restore the item to its initial position. In this
                    // case we should use the next item from the list as the reference.
                    if (newPositionReference === item) {
                        newPositionReference = activeDraggables[newIndex + 1];
                    }
                    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it
                    // into another container and back again), we have to ensure that it isn't duplicated.
                    if (currentIndex > -1) {
                        activeDraggables.splice(currentIndex, 1);
                    }
                    // Don't use items that are being dragged as a reference, because
                    // their element has been moved down to the bottom of the body.
                    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {
                        /** @type {?} */
                        var element = newPositionReference.getRootElement();
                        ( /** @type {?} */(element.parentElement)).insertBefore(placeholder, element);
                        activeDraggables.splice(newIndex, 0, item);
                    }
                    else {
                        Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(this.element).appendChild(placeholder);
                        activeDraggables.push(item);
                    }
                    // The transform needs to be cleared so it doesn't throw off the measurements.
                    placeholder.style.transform = '';
                    // Note that the positions were already cached when we called `start` above,
                    // but we need to refresh them since the amount of items has changed.
                    this._cacheItemPositions();
                    this.entered.next({ item: item, container: this, currentIndex: this.getItemIndex(item) });
                };
                /**
                 * Removes an item from the container after it was dragged into another container by the user.
                 * @param {?} item Item that was dragged out.
                 * @return {?}
                 */
                DropListRef.prototype.exit = function (item) {
                    this._reset();
                    this.exited.next({ item: item, container: this });
                };
                /**
                 * Drops an item into this container.
                 * \@breaking-change 9.0.0 `distance` parameter to become required.
                 * @param {?} item Item being dropped into the container.
                 * @param {?} currentIndex Index at which the item should be inserted.
                 * @param {?} previousContainer Container from which the item got dragged in.
                 * @param {?} isPointerOverContainer Whether the user's pointer was over the
                 *    container when the item was dropped.
                 * @param {?=} distance Distance the user has dragged since the start of the dragging sequence.
                 * @return {?}
                 */
                DropListRef.prototype.drop = function (item, currentIndex, previousContainer, isPointerOverContainer, distance) {
                    if (distance === void 0) { distance = { x: 0, y: 0 }; }
                    this._reset();
                    this.dropped.next({
                        item: item,
                        currentIndex: currentIndex,
                        previousIndex: previousContainer.getItemIndex(item),
                        container: this,
                        previousContainer: previousContainer,
                        isPointerOverContainer: isPointerOverContainer,
                        distance: distance
                    });
                };
                /**
                 * Sets the draggable items that are a part of this list.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} items Items that are a part of this list.
                 * @return {THIS}
                 */
                DropListRef.prototype.withItems = function (items) {
                    var _this = this;
                    ( /** @type {?} */(this))._draggables = items;
                    items.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (/**
                     * @param {?} item
                     * @return {?}
                     */ item) { return item._withDropContainer(( /** @type {?} */(_this))); }));
                    if (( /** @type {?} */(this)).isDragging()) {
                        ( /** @type {?} */(this))._cacheItems();
                    }
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the layout direction of the drop list.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} direction
                 * @return {THIS}
                 */
                DropListRef.prototype.withDirection = function (direction) {
                    ( /** @type {?} */(this))._direction = direction;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the containers that are connected to this one. When two or more containers are
                 * connected, the user will be allowed to transfer items between them.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} connectedTo Other containers that the current containers should be connected to.
                 * @return {THIS}
                 */
                DropListRef.prototype.connectedTo = function (connectedTo) {
                    ( /** @type {?} */(this))._siblings = connectedTo.slice();
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the orientation of the container.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} orientation New orientation for the container.
                 * @return {THIS}
                 */
                DropListRef.prototype.withOrientation = function (orientation) {
                    ( /** @type {?} */(this))._orientation = orientation;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Figures out the index of an item in the container.
                 * @param {?} item Item whose index should be determined.
                 * @return {?}
                 */
                DropListRef.prototype.getItemIndex = function (item) {
                    if (!this._isDragging) {
                        return this._draggables.indexOf(item);
                    }
                    // Items are sorted always by top/left in the cache, however they flow differently in RTL.
                    // The rest of the logic still stands no matter what orientation we're in, however
                    // we need to invert the array when determining the index.
                    /** @type {?} */
                    var items = this._orientation === 'horizontal' && this._direction === 'rtl' ?
                        this._itemPositions.slice().reverse() : this._itemPositions;
                    return findIndex(items, ( /**
                     * @param {?} currentItem
                     * @return {?}
                     */function (/**
                     * @param {?} currentItem
                     * @return {?}
                     */ currentItem) { return currentItem.drag === item; }));
                };
                /**
                 * Whether the list is able to receive the item that
                 * is currently being dragged inside a connected drop list.
                 * @return {?}
                 */
                DropListRef.prototype.isReceiving = function () {
                    return this._activeSiblings.size > 0;
                };
                /**
                 * Sorts an item inside the container based on its position.
                 * @param {?} item Item to be sorted.
                 * @param {?} pointerX Position of the item along the X axis.
                 * @param {?} pointerY Position of the item along the Y axis.
                 * @param {?} pointerDelta Direction in which the pointer is moving along each axis.
                 * @return {?}
                 */
                DropListRef.prototype._sortItem = function (item, pointerX, pointerY, pointerDelta) {
                    // Don't sort the item if sorting is disabled or it's out of range.
                    if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {
                        return;
                    }
                    /** @type {?} */
                    var siblings = this._itemPositions;
                    /** @type {?} */
                    var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);
                    if (newIndex === -1 && siblings.length > 0) {
                        return;
                    }
                    /** @type {?} */
                    var isHorizontal = this._orientation === 'horizontal';
                    /** @type {?} */
                    var currentIndex = findIndex(siblings, ( /**
                     * @param {?} currentItem
                     * @return {?}
                     */function (/**
                     * @param {?} currentItem
                     * @return {?}
                     */ currentItem) { return currentItem.drag === item; }));
                    /** @type {?} */
                    var siblingAtNewPosition = siblings[newIndex];
                    /** @type {?} */
                    var currentPosition = siblings[currentIndex].clientRect;
                    /** @type {?} */
                    var newPosition = siblingAtNewPosition.clientRect;
                    /** @type {?} */
                    var delta = currentIndex > newIndex ? 1 : -1;
                    this._previousSwap.drag = siblingAtNewPosition.drag;
                    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;
                    // How many pixels the item's placeholder should be offset.
                    /** @type {?} */
                    var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);
                    // How many pixels all the other items should be offset.
                    /** @type {?} */
                    var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);
                    // Save the previous order of the items before moving the item to its new index.
                    // We use this to check whether an item has been moved as a result of the sorting.
                    /** @type {?} */
                    var oldOrder = siblings.slice();
                    // Shuffle the array in place.
                    moveItemInArray(siblings, currentIndex, newIndex);
                    this.sorted.next({
                        previousIndex: currentIndex,
                        currentIndex: newIndex,
                        container: this,
                        item: item
                    });
                    siblings.forEach(( /**
                     * @param {?} sibling
                     * @param {?} index
                     * @return {?}
                     */function (sibling, index) {
                        // Don't do anything if the position hasn't changed.
                        if (oldOrder[index] === sibling) {
                            return;
                        }
                        /** @type {?} */
                        var isDraggedItem = sibling.drag === item;
                        /** @type {?} */
                        var offset = isDraggedItem ? itemOffset : siblingOffset;
                        /** @type {?} */
                        var elementToOffset = isDraggedItem ? item.getPlaceholderElement() :
                            sibling.drag.getRootElement();
                        // Update the offset to reflect the new position.
                        sibling.offset += offset;
                        // Since we're moving the items with a `transform`, we need to adjust their cached
                        // client rects to reflect their new position, as well as swap their positions in the cache.
                        // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the
                        // elements may be mid-animation which will give us a wrong result.
                        if (isHorizontal) {
                            // Round the transforms since some browsers will
                            // blur the elements, for sub-pixel transforms.
                            elementToOffset.style.transform = "translate3d(" + Math.round(sibling.offset) + "px, 0, 0)";
                            adjustClientRect(sibling.clientRect, 0, offset);
                        }
                        else {
                            elementToOffset.style.transform = "translate3d(0, " + Math.round(sibling.offset) + "px, 0)";
                            adjustClientRect(sibling.clientRect, offset, 0);
                        }
                    }));
                };
                /**
                 * Checks whether the user's pointer is close to the edges of either the
                 * viewport or the drop list and starts the auto-scroll sequence.
                 * @param {?} pointerX User's pointer position along the x axis.
                 * @param {?} pointerY User's pointer position along the y axis.
                 * @return {?}
                 */
                DropListRef.prototype._startScrollingIfNecessary = function (pointerX, pointerY) {
                    var _b;
                    if (this.autoScrollDisabled) {
                        return;
                    }
                    /** @type {?} */
                    var scrollNode;
                    /** @type {?} */
                    var verticalScrollDirection = 0 /* NONE */;
                    /** @type {?} */
                    var horizontalScrollDirection = 0 /* NONE */;
                    // Check whether we should start scrolling the container.
                    if (this._isPointerNearDropContainer(pointerX, pointerY)) {
                        /** @type {?} */
                        var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(this.element);
                        _b = getElementScrollDirections(element, this._clientRect, pointerX, pointerY), verticalScrollDirection = _b[0], horizontalScrollDirection = _b[1];
                        if (verticalScrollDirection || horizontalScrollDirection) {
                            scrollNode = element;
                        }
                    }
                    // @breaking-change 9.0.0 Remove null check for _viewportRuler once it's a required parameter.
                    // Otherwise check if we can start scrolling the viewport.
                    if (this._viewportRuler && !verticalScrollDirection && !horizontalScrollDirection) {
                        var _c = this._viewportRuler.getViewportSize(), width = _c.width, height = _c.height;
                        /** @type {?} */
                        var clientRect = { width: width, height: height, top: 0, right: width, bottom: height, left: 0 };
                        verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);
                        horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);
                        scrollNode = window;
                    }
                    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||
                        horizontalScrollDirection !== this._horizontalScrollDirection ||
                        scrollNode !== this._scrollNode)) {
                        this._verticalScrollDirection = verticalScrollDirection;
                        this._horizontalScrollDirection = horizontalScrollDirection;
                        this._scrollNode = scrollNode;
                        if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {
                            // @breaking-change 9.0.0 Remove null check for `_ngZone` once it is made required.
                            if (this._ngZone) {
                                this._ngZone.runOutsideAngular(this._startScrollInterval);
                            }
                            else {
                                this._startScrollInterval();
                            }
                        }
                        else {
                            this._stopScrolling();
                        }
                    }
                };
                /**
                 * Stops any currently-running auto-scroll sequences.
                 * @return {?}
                 */
                DropListRef.prototype._stopScrolling = function () {
                    this._stopScrollTimers.next();
                };
                /**
                 * Caches the position of the drop list.
                 * @private
                 * @return {?}
                 */
                DropListRef.prototype._cacheOwnPosition = function () {
                    /** @type {?} */
                    var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(this.element);
                    this._clientRect = getMutableClientRect(element);
                    this._scrollPosition = { top: element.scrollTop, left: element.scrollLeft };
                };
                /**
                 * Refreshes the position cache of the items and sibling containers.
                 * @private
                 * @return {?}
                 */
                DropListRef.prototype._cacheItemPositions = function () {
                    var _this = this;
                    /** @type {?} */
                    var isHorizontal = this._orientation === 'horizontal';
                    this._itemPositions = this._activeDraggables.map(( /**
                     * @param {?} drag
                     * @return {?}
                     */function (/**
                     * @param {?} drag
                     * @return {?}
                     */ drag) {
                        /** @type {?} */
                        var elementToMeasure = _this._dragDropRegistry.isDragging(drag) ?
                            // If the element is being dragged, we have to measure the
                            // placeholder, because the element is hidden.
                            drag.getPlaceholderElement() :
                            drag.getRootElement();
                        return { drag: drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };
                    })).sort(( /**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */function (a, b) {
                        return isHorizontal ? a.clientRect.left - b.clientRect.left :
                            a.clientRect.top - b.clientRect.top;
                    }));
                };
                /**
                 * Resets the container to its initial state.
                 * @private
                 * @return {?}
                 */
                DropListRef.prototype._reset = function () {
                    var _this = this;
                    this._isDragging = false;
                    // TODO(crisbeto): may have to wait for the animations to finish.
                    this._activeDraggables.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (/**
                     * @param {?} item
                     * @return {?}
                     */ item) { return item.getRootElement().style.transform = ''; }));
                    this._siblings.forEach(( /**
                     * @param {?} sibling
                     * @return {?}
                     */function (/**
                     * @param {?} sibling
                     * @return {?}
                     */ sibling) { return sibling._stopReceiving(_this); }));
                    this._activeDraggables = [];
                    this._itemPositions = [];
                    this._previousSwap.drag = null;
                    this._previousSwap.delta = 0;
                    this._stopScrolling();
                    this._removeListeners();
                };
                /**
                 * Gets the offset in pixels by which the items that aren't being dragged should be moved.
                 * @private
                 * @param {?} currentIndex Index of the item currently being dragged.
                 * @param {?} siblings All of the items in the list.
                 * @param {?} delta Direction in which the user is moving.
                 * @return {?}
                 */
                DropListRef.prototype._getSiblingOffsetPx = function (currentIndex, siblings, delta) {
                    /** @type {?} */
                    var isHorizontal = this._orientation === 'horizontal';
                    /** @type {?} */
                    var currentPosition = siblings[currentIndex].clientRect;
                    /** @type {?} */
                    var immediateSibling = siblings[currentIndex + delta * -1];
                    /** @type {?} */
                    var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;
                    if (immediateSibling) {
                        /** @type {?} */
                        var start = isHorizontal ? 'left' : 'top';
                        /** @type {?} */
                        var end = isHorizontal ? 'right' : 'bottom';
                        // Get the spacing between the start of the current item and the end of the one immediately
                        // after it in the direction in which the user is dragging, or vice versa. We add it to the
                        // offset in order to push the element to where it will be when it's inline and is influenced
                        // by the `margin` of its siblings.
                        if (delta === -1) {
                            siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];
                        }
                        else {
                            siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];
                        }
                    }
                    return siblingOffset;
                };
                /**
                 * Checks whether the pointer coordinates are close to the drop container.
                 * @private
                 * @param {?} pointerX Coordinates along the X axis.
                 * @param {?} pointerY Coordinates along the Y axis.
                 * @return {?}
                 */
                DropListRef.prototype._isPointerNearDropContainer = function (pointerX, pointerY) {
                    var _b = this._clientRect, top = _b.top, right = _b.right, bottom = _b.bottom, left = _b.left, width = _b.width, height = _b.height;
                    /** @type {?} */
                    var xThreshold = width * DROP_PROXIMITY_THRESHOLD;
                    /** @type {?} */
                    var yThreshold = height * DROP_PROXIMITY_THRESHOLD;
                    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&
                        pointerX > left - xThreshold && pointerX < right + xThreshold;
                };
                /**
                 * Gets the offset in pixels by which the item that is being dragged should be moved.
                 * @private
                 * @param {?} currentPosition Current position of the item.
                 * @param {?} newPosition Position of the item where the current item should be moved.
                 * @param {?} delta Direction in which the user is moving.
                 * @return {?}
                 */
                DropListRef.prototype._getItemOffsetPx = function (currentPosition, newPosition, delta) {
                    /** @type {?} */
                    var isHorizontal = this._orientation === 'horizontal';
                    /** @type {?} */
                    var itemOffset = isHorizontal ? newPosition.left - currentPosition.left :
                        newPosition.top - currentPosition.top;
                    // Account for differences in the item width/height.
                    if (delta === -1) {
                        itemOffset += isHorizontal ? newPosition.width - currentPosition.width :
                            newPosition.height - currentPosition.height;
                    }
                    return itemOffset;
                };
                /**
                 * Gets the index of an item in the drop container, based on the position of the user's pointer.
                 * @private
                 * @param {?} item Item that is being sorted.
                 * @param {?} pointerX Position of the user's pointer along the X axis.
                 * @param {?} pointerY Position of the user's pointer along the Y axis.
                 * @param {?=} delta Direction in which the user is moving their pointer.
                 * @return {?}
                 */
                DropListRef.prototype._getItemIndexFromPointerPosition = function (item, pointerX, pointerY, delta) {
                    var _this = this;
                    /** @type {?} */
                    var isHorizontal = this._orientation === 'horizontal';
                    return findIndex(this._itemPositions, ( /**
                     * @param {?} __0
                     * @param {?} _
                     * @param {?} array
                     * @return {?}
                     */function (_b, _, array) {
                        var drag = _b.drag, clientRect = _b.clientRect;
                        if (drag === item) {
                            // If there's only one item left in the container, it must be
                            // the dragged item itself so we use it as a reference.
                            return array.length < 2;
                        }
                        if (delta) {
                            /** @type {?} */
                            var direction = isHorizontal ? delta.x : delta.y;
                            // If the user is still hovering over the same item as last time, and they didn't change
                            // the direction in which they're dragging, we don't consider it a direction swap.
                            if (drag === _this._previousSwap.drag && direction === _this._previousSwap.delta) {
                                return false;
                            }
                        }
                        return isHorizontal ?
                            // Round these down since most browsers report client rects with
                            // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.
                            pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :
                            pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);
                    }));
                };
                /**
                 * Caches the current items in the list and their positions.
                 * @private
                 * @return {?}
                 */
                DropListRef.prototype._cacheItems = function () {
                    this._activeDraggables = this._draggables.slice();
                    this._cacheItemPositions();
                    this._cacheOwnPosition();
                };
                /**
                 * Updates the internal state of the container after a scroll event has happened.
                 * @private
                 * @param {?} scrollPosition Object that is keeping track of the scroll position.
                 * @param {?} newTop New top scroll position.
                 * @param {?} newLeft New left scroll position.
                 * @param {?=} extraClientRect Extra `ClientRect` object that should be updated, in addition to the
                 *  ones of the drag items. Useful when the viewport has been scrolled and we also need to update
                 *  the `ClientRect` of the list.
                 * @return {?}
                 */
                DropListRef.prototype._updateAfterScroll = function (scrollPosition, newTop, newLeft, extraClientRect) {
                    var _this = this;
                    /** @type {?} */
                    var topDifference = scrollPosition.top - newTop;
                    /** @type {?} */
                    var leftDifference = scrollPosition.left - newLeft;
                    if (extraClientRect) {
                        adjustClientRect(extraClientRect, topDifference, leftDifference);
                    }
                    // Since we know the amount that the user has scrolled we can shift all of the client rectangles
                    // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent
                    // behavior where we might be measuring the element before its position has changed.
                    this._itemPositions.forEach(( /**
                     * @param {?} __0
                     * @return {?}
                     */function (_b) {
                        var clientRect = _b.clientRect;
                        adjustClientRect(clientRect, topDifference, leftDifference);
                    }));
                    // We need two loops for this, because we want all of the cached
                    // positions to be up-to-date before we re-sort the item.
                    this._itemPositions.forEach(( /**
                     * @param {?} __0
                     * @return {?}
                     */function (_b) {
                        var drag = _b.drag;
                        if (_this._dragDropRegistry.isDragging(drag)) {
                            // We need to re-sort the item manually, because the pointer move
                            // events won't be dispatched while the user is scrolling.
                            drag._sortFromLastPointerPosition();
                        }
                    }));
                    scrollPosition.top = newTop;
                    scrollPosition.left = newLeft;
                };
                /**
                 * Removes the event listeners associated with this drop list.
                 * @private
                 * @return {?}
                 */
                DropListRef.prototype._removeListeners = function () {
                    Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(this.element).removeEventListener('scroll', this._handleScroll);
                    this._viewportScrollSubscription.unsubscribe();
                };
                /**
                 * Checks whether the user's pointer is positioned over the container.
                 * @param {?} x Pointer position along the X axis.
                 * @param {?} y Pointer position along the Y axis.
                 * @return {?}
                 */
                DropListRef.prototype._isOverContainer = function (x, y) {
                    return isInsideClientRect(this._clientRect, x, y);
                };
                /**
                 * Figures out whether an item should be moved into a sibling
                 * drop container, based on its current position.
                 * @param {?} item Drag item that is being moved.
                 * @param {?} x Position of the item along the X axis.
                 * @param {?} y Position of the item along the Y axis.
                 * @return {?}
                 */
                DropListRef.prototype._getSiblingContainerFromPosition = function (item, x, y) {
                    return this._siblings.find(( /**
                     * @param {?} sibling
                     * @return {?}
                     */function (/**
                     * @param {?} sibling
                     * @return {?}
                     */ sibling) { return sibling._canReceive(item, x, y); }));
                };
                /**
                 * Checks whether the drop list can receive the passed-in item.
                 * @param {?} item Item that is being dragged into the list.
                 * @param {?} x Position of the item along the X axis.
                 * @param {?} y Position of the item along the Y axis.
                 * @return {?}
                 */
                DropListRef.prototype._canReceive = function (item, x, y) {
                    if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {
                        return false;
                    }
                    /** @type {?} */
                    var elementFromPoint = ( /** @type {?} */(this._shadowRoot.elementFromPoint(x, y)));
                    // If there's no element at the pointer position, then
                    // the client rect is probably scrolled out of the view.
                    if (!elementFromPoint) {
                        return false;
                    }
                    /** @type {?} */
                    var nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(this.element);
                    // The `ClientRect`, that we're using to find the container over which the user is
                    // hovering, doesn't give us any information on whether the element has been scrolled
                    // out of the view or whether it's overlapping with other containers. This means that
                    // we could end up transferring the item into a container that's invisible or is positioned
                    // below another one. We use the result from `elementFromPoint` to get the top-most element
                    // at the pointer position and to find whether it's one of the intersecting drop containers.
                    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);
                };
                /**
                 * Called by one of the connected drop lists when a dragging sequence has started.
                 * @param {?} sibling Sibling in which dragging has started.
                 * @return {?}
                 */
                DropListRef.prototype._startReceiving = function (sibling) {
                    /** @type {?} */
                    var activeSiblings = this._activeSiblings;
                    if (!activeSiblings.has(sibling)) {
                        activeSiblings.add(sibling);
                        this._cacheOwnPosition();
                        this._listenToScrollEvents();
                    }
                };
                /**
                 * Called by a connected drop list when dragging has stopped.
                 * @param {?} sibling Sibling whose dragging has stopped.
                 * @return {?}
                 */
                DropListRef.prototype._stopReceiving = function (sibling) {
                    this._activeSiblings.delete(sibling);
                    this._viewportScrollSubscription.unsubscribe();
                };
                /**
                 * Starts listening to scroll events on the viewport.
                 * Used for updating the internal state of the list.
                 * @private
                 * @return {?}
                 */
                DropListRef.prototype._listenToScrollEvents = function () {
                    var _this = this;
                    this._viewportScrollPosition = ( /** @type {?} */(this._viewportRuler)).getViewportScrollPosition();
                    this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(( /**
                     * @return {?}
                     */function () {
                        if (_this.isDragging()) {
                            /** @type {?} */
                            var newPosition = ( /** @type {?} */(_this._viewportRuler)).getViewportScrollPosition();
                            _this._updateAfterScroll(_this._viewportScrollPosition, newPosition.top, newPosition.left, _this._clientRect);
                        }
                        else if (_this.isReceiving()) {
                            _this._cacheOwnPosition();
                        }
                    }));
                };
                return DropListRef;
            }());
            /**
             * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.
             * @param {?} clientRect `ClientRect` that should be updated.
             * @param {?} top Amount to add to the `top` position.
             * @param {?} left Amount to add to the `left` position.
             * @return {?}
             */
            function adjustClientRect(clientRect, top, left) {
                clientRect.top += top;
                clientRect.bottom = clientRect.top + clientRect.height;
                clientRect.left += left;
                clientRect.right = clientRect.left + clientRect.width;
            }
            /**
             * Finds the index of an item that matches a predicate function. Used as an equivalent
             * of `Array.prototype.findIndex` which isn't part of the standard Google typings.
             * @template T
             * @param {?} array Array in which to look for matches.
             * @param {?} predicate Function used to determine whether an item is a match.
             * @return {?}
             */
            function findIndex(array, predicate) {
                for (var i = 0; i < array.length; i++) {
                    if (predicate(array[i], i, array)) {
                        return i;
                    }
                }
                return -1;
            }
            /**
             * Checks whether some coordinates are within a `ClientRect`.
             * @param {?} clientRect ClientRect that is being checked.
             * @param {?} x Coordinates along the X axis.
             * @param {?} y Coordinates along the Y axis.
             * @return {?}
             */
            function isInsideClientRect(clientRect, x, y) {
                var top = clientRect.top, bottom = clientRect.bottom, left = clientRect.left, right = clientRect.right;
                return y >= top && y <= bottom && x >= left && x <= right;
            }
            /**
             * Gets a mutable version of an element's bounding `ClientRect`.
             * @param {?} element
             * @return {?}
             */
            function getMutableClientRect(element) {
                /** @type {?} */
                var clientRect = element.getBoundingClientRect();
                // We need to clone the `clientRect` here, because all the values on it are readonly
                // and we need to be able to update them. Also we can't use a spread here, because
                // the values on a `ClientRect` aren't own properties. See:
                // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes
                return {
                    top: clientRect.top,
                    right: clientRect.right,
                    bottom: clientRect.bottom,
                    left: clientRect.left,
                    width: clientRect.width,
                    height: clientRect.height
                };
            }
            /**
             * Increments the vertical scroll position of a node.
             * @param {?} node Node whose scroll position should change.
             * @param {?} amount Amount of pixels that the `node` should be scrolled.
             * @return {?}
             */
            function incrementVerticalScroll(node, amount) {
                if (node === window) {
                    (( /** @type {?} */(node))).scrollBy(0, amount);
                }
                else {
                    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.
                    (( /** @type {?} */(node))).scrollTop += amount;
                }
            }
            /**
             * Increments the horizontal scroll position of a node.
             * @param {?} node Node whose scroll position should change.
             * @param {?} amount Amount of pixels that the `node` should be scrolled.
             * @return {?}
             */
            function incrementHorizontalScroll(node, amount) {
                if (node === window) {
                    (( /** @type {?} */(node))).scrollBy(amount, 0);
                }
                else {
                    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.
                    (( /** @type {?} */(node))).scrollLeft += amount;
                }
            }
            /**
             * Gets whether the vertical auto-scroll direction of a node.
             * @param {?} clientRect Dimensions of the node.
             * @param {?} pointerY Position of the user's pointer along the y axis.
             * @return {?}
             */
            function getVerticalScrollDirection(clientRect, pointerY) {
                var top = clientRect.top, bottom = clientRect.bottom, height = clientRect.height;
                /** @type {?} */
                var yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;
                if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {
                    return 1 /* UP */;
                }
                else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {
                    return 2 /* DOWN */;
                }
                return 0 /* NONE */;
            }
            /**
             * Gets whether the horizontal auto-scroll direction of a node.
             * @param {?} clientRect Dimensions of the node.
             * @param {?} pointerX Position of the user's pointer along the x axis.
             * @return {?}
             */
            function getHorizontalScrollDirection(clientRect, pointerX) {
                var left = clientRect.left, right = clientRect.right, width = clientRect.width;
                /** @type {?} */
                var xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;
                if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {
                    return 1 /* LEFT */;
                }
                else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {
                    return 2 /* RIGHT */;
                }
                return 0 /* NONE */;
            }
            /**
             * Gets the directions in which an element node should be scrolled,
             * assuming that the user's pointer is already within it scrollable region.
             * @param {?} element Element for which we should calculate the scroll direction.
             * @param {?} clientRect Bounding client rectangle of the element.
             * @param {?} pointerX Position of the user's pointer along the x axis.
             * @param {?} pointerY Position of the user's pointer along the y axis.
             * @return {?}
             */
            function getElementScrollDirections(element, clientRect, pointerX, pointerY) {
                /** @type {?} */
                var computedVertical = getVerticalScrollDirection(clientRect, pointerY);
                /** @type {?} */
                var computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);
                /** @type {?} */
                var verticalScrollDirection = 0 /* NONE */;
                /** @type {?} */
                var horizontalScrollDirection = 0 /* NONE */;
                // Note that we here we do some extra checks for whether the element is actually scrollable in
                // a certain direction and we only assign the scroll direction if it is. We do this so that we
                // can allow other elements to be scrolled, if the current element can't be scrolled anymore.
                // This allows us to handle cases where the scroll regions of two scrollable elements overlap.
                if (computedVertical) {
                    /** @type {?} */
                    var scrollTop = element.scrollTop;
                    if (computedVertical === 1 /* UP */) {
                        if (scrollTop > 0) {
                            verticalScrollDirection = 1 /* UP */;
                        }
                    }
                    else if (element.scrollHeight - scrollTop > element.clientHeight) {
                        verticalScrollDirection = 2 /* DOWN */;
                    }
                }
                if (computedHorizontal) {
                    /** @type {?} */
                    var scrollLeft = element.scrollLeft;
                    if (computedHorizontal === 1 /* LEFT */) {
                        if (scrollLeft > 0) {
                            horizontalScrollDirection = 1 /* LEFT */;
                        }
                    }
                    else if (element.scrollWidth - scrollLeft > element.clientWidth) {
                        horizontalScrollDirection = 2 /* RIGHT */;
                    }
                }
                return [verticalScrollDirection, horizontalScrollDirection];
            }
            /**
             * Gets the shadow root of an element, if any.
             * @param {?} element
             * @return {?}
             */
            function getShadowRoot(element) {
                if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["_supportsShadowDom"])()) {
                    /** @type {?} */
                    var rootNode = element.getRootNode ? element.getRootNode() : null;
                    if (rootNode instanceof ShadowRoot) {
                        return rootNode;
                    }
                }
                return null;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Event options that can be used to bind an active, capturing event.
             * @type {?}
             */
            var activeCapturingEventOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["normalizePassiveListenerOptions"])({
                passive: false,
                capture: true
            });
            /**
             * Service that keeps track of all the drag item and drop container
             * instances, and manages global event listeners on the `document`.
             * \@docs-private
             * @template I, C
             */
            // Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order
            // to avoid circular imports. If we were to reference them here, importing the registry into the
            // classes that are registering themselves will introduce a circular import.
            var DragDropRegistry = /** @class */ (function () {
                /**
                 * @param {?} _ngZone
                 * @param {?} _document
                 */
                function DragDropRegistry(_ngZone, _document) {
                    var _this = this;
                    this._ngZone = _ngZone;
                    /**
                     * Registered drop container instances.
                     */
                    this._dropInstances = new Set();
                    /**
                     * Registered drag item instances.
                     */
                    this._dragInstances = new Set();
                    /**
                     * Drag item instances that are currently being dragged.
                     */
                    this._activeDragInstances = new Set();
                    /**
                     * Keeps track of the event listeners that we've bound to the `document`.
                     */
                    this._globalListeners = new Map();
                    /**
                     * Emits the `touchmove` or `mousemove` events that are dispatched
                     * while the user is dragging a drag item instance.
                     */
                    this.pointerMove = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits the `touchend` or `mouseup` events that are dispatched
                     * while the user is dragging a drag item instance.
                     */
                    this.pointerUp = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits when the viewport has been scrolled while the user is dragging an item.
                     */
                    this.scroll = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Event listener that will prevent the default browser action while the user is dragging.
                     * @param event Event whose default action should be prevented.
                     */
                    this._preventDefaultWhileDragging = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        if (_this._activeDragInstances.size) {
                            event.preventDefault();
                        }
                    });
                    this._document = _document;
                }
                /**
                 * Adds a drop container to the registry.
                 * @param {?} drop
                 * @return {?}
                 */
                DragDropRegistry.prototype.registerDropContainer = function (drop) {
                    if (!this._dropInstances.has(drop)) {
                        if (this.getDropContainer(drop.id)) {
                            throw Error("Drop instance with id \"" + drop.id + "\" has already been registered.");
                        }
                        this._dropInstances.add(drop);
                    }
                };
                /**
                 * Adds a drag item instance to the registry.
                 * @param {?} drag
                 * @return {?}
                 */
                DragDropRegistry.prototype.registerDragItem = function (drag) {
                    var _this = this;
                    this._dragInstances.add(drag);
                    // The `touchmove` event gets bound once, ahead of time, because WebKit
                    // won't preventDefault on a dynamically-added `touchmove` listener.
                    // See https://bugs.webkit.org/show_bug.cgi?id=184250.
                    if (this._dragInstances.size === 1) {
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () {
                            // The event handler has to be explicitly active,
                            // because newer browsers make it passive by default.
                            _this._document.addEventListener('touchmove', _this._preventDefaultWhileDragging, activeCapturingEventOptions);
                        }));
                    }
                };
                /**
                 * Removes a drop container from the registry.
                 * @param {?} drop
                 * @return {?}
                 */
                DragDropRegistry.prototype.removeDropContainer = function (drop) {
                    this._dropInstances.delete(drop);
                };
                /**
                 * Removes a drag item instance from the registry.
                 * @param {?} drag
                 * @return {?}
                 */
                DragDropRegistry.prototype.removeDragItem = function (drag) {
                    this._dragInstances.delete(drag);
                    this.stopDragging(drag);
                    if (this._dragInstances.size === 0) {
                        this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);
                    }
                };
                /**
                 * Starts the dragging sequence for a drag instance.
                 * @param {?} drag Drag instance which is being dragged.
                 * @param {?} event Event that initiated the dragging.
                 * @return {?}
                 */
                DragDropRegistry.prototype.startDragging = function (drag, event) {
                    var _this = this;
                    // Do not process the same drag twice to avoid memory leaks and redundant listeners
                    if (this._activeDragInstances.has(drag)) {
                        return;
                    }
                    this._activeDragInstances.add(drag);
                    if (this._activeDragInstances.size === 1) {
                        /** @type {?} */
                        var isTouchEvent_1 = event.type.startsWith('touch');
                        /** @type {?} */
                        var moveEvent = isTouchEvent_1 ? 'touchmove' : 'mousemove';
                        /** @type {?} */
                        var upEvent = isTouchEvent_1 ? 'touchend' : 'mouseup';
                        // We explicitly bind __active__ listeners here, because newer browsers will default to
                        // passive ones for `mousemove` and `touchmove`. The events need to be active, because we
                        // use `preventDefault` to prevent the page from scrolling while the user is dragging.
                        this._globalListeners
                            .set(moveEvent, {
                            handler: ( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) { return _this.pointerMove.next(( /** @type {?} */(e))); }),
                            options: activeCapturingEventOptions
                        })
                            .set(upEvent, {
                            handler: ( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) { return _this.pointerUp.next(( /** @type {?} */(e))); }),
                            options: true
                        })
                            .set('scroll', {
                            handler: ( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) { return _this.scroll.next(e); }),
                            // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't
                            // the document. See https://github.com/angular/components/issues/17144.
                            options: true
                        })
                            // Preventing the default action on `mousemove` isn't enough to disable text selection
                            // on Safari so we need to prevent the selection event as well. Alternatively this can
                            // be done by setting `user-select: none` on the `body`, however it has causes a style
                            // recalculation which can be expensive on pages with a lot of elements.
                            .set('selectstart', {
                            handler: this._preventDefaultWhileDragging,
                            options: activeCapturingEventOptions
                        });
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () {
                            _this._globalListeners.forEach(( /**
                             * @param {?} config
                             * @param {?} name
                             * @return {?}
                             */function (config, name) {
                                _this._document.addEventListener(name, config.handler, config.options);
                            }));
                        }));
                    }
                };
                /**
                 * Stops dragging a drag item instance.
                 * @param {?} drag
                 * @return {?}
                 */
                DragDropRegistry.prototype.stopDragging = function (drag) {
                    this._activeDragInstances.delete(drag);
                    if (this._activeDragInstances.size === 0) {
                        this._clearGlobalListeners();
                    }
                };
                /**
                 * Gets whether a drag item instance is currently being dragged.
                 * @param {?} drag
                 * @return {?}
                 */
                DragDropRegistry.prototype.isDragging = function (drag) {
                    return this._activeDragInstances.has(drag);
                };
                /**
                 * Gets a drop container by its id.
                 * @deprecated No longer being used. To be removed.
                 * \@breaking-change 8.0.0
                 * @param {?} id
                 * @return {?}
                 */
                DragDropRegistry.prototype.getDropContainer = function (id) {
                    return Array.from(this._dropInstances).find(( /**
                     * @param {?} instance
                     * @return {?}
                     */function (/**
                     * @param {?} instance
                     * @return {?}
                     */ instance) { return instance.id === id; }));
                };
                /**
                 * @return {?}
                 */
                DragDropRegistry.prototype.ngOnDestroy = function () {
                    var _this = this;
                    this._dragInstances.forEach(( /**
                     * @param {?} instance
                     * @return {?}
                     */function (/**
                     * @param {?} instance
                     * @return {?}
                     */ instance) { return _this.removeDragItem(instance); }));
                    this._dropInstances.forEach(( /**
                     * @param {?} instance
                     * @return {?}
                     */function (/**
                     * @param {?} instance
                     * @return {?}
                     */ instance) { return _this.removeDropContainer(instance); }));
                    this._clearGlobalListeners();
                    this.pointerMove.complete();
                    this.pointerUp.complete();
                };
                /**
                 * Clears out the global event listeners from the `document`.
                 * @private
                 * @return {?}
                 */
                DragDropRegistry.prototype._clearGlobalListeners = function () {
                    var _this = this;
                    this._globalListeners.forEach(( /**
                     * @param {?} config
                     * @param {?} name
                     * @return {?}
                     */function (config, name) {
                        _this._document.removeEventListener(name, config.handler, config.options);
                    }));
                    this._globalListeners.clear();
                };
                return DragDropRegistry;
            }());
            DragDropRegistry.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            DragDropRegistry.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ DragDropRegistry.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"])({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_4__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"])); }, token: DragDropRegistry, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Default configuration to be used when creating a `DragRef`.
             * @type {?}
             */
            var DEFAULT_CONFIG = {
                dragStartThreshold: 5,
                pointerDirectionChangeThreshold: 5
            };
            /**
             * Service that allows for drag-and-drop functionality to be attached to DOM elements.
             */
            var DragDrop = /** @class */ (function () {
                /**
                 * @param {?} _document
                 * @param {?} _ngZone
                 * @param {?} _viewportRuler
                 * @param {?} _dragDropRegistry
                 */
                function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {
                    this._document = _document;
                    this._ngZone = _ngZone;
                    this._viewportRuler = _viewportRuler;
                    this._dragDropRegistry = _dragDropRegistry;
                }
                /**
                 * Turns an element into a draggable item.
                 * @template T
                 * @param {?} element Element to which to attach the dragging functionality.
                 * @param {?=} config Object used to configure the dragging behavior.
                 * @return {?}
                 */
                DragDrop.prototype.createDrag = function (element, config) {
                    if (config === void 0) { config = DEFAULT_CONFIG; }
                    return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);
                };
                /**
                 * Turns an element into a drop list.
                 * @template T
                 * @param {?} element Element to which to attach the drop list functionality.
                 * @return {?}
                 */
                DragDrop.prototype.createDropList = function (element) {
                    return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);
                };
                return DragDrop;
            }());
            DragDrop.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            DragDrop.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"],] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgZone"] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_6__["ViewportRuler"] },
                { type: DragDropRegistry }
            ]; };
            /** @nocollapse */ DragDrop.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"])({ factory: function DragDrop_Factory() { return new DragDrop(Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_4__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_6__["ViewportRuler"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"])(DragDropRegistry)); }, token: DragDrop, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that is used to provide a CdkDropList instance to CdkDrag.
             * Used for avoiding circular imports.
             * @type {?}
             */
            var CDK_DROP_LIST = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["InjectionToken"]('CDK_DROP_LIST');
            /**
             * Injection token that is used to provide a CdkDropList instance to CdkDrag.
             * Used for avoiding circular imports.
             * @deprecated Use `CDK_DROP_LIST` instead.
             * \@breaking-change 8.0.0
             * @type {?}
             */
            var CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the
             * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily
             * to avoid circular imports.
             * \@docs-private
             * @type {?}
             */
            var CDK_DRAG_PARENT = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["InjectionToken"]('CDK_DRAG_PARENT');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Handle that can be used to drag and CdkDrag instance.
             */
            var CdkDragHandle = /** @class */ (function () {
                /**
                 * @param {?} element
                 * @param {?=} parentDrag
                 */
                function CdkDragHandle(element, parentDrag) {
                    this.element = element;
                    /**
                     * Emits when the state of the handle has changed.
                     */
                    this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    this._disabled = false;
                    this._parentDrag = parentDrag;
                    toggleNativeDragInteractions(element.nativeElement, false);
                }
                Object.defineProperty(CdkDragHandle.prototype, "disabled", {
                    /**
                     * Whether starting to drag through this handle is disabled.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        this._stateChanges.next(this);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkDragHandle.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                };
                return CdkDragHandle;
            }());
            CdkDragHandle.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Directive"], args: [{
                            selector: '[cdkDragHandle]',
                            host: {
                                'class': 'cdk-drag-handle'
                            }
                        },] },
            ];
            /** @nocollapse */
            CdkDragHandle.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [CDK_DRAG_PARENT,] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] }
            ]; };
            CdkDragHandle.propDecorators = {
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDragHandleDisabled',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Element that will be used as a template for the placeholder of a CdkDrag when
             * it is being dragged. The placeholder is displayed in place of the element being dragged.
             * @template T
             */
            var CdkDragPlaceholder = /** @class */ (function () {
                /**
                 * @param {?} templateRef
                 */
                function CdkDragPlaceholder(templateRef) {
                    this.templateRef = templateRef;
                }
                return CdkDragPlaceholder;
            }());
            CdkDragPlaceholder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Directive"], args: [{
                            selector: 'ng-template[cdkDragPlaceholder]'
                        },] },
            ];
            /** @nocollapse */
            CdkDragPlaceholder.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["TemplateRef"] }
            ]; };
            CdkDragPlaceholder.propDecorators = {
                data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Element that will be used as a template for the preview
             * of a CdkDrag when it is being dragged.
             * @template T
             */
            var CdkDragPreview = /** @class */ (function () {
                /**
                 * @param {?} templateRef
                 */
                function CdkDragPreview(templateRef) {
                    this.templateRef = templateRef;
                }
                return CdkDragPreview;
            }());
            CdkDragPreview.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Directive"], args: [{
                            selector: 'ng-template[cdkDragPreview]'
                        },] },
            ];
            /** @nocollapse */
            CdkDragPreview.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["TemplateRef"] }
            ]; };
            CdkDragPreview.propDecorators = {
                data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used to configure the behavior of `CdkDrag`.
             * @type {?}
             */
            var CDK_DRAG_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["InjectionToken"]('CDK_DRAG_CONFIG', {
                providedIn: 'root',
                factory: CDK_DRAG_CONFIG_FACTORY
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function CDK_DRAG_CONFIG_FACTORY() {
                return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };
            }
            /**
             * Element that can be moved inside a CdkDropList container.
             * @template T
             */
            var CdkDrag = /** @class */ (function () {
                /**
                 * @param {?} element
                 * @param {?} dropContainer
                 * @param {?} _document
                 * @param {?} _ngZone
                 * @param {?} _viewContainerRef
                 * @param {?} config
                 * @param {?} _dir
                 * @param {?} dragDrop
                 * @param {?} _changeDetectorRef
                 */
                function CdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {
                    var _this = this;
                    this.element = element;
                    this.dropContainer = dropContainer;
                    this._document = _document;
                    this._ngZone = _ngZone;
                    this._viewContainerRef = _viewContainerRef;
                    this._dir = _dir;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Amount of milliseconds to wait after the user has put their
                     * pointer down before starting to drag the element.
                     */
                    this.dragStartDelay = 0;
                    this._disabled = false;
                    /**
                     * Emits when the user starts dragging the item.
                     */
                    this.started = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    /**
                     * Emits when the user has released a drag item, before any animations have started.
                     */
                    this.released = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    /**
                     * Emits when the user stops dragging an item in the container.
                     */
                    this.ended = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    /**
                     * Emits when the user has moved the item into a new container.
                     */
                    this.entered = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    /**
                     * Emits when the user removes the item its container by dragging it into another container.
                     */
                    this.exited = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    /**
                     * Emits when the user drops the item inside a container.
                     */
                    this.dropped = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    /**
                     * Emits as the user is dragging the item. Use with caution,
                     * because this event will fire for every pixel that the user has dragged.
                     */
                    this.moved = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) {
                        /** @type {?} */
                        var subscription = _this._dragRef.moved.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(( /**
                         * @param {?} movedEvent
                         * @return {?}
                         */function (/**
                         * @param {?} movedEvent
                         * @return {?}
                         */ movedEvent) { return ({
                            source: _this,
                            pointerPosition: movedEvent.pointerPosition,
                            event: movedEvent.event,
                            delta: movedEvent.delta,
                            distance: movedEvent.distance
                        }); }))).subscribe(observer);
                        return ( /**
                         * @return {?}
                         */function () {
                            subscription.unsubscribe();
                        });
                    }));
                    this._dragRef = dragDrop.createDrag(element, config);
                    this._dragRef.data = this;
                    this._syncInputs(this._dragRef);
                    this._handleEvents(this._dragRef);
                }
                Object.defineProperty(CdkDrag.prototype, "boundaryElementSelector", {
                    /**
                     * Selector that will be used to determine the element to which the draggable's position will
                     * be constrained. Matching starts from the element's parent and goes up the DOM until a matching
                     * element has been found
                     * @deprecated Use `boundaryElement` instead.
                     * \@breaking-change 9.0.0
                     * @return {?}
                     */
                    get: function () {
                        return typeof this.boundaryElement === 'string' ? this.boundaryElement : ( /** @type {?} */(undefined));
                    },
                    /**
                     * @param {?} selector
                     * @return {?}
                     */
                    set: function (selector) {
                        this.boundaryElement = selector;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkDrag.prototype, "disabled", {
                    /**
                     * Whether starting to drag this element is disabled.
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled || (this.dropContainer && this.dropContainer.disabled);
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        this._dragRef.disabled = this._disabled;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Returns the element that is being used as a placeholder
                 * while the current element is being dragged.
                 * @return {?}
                 */
                CdkDrag.prototype.getPlaceholderElement = function () {
                    return this._dragRef.getPlaceholderElement();
                };
                /**
                 * Returns the root draggable element.
                 * @return {?}
                 */
                CdkDrag.prototype.getRootElement = function () {
                    return this._dragRef.getRootElement();
                };
                /**
                 * Resets a standalone drag item to its initial position.
                 * @return {?}
                 */
                CdkDrag.prototype.reset = function () {
                    this._dragRef.reset();
                };
                /**
                 * Gets the pixel coordinates of the draggable outside of a drop container.
                 * @return {?}
                 */
                CdkDrag.prototype.getFreeDragPosition = function () {
                    return this._dragRef.getFreeDragPosition();
                };
                /**
                 * @return {?}
                 */
                CdkDrag.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    // We need to wait for the zone to stabilize, in order for the reference
                    // element to be in the proper place in the DOM. This is mostly relevant
                    // for draggable elements inside portals since they get stamped out in
                    // their original DOM position and then they get transferred to the portal.
                    this._ngZone.onStable.asObservable()
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this._updateRootElement();
                        // Listen for any newly-added handles.
                        _this._handles.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(_this._handles), 
                        // Sync the new handles with the DragRef.
                        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(( /**
                         * @param {?} handles
                         * @return {?}
                         */function (handles) {
                            /** @type {?} */
                            var childHandleElements = handles
                                .filter(( /**
                         * @param {?} handle
                         * @return {?}
                         */function (/**
                         * @param {?} handle
                         * @return {?}
                         */ handle) { return handle._parentDrag === _this; }))
                                .map(( /**
                         * @param {?} handle
                         * @return {?}
                         */function (/**
                         * @param {?} handle
                         * @return {?}
                         */ handle) { return handle.element; }));
                            _this._dragRef.withHandles(childHandleElements);
                        })), 
                        // Listen if the state of any of the handles changes.
                        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])(( /**
                         * @param {?} handles
                         * @return {?}
                         */function (handles) {
                            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"]).apply(void 0, handles.map(( /**
                             * @param {?} item
                             * @return {?}
                             */function (/**
                             * @param {?} item
                             * @return {?}
                             */ item) { return item._stateChanges; })));
                        })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(_this._destroyed)).subscribe(( /**
                         * @param {?} handleInstance
                         * @return {?}
                         */function (/**
                         * @param {?} handleInstance
                         * @return {?}
                         */ handleInstance) {
                            // Enabled/disable the handle that changed in the DragRef.
                            /** @type {?} */
                            var dragRef = _this._dragRef;
                            /** @type {?} */
                            var handle = handleInstance.element.nativeElement;
                            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);
                        }));
                        if (_this.freeDragPosition) {
                            _this._dragRef.setFreeDragPosition(_this.freeDragPosition);
                        }
                    }));
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                CdkDrag.prototype.ngOnChanges = function (changes) {
                    /** @type {?} */
                    var rootSelectorChange = changes['rootElementSelector'];
                    /** @type {?} */
                    var positionChange = changes['freeDragPosition'];
                    // We don't have to react to the first change since it's being
                    // handled in `ngAfterViewInit` where it needs to be deferred.
                    if (rootSelectorChange && !rootSelectorChange.firstChange) {
                        this._updateRootElement();
                    }
                    // Skip the first change since it's being handled in `ngAfterViewInit`.
                    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {
                        this._dragRef.setFreeDragPosition(this.freeDragPosition);
                    }
                };
                /**
                 * @return {?}
                 */
                CdkDrag.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                    this._dragRef.dispose();
                };
                /**
                 * Syncs the root element with the `DragRef`.
                 * @private
                 * @return {?}
                 */
                CdkDrag.prototype._updateRootElement = function () {
                    /** @type {?} */
                    var element = this.element.nativeElement;
                    /** @type {?} */
                    var rootElement = this.rootElementSelector ?
                        getClosestMatchingAncestor(element, this.rootElementSelector) : element;
                    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {
                        throw Error("cdkDrag must be attached to an element node. " +
                            ("Currently attached to \"" + rootElement.nodeName + "\"."));
                    }
                    this._dragRef.withRootElement(rootElement || element);
                };
                /**
                 * Gets the boundary element, based on the `boundaryElement` value.
                 * @private
                 * @return {?}
                 */
                CdkDrag.prototype._getBoundaryElement = function () {
                    /** @type {?} */
                    var boundary = this.boundaryElement;
                    if (!boundary) {
                        return null;
                    }
                    if (typeof boundary === 'string') {
                        return getClosestMatchingAncestor(this.element.nativeElement, boundary);
                    }
                    /** @type {?} */
                    var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceElement"])(boundary);
                    if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["isDevMode"])() && !element.contains(this.element.nativeElement)) {
                        throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');
                    }
                    return element;
                };
                /**
                 * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.
                 * @private
                 * @param {?} ref
                 * @return {?}
                 */
                CdkDrag.prototype._syncInputs = function (ref) {
                    var _this = this;
                    ref.beforeStarted.subscribe(( /**
                     * @return {?}
                     */function () {
                        if (!ref.isDragging()) {
                            /** @type {?} */
                            var dir = _this._dir;
                            /** @type {?} */
                            var placeholder = _this._placeholderTemplate ? {
                                template: _this._placeholderTemplate.templateRef,
                                context: _this._placeholderTemplate.data,
                                viewContainer: _this._viewContainerRef
                            } : null;
                            /** @type {?} */
                            var preview = _this._previewTemplate ? {
                                template: _this._previewTemplate.templateRef,
                                context: _this._previewTemplate.data,
                                viewContainer: _this._viewContainerRef
                            } : null;
                            ref.disabled = _this.disabled;
                            ref.lockAxis = _this.lockAxis;
                            ref.dragStartDelay = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceNumberProperty"])(_this.dragStartDelay);
                            ref.constrainPosition = _this.constrainPosition;
                            ref
                                .withBoundaryElement(_this._getBoundaryElement())
                                .withPlaceholderTemplate(placeholder)
                                .withPreviewTemplate(preview);
                            if (dir) {
                                ref.withDirection(dir.value);
                            }
                        }
                    }));
                };
                /**
                 * Handles the events from the underlying `DragRef`.
                 * @private
                 * @param {?} ref
                 * @return {?}
                 */
                CdkDrag.prototype._handleEvents = function (ref) {
                    var _this = this;
                    ref.started.subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.started.emit({ source: _this });
                        // Since all of these events run outside of change detection,
                        // we need to ensure that everything is marked correctly.
                        _this._changeDetectorRef.markForCheck();
                    }));
                    ref.released.subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.released.emit({ source: _this });
                    }));
                    ref.ended.subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        _this.ended.emit({ source: _this, distance: event.distance });
                        // Since all of these events run outside of change detection,
                        // we need to ensure that everything is marked correctly.
                        _this._changeDetectorRef.markForCheck();
                    }));
                    ref.entered.subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        _this.entered.emit({
                            container: event.container.data,
                            item: _this,
                            currentIndex: event.currentIndex
                        });
                    }));
                    ref.exited.subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        _this.exited.emit({
                            container: event.container.data,
                            item: _this
                        });
                    }));
                    ref.dropped.subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        _this.dropped.emit({
                            previousIndex: event.previousIndex,
                            currentIndex: event.currentIndex,
                            previousContainer: event.previousContainer.data,
                            container: event.container.data,
                            isPointerOverContainer: event.isPointerOverContainer,
                            item: _this,
                            distance: event.distance
                        });
                    }));
                };
                return CdkDrag;
            }());
            CdkDrag.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Directive"], args: [{
                            selector: '[cdkDrag]',
                            exportAs: 'cdkDrag',
                            host: {
                                'class': 'cdk-drag',
                                '[class.cdk-drag-disabled]': 'disabled',
                                '[class.cdk-drag-dragging]': '_dragRef.isDragging()',
                            },
                            providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]
                        },] },
            ];
            /** @nocollapse */
            CdkDrag.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [CDK_DROP_LIST,] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["SkipSelf"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"],] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgZone"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewContainerRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [CDK_DRAG_CONFIG,] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] },
                { type: DragDrop },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"] }
            ]; };
            CdkDrag.propDecorators = {
                _handles: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ContentChildren"], args: [CdkDragHandle, { descendants: true },] }],
                _previewTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ContentChild"], args: [CdkDragPreview, { static: false },] }],
                _placeholderTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ContentChild"], args: [CdkDragPlaceholder, { static: false },] }],
                data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDragData',] }],
                lockAxis: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDragLockAxis',] }],
                rootElementSelector: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDragRootElement',] }],
                boundaryElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDragBoundary',] }],
                dragStartDelay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDragStartDelay',] }],
                freeDragPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDragFreeDragPosition',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDragDisabled',] }],
                constrainPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDragConstrainPosition',] }],
                started: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['cdkDragStarted',] }],
                released: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['cdkDragReleased',] }],
                ended: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['cdkDragEnded',] }],
                entered: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['cdkDragEntered',] }],
                exited: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['cdkDragExited',] }],
                dropped: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['cdkDragDropped',] }],
                moved: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['cdkDragMoved',] }]
            };
            /**
             * Gets the closest ancestor of an element that matches a selector.
             * @param {?} element
             * @param {?} selector
             * @return {?}
             */
            function getClosestMatchingAncestor(element, selector) {
                /** @type {?} */
                var currentElement = ( /** @type {?} */(element.parentElement));
                while (currentElement) {
                    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.
                    if (currentElement.matches ? currentElement.matches(selector) :
                        (( /** @type {?} */(currentElement))).msMatchesSelector(selector)) {
                        return currentElement;
                    }
                    currentElement = currentElement.parentElement;
                }
                return null;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`
             * elements that are placed inside a `cdkDropListGroup` will be connected to each other
             * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input
             * from `cdkDropList`.
             * @template T
             */
            var CdkDropListGroup = /** @class */ (function () {
                function CdkDropListGroup() {
                    /**
                     * Drop lists registered inside the group.
                     */
                    this._items = new Set();
                    this._disabled = false;
                }
                Object.defineProperty(CdkDropListGroup.prototype, "disabled", {
                    /**
                     * Whether starting a dragging sequence from inside this group is disabled.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkDropListGroup.prototype.ngOnDestroy = function () {
                    this._items.clear();
                };
                return CdkDropListGroup;
            }());
            CdkDropListGroup.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Directive"], args: [{
                            selector: '[cdkDropListGroup]',
                            exportAs: 'cdkDropListGroup',
                        },] },
            ];
            CdkDropListGroup.propDecorators = {
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDropListGroupDisabled',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Counter used to generate unique ids for drop zones.
             * @type {?}
             */
            var _uniqueIdCounter$1 = 0;
            var ɵ0 = undefined;
            // @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards
            // compatiblity. The implements clause, as well as all the methods that it enforces can
            // be removed when `CdkDropListContainer` is deleted.
            /**
             * Container that wraps a set of draggable items.
             * @template T
             */
            var CdkDropList = /** @class */ (function () {
                /**
                 * @param {?} element
                 * @param {?} dragDrop
                 * @param {?} _changeDetectorRef
                 * @param {?=} _dir
                 * @param {?=} _group
                 */
                function CdkDropList(element, dragDrop, _changeDetectorRef, _dir, _group) {
                    var _this = this;
                    this.element = element;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._dir = _dir;
                    this._group = _group;
                    /**
                     * Emits when the list has been destroyed.
                     */
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Other draggable containers that this container is connected to and into which the
                     * container's items can be transferred. Can either be references to other drop containers,
                     * or their unique IDs.
                     */
                    this.connectedTo = [];
                    /**
                     * Direction in which the list is oriented.
                     */
                    this.orientation = 'vertical';
                    /**
                     * Unique ID for the drop zone. Can be used as a reference
                     * in the `connectedTo` of another `CdkDropList`.
                     */
                    this.id = "cdk-drop-list-" + _uniqueIdCounter$1++;
                    this._disabled = false;
                    this._sortingDisabled = false;
                    /**
                     * Function that is used to determine whether an item
                     * is allowed to be moved into a drop container.
                     */
                    this.enterPredicate = ( /**
                     * @return {?}
                     */function () { return true; });
                    /**
                     * Whether to auto-scroll the view when the user moves their pointer close to the edges.
                     */
                    this.autoScrollDisabled = false;
                    /**
                     * Emits when the user drops an item inside the container.
                     */
                    this.dropped = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    /**
                     * Emits when the user has moved a new drag item into this container.
                     */
                    this.entered = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    /**
                     * Emits when the user removes an item from the container
                     * by dragging it into another container.
                     */
                    this.exited = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    /**
                     * Emits as the user is swapping items while actively dragging.
                     */
                    this.sorted = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    this._dropListRef = dragDrop.createDropList(element);
                    this._dropListRef.data = this;
                    this._dropListRef.enterPredicate = ( /**
                     * @param {?} drag
                     * @param {?} drop
                     * @return {?}
                     */function (drag, drop) {
                        return _this.enterPredicate(drag.data, drop.data);
                    });
                    this._syncInputs(this._dropListRef);
                    this._handleEvents(this._dropListRef);
                    CdkDropList._dropLists.push(this);
                    if (_group) {
                        _group._items.add(this);
                    }
                }
                Object.defineProperty(CdkDropList.prototype, "disabled", {
                    /**
                     * Whether starting a dragging sequence from this container is disabled.
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled || (!!this._group && this._group.disabled);
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkDropList.prototype, "sortingDisabled", {
                    /**
                     * Whether sorting within this drop list is disabled.
                     * @return {?}
                     */
                    get: function () { return this._sortingDisabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._sortingDisabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkDropList.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._draggables.changes
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(this._draggables), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed))
                        .subscribe(( /**
                 * @param {?} items
                 * @return {?}
                 */function (items) {
                        _this._dropListRef.withItems(items.map(( /**
                         * @param {?} drag
                         * @return {?}
                         */function (/**
                         * @param {?} drag
                         * @return {?}
                         */ drag) { return drag._dragRef; })));
                    }));
                };
                /**
                 * @return {?}
                 */
                CdkDropList.prototype.ngOnDestroy = function () {
                    /** @type {?} */
                    var index = CdkDropList._dropLists.indexOf(this);
                    if (index > -1) {
                        CdkDropList._dropLists.splice(index, 1);
                    }
                    if (this._group) {
                        this._group._items.delete(this);
                    }
                    this._dropListRef.dispose();
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * Starts dragging an item.
                 * @return {?}
                 */
                CdkDropList.prototype.start = function () {
                    this._dropListRef.start();
                };
                /**
                 * Drops an item into this container.
                 * @param {?} item Item being dropped into the container.
                 * @param {?} currentIndex Index at which the item should be inserted.
                 * @param {?} previousContainer Container from which the item got dragged in.
                 * @param {?} isPointerOverContainer Whether the user's pointer was over the
                 *    container when the item was dropped.
                 * @return {?}
                 */
                CdkDropList.prototype.drop = function (item, currentIndex, previousContainer, isPointerOverContainer) {
                    this._dropListRef.drop(item._dragRef, currentIndex, (( /** @type {?} */(previousContainer)))._dropListRef, isPointerOverContainer);
                };
                /**
                 * Emits an event to indicate that the user moved an item into the container.
                 * @param {?} item Item that was moved into the container.
                 * @param {?} pointerX Position of the item along the X axis.
                 * @param {?} pointerY Position of the item along the Y axis.
                 * @return {?}
                 */
                CdkDropList.prototype.enter = function (item, pointerX, pointerY) {
                    this._dropListRef.enter(item._dragRef, pointerX, pointerY);
                };
                /**
                 * Removes an item from the container after it was dragged into another container by the user.
                 * @param {?} item Item that was dragged out.
                 * @return {?}
                 */
                CdkDropList.prototype.exit = function (item) {
                    this._dropListRef.exit(item._dragRef);
                };
                /**
                 * Figures out the index of an item in the container.
                 * @param {?} item Item whose index should be determined.
                 * @return {?}
                 */
                CdkDropList.prototype.getItemIndex = function (item) {
                    return this._dropListRef.getItemIndex(item._dragRef);
                };
                /**
                 * Sorts an item inside the container based on its position.
                 * @param {?} item Item to be sorted.
                 * @param {?} pointerX Position of the item along the X axis.
                 * @param {?} pointerY Position of the item along the Y axis.
                 * @param {?} pointerDelta Direction in which the pointer is moving along each axis.
                 * @return {?}
                 */
                CdkDropList.prototype._sortItem = function (item, pointerX, pointerY, pointerDelta) {
                    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);
                };
                /**
                 * Figures out whether an item should be moved into a sibling
                 * drop container, based on its current position.
                 * @param {?} item Drag item that is being moved.
                 * @param {?} x Position of the item along the X axis.
                 * @param {?} y Position of the item along the Y axis.
                 * @return {?}
                 */
                CdkDropList.prototype._getSiblingContainerFromPosition = function (item, x, y) {
                    /** @type {?} */
                    var result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);
                    return result ? result.data : null;
                };
                /**
                 * Checks whether the user's pointer is positioned over the container.
                 * @param {?} x Pointer position along the X axis.
                 * @param {?} y Pointer position along the Y axis.
                 * @return {?}
                 */
                CdkDropList.prototype._isOverContainer = function (x, y) {
                    return this._dropListRef._isOverContainer(x, y);
                };
                /**
                 * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.
                 * @private
                 * @param {?} ref
                 * @return {?}
                 */
                CdkDropList.prototype._syncInputs = function (ref) {
                    var _this = this;
                    if (this._dir) {
                        this._dir.change
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(this._dir.value), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed))
                            .subscribe(( /**
                     * @param {?} value
                     * @return {?}
                     */function (/**
                     * @param {?} value
                     * @return {?}
                     */ value) { return ref.withDirection(value); }));
                    }
                    ref.beforeStarted.subscribe(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var siblings = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceArray"])(_this.connectedTo).map(( /**
                         * @param {?} drop
                         * @return {?}
                         */function (/**
                         * @param {?} drop
                         * @return {?}
                         */ drop) {
                            return typeof drop === 'string' ?
                                ( /** @type {?} */(CdkDropList._dropLists.find(( /**
                                 * @param {?} list
                                 * @return {?}
                                 */function (/**
                                 * @param {?} list
                                 * @return {?}
                                 */ list) { return list.id === drop; })))) : drop;
                        }));
                        if (_this._group) {
                            _this._group._items.forEach(( /**
                             * @param {?} drop
                             * @return {?}
                             */function (/**
                             * @param {?} drop
                             * @return {?}
                             */ drop) {
                                if (siblings.indexOf(drop) === -1) {
                                    siblings.push(drop);
                                }
                            }));
                        }
                        ref.disabled = _this.disabled;
                        ref.lockAxis = _this.lockAxis;
                        ref.sortingDisabled = _this.sortingDisabled;
                        ref.autoScrollDisabled = _this.autoScrollDisabled;
                        ref
                            .connectedTo(siblings.filter(( /**
                     * @param {?} drop
                     * @return {?}
                     */function (/**
                     * @param {?} drop
                     * @return {?}
                     */ drop) { return drop && drop !== _this; })).map(( /**
                         * @param {?} list
                         * @return {?}
                         */function (/**
                         * @param {?} list
                         * @return {?}
                         */ list) { return list._dropListRef; })))
                            .withOrientation(_this.orientation);
                    }));
                };
                /**
                 * Handles events from the underlying DropListRef.
                 * @private
                 * @param {?} ref
                 * @return {?}
                 */
                CdkDropList.prototype._handleEvents = function (ref) {
                    var _this = this;
                    ref.beforeStarted.subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._changeDetectorRef.markForCheck();
                    }));
                    ref.entered.subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        _this.entered.emit({
                            container: _this,
                            item: event.item.data,
                            currentIndex: event.currentIndex
                        });
                    }));
                    ref.exited.subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        _this.exited.emit({
                            container: _this,
                            item: event.item.data
                        });
                        _this._changeDetectorRef.markForCheck();
                    }));
                    ref.sorted.subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        _this.sorted.emit({
                            previousIndex: event.previousIndex,
                            currentIndex: event.currentIndex,
                            container: _this,
                            item: event.item.data
                        });
                    }));
                    ref.dropped.subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        _this.dropped.emit({
                            previousIndex: event.previousIndex,
                            currentIndex: event.currentIndex,
                            previousContainer: event.previousContainer.data,
                            container: event.container.data,
                            item: event.item.data,
                            isPointerOverContainer: event.isPointerOverContainer,
                            distance: event.distance
                        });
                        // Mark for check since all of these events run outside of change
                        // detection and we're not guaranteed for something else to have triggered it.
                        _this._changeDetectorRef.markForCheck();
                    }));
                };
                return CdkDropList;
            }());
            /**
             * Keeps track of the drop lists that are currently on the page.
             */
            CdkDropList._dropLists = [];
            CdkDropList.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Directive"], args: [{
                            selector: '[cdkDropList], cdk-drop-list',
                            exportAs: 'cdkDropList',
                            providers: [
                                // Prevent child drop lists from picking up the same group as their parent.
                                { provide: CdkDropListGroup, useValue: ɵ0 },
                                { provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList },
                            ],
                            host: {
                                'class': 'cdk-drop-list',
                                '[id]': 'id',
                                '[class.cdk-drop-list-disabled]': 'disabled',
                                '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',
                                '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',
                            }
                        },] },
            ];
            /** @nocollapse */
            CdkDropList.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"] },
                { type: DragDrop },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] },
                { type: CdkDropListGroup, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["SkipSelf"] }] }
            ]; };
            CdkDropList.propDecorators = {
                _draggables: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ContentChildren"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(( /**
                                         * @return {?}
                                         */function () { return CdkDrag; })), {
                                // Explicitly set to false since some of the logic below makes assumptions about it.
                                // The `.withItems` call below should be updated if we ever need to switch this to `true`.
                                descendants: false
                            },] }],
                connectedTo: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDropListConnectedTo',] }],
                data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDropListData',] }],
                orientation: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDropListOrientation',] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
                lockAxis: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDropListLockAxis',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDropListDisabled',] }],
                sortingDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDropListSortingDisabled',] }],
                enterPredicate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDropListEnterPredicate',] }],
                autoScrollDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['cdkDropListAutoScrollDisabled',] }],
                dropped: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['cdkDropListDropped',] }],
                entered: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['cdkDropListEntered',] }],
                exited: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['cdkDropListExited',] }],
                sorted: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['cdkDropListSorted',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var DragDropModule = /** @class */ (function () {
                function DragDropModule() {
                }
                return DragDropModule;
            }());
            DragDropModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgModule"], args: [{
                            declarations: [
                                CdkDropList,
                                CdkDropListGroup,
                                CdkDrag,
                                CdkDragHandle,
                                CdkDragPreview,
                                CdkDragPlaceholder,
                            ],
                            exports: [
                                CdkDropList,
                                CdkDropListGroup,
                                CdkDrag,
                                CdkDragHandle,
                                CdkDragPreview,
                                CdkDragPlaceholder,
                            ],
                            providers: [
                                DragDrop,
                            ]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=drag-drop.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/keycodes.js": 
        /*!*******************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/keycodes.js ***!
          \*******************************************************/
        /*! exports provided: MAC_ENTER, BACKSPACE, TAB, NUM_CENTER, ENTER, SHIFT, CONTROL, ALT, PAUSE, CAPS_LOCK, ESCAPE, SPACE, PAGE_UP, PAGE_DOWN, END, HOME, LEFT_ARROW, UP_ARROW, RIGHT_ARROW, DOWN_ARROW, PLUS_SIGN, PRINT_SCREEN, INSERT, DELETE, ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, FF_SEMICOLON, FF_EQUALS, QUESTION_MARK, AT_SIGN, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, META, MAC_WK_CMD_LEFT, MAC_WK_CMD_RIGHT, CONTEXT_MENU, NUMPAD_ZERO, NUMPAD_ONE, NUMPAD_TWO, NUMPAD_THREE, NUMPAD_FOUR, NUMPAD_FIVE, NUMPAD_SIX, NUMPAD_SEVEN, NUMPAD_EIGHT, NUMPAD_NINE, NUMPAD_MULTIPLY, NUMPAD_PLUS, NUMPAD_MINUS, NUMPAD_PERIOD, NUMPAD_DIVIDE, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, NUM_LOCK, SCROLL_LOCK, FIRST_MEDIA, FF_MINUS, MUTE, VOLUME_DOWN, VOLUME_UP, FF_MUTE, FF_VOLUME_DOWN, LAST_MEDIA, FF_VOLUME_UP, SEMICOLON, EQUALS, COMMA, DASH, SLASH, APOSTROPHE, TILDE, OPEN_SQUARE_BRACKET, BACKSLASH, CLOSE_SQUARE_BRACKET, SINGLE_QUOTE, MAC_META, hasModifierKey */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAC_ENTER", function () { return MAC_ENTER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BACKSPACE", function () { return BACKSPACE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAB", function () { return TAB; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUM_CENTER", function () { return NUM_CENTER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENTER", function () { return ENTER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SHIFT", function () { return SHIFT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTROL", function () { return CONTROL; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ALT", function () { return ALT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAUSE", function () { return PAUSE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CAPS_LOCK", function () { return CAPS_LOCK; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ESCAPE", function () { return ESCAPE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SPACE", function () { return SPACE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_UP", function () { return PAGE_UP; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_DOWN", function () { return PAGE_DOWN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "END", function () { return END; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOME", function () { return HOME; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LEFT_ARROW", function () { return LEFT_ARROW; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UP_ARROW", function () { return UP_ARROW; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RIGHT_ARROW", function () { return RIGHT_ARROW; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOWN_ARROW", function () { return DOWN_ARROW; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PLUS_SIGN", function () { return PLUS_SIGN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PRINT_SCREEN", function () { return PRINT_SCREEN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INSERT", function () { return INSERT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DELETE", function () { return DELETE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZERO", function () { return ZERO; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ONE", function () { return ONE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TWO", function () { return TWO; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "THREE", function () { return THREE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOUR", function () { return FOUR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FIVE", function () { return FIVE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SIX", function () { return SIX; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SEVEN", function () { return SEVEN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EIGHT", function () { return EIGHT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NINE", function () { return NINE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_SEMICOLON", function () { return FF_SEMICOLON; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_EQUALS", function () { return FF_EQUALS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QUESTION_MARK", function () { return QUESTION_MARK; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AT_SIGN", function () { return AT_SIGN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function () { return A; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function () { return B; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function () { return C; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function () { return D; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "E", function () { return E; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F", function () { return F; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "G", function () { return G; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "H", function () { return H; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I", function () { return I; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "J", function () { return J; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "K", function () { return K; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "L", function () { return L; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "M", function () { return M; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "N", function () { return N; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "O", function () { return O; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "P", function () { return P; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Q", function () { return Q; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "R", function () { return R; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "S", function () { return S; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "T", function () { return T; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "U", function () { return U; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "V", function () { return V; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "W", function () { return W; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "X", function () { return X; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Y", function () { return Y; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Z", function () { return Z; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "META", function () { return META; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAC_WK_CMD_LEFT", function () { return MAC_WK_CMD_LEFT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAC_WK_CMD_RIGHT", function () { return MAC_WK_CMD_RIGHT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTEXT_MENU", function () { return CONTEXT_MENU; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_ZERO", function () { return NUMPAD_ZERO; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_ONE", function () { return NUMPAD_ONE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_TWO", function () { return NUMPAD_TWO; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_THREE", function () { return NUMPAD_THREE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_FOUR", function () { return NUMPAD_FOUR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_FIVE", function () { return NUMPAD_FIVE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_SIX", function () { return NUMPAD_SIX; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_SEVEN", function () { return NUMPAD_SEVEN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_EIGHT", function () { return NUMPAD_EIGHT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_NINE", function () { return NUMPAD_NINE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_MULTIPLY", function () { return NUMPAD_MULTIPLY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_PLUS", function () { return NUMPAD_PLUS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_MINUS", function () { return NUMPAD_MINUS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_PERIOD", function () { return NUMPAD_PERIOD; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_DIVIDE", function () { return NUMPAD_DIVIDE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F1", function () { return F1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F2", function () { return F2; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F3", function () { return F3; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F4", function () { return F4; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F5", function () { return F5; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F6", function () { return F6; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F7", function () { return F7; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F8", function () { return F8; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F9", function () { return F9; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F10", function () { return F10; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F11", function () { return F11; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F12", function () { return F12; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUM_LOCK", function () { return NUM_LOCK; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL_LOCK", function () { return SCROLL_LOCK; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FIRST_MEDIA", function () { return FIRST_MEDIA; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_MINUS", function () { return FF_MINUS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MUTE", function () { return MUTE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VOLUME_DOWN", function () { return VOLUME_DOWN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VOLUME_UP", function () { return VOLUME_UP; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_MUTE", function () { return FF_MUTE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_VOLUME_DOWN", function () { return FF_VOLUME_DOWN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LAST_MEDIA", function () { return LAST_MEDIA; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_VOLUME_UP", function () { return FF_VOLUME_UP; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SEMICOLON", function () { return SEMICOLON; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EQUALS", function () { return EQUALS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMA", function () { return COMMA; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DASH", function () { return DASH; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SLASH", function () { return SLASH; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APOSTROPHE", function () { return APOSTROPHE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TILDE", function () { return TILDE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OPEN_SQUARE_BRACKET", function () { return OPEN_SQUARE_BRACKET; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BACKSLASH", function () { return BACKSLASH; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CLOSE_SQUARE_BRACKET", function () { return CLOSE_SQUARE_BRACKET; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SINGLE_QUOTE", function () { return SINGLE_QUOTE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAC_META", function () { return MAC_META; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasModifierKey", function () { return hasModifierKey; });
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAC_ENTER = 3;
            /** @type {?} */
            var BACKSPACE = 8;
            /** @type {?} */
            var TAB = 9;
            /** @type {?} */
            var NUM_CENTER = 12;
            /** @type {?} */
            var ENTER = 13;
            /** @type {?} */
            var SHIFT = 16;
            /** @type {?} */
            var CONTROL = 17;
            /** @type {?} */
            var ALT = 18;
            /** @type {?} */
            var PAUSE = 19;
            /** @type {?} */
            var CAPS_LOCK = 20;
            /** @type {?} */
            var ESCAPE = 27;
            /** @type {?} */
            var SPACE = 32;
            /** @type {?} */
            var PAGE_UP = 33;
            /** @type {?} */
            var PAGE_DOWN = 34;
            /** @type {?} */
            var END = 35;
            /** @type {?} */
            var HOME = 36;
            /** @type {?} */
            var LEFT_ARROW = 37;
            /** @type {?} */
            var UP_ARROW = 38;
            /** @type {?} */
            var RIGHT_ARROW = 39;
            /** @type {?} */
            var DOWN_ARROW = 40;
            /** @type {?} */
            var PLUS_SIGN = 43;
            /** @type {?} */
            var PRINT_SCREEN = 44;
            /** @type {?} */
            var INSERT = 45;
            /** @type {?} */
            var DELETE = 46;
            /** @type {?} */
            var ZERO = 48;
            /** @type {?} */
            var ONE = 49;
            /** @type {?} */
            var TWO = 50;
            /** @type {?} */
            var THREE = 51;
            /** @type {?} */
            var FOUR = 52;
            /** @type {?} */
            var FIVE = 53;
            /** @type {?} */
            var SIX = 54;
            /** @type {?} */
            var SEVEN = 55;
            /** @type {?} */
            var EIGHT = 56;
            /** @type {?} */
            var NINE = 57;
            /** @type {?} */
            var FF_SEMICOLON = 59;
            // Firefox (Gecko) fires this for semicolon instead of 186
            /** @type {?} */
            var FF_EQUALS = 61;
            // Firefox (Gecko) fires this for equals instead of 187
            /** @type {?} */
            var QUESTION_MARK = 63;
            /** @type {?} */
            var AT_SIGN = 64;
            /** @type {?} */
            var A = 65;
            /** @type {?} */
            var B = 66;
            /** @type {?} */
            var C = 67;
            /** @type {?} */
            var D = 68;
            /** @type {?} */
            var E = 69;
            /** @type {?} */
            var F = 70;
            /** @type {?} */
            var G = 71;
            /** @type {?} */
            var H = 72;
            /** @type {?} */
            var I = 73;
            /** @type {?} */
            var J = 74;
            /** @type {?} */
            var K = 75;
            /** @type {?} */
            var L = 76;
            /** @type {?} */
            var M = 77;
            /** @type {?} */
            var N = 78;
            /** @type {?} */
            var O = 79;
            /** @type {?} */
            var P = 80;
            /** @type {?} */
            var Q = 81;
            /** @type {?} */
            var R = 82;
            /** @type {?} */
            var S = 83;
            /** @type {?} */
            var T = 84;
            /** @type {?} */
            var U = 85;
            /** @type {?} */
            var V = 86;
            /** @type {?} */
            var W = 87;
            /** @type {?} */
            var X = 88;
            /** @type {?} */
            var Y = 89;
            /** @type {?} */
            var Z = 90;
            /** @type {?} */
            var META = 91;
            // WIN_KEY_LEFT
            /** @type {?} */
            var MAC_WK_CMD_LEFT = 91;
            /** @type {?} */
            var MAC_WK_CMD_RIGHT = 93;
            /** @type {?} */
            var CONTEXT_MENU = 93;
            /** @type {?} */
            var NUMPAD_ZERO = 96;
            /** @type {?} */
            var NUMPAD_ONE = 97;
            /** @type {?} */
            var NUMPAD_TWO = 98;
            /** @type {?} */
            var NUMPAD_THREE = 99;
            /** @type {?} */
            var NUMPAD_FOUR = 100;
            /** @type {?} */
            var NUMPAD_FIVE = 101;
            /** @type {?} */
            var NUMPAD_SIX = 102;
            /** @type {?} */
            var NUMPAD_SEVEN = 103;
            /** @type {?} */
            var NUMPAD_EIGHT = 104;
            /** @type {?} */
            var NUMPAD_NINE = 105;
            /** @type {?} */
            var NUMPAD_MULTIPLY = 106;
            /** @type {?} */
            var NUMPAD_PLUS = 107;
            /** @type {?} */
            var NUMPAD_MINUS = 109;
            /** @type {?} */
            var NUMPAD_PERIOD = 110;
            /** @type {?} */
            var NUMPAD_DIVIDE = 111;
            /** @type {?} */
            var F1 = 112;
            /** @type {?} */
            var F2 = 113;
            /** @type {?} */
            var F3 = 114;
            /** @type {?} */
            var F4 = 115;
            /** @type {?} */
            var F5 = 116;
            /** @type {?} */
            var F6 = 117;
            /** @type {?} */
            var F7 = 118;
            /** @type {?} */
            var F8 = 119;
            /** @type {?} */
            var F9 = 120;
            /** @type {?} */
            var F10 = 121;
            /** @type {?} */
            var F11 = 122;
            /** @type {?} */
            var F12 = 123;
            /** @type {?} */
            var NUM_LOCK = 144;
            /** @type {?} */
            var SCROLL_LOCK = 145;
            /** @type {?} */
            var FIRST_MEDIA = 166;
            /** @type {?} */
            var FF_MINUS = 173;
            /** @type {?} */
            var MUTE = 173;
            // Firefox (Gecko) fires 181 for MUTE
            /** @type {?} */
            var VOLUME_DOWN = 174;
            // Firefox (Gecko) fires 182 for VOLUME_DOWN
            /** @type {?} */
            var VOLUME_UP = 175;
            // Firefox (Gecko) fires 183 for VOLUME_UP
            /** @type {?} */
            var FF_MUTE = 181;
            /** @type {?} */
            var FF_VOLUME_DOWN = 182;
            /** @type {?} */
            var LAST_MEDIA = 183;
            /** @type {?} */
            var FF_VOLUME_UP = 183;
            /** @type {?} */
            var SEMICOLON = 186;
            // Firefox (Gecko) fires 59 for SEMICOLON
            /** @type {?} */
            var EQUALS = 187;
            // Firefox (Gecko) fires 61 for EQUALS
            /** @type {?} */
            var COMMA = 188;
            /** @type {?} */
            var DASH = 189;
            // Firefox (Gecko) fires 173 for DASH/MINUS
            /** @type {?} */
            var SLASH = 191;
            /** @type {?} */
            var APOSTROPHE = 192;
            /** @type {?} */
            var TILDE = 192;
            /** @type {?} */
            var OPEN_SQUARE_BRACKET = 219;
            /** @type {?} */
            var BACKSLASH = 220;
            /** @type {?} */
            var CLOSE_SQUARE_BRACKET = 221;
            /** @type {?} */
            var SINGLE_QUOTE = 222;
            /** @type {?} */
            var MAC_META = 224;
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Checks whether a modifier key is pressed.
             * @param {?} event Event to be checked.
             * @param {...?} modifiers
             * @return {?}
             */
            function hasModifierKey(event) {
                var modifiers = [];
                for (var _b = 1; _b < arguments.length; _b++) {
                    modifiers[_b - 1] = arguments[_b];
                }
                if (modifiers.length) {
                    return modifiers.some(( /**
                     * @param {?} modifier
                     * @return {?}
                     */function (/**
                     * @param {?} modifier
                     * @return {?}
                     */ modifier) { return event[modifier]; }));
                }
                return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=keycodes.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/layout.js": 
        /*!*****************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/layout.js ***!
          \*****************************************************/
        /*! exports provided: LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutModule", function () { return LayoutModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreakpointObserver", function () { return BreakpointObserver; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Breakpoints", function () { return Breakpoints; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MediaMatcher", function () { return MediaMatcher; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var LayoutModule = /** @class */ (function () {
                function LayoutModule() {
                }
                return LayoutModule;
            }());
            LayoutModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{},] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Global registry for all dynamically-created, injected media queries.
             * @type {?}
             */
            var mediaQueriesForWebkitCompatibility = new Set();
            /**
             * Style tag that holds all of the dynamically-created media queries.
             * @type {?}
             */
            var mediaQueryStyleNode;
            /**
             * A utility for calling matchMedia queries.
             */
            var MediaMatcher = /** @class */ (function () {
                /**
                 * @param {?} _platform
                 */
                function MediaMatcher(_platform) {
                    this._platform = _platform;
                    this._matchMedia = this._platform.isBrowser && window.matchMedia ?
                        // matchMedia is bound to the window scope intentionally as it is an illegal invocation to
                        // call it from a different scope.
                        window.matchMedia.bind(window) :
                        noopMatchMedia;
                }
                /**
                 * Evaluates the given media query and returns the native MediaQueryList from which results
                 * can be retrieved.
                 * Confirms the layout engine will trigger for the selector query provided and returns the
                 * MediaQueryList for the query provided.
                 * @param {?} query
                 * @return {?}
                 */
                MediaMatcher.prototype.matchMedia = function (query) {
                    if (this._platform.WEBKIT) {
                        createEmptyStyleRule(query);
                    }
                    return this._matchMedia(query);
                };
                return MediaMatcher;
            }());
            MediaMatcher.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            MediaMatcher.ctorParameters = function () { return [
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["Platform"] }
            ]; };
            /** @nocollapse */ MediaMatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function MediaMatcher_Factory() { return new MediaMatcher(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["Platform"])); }, token: MediaMatcher, providedIn: "root" });
            /**
             * For Webkit engines that only trigger the MediaQueryListListener when
             * there is at least one CSS selector for the respective media query.
             * @param {?} query
             * @return {?}
             */
            function createEmptyStyleRule(query) {
                if (mediaQueriesForWebkitCompatibility.has(query)) {
                    return;
                }
                try {
                    if (!mediaQueryStyleNode) {
                        mediaQueryStyleNode = document.createElement('style');
                        mediaQueryStyleNode.setAttribute('type', 'text/css');
                        ( /** @type {?} */(document.head)).appendChild(mediaQueryStyleNode);
                    }
                    if (mediaQueryStyleNode.sheet) {
                        (( /** @type {?} */(mediaQueryStyleNode.sheet)))
                            .insertRule("@media " + query + " {.fx-query-test{ }}", 0);
                        mediaQueriesForWebkitCompatibility.add(query);
                    }
                }
                catch (e) {
                    console.error(e);
                }
            }
            /**
             * No-op matchMedia replacement for non-browser platforms.
             * @param {?} query
             * @return {?}
             */
            function noopMatchMedia(query) {
                // Use `as any` here to avoid adding additional necessary properties for
                // the noop matcher.
                return ( /** @type {?} */({
                    matches: query === 'all' || query === '',
                    media: query,
                    addListener: ( /**
                     * @return {?}
                     */function () { }),
                    removeListener: ( /**
                     * @return {?}
                     */function () { })
                }));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Utility for checking the matching state of \@media queries.
             */
            var BreakpointObserver = /** @class */ (function () {
                /**
                 * @param {?} _mediaMatcher
                 * @param {?} _zone
                 */
                function BreakpointObserver(_mediaMatcher, _zone) {
                    this._mediaMatcher = _mediaMatcher;
                    this._zone = _zone;
                    /**
                     * A map of all media queries currently being listened for.
                     */
                    this._queries = new Map();
                    /**
                     * A subject for all other observables to takeUntil based on.
                     */
                    this._destroySubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                }
                /**
                 * Completes the active subject, signalling to all other observables to complete.
                 * @return {?}
                 */
                BreakpointObserver.prototype.ngOnDestroy = function () {
                    this._destroySubject.next();
                    this._destroySubject.complete();
                };
                /**
                 * Whether one or more media queries match the current viewport size.
                 * @param {?} value One or more media queries to check.
                 * @return {?} Whether any of the media queries match.
                 */
                BreakpointObserver.prototype.isMatched = function (value) {
                    var _this = this;
                    /** @type {?} */
                    var queries = splitQueries(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceArray"])(value));
                    return queries.some(( /**
                     * @param {?} mediaQuery
                     * @return {?}
                     */function (/**
                     * @param {?} mediaQuery
                     * @return {?}
                     */ mediaQuery) { return _this._registerQuery(mediaQuery).mql.matches; }));
                };
                /**
                 * Gets an observable of results for the given queries that will emit new results for any changes
                 * in matching of the given queries.
                 * @param {?} value One or more media queries to check.
                 * @return {?} A stream of matches for the given queries.
                 */
                BreakpointObserver.prototype.observe = function (value) {
                    var _this = this;
                    /** @type {?} */
                    var queries = splitQueries(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceArray"])(value));
                    /** @type {?} */
                    var observables = queries.map(( /**
                     * @param {?} query
                     * @return {?}
                     */function (/**
                     * @param {?} query
                     * @return {?}
                     */ query) { return _this._registerQuery(query).observable; }));
                    /** @type {?} */
                    var stateObservable = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["combineLatest"])(observables);
                    // Emit the first state immediately, and then debounce the subsequent emissions.
                    stateObservable = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["concat"])(stateObservable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1)), stateObservable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["skip"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["debounceTime"])(0)));
                    return stateObservable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(( /**
                     * @param {?} breakpointStates
                     * @return {?}
                     */function (breakpointStates) {
                        /** @type {?} */
                        var response = {
                            matches: false,
                            breakpoints: {},
                        };
                        breakpointStates.forEach(( /**
                         * @param {?} state
                         * @return {?}
                         */function (state) {
                            response.matches = response.matches || state.matches;
                            response.breakpoints[state.query] = state.matches;
                        }));
                        return response;
                    })));
                };
                /**
                 * Registers a specific query to be listened for.
                 * @private
                 * @param {?} query
                 * @return {?}
                 */
                BreakpointObserver.prototype._registerQuery = function (query) {
                    var _this = this;
                    // Only set up a new MediaQueryList if it is not already being listened for.
                    if (this._queries.has(query)) {
                        return ( /** @type {?} */(this._queries.get(query)));
                    }
                    /** @type {?} */
                    var mql = this._mediaMatcher.matchMedia(query);
                    // Create callback for match changes and add it is as a listener.
                    /** @type {?} */
                    var queryObservable = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) {
                        // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed
                        // back into the zone because matchMedia is only included in Zone.js by loading the
                        // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not
                        // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js
                        // patches it.
                        /** @type {?} */
                        var handler = ( /**
                         * @param {?} e
                         * @return {?}
                         */function (e) { return _this._zone.run(( /**
                         * @return {?}
                         */function () { return observer.next(e); })); });
                        mql.addListener(handler);
                        return ( /**
                         * @return {?}
                         */function () {
                            mql.removeListener(handler);
                        });
                    })).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(mql), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(( /**
                     * @param {?} nextMql
                     * @return {?}
                     */function (nextMql) { return ({ query: query, matches: nextMql.matches }); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroySubject));
                    // Add the MediaQueryList to the set of queries.
                    /** @type {?} */
                    var output = { observable: queryObservable, mql: mql };
                    this._queries.set(query, output);
                    return output;
                };
                return BreakpointObserver;
            }());
            BreakpointObserver.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            BreakpointObserver.ctorParameters = function () { return [
                { type: MediaMatcher },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }
            ]; };
            /** @nocollapse */ BreakpointObserver.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(MediaMatcher), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"])); }, token: BreakpointObserver, providedIn: "root" });
            /**
             * Split each query string into separate query strings if two queries are provided as comma
             * separated.
             * @param {?} queries
             * @return {?}
             */
            function splitQueries(queries) {
                return queries.map(( /**
                 * @param {?} query
                 * @return {?}
                 */function (query) { return query.split(','); }))
                    .reduce(( /**
             * @param {?} a1
             * @param {?} a2
             * @return {?}
             */function (a1, a2) { return a1.concat(a2); }))
                    .map(( /**
             * @param {?} query
             * @return {?}
             */function (/**
             * @param {?} query
             * @return {?}
             */ query) { return query.trim(); }));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // PascalCase is being used as Breakpoints is used like an enum.
            // tslint:disable-next-line:variable-name
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             * @type {?}
             */
            var Breakpoints = {
                XSmall: '(max-width: 599.99px)',
                Small: '(min-width: 600px) and (max-width: 959.99px)',
                Medium: '(min-width: 960px) and (max-width: 1279.99px)',
                Large: '(min-width: 1280px) and (max-width: 1919.99px)',
                XLarge: '(min-width: 1920px)',
                Handset: '(max-width: 599.99px) and (orientation: portrait), ' +
                    '(max-width: 959.99px) and (orientation: landscape)',
                Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +
                    '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',
                Web: '(min-width: 840px) and (orientation: portrait), ' +
                    '(min-width: 1280px) and (orientation: landscape)',
                HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',
                TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',
                WebPortrait: '(min-width: 840px) and (orientation: portrait)',
                HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',
                TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',
                WebLandscape: '(min-width: 1280px) and (orientation: landscape)',
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=layout.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/observers.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/observers.js ***!
          \********************************************************/
        /*! exports provided: MutationObserverFactory, ContentObserver, CdkObserveContent, ObserversModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MutationObserverFactory", function () { return MutationObserverFactory; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContentObserver", function () { return ContentObserver; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkObserveContent", function () { return CdkObserveContent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObserversModule", function () { return ObserversModule; });
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.
             * \@docs-private
             */
            var MutationObserverFactory = /** @class */ (function () {
                function MutationObserverFactory() {
                }
                /**
                 * @param {?} callback
                 * @return {?}
                 */
                MutationObserverFactory.prototype.create = function (callback) {
                    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);
                };
                return MutationObserverFactory;
            }());
            MutationObserverFactory.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ MutationObserverFactory.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: "root" });
            /**
             * An injectable service that allows watching elements for changes to their content.
             */
            var ContentObserver = /** @class */ (function () {
                /**
                 * @param {?} _mutationObserverFactory
                 */
                function ContentObserver(_mutationObserverFactory) {
                    this._mutationObserverFactory = _mutationObserverFactory;
                    /**
                     * Keeps track of the existing MutationObservers so they can be reused.
                     */
                    this._observedElements = new Map();
                }
                /**
                 * @return {?}
                 */
                ContentObserver.prototype.ngOnDestroy = function () {
                    var _this = this;
                    this._observedElements.forEach(( /**
                     * @param {?} _
                     * @param {?} element
                     * @return {?}
                     */function (_, element) { return _this._cleanupObserver(element); }));
                };
                /**
                 * @param {?} elementOrRef
                 * @return {?}
                 */
                ContentObserver.prototype.observe = function (elementOrRef) {
                    var _this = this;
                    /** @type {?} */
                    var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceElement"])(elementOrRef);
                    return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) {
                        /** @type {?} */
                        var stream = _this._observeElement(element);
                        /** @type {?} */
                        var subscription = stream.subscribe(observer);
                        return ( /**
                         * @return {?}
                         */function () {
                            subscription.unsubscribe();
                            _this._unobserveElement(element);
                        });
                    }));
                };
                /**
                 * Observes the given element by using the existing MutationObserver if available, or creating a
                 * new one if not.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                ContentObserver.prototype._observeElement = function (element) {
                    if (!this._observedElements.has(element)) {
                        /** @type {?} */
                        var stream_1 = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                        /** @type {?} */
                        var observer = this._mutationObserverFactory.create(( /**
                         * @param {?} mutations
                         * @return {?}
                         */function (/**
                         * @param {?} mutations
                         * @return {?}
                         */ mutations) { return stream_1.next(mutations); }));
                        if (observer) {
                            observer.observe(element, {
                                characterData: true,
                                childList: true,
                                subtree: true
                            });
                        }
                        this._observedElements.set(element, { observer: observer, stream: stream_1, count: 1 });
                    }
                    else {
                        ( /** @type {?} */(this._observedElements.get(element))).count++;
                    }
                    return ( /** @type {?} */(this._observedElements.get(element))).stream;
                };
                /**
                 * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is
                 * observing this element.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                ContentObserver.prototype._unobserveElement = function (element) {
                    if (this._observedElements.has(element)) {
                        ( /** @type {?} */(this._observedElements.get(element))).count--;
                        if (!( /** @type {?} */(this._observedElements.get(element))).count) {
                            this._cleanupObserver(element);
                        }
                    }
                };
                /**
                 * Clean up the underlying MutationObserver for the specified element.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                ContentObserver.prototype._cleanupObserver = function (element) {
                    if (this._observedElements.has(element)) {
                        var _b = ( /** @type {?} */(this._observedElements.get(element))), observer = _b.observer, stream = _b.stream;
                        if (observer) {
                            observer.disconnect();
                        }
                        stream.complete();
                        this._observedElements.delete(element);
                    }
                };
                return ContentObserver;
            }());
            ContentObserver.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            ContentObserver.ctorParameters = function () { return [
                { type: MutationObserverFactory }
            ]; };
            /** @nocollapse */ ContentObserver.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function ContentObserver_Factory() { return new ContentObserver(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(MutationObserverFactory)); }, token: ContentObserver, providedIn: "root" });
            /**
             * Directive that triggers a callback whenever the content of
             * its associated element has changed.
             */
            var CdkObserveContent = /** @class */ (function () {
                /**
                 * @param {?} _contentObserver
                 * @param {?} _elementRef
                 * @param {?} _ngZone
                 */
                function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {
                    this._contentObserver = _contentObserver;
                    this._elementRef = _elementRef;
                    this._ngZone = _ngZone;
                    /**
                     * Event emitted for each change in the element's content.
                     */
                    this.event = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    this._disabled = false;
                    this._currentSubscription = null;
                }
                Object.defineProperty(CdkObserveContent.prototype, "disabled", {
                    /**
                     * Whether observing content is disabled. This option can be used
                     * to disconnect the underlying MutationObserver until it is needed.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                        this._disabled ? this._unsubscribe() : this._subscribe();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkObserveContent.prototype, "debounce", {
                    /**
                     * Debounce interval for emitting the changes.
                     * @return {?}
                     */
                    get: function () { return this._debounce; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._debounce = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceNumberProperty"])(value);
                        this._subscribe();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkObserveContent.prototype.ngAfterContentInit = function () {
                    if (!this._currentSubscription && !this.disabled) {
                        this._subscribe();
                    }
                };
                /**
                 * @return {?}
                 */
                CdkObserveContent.prototype.ngOnDestroy = function () {
                    this._unsubscribe();
                };
                /**
                 * @private
                 * @return {?}
                 */
                CdkObserveContent.prototype._subscribe = function () {
                    var _this = this;
                    this._unsubscribe();
                    /** @type {?} */
                    var stream = this._contentObserver.observe(this._elementRef);
                    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.
                    // Consider brining it back inside the zone next time we're making breaking changes.
                    // Bringing it back inside can cause things like infinite change detection loops and changed
                    // after checked errors if people's code isn't handling it properly.
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._currentSubscription =
                            (_this.debounce ? stream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["debounceTime"])(_this.debounce)) : stream).subscribe(_this.event);
                    }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                CdkObserveContent.prototype._unsubscribe = function () {
                    if (this._currentSubscription) {
                        this._currentSubscription.unsubscribe();
                    }
                };
                return CdkObserveContent;
            }());
            CdkObserveContent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkObserveContent]',
                            exportAs: 'cdkObserveContent',
                        },] },
            ];
            /** @nocollapse */
            CdkObserveContent.ctorParameters = function () { return [
                { type: ContentObserver },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] }
            ]; };
            CdkObserveContent.propDecorators = {
                event: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"], args: ['cdkObserveContent',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkObserveContentDisabled',] }],
                debounce: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            var ObserversModule = /** @class */ (function () {
                function ObserversModule() {
                }
                return ObserversModule;
            }());
            ObserversModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            exports: [CdkObserveContent],
                            declarations: [CdkObserveContent],
                            providers: [MutationObserverFactory]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=observers.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/overlay.js": 
        /*!******************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/overlay.js ***!
          \******************************************************/
        /*! exports provided: ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher, Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, ɵg, ɵf, ɵb, ɵa, ɵc, ɵe, ɵd */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Overlay", function () { return Overlay; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayContainer", function () { return OverlayContainer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkOverlayOrigin", function () { return CdkOverlayOrigin; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkConnectedOverlay", function () { return CdkConnectedOverlay; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FullscreenOverlayContainer", function () { return FullscreenOverlayContainer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayRef", function () { return OverlayRef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayKeyboardDispatcher", function () { return OverlayKeyboardDispatcher; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayPositionBuilder", function () { return OverlayPositionBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GlobalPositionStrategy", function () { return GlobalPositionStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectedPositionStrategy", function () { return ConnectedPositionStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexibleConnectedPositionStrategy", function () { return FlexibleConnectedPositionStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayConfig", function () { return OverlayConfig; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateVerticalPosition", function () { return validateVerticalPosition; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateHorizontalPosition", function () { return validateHorizontalPosition; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionPositionPair", function () { return ConnectionPositionPair; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollingVisibility", function () { return ScrollingVisibility; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectedOverlayPositionChange", function () { return ConnectedOverlayPositionChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollStrategyOptions", function () { return ScrollStrategyOptions; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepositionScrollStrategy", function () { return RepositionScrollStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloseScrollStrategy", function () { return CloseScrollStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoopScrollStrategy", function () { return NoopScrollStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockScrollStrategy", function () { return BlockScrollStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayModule", function () { return OverlayModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OVERLAY_PROVIDERS", function () { return OVERLAY_PROVIDERS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function () { return OVERLAY_KEYBOARD_DISPATCHER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function () { return OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function () { return OVERLAY_CONTAINER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function () { return OVERLAY_CONTAINER_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function () { return CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function () { return CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function () { return CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY; });
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm2015/scrolling.js");
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ViewportRuler", function () { return _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VIEWPORT_RULER_PROVIDER", function () { return _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["VIEWPORT_RULER_PROVIDER"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CdkScrollable", function () { return _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["CdkScrollable"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ScrollDispatcher", function () { return _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollDispatcher"]; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Strategy that will prevent the user from scrolling while the overlay is visible.
             */
            var BlockScrollStrategy = /** @class */ (function () {
                /**
                 * @param {?} _viewportRuler
                 * @param {?} document
                 */
                function BlockScrollStrategy(_viewportRuler, document) {
                    this._viewportRuler = _viewportRuler;
                    this._previousHTMLStyles = { top: '', left: '' };
                    this._isEnabled = false;
                    this._document = document;
                }
                /**
                 * Attaches this scroll strategy to an overlay.
                 * @return {?}
                 */
                BlockScrollStrategy.prototype.attach = function () { };
                /**
                 * Blocks page-level scroll while the attached overlay is open.
                 * @return {?}
                 */
                BlockScrollStrategy.prototype.enable = function () {
                    if (this._canBeEnabled()) {
                        /** @type {?} */
                        var root = ( /** @type {?} */(this._document.documentElement));
                        this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();
                        // Cache the previous inline styles in case the user had set them.
                        this._previousHTMLStyles.left = root.style.left || '';
                        this._previousHTMLStyles.top = root.style.top || '';
                        // Note: we're using the `html` node, instead of the `body`, because the `body` may
                        // have the user agent margin, whereas the `html` is guaranteed not to have one.
                        root.style.left = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(-this._previousScrollPosition.left);
                        root.style.top = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(-this._previousScrollPosition.top);
                        root.classList.add('cdk-global-scrollblock');
                        this._isEnabled = true;
                    }
                };
                /**
                 * Unblocks page-level scroll while the attached overlay is open.
                 * @return {?}
                 */
                BlockScrollStrategy.prototype.disable = function () {
                    if (this._isEnabled) {
                        /** @type {?} */
                        var html = ( /** @type {?} */(this._document.documentElement));
                        /** @type {?} */
                        var body = ( /** @type {?} */(this._document.body));
                        /** @type {?} */
                        var htmlStyle = ( /** @type {?} */(html.style));
                        /** @type {?} */
                        var bodyStyle = ( /** @type {?} */(body.style));
                        /** @type {?} */
                        var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';
                        /** @type {?} */
                        var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';
                        this._isEnabled = false;
                        htmlStyle.left = this._previousHTMLStyles.left;
                        htmlStyle.top = this._previousHTMLStyles.top;
                        html.classList.remove('cdk-global-scrollblock');
                        // Disable user-defined smooth scrolling temporarily while we restore the scroll position.
                        // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior
                        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';
                        window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);
                        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;
                        bodyStyle.scrollBehavior = previousBodyScrollBehavior;
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                BlockScrollStrategy.prototype._canBeEnabled = function () {
                    // Since the scroll strategies can't be singletons, we have to use a global CSS class
                    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global
                    // scrolling multiple times.
                    /** @type {?} */
                    var html = ( /** @type {?} */(this._document.documentElement));
                    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {
                        return false;
                    }
                    /** @type {?} */
                    var body = this._document.body;
                    /** @type {?} */
                    var viewport = this._viewportRuler.getViewportSize();
                    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;
                };
                return BlockScrollStrategy;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.
             * @return {?}
             */
            function getMatScrollStrategyAlreadyAttachedError() {
                return Error("Scroll strategy has already been attached.");
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Strategy that will close the overlay as soon as the user starts scrolling.
             */
            var CloseScrollStrategy = /** @class */ (function () {
                /**
                 * @param {?} _scrollDispatcher
                 * @param {?} _ngZone
                 * @param {?} _viewportRuler
                 * @param {?=} _config
                 */
                function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {
                    var _this = this;
                    this._scrollDispatcher = _scrollDispatcher;
                    this._ngZone = _ngZone;
                    this._viewportRuler = _viewportRuler;
                    this._config = _config;
                    this._scrollSubscription = null;
                    /**
                     * Detaches the overlay ref and disables the scroll strategy.
                     */
                    this._detach = ( /**
                     * @return {?}
                     */function () {
                        _this.disable();
                        if (_this._overlayRef.hasAttached()) {
                            _this._ngZone.run(( /**
                             * @return {?}
                             */function () { return _this._overlayRef.detach(); }));
                        }
                    });
                }
                /**
                 * Attaches this scroll strategy to an overlay.
                 * @param {?} overlayRef
                 * @return {?}
                 */
                CloseScrollStrategy.prototype.attach = function (overlayRef) {
                    if (this._overlayRef) {
                        throw getMatScrollStrategyAlreadyAttachedError();
                    }
                    this._overlayRef = overlayRef;
                };
                /**
                 * Enables the closing of the attached overlay on scroll.
                 * @return {?}
                 */
                CloseScrollStrategy.prototype.enable = function () {
                    var _this = this;
                    if (this._scrollSubscription) {
                        return;
                    }
                    /** @type {?} */
                    var stream = this._scrollDispatcher.scrolled(0);
                    if (this._config && this._config.threshold && this._config.threshold > 1) {
                        this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;
                        this._scrollSubscription = stream.subscribe(( /**
                         * @return {?}
                         */function () {
                            /** @type {?} */
                            var scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;
                            if (Math.abs(scrollPosition - _this._initialScrollPosition) > ( /** @type {?} */(( /** @type {?} */(_this._config)).threshold))) {
                                _this._detach();
                            }
                            else {
                                _this._overlayRef.updatePosition();
                            }
                        }));
                    }
                    else {
                        this._scrollSubscription = stream.subscribe(this._detach);
                    }
                };
                /**
                 * Disables the closing the attached overlay on scroll.
                 * @return {?}
                 */
                CloseScrollStrategy.prototype.disable = function () {
                    if (this._scrollSubscription) {
                        this._scrollSubscription.unsubscribe();
                        this._scrollSubscription = null;
                    }
                };
                /**
                 * @return {?}
                 */
                CloseScrollStrategy.prototype.detach = function () {
                    this.disable();
                    this._overlayRef = ( /** @type {?} */(null));
                };
                return CloseScrollStrategy;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Scroll strategy that doesn't do anything.
             */
            var NoopScrollStrategy = /** @class */ (function () {
                function NoopScrollStrategy() {
                }
                /**
                 * Does nothing, as this scroll strategy is a no-op.
                 * @return {?}
                 */
                NoopScrollStrategy.prototype.enable = function () { };
                /**
                 * Does nothing, as this scroll strategy is a no-op.
                 * @return {?}
                 */
                NoopScrollStrategy.prototype.disable = function () { };
                /**
                 * Does nothing, as this scroll strategy is a no-op.
                 * @return {?}
                 */
                NoopScrollStrategy.prototype.attach = function () { };
                return NoopScrollStrategy;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // TODO(jelbourn): move this to live with the rest of the scrolling code
            // TODO(jelbourn): someday replace this with IntersectionObservers
            /**
             * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.
             * \@docs-private
             * @param {?} element Dimensions of the element (from getBoundingClientRect)
             * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
             * @return {?} Whether the element is scrolled out of view
             */
            function isElementScrolledOutsideView(element, scrollContainers) {
                return scrollContainers.some(( /**
                 * @param {?} containerBounds
                 * @return {?}
                 */function (/**
                 * @param {?} containerBounds
                 * @return {?}
                 */ containerBounds) {
                    /** @type {?} */
                    var outsideAbove = element.bottom < containerBounds.top;
                    /** @type {?} */
                    var outsideBelow = element.top > containerBounds.bottom;
                    /** @type {?} */
                    var outsideLeft = element.right < containerBounds.left;
                    /** @type {?} */
                    var outsideRight = element.left > containerBounds.right;
                    return outsideAbove || outsideBelow || outsideLeft || outsideRight;
                }));
            }
            /**
             * Gets whether an element is clipped by any of its scrolling containers.
             * \@docs-private
             * @param {?} element Dimensions of the element (from getBoundingClientRect)
             * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
             * @return {?} Whether the element is clipped
             */
            function isElementClippedByScrolling(element, scrollContainers) {
                return scrollContainers.some(( /**
                 * @param {?} scrollContainerRect
                 * @return {?}
                 */function (/**
                 * @param {?} scrollContainerRect
                 * @return {?}
                 */ scrollContainerRect) {
                    /** @type {?} */
                    var clippedAbove = element.top < scrollContainerRect.top;
                    /** @type {?} */
                    var clippedBelow = element.bottom > scrollContainerRect.bottom;
                    /** @type {?} */
                    var clippedLeft = element.left < scrollContainerRect.left;
                    /** @type {?} */
                    var clippedRight = element.right > scrollContainerRect.right;
                    return clippedAbove || clippedBelow || clippedLeft || clippedRight;
                }));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Strategy that will update the element position as the user is scrolling.
             */
            var RepositionScrollStrategy = /** @class */ (function () {
                /**
                 * @param {?} _scrollDispatcher
                 * @param {?} _viewportRuler
                 * @param {?} _ngZone
                 * @param {?=} _config
                 */
                function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {
                    this._scrollDispatcher = _scrollDispatcher;
                    this._viewportRuler = _viewportRuler;
                    this._ngZone = _ngZone;
                    this._config = _config;
                    this._scrollSubscription = null;
                }
                /**
                 * Attaches this scroll strategy to an overlay.
                 * @param {?} overlayRef
                 * @return {?}
                 */
                RepositionScrollStrategy.prototype.attach = function (overlayRef) {
                    if (this._overlayRef) {
                        throw getMatScrollStrategyAlreadyAttachedError();
                    }
                    this._overlayRef = overlayRef;
                };
                /**
                 * Enables repositioning of the attached overlay on scroll.
                 * @return {?}
                 */
                RepositionScrollStrategy.prototype.enable = function () {
                    var _this = this;
                    if (!this._scrollSubscription) {
                        /** @type {?} */
                        var throttle = this._config ? this._config.scrollThrottle : 0;
                        this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._overlayRef.updatePosition();
                            // TODO(crisbeto): make `close` on by default once all components can handle it.
                            if (_this._config && _this._config.autoClose) {
                                /** @type {?} */
                                var overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();
                                var _b = _this._viewportRuler.getViewportSize(), width = _b.width, height = _b.height;
                                // TODO(crisbeto): include all ancestor scroll containers here once
                                // we have a way of exposing the trigger element to the scroll strategy.
                                /** @type {?} */
                                var parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];
                                if (isElementScrolledOutsideView(overlayRect, parentRects)) {
                                    _this.disable();
                                    _this._ngZone.run(( /**
                                     * @return {?}
                                     */function () { return _this._overlayRef.detach(); }));
                                }
                            }
                        }));
                    }
                };
                /**
                 * Disables repositioning of the attached overlay on scroll.
                 * @return {?}
                 */
                RepositionScrollStrategy.prototype.disable = function () {
                    if (this._scrollSubscription) {
                        this._scrollSubscription.unsubscribe();
                        this._scrollSubscription = null;
                    }
                };
                /**
                 * @return {?}
                 */
                RepositionScrollStrategy.prototype.detach = function () {
                    this.disable();
                    this._overlayRef = ( /** @type {?} */(null));
                };
                return RepositionScrollStrategy;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Options for how an overlay will handle scrolling.
             *
             * Users can provide a custom value for `ScrollStrategyOptions` to replace the default
             * behaviors. This class primarily acts as a factory for ScrollStrategy instances.
             */
            var ScrollStrategyOptions = /** @class */ (function () {
                /**
                 * @param {?} _scrollDispatcher
                 * @param {?} _viewportRuler
                 * @param {?} _ngZone
                 * @param {?} document
                 */
                function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {
                    var _this = this;
                    this._scrollDispatcher = _scrollDispatcher;
                    this._viewportRuler = _viewportRuler;
                    this._ngZone = _ngZone;
                    /**
                     * Do nothing on scroll.
                     */
                    this.noop = ( /**
                     * @return {?}
                     */function () { return new NoopScrollStrategy(); });
                    /**
                     * Close the overlay as soon as the user scrolls.
                     * @param config Configuration to be used inside the scroll strategy.
                     */
                    this.close = ( /**
                     * @param {?=} config
                     * @return {?}
                     */function (config) { return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config); });
                    /**
                     * Block scrolling.
                     */
                    this.block = ( /**
                     * @return {?}
                     */function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); });
                    /**
                     * Update the overlay's position on scroll.
                     * @param config Configuration to be used inside the scroll strategy.
                     * Allows debouncing the reposition calls.
                     */
                    this.reposition = ( /**
                     * @param {?=} config
                     * @return {?}
                     */function (config) { return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config); });
                    this._document = document;
                }
                return ScrollStrategyOptions;
            }());
            ScrollStrategyOptions.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            ScrollStrategyOptions.ctorParameters = function () { return [
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollDispatcher"] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollDispatcher"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"])); }, token: ScrollStrategyOptions, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Initial configuration used when creating an overlay.
             */
            var OverlayConfig = /** @class */ (function () {
                /**
                 * @param {?=} config
                 */
                function OverlayConfig(config) {
                    /**
                     * Strategy to be used when handling scroll events while the overlay is open.
                     */
                    this.scrollStrategy = new NoopScrollStrategy();
                    /**
                     * Custom class to add to the overlay pane.
                     */
                    this.panelClass = '';
                    /**
                     * Whether the overlay has a backdrop.
                     */
                    this.hasBackdrop = false;
                    /**
                     * Custom class to add to the backdrop
                     */
                    this.backdropClass = 'cdk-overlay-dark-backdrop';
                    /**
                     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.
                     * Note that this usually doesn't include clicking on links (unless the user is using
                     * the `HashLocationStrategy`).
                     */
                    this.disposeOnNavigation = false;
                    if (config) {
                        /** @type {?} */
                        var configKeys = ( /** @type {?} */(Object.keys(config)));
                        for (var _b = 0, configKeys_1 = configKeys; _b < configKeys_1.length; _b++) {
                            var key = configKeys_1[_b];
                            if (config[key] !== undefined) {
                                // TypeScript, as of version 3.5, sees the left-hand-side of this expression
                                // as "I don't know *which* key this is, so the only valid value is the intersection
                                // of all the posible values." In this case, that happens to be `undefined`. TypeScript
                                // is not smart enough to see that the right-hand-side is actually an access of the same
                                // exact type with the same exact key, meaning that the value type must be identical.
                                // So we use `any` to work around this.
                                this[key] = ( /** @type {?} */(config[key]));
                            }
                        }
                    }
                }
                return OverlayConfig;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The points of the origin element and the overlay element to connect.
             */
            var ConnectionPositionPair = /** @class */ (function () {
                /**
                 * @param {?} origin
                 * @param {?} overlay
                 * @param {?=} offsetX
                 * @param {?=} offsetY
                 * @param {?=} panelClass
                 */
                function ConnectionPositionPair(origin, overlay, offsetX, offsetY, panelClass) {
                    this.offsetX = offsetX;
                    this.offsetY = offsetY;
                    this.panelClass = panelClass;
                    this.originX = origin.originX;
                    this.originY = origin.originY;
                    this.overlayX = overlay.overlayX;
                    this.overlayY = overlay.overlayY;
                }
                return ConnectionPositionPair;
            }());
            /**
             * Set of properties regarding the position of the origin and overlay relative to the viewport
             * with respect to the containing Scrollable elements.
             *
             * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the
             * bounds of any one of the strategy's Scrollable's bounding client rectangle.
             *
             * The overlay and origin are outside view if there is no overlap between their bounding client
             * rectangle and any one of the strategy's Scrollable's bounding client rectangle.
             *
             *       -----------                    -----------
             *       | outside |                    | clipped |
             *       |  view   |              --------------------------
             *       |         |              |     |         |        |
             *       ----------               |     -----------        |
             *  --------------------------    |                        |
             *  |                        |    |      Scrollable        |
             *  |                        |    |                        |
             *  |                        |     --------------------------
             *  |      Scrollable        |
             *  |                        |
             *  --------------------------
             *
             * \@docs-private
             */
            var ScrollingVisibility = /** @class */ (function () {
                function ScrollingVisibility() {
                }
                return ScrollingVisibility;
            }());
            /**
             * The change event emitted by the strategy when a fallback position is used.
             */
            var ConnectedOverlayPositionChange = /** @class */ (function () {
                /**
                 * @param {?} connectionPair
                 * @param {?} scrollableViewProperties
                 */
                function ConnectedOverlayPositionChange(connectionPair, scrollableViewProperties) {
                    this.connectionPair = connectionPair;
                    this.scrollableViewProperties = scrollableViewProperties;
                }
                return ConnectedOverlayPositionChange;
            }());
            /** @nocollapse */
            ConnectedOverlayPositionChange.ctorParameters = function () { return [
                { type: ConnectionPositionPair },
                { type: ScrollingVisibility, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
            ]; };
            /**
             * Validates whether a vertical position property matches the expected values.
             * \@docs-private
             * @param {?} property Name of the property being validated.
             * @param {?} value Value of the property being validated.
             * @return {?}
             */
            function validateVerticalPosition(property, value) {
                if (value !== 'top' && value !== 'bottom' && value !== 'center') {
                    throw Error("ConnectedPosition: Invalid " + property + " \"" + value + "\". " +
                        "Expected \"top\", \"bottom\" or \"center\".");
                }
            }
            /**
             * Validates whether a horizontal position property matches the expected values.
             * \@docs-private
             * @param {?} property Name of the property being validated.
             * @param {?} value Value of the property being validated.
             * @return {?}
             */
            function validateHorizontalPosition(property, value) {
                if (value !== 'start' && value !== 'end' && value !== 'center') {
                    throw Error("ConnectedPosition: Invalid " + property + " \"" + value + "\". " +
                        "Expected \"start\", \"end\" or \"center\".");
                }
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Service for dispatching keyboard events that land on the body to appropriate overlay ref,
             * if any. It maintains a list of attached overlays to determine best suited overlay based
             * on event target and order of overlay opens.
             */
            var OverlayKeyboardDispatcher = /** @class */ (function () {
                /**
                 * @param {?} document
                 */
                function OverlayKeyboardDispatcher(document) {
                    var _this = this;
                    /**
                     * Currently attached overlays in the order they were attached.
                     */
                    this._attachedOverlays = [];
                    /**
                     * Keyboard event listener that will be attached to the body.
                     */
                    this._keydownListener = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        /** @type {?} */
                        var overlays = _this._attachedOverlays;
                        for (var i = overlays.length - 1; i > -1; i--) {
                            // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.
                            // We want to target the most recent overlay, rather than trying to match where the event came
                            // from, because some components might open an overlay, but keep focus on a trigger element
                            // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,
                            // because we don't want overlays that don't handle keyboard events to block the ones below
                            // them that do.
                            if (overlays[i]._keydownEventSubscriptions > 0) {
                                overlays[i]._keydownEvents.next(event);
                                break;
                            }
                        }
                    });
                    this._document = document;
                }
                /**
                 * @return {?}
                 */
                OverlayKeyboardDispatcher.prototype.ngOnDestroy = function () {
                    this._detach();
                };
                /**
                 * Add a new overlay to the list of attached overlay refs.
                 * @param {?} overlayRef
                 * @return {?}
                 */
                OverlayKeyboardDispatcher.prototype.add = function (overlayRef) {
                    // Ensure that we don't get the same overlay multiple times.
                    this.remove(overlayRef);
                    // Lazily start dispatcher once first overlay is added
                    if (!this._isAttached) {
                        this._document.body.addEventListener('keydown', this._keydownListener);
                        this._isAttached = true;
                    }
                    this._attachedOverlays.push(overlayRef);
                };
                /**
                 * Remove an overlay from the list of attached overlay refs.
                 * @param {?} overlayRef
                 * @return {?}
                 */
                OverlayKeyboardDispatcher.prototype.remove = function (overlayRef) {
                    /** @type {?} */
                    var index = this._attachedOverlays.indexOf(overlayRef);
                    if (index > -1) {
                        this._attachedOverlays.splice(index, 1);
                    }
                    // Remove the global listener once there are no more overlays.
                    if (this._attachedOverlays.length === 0) {
                        this._detach();
                    }
                };
                /**
                 * Detaches the global keyboard event listener.
                 * @private
                 * @return {?}
                 */
                OverlayKeyboardDispatcher.prototype._detach = function () {
                    if (this._isAttached) {
                        this._document.body.removeEventListener('keydown', this._keydownListener);
                        this._isAttached = false;
                    }
                };
                return OverlayKeyboardDispatcher;
            }());
            OverlayKeyboardDispatcher.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            OverlayKeyboardDispatcher.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"])); }, token: OverlayKeyboardDispatcher, providedIn: "root" });
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} dispatcher
             * @param {?} _document
             * @return {?}
             */
            function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {
                return dispatcher || new OverlayKeyboardDispatcher(_document);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {
                // If there is already an OverlayKeyboardDispatcher available, use that.
                // Otherwise, provide a new one.
                provide: OverlayKeyboardDispatcher,
                deps: [
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_3__["SkipSelf"](), OverlayKeyboardDispatcher],
                    ( /** @type {?} */(
                    // Coerce to `InjectionToken` so that the `deps` match the "shape"
                    // of the type expected by Angular
                    _angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]))
                ],
                useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Container inside which all overlays will render.
             */
            var OverlayContainer = /** @class */ (function () {
                /**
                 * @param {?} document
                 */
                function OverlayContainer(document) {
                    this._document = document;
                }
                /**
                 * @return {?}
                 */
                OverlayContainer.prototype.ngOnDestroy = function () {
                    if (this._containerElement && this._containerElement.parentNode) {
                        this._containerElement.parentNode.removeChild(this._containerElement);
                    }
                };
                /**
                 * This method returns the overlay container element. It will lazily
                 * create the element the first time  it is called to facilitate using
                 * the container in non-browser environments.
                 * @return {?} the container element
                 */
                OverlayContainer.prototype.getContainerElement = function () {
                    if (!this._containerElement) {
                        this._createContainer();
                    }
                    return this._containerElement;
                };
                /**
                 * Create the overlay container element, which is simply a div
                 * with the 'cdk-overlay-container' class on the document body.
                 * @protected
                 * @return {?}
                 */
                OverlayContainer.prototype._createContainer = function () {
                    /** @type {?} */
                    var containerClass = 'cdk-overlay-container';
                    /** @type {?} */
                    var previousContainers = this._document.getElementsByClassName(containerClass);
                    // Remove any old containers. This can happen when transitioning from the server to the client.
                    for (var i = 0; i < previousContainers.length; i++) {
                        ( /** @type {?} */(previousContainers[i].parentNode)).removeChild(previousContainers[i]);
                    }
                    /** @type {?} */
                    var container = this._document.createElement('div');
                    container.classList.add(containerClass);
                    this._document.body.appendChild(container);
                    this._containerElement = container;
                };
                return OverlayContainer;
            }());
            OverlayContainer.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            OverlayContainer.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ OverlayContainer.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({ factory: function OverlayContainer_Factory() { return new OverlayContainer(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"])); }, token: OverlayContainer, providedIn: "root" });
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} parentContainer
             * @param {?} _document
             * @return {?}
             */
            function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {
                return parentContainer || new OverlayContainer(_document);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var OVERLAY_CONTAINER_PROVIDER = {
                // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.
                provide: OverlayContainer,
                deps: [
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_3__["SkipSelf"](), OverlayContainer],
                    ( /** @type {?} */(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]))
                ],
                useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Reference to an overlay that has been created with the Overlay service.
             * Used to manipulate or dispose of said overlay.
             */
            var OverlayRef = /** @class */ (function () {
                /**
                 * @param {?} _portalOutlet
                 * @param {?} _host
                 * @param {?} _pane
                 * @param {?} _config
                 * @param {?} _ngZone
                 * @param {?} _keyboardDispatcher
                 * @param {?} _document
                 * @param {?=} _location
                 */
                function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {
                    var _this = this;
                    this._portalOutlet = _portalOutlet;
                    this._host = _host;
                    this._pane = _pane;
                    this._config = _config;
                    this._ngZone = _ngZone;
                    this._keyboardDispatcher = _keyboardDispatcher;
                    this._document = _document;
                    this._location = _location;
                    this._backdropElement = null;
                    this._backdropClick = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    this._attachments = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    this._detachments = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    this._locationChanges = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    this._backdropClickHandler = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) { return _this._backdropClick.next(event); });
                    this._keydownEventsObservable = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Observable"](( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) {
                        /** @type {?} */
                        var subscription = _this._keydownEvents.subscribe(observer);
                        _this._keydownEventSubscriptions++;
                        return ( /**
                         * @return {?}
                         */function () {
                            subscription.unsubscribe();
                            _this._keydownEventSubscriptions--;
                        });
                    }));
                    /**
                     * Stream of keydown events dispatched to this overlay.
                     */
                    this._keydownEvents = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    /**
                     * Amount of subscriptions to the keydown events.
                     */
                    this._keydownEventSubscriptions = 0;
                    if (_config.scrollStrategy) {
                        this._scrollStrategy = _config.scrollStrategy;
                        this._scrollStrategy.attach(this);
                    }
                    this._positionStrategy = _config.positionStrategy;
                }
                Object.defineProperty(OverlayRef.prototype, "overlayElement", {
                    /**
                     * The overlay's HTML element
                     * @return {?}
                     */
                    get: function () {
                        return this._pane;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OverlayRef.prototype, "backdropElement", {
                    /**
                     * The overlay's backdrop HTML element.
                     * @return {?}
                     */
                    get: function () {
                        return this._backdropElement;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OverlayRef.prototype, "hostElement", {
                    /**
                     * Wrapper around the panel element. Can be used for advanced
                     * positioning where a wrapper with specific styling is
                     * required around the overlay pane.
                     * @return {?}
                     */
                    get: function () {
                        return this._host;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Attaches content, given via a Portal, to the overlay.
                 * If the overlay is configured to have a backdrop, it will be created.
                 *
                 * @param {?} portal Portal instance to which to attach the overlay.
                 * @return {?} The portal attachment result.
                 */
                OverlayRef.prototype.attach = function (portal) {
                    var _this = this;
                    /** @type {?} */
                    var attachResult = this._portalOutlet.attach(portal);
                    if (this._positionStrategy) {
                        this._positionStrategy.attach(this);
                    }
                    // Update the pane element with the given configuration.
                    if (!this._host.parentElement && this._previousHostParent) {
                        this._previousHostParent.appendChild(this._host);
                    }
                    this._updateStackingOrder();
                    this._updateElementSize();
                    this._updateElementDirection();
                    if (this._scrollStrategy) {
                        this._scrollStrategy.enable();
                    }
                    // Update the position once the zone is stable so that the overlay will be fully rendered
                    // before attempting to position it, as the position may depend on the size of the rendered
                    // content.
                    this._ngZone.onStable
                        .asObservable()
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        // The overlay could've been detached before the zone has stabilized.
                        if (_this.hasAttached()) {
                            _this.updatePosition();
                        }
                    }));
                    // Enable pointer events for the overlay pane element.
                    this._togglePointerEvents(true);
                    if (this._config.hasBackdrop) {
                        this._attachBackdrop();
                    }
                    if (this._config.panelClass) {
                        this._toggleClasses(this._pane, this._config.panelClass, true);
                    }
                    // Only emit the `attachments` event once all other setup is done.
                    this._attachments.next();
                    // Track this overlay by the keyboard dispatcher
                    this._keyboardDispatcher.add(this);
                    // @breaking-change 8.0.0 remove the null check for `_location`
                    // once the constructor parameter is made required.
                    if (this._config.disposeOnNavigation && this._location) {
                        this._locationChanges = this._location.subscribe(( /**
                         * @return {?}
                         */function () { return _this.dispose(); }));
                    }
                    return attachResult;
                };
                /**
                 * Detaches an overlay from a portal.
                 * @return {?} The portal detachment result.
                 */
                OverlayRef.prototype.detach = function () {
                    if (!this.hasAttached()) {
                        return;
                    }
                    this.detachBackdrop();
                    // When the overlay is detached, the pane element should disable pointer events.
                    // This is necessary because otherwise the pane element will cover the page and disable
                    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.
                    this._togglePointerEvents(false);
                    if (this._positionStrategy && this._positionStrategy.detach) {
                        this._positionStrategy.detach();
                    }
                    if (this._scrollStrategy) {
                        this._scrollStrategy.disable();
                    }
                    /** @type {?} */
                    var detachmentResult = this._portalOutlet.detach();
                    // Only emit after everything is detached.
                    this._detachments.next();
                    // Remove this overlay from keyboard dispatcher tracking.
                    this._keyboardDispatcher.remove(this);
                    // Keeping the host element in DOM the can cause scroll jank, because it still gets
                    // rendered, even though it's transparent and unclickable which is why we remove it.
                    this._detachContentWhenStable();
                    // Stop listening for location changes.
                    this._locationChanges.unsubscribe();
                    return detachmentResult;
                };
                /**
                 * Cleans up the overlay from the DOM.
                 * @return {?}
                 */
                OverlayRef.prototype.dispose = function () {
                    /** @type {?} */
                    var isAttached = this.hasAttached();
                    if (this._positionStrategy) {
                        this._positionStrategy.dispose();
                    }
                    this._disposeScrollStrategy();
                    this.detachBackdrop();
                    this._locationChanges.unsubscribe();
                    this._keyboardDispatcher.remove(this);
                    this._portalOutlet.dispose();
                    this._attachments.complete();
                    this._backdropClick.complete();
                    this._keydownEvents.complete();
                    if (this._host && this._host.parentNode) {
                        this._host.parentNode.removeChild(this._host);
                        this._host = ( /** @type {?} */(null));
                    }
                    this._previousHostParent = this._pane = ( /** @type {?} */(null));
                    if (isAttached) {
                        this._detachments.next();
                    }
                    this._detachments.complete();
                };
                /**
                 * Whether the overlay has attached content.
                 * @return {?}
                 */
                OverlayRef.prototype.hasAttached = function () {
                    return this._portalOutlet.hasAttached();
                };
                /**
                 * Gets an observable that emits when the backdrop has been clicked.
                 * @return {?}
                 */
                OverlayRef.prototype.backdropClick = function () {
                    return this._backdropClick.asObservable();
                };
                /**
                 * Gets an observable that emits when the overlay has been attached.
                 * @return {?}
                 */
                OverlayRef.prototype.attachments = function () {
                    return this._attachments.asObservable();
                };
                /**
                 * Gets an observable that emits when the overlay has been detached.
                 * @return {?}
                 */
                OverlayRef.prototype.detachments = function () {
                    return this._detachments.asObservable();
                };
                /**
                 * Gets an observable of keydown events targeted to this overlay.
                 * @return {?}
                 */
                OverlayRef.prototype.keydownEvents = function () {
                    return this._keydownEventsObservable;
                };
                /**
                 * Gets the current overlay configuration, which is immutable.
                 * @return {?}
                 */
                OverlayRef.prototype.getConfig = function () {
                    return this._config;
                };
                /**
                 * Updates the position of the overlay based on the position strategy.
                 * @return {?}
                 */
                OverlayRef.prototype.updatePosition = function () {
                    if (this._positionStrategy) {
                        this._positionStrategy.apply();
                    }
                };
                /**
                 * Switches to a new position strategy and updates the overlay position.
                 * @param {?} strategy
                 * @return {?}
                 */
                OverlayRef.prototype.updatePositionStrategy = function (strategy) {
                    if (strategy === this._positionStrategy) {
                        return;
                    }
                    if (this._positionStrategy) {
                        this._positionStrategy.dispose();
                    }
                    this._positionStrategy = strategy;
                    if (this.hasAttached()) {
                        strategy.attach(this);
                        this.updatePosition();
                    }
                };
                /**
                 * Update the size properties of the overlay.
                 * @param {?} sizeConfig
                 * @return {?}
                 */
                OverlayRef.prototype.updateSize = function (sizeConfig) {
                    this._config = Object.assign({}, this._config, sizeConfig);
                    this._updateElementSize();
                };
                /**
                 * Sets the LTR/RTL direction for the overlay.
                 * @param {?} dir
                 * @return {?}
                 */
                OverlayRef.prototype.setDirection = function (dir) {
                    this._config = Object.assign({}, this._config, { direction: dir });
                    this._updateElementDirection();
                };
                /**
                 * Add a CSS class or an array of classes to the overlay pane.
                 * @param {?} classes
                 * @return {?}
                 */
                OverlayRef.prototype.addPanelClass = function (classes) {
                    if (this._pane) {
                        this._toggleClasses(this._pane, classes, true);
                    }
                };
                /**
                 * Remove a CSS class or an array of classes from the overlay pane.
                 * @param {?} classes
                 * @return {?}
                 */
                OverlayRef.prototype.removePanelClass = function (classes) {
                    if (this._pane) {
                        this._toggleClasses(this._pane, classes, false);
                    }
                };
                /**
                 * Returns the layout direction of the overlay panel.
                 * @return {?}
                 */
                OverlayRef.prototype.getDirection = function () {
                    /** @type {?} */
                    var direction = this._config.direction;
                    if (!direction) {
                        return 'ltr';
                    }
                    return typeof direction === 'string' ? direction : direction.value;
                };
                /**
                 * Switches to a new scroll strategy.
                 * @param {?} strategy
                 * @return {?}
                 */
                OverlayRef.prototype.updateScrollStrategy = function (strategy) {
                    if (strategy === this._scrollStrategy) {
                        return;
                    }
                    this._disposeScrollStrategy();
                    this._scrollStrategy = strategy;
                    if (this.hasAttached()) {
                        strategy.attach(this);
                        strategy.enable();
                    }
                };
                /**
                 * Updates the text direction of the overlay panel.
                 * @private
                 * @return {?}
                 */
                OverlayRef.prototype._updateElementDirection = function () {
                    this._host.setAttribute('dir', this.getDirection());
                };
                /**
                 * Updates the size of the overlay element based on the overlay config.
                 * @private
                 * @return {?}
                 */
                OverlayRef.prototype._updateElementSize = function () {
                    if (!this._pane) {
                        return;
                    }
                    /** @type {?} */
                    var style = this._pane.style;
                    style.width = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.width);
                    style.height = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.height);
                    style.minWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.minWidth);
                    style.minHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.minHeight);
                    style.maxWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.maxWidth);
                    style.maxHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.maxHeight);
                };
                /**
                 * Toggles the pointer events for the overlay pane element.
                 * @private
                 * @param {?} enablePointer
                 * @return {?}
                 */
                OverlayRef.prototype._togglePointerEvents = function (enablePointer) {
                    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';
                };
                /**
                 * Attaches a backdrop for this overlay.
                 * @private
                 * @return {?}
                 */
                OverlayRef.prototype._attachBackdrop = function () {
                    var _this = this;
                    /** @type {?} */
                    var showingClass = 'cdk-overlay-backdrop-showing';
                    this._backdropElement = this._document.createElement('div');
                    this._backdropElement.classList.add('cdk-overlay-backdrop');
                    if (this._config.backdropClass) {
                        this._toggleClasses(this._backdropElement, this._config.backdropClass, true);
                    }
                    // Insert the backdrop before the pane in the DOM order,
                    // in order to handle stacked overlays properly.
                    ( /** @type {?} */(this._host.parentElement)).insertBefore(this._backdropElement, this._host);
                    // Forward backdrop clicks such that the consumer of the overlay can perform whatever
                    // action desired when such a click occurs (usually closing the overlay).
                    this._backdropElement.addEventListener('click', this._backdropClickHandler);
                    // Add class to fade-in the backdrop after one frame.
                    if (typeof requestAnimationFrame !== 'undefined') {
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () {
                            requestAnimationFrame(( /**
                             * @return {?}
                             */function () {
                                if (_this._backdropElement) {
                                    _this._backdropElement.classList.add(showingClass);
                                }
                            }));
                        }));
                    }
                    else {
                        this._backdropElement.classList.add(showingClass);
                    }
                };
                /**
                 * Updates the stacking order of the element, moving it to the top if necessary.
                 * This is required in cases where one overlay was detached, while another one,
                 * that should be behind it, was destroyed. The next time both of them are opened,
                 * the stacking will be wrong, because the detached element's pane will still be
                 * in its original DOM position.
                 * @private
                 * @return {?}
                 */
                OverlayRef.prototype._updateStackingOrder = function () {
                    if (this._host.nextSibling) {
                        ( /** @type {?} */(this._host.parentNode)).appendChild(this._host);
                    }
                };
                /**
                 * Detaches the backdrop (if any) associated with the overlay.
                 * @return {?}
                 */
                OverlayRef.prototype.detachBackdrop = function () {
                    var _this = this;
                    /** @type {?} */
                    var backdropToDetach = this._backdropElement;
                    if (!backdropToDetach) {
                        return;
                    }
                    /** @type {?} */
                    var timeoutId;
                    /** @type {?} */
                    var finishDetach = ( /**
                     * @return {?}
                     */function () {
                        // It may not be attached to anything in certain cases (e.g. unit tests).
                        if (backdropToDetach) {
                            backdropToDetach.removeEventListener('click', _this._backdropClickHandler);
                            backdropToDetach.removeEventListener('transitionend', finishDetach);
                            if (backdropToDetach.parentNode) {
                                backdropToDetach.parentNode.removeChild(backdropToDetach);
                            }
                        }
                        // It is possible that a new portal has been attached to this overlay since we started
                        // removing the backdrop. If that is the case, only clear the backdrop reference if it
                        // is still the same instance that we started to remove.
                        if (_this._backdropElement == backdropToDetach) {
                            _this._backdropElement = null;
                        }
                        if (_this._config.backdropClass) {
                            _this._toggleClasses(( /** @type {?} */(backdropToDetach)), _this._config.backdropClass, false);
                        }
                        clearTimeout(timeoutId);
                    });
                    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        ( /** @type {?} */(backdropToDetach)).addEventListener('transitionend', finishDetach);
                    }));
                    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.
                    // In this case we make it unclickable and we try to remove it after a delay.
                    backdropToDetach.style.pointerEvents = 'none';
                    // Run this outside the Angular zone because there's nothing that Angular cares about.
                    // If it were to run inside the Angular zone, every test that used Overlay would have to be
                    // either async or fakeAsync.
                    timeoutId = this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () { return setTimeout(finishDetach, 500); }));
                };
                /**
                 * Toggles a single CSS class or an array of classes on an element.
                 * @private
                 * @param {?} element
                 * @param {?} cssClasses
                 * @param {?} isAdd
                 * @return {?}
                 */
                OverlayRef.prototype._toggleClasses = function (element, cssClasses, isAdd) {
                    /** @type {?} */
                    var classList = element.classList;
                    Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceArray"])(cssClasses).forEach(( /**
                     * @param {?} cssClass
                     * @return {?}
                     */function (/**
                     * @param {?} cssClass
                     * @return {?}
                     */ cssClass) {
                        // We can't do a spread here, because IE doesn't support setting multiple classes.
                        // Also trying to add an empty string to a DOMTokenList will throw.
                        if (cssClass) {
                            isAdd ? classList.add(cssClass) : classList.remove(cssClass);
                        }
                    }));
                };
                /**
                 * Detaches the overlay content next time the zone stabilizes.
                 * @private
                 * @return {?}
                 */
                OverlayRef.prototype._detachContentWhenStable = function () {
                    var _this = this;
                    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however
                    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will
                    // be patched to run inside the zone, which will throw us into an infinite loop.
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        // We can't remove the host here immediately, because the overlay pane's content
                        // might still be animating. This stream helps us avoid interrupting the animation
                        // by waiting for the pane to become empty.
                        /** @type {?} */
                        var subscription = _this._ngZone.onStable
                            .asObservable()
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"])(_this._attachments, _this._detachments)))
                            .subscribe(( /**
                     * @return {?}
                     */function () {
                            // Needs a couple of checks for the pane and host, because
                            // they may have been removed by the time the zone stabilizes.
                            if (!_this._pane || !_this._host || _this._pane.children.length === 0) {
                                if (_this._pane && _this._config.panelClass) {
                                    _this._toggleClasses(_this._pane, _this._config.panelClass, false);
                                }
                                if (_this._host && _this._host.parentElement) {
                                    _this._previousHostParent = _this._host.parentElement;
                                    _this._previousHostParent.removeChild(_this._host);
                                }
                                subscription.unsubscribe();
                            }
                        }));
                    }));
                };
                /**
                 * Disposes of a scroll strategy.
                 * @private
                 * @return {?}
                 */
                OverlayRef.prototype._disposeScrollStrategy = function () {
                    /** @type {?} */
                    var scrollStrategy = this._scrollStrategy;
                    if (scrollStrategy) {
                        scrollStrategy.disable();
                        if (scrollStrategy.detach) {
                            scrollStrategy.detach();
                        }
                    }
                };
                return OverlayRef;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // TODO: refactor clipping detection into a separate thing (part of scrolling module)
            // TODO: doesn't handle both flexible width and height when it has to scroll along both axis.
            /**
             * Class to be added to the overlay bounding box.
             * @type {?}
             */
            var boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';
            /**
             * A strategy for positioning overlays. Using this strategy, an overlay is given an
             * implicit position relative some origin element. The relative position is defined in terms of
             * a point on the origin element that is connected to a point on the overlay element. For example,
             * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
             * of the overlay.
             */
            var FlexibleConnectedPositionStrategy = /** @class */ (function () {
                /**
                 * @param {?} connectedTo
                 * @param {?} _viewportRuler
                 * @param {?} _document
                 * @param {?} _platform
                 * @param {?} _overlayContainer
                 */
                function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {
                    this._viewportRuler = _viewportRuler;
                    this._document = _document;
                    this._platform = _platform;
                    this._overlayContainer = _overlayContainer;
                    /**
                     * Last size used for the bounding box. Used to avoid resizing the overlay after open.
                     */
                    this._lastBoundingBoxSize = { width: 0, height: 0 };
                    /**
                     * Whether the overlay was pushed in a previous positioning.
                     */
                    this._isPushed = false;
                    /**
                     * Whether the overlay can be pushed on-screen on the initial open.
                     */
                    this._canPush = true;
                    /**
                     * Whether the overlay can grow via flexible width/height after the initial open.
                     */
                    this._growAfterOpen = false;
                    /**
                     * Whether the overlay's width and height can be constrained to fit within the viewport.
                     */
                    this._hasFlexibleDimensions = true;
                    /**
                     * Whether the overlay position is locked.
                     */
                    this._positionLocked = false;
                    /**
                     * Amount of space that must be maintained between the overlay and the edge of the viewport.
                     */
                    this._viewportMargin = 0;
                    /**
                     * The Scrollable containers used to check scrollable view properties on position change.
                     */
                    this._scrollables = [];
                    /**
                     * Ordered list of preferred positions, from most to least desirable.
                     */
                    this._preferredPositions = [];
                    /**
                     * Subject that emits whenever the position changes.
                     */
                    this._positionChanges = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    /**
                     * Subscription to viewport size changes.
                     */
                    this._resizeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    /**
                     * Default offset for the overlay along the x axis.
                     */
                    this._offsetX = 0;
                    /**
                     * Default offset for the overlay along the y axis.
                     */
                    this._offsetY = 0;
                    /**
                     * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.
                     */
                    this._appliedPanelClasses = [];
                    /**
                     * Observable sequence of position changes.
                     */
                    this.positionChanges = this._positionChanges.asObservable();
                    this.setOrigin(connectedTo);
                }
                Object.defineProperty(FlexibleConnectedPositionStrategy.prototype, "positions", {
                    /**
                     * Ordered list of preferred positions, from most to least desirable.
                     * @return {?}
                     */
                    get: function () {
                        return this._preferredPositions;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Attaches this position strategy to an overlay.
                 * @param {?} overlayRef
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype.attach = function (overlayRef) {
                    var _this = this;
                    if (this._overlayRef && overlayRef !== this._overlayRef) {
                        throw Error('This position strategy is already attached to an overlay');
                    }
                    this._validatePositions();
                    overlayRef.hostElement.classList.add(boundingBoxClass);
                    this._overlayRef = overlayRef;
                    this._boundingBox = overlayRef.hostElement;
                    this._pane = overlayRef.overlayElement;
                    this._isDisposed = false;
                    this._isInitialRender = true;
                    this._lastPosition = null;
                    this._resizeSubscription.unsubscribe();
                    this._resizeSubscription = this._viewportRuler.change().subscribe(( /**
                     * @return {?}
                     */function () {
                        // When the window is resized, we want to trigger the next reposition as if it
                        // was an initial render, in order for the strategy to pick a new optimal position,
                        // otherwise position locking will cause it to stay at the old one.
                        _this._isInitialRender = true;
                        _this.apply();
                    }));
                };
                /**
                 * Updates the position of the overlay element, using whichever preferred position relative
                 * to the origin best fits on-screen.
                 *
                 * The selection of a position goes as follows:
                 *  - If any positions fit completely within the viewport as-is,
                 *      choose the first position that does so.
                 *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,
                 *      choose the position with the greatest available size modified by the positions' weight.
                 *  - If pushing is enabled, take the position that went off-screen the least and push it
                 *      on-screen.
                 *  - If none of the previous criteria were met, use the position that goes off-screen the least.
                 * \@docs-private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype.apply = function () {
                    // We shouldn't do anything if the strategy was disposed or we're on the server.
                    if (this._isDisposed || !this._platform.isBrowser) {
                        return;
                    }
                    // If the position has been applied already (e.g. when the overlay was opened) and the
                    // consumer opted into locking in the position, re-use the old position, in order to
                    // prevent the overlay from jumping around.
                    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {
                        this.reapplyLastPosition();
                        return;
                    }
                    this._clearPanelClasses();
                    this._resetOverlayElementStyles();
                    this._resetBoundingBoxStyles();
                    // We need the bounding rects for the origin and the overlay to determine how to position
                    // the overlay relative to the origin.
                    // We use the viewport rect to determine whether a position would go off-screen.
                    this._viewportRect = this._getNarrowedViewportRect();
                    this._originRect = this._getOriginRect();
                    this._overlayRect = this._pane.getBoundingClientRect();
                    /** @type {?} */
                    var originRect = this._originRect;
                    /** @type {?} */
                    var overlayRect = this._overlayRect;
                    /** @type {?} */
                    var viewportRect = this._viewportRect;
                    // Positions where the overlay will fit with flexible dimensions.
                    /** @type {?} */
                    var flexibleFits = [];
                    // Fallback if none of the preferred positions fit within the viewport.
                    /** @type {?} */
                    var fallback;
                    // Go through each of the preferred positions looking for a good fit.
                    // If a good fit is found, it will be applied immediately.
                    for (var _b = 0, _c = this._preferredPositions; _b < _c.length; _b++) {
                        var pos = _c[_b];
                        // Get the exact (x, y) coordinate for the point-of-origin on the origin element.
                        /** @type {?} */
                        var originPoint = this._getOriginPoint(originRect, pos);
                        // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the
                        // overlay in this position. We use the top-left corner for calculations and later translate
                        // this into an appropriate (top, left, bottom, right) style.
                        /** @type {?} */
                        var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);
                        // Calculate how well the overlay would fit into the viewport with this point.
                        /** @type {?} */
                        var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);
                        // If the overlay, without any further work, fits into the viewport, use this position.
                        if (overlayFit.isCompletelyWithinViewport) {
                            this._isPushed = false;
                            this._applyPosition(pos, originPoint);
                            return;
                        }
                        // If the overlay has flexible dimensions, we can use this position
                        // so long as there's enough space for the minimum dimensions.
                        if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {
                            // Save positions where the overlay will fit with flexible dimensions. We will use these
                            // if none of the positions fit *without* flexible dimensions.
                            flexibleFits.push({
                                position: pos,
                                origin: originPoint,
                                overlayRect: overlayRect,
                                boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)
                            });
                            continue;
                        }
                        // If the current preferred position does not fit on the screen, remember the position
                        // if it has more visible area on-screen than we've seen and move onto the next preferred
                        // position.
                        if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {
                            fallback = { overlayFit: overlayFit, overlayPoint: overlayPoint, originPoint: originPoint, position: pos, overlayRect: overlayRect };
                        }
                    }
                    // If there are any positions where the overlay would fit with flexible dimensions, choose the
                    // one that has the greatest area available modified by the position's weight
                    if (flexibleFits.length) {
                        /** @type {?} */
                        var bestFit = null;
                        /** @type {?} */
                        var bestScore = -1;
                        for (var _d = 0, flexibleFits_1 = flexibleFits; _d < flexibleFits_1.length; _d++) {
                            var fit = flexibleFits_1[_d];
                            /** @type {?} */
                            var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);
                            if (score > bestScore) {
                                bestScore = score;
                                bestFit = fit;
                            }
                        }
                        this._isPushed = false;
                        this._applyPosition(( /** @type {?} */(bestFit)).position, ( /** @type {?} */(bestFit)).origin);
                        return;
                    }
                    // When none of the preferred positions fit within the viewport, take the position
                    // that went off-screen the least and attempt to push it on-screen.
                    if (this._canPush) {
                        // TODO(jelbourn): after pushing, the opening "direction" of the overlay might not make sense.
                        this._isPushed = true;
                        this._applyPosition(( /** @type {?} */(fallback)).position, ( /** @type {?} */(fallback)).originPoint);
                        return;
                    }
                    // All options for getting the overlay within the viewport have been exhausted, so go with the
                    // position that went off-screen the least.
                    this._applyPosition(( /** @type {?} */(fallback)).position, ( /** @type {?} */(fallback)).originPoint);
                };
                /**
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype.detach = function () {
                    this._clearPanelClasses();
                    this._lastPosition = null;
                    this._previousPushAmount = null;
                    this._resizeSubscription.unsubscribe();
                };
                /**
                 * Cleanup after the element gets destroyed.
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype.dispose = function () {
                    if (this._isDisposed) {
                        return;
                    }
                    // We can't use `_resetBoundingBoxStyles` here, because it resets
                    // some properties to zero, rather than removing them.
                    if (this._boundingBox) {
                        extendStyles(this._boundingBox.style, ( /** @type {?} */({
                            top: '',
                            left: '',
                            right: '',
                            bottom: '',
                            height: '',
                            width: '',
                            alignItems: '',
                            justifyContent: '',
                        })));
                    }
                    if (this._pane) {
                        this._resetOverlayElementStyles();
                    }
                    if (this._overlayRef) {
                        this._overlayRef.hostElement.classList.remove(boundingBoxClass);
                    }
                    this.detach();
                    this._positionChanges.complete();
                    this._overlayRef = this._boundingBox = ( /** @type {?} */(null));
                    this._isDisposed = true;
                };
                /**
                 * This re-aligns the overlay element with the trigger in its last calculated position,
                 * even if a position higher in the "preferred positions" list would now fit. This
                 * allows one to re-align the panel without changing the orientation of the panel.
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype.reapplyLastPosition = function () {
                    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {
                        this._originRect = this._getOriginRect();
                        this._overlayRect = this._pane.getBoundingClientRect();
                        this._viewportRect = this._getNarrowedViewportRect();
                        /** @type {?} */
                        var lastPosition = this._lastPosition || this._preferredPositions[0];
                        /** @type {?} */
                        var originPoint = this._getOriginPoint(this._originRect, lastPosition);
                        this._applyPosition(lastPosition, originPoint);
                    }
                };
                /**
                 * Sets the list of Scrollable containers that host the origin element so that
                 * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
                 * Scrollable must be an ancestor element of the strategy's origin element.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} scrollables
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {
                    ( /** @type {?} */(this))._scrollables = scrollables;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Adds new preferred positions.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} positions List of positions options for this overlay.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withPositions = function (positions) {
                    ( /** @type {?} */(this))._preferredPositions = positions;
                    // If the last calculated position object isn't part of the positions anymore, clear
                    // it in order to avoid it being picked up if the consumer tries to re-apply.
                    if (positions.indexOf(( /** @type {?} */(( /** @type {?} */(this))._lastPosition))) === -1) {
                        ( /** @type {?} */(this))._lastPosition = null;
                    }
                    ( /** @type {?} */(this))._validatePositions();
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets a minimum distance the overlay may be positioned to the edge of the viewport.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} margin Required margin between the overlay and the viewport edge in pixels.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withViewportMargin = function (margin) {
                    ( /** @type {?} */(this))._viewportMargin = margin;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets whether the overlay's width and height can be constrained to fit within the viewport.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} flexibleDimensions
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withFlexibleDimensions = function (flexibleDimensions) {
                    if (flexibleDimensions === void 0) { flexibleDimensions = true; }
                    ( /** @type {?} */(this))._hasFlexibleDimensions = flexibleDimensions;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets whether the overlay can grow after the initial open via flexible width/height.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} growAfterOpen
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withGrowAfterOpen = function (growAfterOpen) {
                    if (growAfterOpen === void 0) { growAfterOpen = true; }
                    ( /** @type {?} */(this))._growAfterOpen = growAfterOpen;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} canPush
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withPush = function (canPush) {
                    if (canPush === void 0) { canPush = true; }
                    ( /** @type {?} */(this))._canPush = canPush;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets whether the overlay's position should be locked in after it is positioned
                 * initially. When an overlay is locked in, it won't attempt to reposition itself
                 * when the position is re-applied (e.g. when the user scrolls away).
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} isLocked Whether the overlay should locked in.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {
                    if (isLocked === void 0) { isLocked = true; }
                    ( /** @type {?} */(this))._positionLocked = isLocked;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the origin, relative to which to position the overlay.
                 * Using an element origin is useful for building components that need to be positioned
                 * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be
                 * used for cases like contextual menus which open relative to the user's pointer.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} origin Reference to the new origin.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.setOrigin = function (origin) {
                    ( /** @type {?} */(this))._origin = origin;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the default offset for the overlay's connection point on the x-axis.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} offset New offset in the X axis.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetX = function (offset) {
                    ( /** @type {?} */(this))._offsetX = offset;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the default offset for the overlay's connection point on the y-axis.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} offset New offset in the Y axis.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetY = function (offset) {
                    ( /** @type {?} */(this))._offsetY = offset;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Configures that the position strategy should set a `transform-origin` on some elements
                 * inside the overlay, depending on the current position that is being applied. This is
                 * useful for the cases where the origin of an animation can change depending on the
                 * alignment of the overlay.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} selector CSS selector that will be used to find the target
                 *    elements onto which to set the transform origin.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withTransformOriginOn = function (selector) {
                    ( /** @type {?} */(this))._transformOriginSelector = selector;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.
                 * @private
                 * @param {?} originRect
                 * @param {?} pos
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getOriginPoint = function (originRect, pos) {
                    /** @type {?} */
                    var x;
                    if (pos.originX == 'center') {
                        // Note: when centering we should always use the `left`
                        // offset, otherwise the position will be wrong in RTL.
                        x = originRect.left + (originRect.width / 2);
                    }
                    else {
                        /** @type {?} */
                        var startX = this._isRtl() ? originRect.right : originRect.left;
                        /** @type {?} */
                        var endX = this._isRtl() ? originRect.left : originRect.right;
                        x = pos.originX == 'start' ? startX : endX;
                    }
                    /** @type {?} */
                    var y;
                    if (pos.originY == 'center') {
                        y = originRect.top + (originRect.height / 2);
                    }
                    else {
                        y = pos.originY == 'top' ? originRect.top : originRect.bottom;
                    }
                    return { x: x, y: y };
                };
                /**
                 * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and
                 * origin point to which the overlay should be connected.
                 * @private
                 * @param {?} originPoint
                 * @param {?} overlayRect
                 * @param {?} pos
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, pos) {
                    // Calculate the (overlayStartX, overlayStartY), the start of the
                    // potential overlay position relative to the origin point.
                    /** @type {?} */
                    var overlayStartX;
                    if (pos.overlayX == 'center') {
                        overlayStartX = -overlayRect.width / 2;
                    }
                    else if (pos.overlayX === 'start') {
                        overlayStartX = this._isRtl() ? -overlayRect.width : 0;
                    }
                    else {
                        overlayStartX = this._isRtl() ? 0 : -overlayRect.width;
                    }
                    /** @type {?} */
                    var overlayStartY;
                    if (pos.overlayY == 'center') {
                        overlayStartY = -overlayRect.height / 2;
                    }
                    else {
                        overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;
                    }
                    // The (x, y) coordinates of the overlay.
                    return {
                        x: originPoint.x + overlayStartX,
                        y: originPoint.y + overlayStartY,
                    };
                };
                /**
                 * Gets how well an overlay at the given point will fit within the viewport.
                 * @private
                 * @param {?} point
                 * @param {?} overlay
                 * @param {?} viewport
                 * @param {?} position
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getOverlayFit = function (point, overlay, viewport, position) {
                    var x = point.x, y = point.y;
                    /** @type {?} */
                    var offsetX = this._getOffset(position, 'x');
                    /** @type {?} */
                    var offsetY = this._getOffset(position, 'y');
                    // Account for the offsets since they could push the overlay out of the viewport.
                    if (offsetX) {
                        x += offsetX;
                    }
                    if (offsetY) {
                        y += offsetY;
                    }
                    // How much the overlay would overflow at this position, on each side.
                    /** @type {?} */
                    var leftOverflow = 0 - x;
                    /** @type {?} */
                    var rightOverflow = (x + overlay.width) - viewport.width;
                    /** @type {?} */
                    var topOverflow = 0 - y;
                    /** @type {?} */
                    var bottomOverflow = (y + overlay.height) - viewport.height;
                    // Visible parts of the element on each axis.
                    /** @type {?} */
                    var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);
                    /** @type {?} */
                    var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);
                    /** @type {?} */
                    var visibleArea = visibleWidth * visibleHeight;
                    return {
                        visibleArea: visibleArea,
                        isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,
                        fitsInViewportVertically: visibleHeight === overlay.height,
                        fitsInViewportHorizontally: visibleWidth == overlay.width,
                    };
                };
                /**
                 * Whether the overlay can fit within the viewport when it may resize either its width or height.
                 * @private
                 * @param {?} fit How well the overlay fits in the viewport at some position.
                 * @param {?} point The (x, y) coordinates of the overlat at some position.
                 * @param {?} viewport The geometry of the viewport.
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._canFitWithFlexibleDimensions = function (fit, point, viewport) {
                    if (this._hasFlexibleDimensions) {
                        /** @type {?} */
                        var availableHeight = viewport.bottom - point.y;
                        /** @type {?} */
                        var availableWidth = viewport.right - point.x;
                        /** @type {?} */
                        var minHeight = this._overlayRef.getConfig().minHeight;
                        /** @type {?} */
                        var minWidth = this._overlayRef.getConfig().minWidth;
                        /** @type {?} */
                        var verticalFit = fit.fitsInViewportVertically ||
                            (minHeight != null && minHeight <= availableHeight);
                        /** @type {?} */
                        var horizontalFit = fit.fitsInViewportHorizontally ||
                            (minWidth != null && minWidth <= availableWidth);
                        return verticalFit && horizontalFit;
                    }
                    return false;
                };
                /**
                 * Gets the point at which the overlay can be "pushed" on-screen. If the overlay is larger than
                 * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the
                 * right and bottom).
                 *
                 * @private
                 * @param {?} start Starting point from which the overlay is pushed.
                 * @param {?} overlay Dimensions of the overlay.
                 * @param {?} scrollPosition Current viewport scroll position.
                 * @return {?} The point at which to position the overlay after pushing. This is effectively a new
                 *     originPoint.
                 */
                FlexibleConnectedPositionStrategy.prototype._pushOverlayOnScreen = function (start, overlay, scrollPosition) {
                    // If the position is locked and we've pushed the overlay already, reuse the previous push
                    // amount, rather than pushing it again. If we were to continue pushing, the element would
                    // remain in the viewport, which goes against the expectations when position locking is enabled.
                    if (this._previousPushAmount && this._positionLocked) {
                        return {
                            x: start.x + this._previousPushAmount.x,
                            y: start.y + this._previousPushAmount.y
                        };
                    }
                    /** @type {?} */
                    var viewport = this._viewportRect;
                    // Determine how much the overlay goes outside the viewport on each
                    // side, which we'll use to decide which direction to push it.
                    /** @type {?} */
                    var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);
                    /** @type {?} */
                    var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);
                    /** @type {?} */
                    var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);
                    /** @type {?} */
                    var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);
                    // Amount by which to push the overlay in each axis such that it remains on-screen.
                    /** @type {?} */
                    var pushX = 0;
                    /** @type {?} */
                    var pushY = 0;
                    // If the overlay fits completely within the bounds of the viewport, push it from whichever
                    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the
                    // viewport and allow for the trailing end of the overlay to go out of bounds.
                    if (overlay.width <= viewport.width) {
                        pushX = overflowLeft || -overflowRight;
                    }
                    else {
                        pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;
                    }
                    if (overlay.height <= viewport.height) {
                        pushY = overflowTop || -overflowBottom;
                    }
                    else {
                        pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;
                    }
                    this._previousPushAmount = { x: pushX, y: pushY };
                    return {
                        x: start.x + pushX,
                        y: start.y + pushY,
                    };
                };
                /**
                 * Applies a computed position to the overlay and emits a position change.
                 * @private
                 * @param {?} position The position preference
                 * @param {?} originPoint The point on the origin element where the overlay is connected.
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._applyPosition = function (position, originPoint) {
                    this._setTransformOrigin(position);
                    this._setOverlayElementStyles(originPoint, position);
                    this._setBoundingBoxStyles(originPoint, position);
                    if (position.panelClass) {
                        this._addPanelClasses(position.panelClass);
                    }
                    // Save the last connected position in case the position needs to be re-calculated.
                    this._lastPosition = position;
                    // Notify that the position has been changed along with its change properties.
                    // We only emit if we've got any subscriptions, because the scroll visibility
                    // calculcations can be somewhat expensive.
                    if (this._positionChanges.observers.length) {
                        /** @type {?} */
                        var scrollableViewProperties = this._getScrollVisibility();
                        /** @type {?} */
                        var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);
                        this._positionChanges.next(changeEvent);
                    }
                    this._isInitialRender = false;
                };
                /**
                 * Sets the transform origin based on the configured selector and the passed-in position.
                 * @private
                 * @param {?} position
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._setTransformOrigin = function (position) {
                    if (!this._transformOriginSelector) {
                        return;
                    }
                    /** @type {?} */
                    var elements = ( /** @type {?} */(this._boundingBox)).querySelectorAll(this._transformOriginSelector);
                    /** @type {?} */
                    var xOrigin;
                    /** @type {?} */
                    var yOrigin = position.overlayY;
                    if (position.overlayX === 'center') {
                        xOrigin = 'center';
                    }
                    else if (this._isRtl()) {
                        xOrigin = position.overlayX === 'start' ? 'right' : 'left';
                    }
                    else {
                        xOrigin = position.overlayX === 'start' ? 'left' : 'right';
                    }
                    for (var i = 0; i < elements.length; i++) {
                        elements[i].style.transformOrigin = xOrigin + " " + yOrigin;
                    }
                };
                /**
                 * Gets the position and size of the overlay's sizing container.
                 *
                 * This method does no measuring and applies no styles so that we can cheaply compute the
                 * bounds for all positions and choose the best fit based on these results.
                 * @private
                 * @param {?} origin
                 * @param {?} position
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._calculateBoundingBoxRect = function (origin, position) {
                    /** @type {?} */
                    var viewport = this._viewportRect;
                    /** @type {?} */
                    var isRtl = this._isRtl();
                    /** @type {?} */
                    var height;
                    /** @type {?} */
                    var top;
                    /** @type {?} */
                    var bottom;
                    if (position.overlayY === 'top') {
                        // Overlay is opening "downward" and thus is bound by the bottom viewport edge.
                        top = origin.y;
                        height = viewport.height - top + this._viewportMargin;
                    }
                    else if (position.overlayY === 'bottom') {
                        // Overlay is opening "upward" and thus is bound by the top viewport edge. We need to add
                        // the viewport margin back in, because the viewport rect is narrowed down to remove the
                        // margin, whereas the `origin` position is calculated based on its `ClientRect`.
                        bottom = viewport.height - origin.y + this._viewportMargin * 2;
                        height = viewport.height - bottom + this._viewportMargin;
                    }
                    else {
                        // If neither top nor bottom, it means that the overlay is vertically centered on the
                        // origin point. Note that we want the position relative to the viewport, rather than
                        // the page, which is why we don't use something like `viewport.bottom - origin.y` and
                        // `origin.y - viewport.top`.
                        /** @type {?} */
                        var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);
                        /** @type {?} */
                        var previousHeight = this._lastBoundingBoxSize.height;
                        height = smallestDistanceToViewportEdge * 2;
                        top = origin.y - smallestDistanceToViewportEdge;
                        if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {
                            top = origin.y - (previousHeight / 2);
                        }
                    }
                    // The overlay is opening 'right-ward' (the content flows to the right).
                    /** @type {?} */
                    var isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||
                        (position.overlayX === 'end' && isRtl);
                    // The overlay is opening 'left-ward' (the content flows to the left).
                    /** @type {?} */
                    var isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||
                        (position.overlayX === 'start' && isRtl);
                    /** @type {?} */
                    var width;
                    /** @type {?} */
                    var left;
                    /** @type {?} */
                    var right;
                    if (isBoundedByLeftViewportEdge) {
                        right = viewport.width - origin.x + this._viewportMargin;
                        width = origin.x - this._viewportMargin;
                    }
                    else if (isBoundedByRightViewportEdge) {
                        left = origin.x;
                        width = viewport.right - origin.x;
                    }
                    else {
                        // If neither start nor end, it means that the overlay is horizontally centered on the
                        // origin point. Note that we want the position relative to the viewport, rather than
                        // the page, which is why we don't use something like `viewport.right - origin.x` and
                        // `origin.x - viewport.left`.
                        /** @type {?} */
                        var smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);
                        /** @type {?} */
                        var previousWidth = this._lastBoundingBoxSize.width;
                        width = smallestDistanceToViewportEdge * 2;
                        left = origin.x - smallestDistanceToViewportEdge;
                        if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {
                            left = origin.x - (previousWidth / 2);
                        }
                    }
                    return { top: ( /** @type {?} */(top)), left: ( /** @type {?} */(left)), bottom: ( /** @type {?} */(bottom)), right: ( /** @type {?} */(right)), width: width, height: height };
                };
                /**
                 * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the
                 * origin's connection point and stetches to the bounds of the viewport.
                 *
                 * @private
                 * @param {?} origin The point on the origin element where the overlay is connected.
                 * @param {?} position The position preference
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._setBoundingBoxStyles = function (origin, position) {
                    /** @type {?} */
                    var boundingBoxRect = this._calculateBoundingBoxRect(origin, position);
                    // It's weird if the overlay *grows* while scrolling, so we take the last size into account
                    // when applying a new size.
                    if (!this._isInitialRender && !this._growAfterOpen) {
                        boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);
                        boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);
                    }
                    /** @type {?} */
                    var styles = ( /** @type {?} */({}));
                    if (this._hasExactPosition()) {
                        styles.top = styles.left = '0';
                        styles.bottom = styles.right = '';
                        styles.width = styles.height = '100%';
                    }
                    else {
                        /** @type {?} */
                        var maxHeight = this._overlayRef.getConfig().maxHeight;
                        /** @type {?} */
                        var maxWidth = this._overlayRef.getConfig().maxWidth;
                        styles.height = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.height);
                        styles.top = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.top);
                        styles.bottom = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.bottom);
                        styles.width = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.width);
                        styles.left = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.left);
                        styles.right = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.right);
                        // Push the pane content towards the proper direction.
                        if (position.overlayX === 'center') {
                            styles.alignItems = 'center';
                        }
                        else {
                            styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';
                        }
                        if (position.overlayY === 'center') {
                            styles.justifyContent = 'center';
                        }
                        else {
                            styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';
                        }
                        if (maxHeight) {
                            styles.maxHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(maxHeight);
                        }
                        if (maxWidth) {
                            styles.maxWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(maxWidth);
                        }
                    }
                    this._lastBoundingBoxSize = boundingBoxRect;
                    extendStyles(( /** @type {?} */(this._boundingBox)).style, styles);
                };
                /**
                 * Resets the styles for the bounding box so that a new positioning can be computed.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._resetBoundingBoxStyles = function () {
                    extendStyles(( /** @type {?} */(this._boundingBox)).style, ( /** @type {?} */({
                        top: '0',
                        left: '0',
                        right: '0',
                        bottom: '0',
                        height: '',
                        width: '',
                        alignItems: '',
                        justifyContent: '',
                    })));
                };
                /**
                 * Resets the styles for the overlay pane so that a new positioning can be computed.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._resetOverlayElementStyles = function () {
                    extendStyles(this._pane.style, ( /** @type {?} */({
                        top: '',
                        left: '',
                        bottom: '',
                        right: '',
                        position: '',
                        transform: '',
                    })));
                };
                /**
                 * Sets positioning styles to the overlay element.
                 * @private
                 * @param {?} originPoint
                 * @param {?} position
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._setOverlayElementStyles = function (originPoint, position) {
                    /** @type {?} */
                    var styles = ( /** @type {?} */({}));
                    if (this._hasExactPosition()) {
                        /** @type {?} */
                        var scrollPosition = this._viewportRuler.getViewportScrollPosition();
                        extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));
                        extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));
                    }
                    else {
                        styles.position = 'static';
                    }
                    // Use a transform to apply the offsets. We do this because the `center` positions rely on
                    // being in the normal flex flow and setting a `top` / `left` at all will completely throw
                    // off the position. We also can't use margins, because they won't have an effect in some
                    // cases where the element doesn't have anything to "push off of". Finally, this works
                    // better both with flexible and non-flexible positioning.
                    /** @type {?} */
                    var transformString = '';
                    /** @type {?} */
                    var offsetX = this._getOffset(position, 'x');
                    /** @type {?} */
                    var offsetY = this._getOffset(position, 'y');
                    if (offsetX) {
                        transformString += "translateX(" + offsetX + "px) ";
                    }
                    if (offsetY) {
                        transformString += "translateY(" + offsetY + "px)";
                    }
                    styles.transform = transformString.trim();
                    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because
                    // we need these values to both be set to "100%" for the automatic flexible sizing to work.
                    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.
                    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {
                        styles.maxHeight = '';
                    }
                    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {
                        styles.maxWidth = '';
                    }
                    extendStyles(this._pane.style, styles);
                };
                /**
                 * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.
                 * @private
                 * @param {?} position
                 * @param {?} originPoint
                 * @param {?} scrollPosition
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getExactOverlayY = function (position, originPoint, scrollPosition) {
                    // Reset any existing styles. This is necessary in case the
                    // preferred position has changed since the last `apply`.
                    /** @type {?} */
                    var styles = ( /** @type {?} */({ top: null, bottom: null }));
                    /** @type {?} */
                    var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);
                    if (this._isPushed) {
                        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
                    }
                    /** @type {?} */
                    var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;
                    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an
                    // autocomplete), mobile browsers will shift everything in order to put the input in the middle
                    // of the screen and to make space for the virtual keyboard. We need to account for this offset,
                    // otherwise our positioning will be thrown off.
                    overlayPoint.y -= virtualKeyboardOffset;
                    // We want to set either `top` or `bottom` based on whether the overlay wants to appear
                    // above or below the origin and the direction in which the element will expand.
                    if (position.overlayY === 'bottom') {
                        // When using `bottom`, we adjust the y position such that it is the distance
                        // from the bottom of the viewport rather than the top.
                        /** @type {?} */
                        var documentHeight = ( /** @type {?} */(this._document.documentElement)).clientHeight;
                        styles.bottom = documentHeight - (overlayPoint.y + this._overlayRect.height) + "px";
                    }
                    else {
                        styles.top = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(overlayPoint.y);
                    }
                    return styles;
                };
                /**
                 * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.
                 * @private
                 * @param {?} position
                 * @param {?} originPoint
                 * @param {?} scrollPosition
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getExactOverlayX = function (position, originPoint, scrollPosition) {
                    // Reset any existing styles. This is necessary in case the preferred position has
                    // changed since the last `apply`.
                    /** @type {?} */
                    var styles = ( /** @type {?} */({ left: null, right: null }));
                    /** @type {?} */
                    var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);
                    if (this._isPushed) {
                        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
                    }
                    // We want to set either `left` or `right` based on whether the overlay wants to appear "before"
                    // or "after" the origin, which determines the direction in which the element will expand.
                    // For the horizontal axis, the meaning of "before" and "after" change based on whether the
                    // page is in RTL or LTR.
                    /** @type {?} */
                    var horizontalStyleProperty;
                    if (this._isRtl()) {
                        horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';
                    }
                    else {
                        horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';
                    }
                    // When we're setting `right`, we adjust the x position such that it is the distance
                    // from the right edge of the viewport rather than the left edge.
                    if (horizontalStyleProperty === 'right') {
                        /** @type {?} */
                        var documentWidth = ( /** @type {?} */(this._document.documentElement)).clientWidth;
                        styles.right = documentWidth - (overlayPoint.x + this._overlayRect.width) + "px";
                    }
                    else {
                        styles.left = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(overlayPoint.x);
                    }
                    return styles;
                };
                /**
                 * Gets the view properties of the trigger and overlay, including whether they are clipped
                 * or completely outside the view of any of the strategy's scrollables.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getScrollVisibility = function () {
                    // Note: needs fresh rects since the position could've changed.
                    /** @type {?} */
                    var originBounds = this._getOriginRect();
                    /** @type {?} */
                    var overlayBounds = this._pane.getBoundingClientRect();
                    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers
                    // every time, we should be able to use the scrollTop of the containers if the size of those
                    // containers hasn't changed.
                    /** @type {?} */
                    var scrollContainerBounds = this._scrollables.map(( /**
                     * @param {?} scrollable
                     * @return {?}
                     */function (/**
                     * @param {?} scrollable
                     * @return {?}
                     */ scrollable) {
                        return scrollable.getElementRef().nativeElement.getBoundingClientRect();
                    }));
                    return {
                        isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),
                        isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),
                        isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),
                        isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),
                    };
                };
                /**
                 * Subtracts the amount that an element is overflowing on an axis from its length.
                 * @private
                 * @param {?} length
                 * @param {...?} overflows
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._subtractOverflows = function (length) {
                    var overflows = [];
                    for (var _b = 1; _b < arguments.length; _b++) {
                        overflows[_b - 1] = arguments[_b];
                    }
                    return overflows.reduce(( /**
                     * @param {?} currentValue
                     * @param {?} currentOverflow
                     * @return {?}
                     */function (currentValue, currentOverflow) {
                        return currentValue - Math.max(currentOverflow, 0);
                    }), length);
                };
                /**
                 * Narrows the given viewport rect by the current _viewportMargin.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getNarrowedViewportRect = function () {
                    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,
                    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference
                    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`
                    // and `innerHeight` that do. This is necessary, because the overlay container uses
                    // 100% `width` and `height` which don't include the scrollbar either.
                    /** @type {?} */
                    var width = ( /** @type {?} */(this._document.documentElement)).clientWidth;
                    /** @type {?} */
                    var height = ( /** @type {?} */(this._document.documentElement)).clientHeight;
                    /** @type {?} */
                    var scrollPosition = this._viewportRuler.getViewportScrollPosition();
                    return {
                        top: scrollPosition.top + this._viewportMargin,
                        left: scrollPosition.left + this._viewportMargin,
                        right: scrollPosition.left + width - this._viewportMargin,
                        bottom: scrollPosition.top + height - this._viewportMargin,
                        width: width - (2 * this._viewportMargin),
                        height: height - (2 * this._viewportMargin),
                    };
                };
                /**
                 * Whether the we're dealing with an RTL context
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._isRtl = function () {
                    return this._overlayRef.getDirection() === 'rtl';
                };
                /**
                 * Determines whether the overlay uses exact or flexible positioning.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._hasExactPosition = function () {
                    return !this._hasFlexibleDimensions || this._isPushed;
                };
                /**
                 * Retrieves the offset of a position along the x or y axis.
                 * @private
                 * @param {?} position
                 * @param {?} axis
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getOffset = function (position, axis) {
                    if (axis === 'x') {
                        // We don't do something like `position['offset' + axis]` in
                        // order to avoid breking minifiers that rename properties.
                        return position.offsetX == null ? this._offsetX : position.offsetX;
                    }
                    return position.offsetY == null ? this._offsetY : position.offsetY;
                };
                /**
                 * Validates that the current position match the expected values.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._validatePositions = function () {
                    if (!this._preferredPositions.length) {
                        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');
                    }
                    // TODO(crisbeto): remove these once Angular's template type
                    // checking is advanced enough to catch these cases.
                    this._preferredPositions.forEach(( /**
                     * @param {?} pair
                     * @return {?}
                     */function (/**
                     * @param {?} pair
                     * @return {?}
                     */ pair) {
                        validateHorizontalPosition('originX', pair.originX);
                        validateVerticalPosition('originY', pair.originY);
                        validateHorizontalPosition('overlayX', pair.overlayX);
                        validateVerticalPosition('overlayY', pair.overlayY);
                    }));
                };
                /**
                 * Adds a single CSS class or an array of classes on the overlay panel.
                 * @private
                 * @param {?} cssClasses
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._addPanelClasses = function (cssClasses) {
                    var _this = this;
                    if (this._pane) {
                        Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceArray"])(cssClasses).forEach(( /**
                         * @param {?} cssClass
                         * @return {?}
                         */function (/**
                         * @param {?} cssClass
                         * @return {?}
                         */ cssClass) {
                            if (cssClass !== '' && _this._appliedPanelClasses.indexOf(cssClass) === -1) {
                                _this._appliedPanelClasses.push(cssClass);
                                _this._pane.classList.add(cssClass);
                            }
                        }));
                    }
                };
                /**
                 * Clears the classes that the position strategy has applied from the overlay panel.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._clearPanelClasses = function () {
                    var _this = this;
                    if (this._pane) {
                        this._appliedPanelClasses.forEach(( /**
                         * @param {?} cssClass
                         * @return {?}
                         */function (/**
                         * @param {?} cssClass
                         * @return {?}
                         */ cssClass) {
                            _this._pane.classList.remove(cssClass);
                        }));
                        this._appliedPanelClasses = [];
                    }
                };
                /**
                 * Returns the ClientRect of the current origin.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getOriginRect = function () {
                    /** @type {?} */
                    var origin = this._origin;
                    if (origin instanceof _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]) {
                        return origin.nativeElement.getBoundingClientRect();
                    }
                    if (origin instanceof HTMLElement) {
                        return origin.getBoundingClientRect();
                    }
                    /** @type {?} */
                    var width = origin.width || 0;
                    /** @type {?} */
                    var height = origin.height || 0;
                    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.
                    return {
                        top: origin.y,
                        bottom: origin.y + height,
                        left: origin.x,
                        right: origin.x + width,
                        height: height,
                        width: width
                    };
                };
                return FlexibleConnectedPositionStrategy;
            }());
            /**
             * Shallow-extends a stylesheet object with another stylesheet object.
             * @param {?} dest
             * @param {?} source
             * @return {?}
             */
            function extendStyles(dest, source) {
                for (var key in source) {
                    if (source.hasOwnProperty(key)) {
                        dest[key] = source[key];
                    }
                }
                return dest;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * A strategy for positioning overlays. Using this strategy, an overlay is given an
             * implicit position relative to some origin element. The relative position is defined in terms of
             * a point on the origin element that is connected to a point on the overlay element. For example,
             * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
             * of the overlay.
             * @deprecated Use `FlexibleConnectedPositionStrategy` instead.
             * \@breaking-change 8.0.0
             */
            var ConnectedPositionStrategy = /** @class */ (function () {
                /**
                 * @param {?} originPos
                 * @param {?} overlayPos
                 * @param {?} connectedTo
                 * @param {?} viewportRuler
                 * @param {?} document
                 * @param {?} platform
                 * @param {?} overlayContainer
                 */
                function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {
                    /**
                     * Ordered list of preferred positions, from most to least desirable.
                     */
                    this._preferredPositions = [];
                    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain
                    // the extra logic, we create an instance of the positioning strategy that has some
                    // defaults that make it behave as the old position strategy and to which we'll
                    // proxy all of the API calls.
                    this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)
                        .withFlexibleDimensions(false)
                        .withPush(false)
                        .withViewportMargin(0);
                    this.withFallbackPosition(originPos, overlayPos);
                }
                Object.defineProperty(ConnectedPositionStrategy.prototype, "_isRtl", {
                    /**
                     * Whether the we're dealing with an RTL context
                     * @return {?}
                     */
                    get: function () {
                        return this._overlayRef.getDirection() === 'rtl';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ConnectedPositionStrategy.prototype, "onPositionChange", {
                    /**
                     * Emits an event when the connection point changes.
                     * @return {?}
                     */
                    get: function () {
                        return this._positionStrategy.positionChanges;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ConnectedPositionStrategy.prototype, "positions", {
                    /**
                     * Ordered list of preferred positions, from most to least desirable.
                     * @return {?}
                     */
                    get: function () {
                        return this._preferredPositions;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Attach this position strategy to an overlay.
                 * @param {?} overlayRef
                 * @return {?}
                 */
                ConnectedPositionStrategy.prototype.attach = function (overlayRef) {
                    this._overlayRef = overlayRef;
                    this._positionStrategy.attach(overlayRef);
                    if (this._direction) {
                        overlayRef.setDirection(this._direction);
                        this._direction = null;
                    }
                };
                /**
                 * Disposes all resources used by the position strategy.
                 * @return {?}
                 */
                ConnectedPositionStrategy.prototype.dispose = function () {
                    this._positionStrategy.dispose();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                ConnectedPositionStrategy.prototype.detach = function () {
                    this._positionStrategy.detach();
                };
                /**
                 * Updates the position of the overlay element, using whichever preferred position relative
                 * to the origin fits on-screen.
                 * \@docs-private
                 * @return {?}
                 */
                ConnectedPositionStrategy.prototype.apply = function () {
                    this._positionStrategy.apply();
                };
                /**
                 * Re-positions the overlay element with the trigger in its last calculated position,
                 * even if a position higher in the "preferred positions" list would now fit. This
                 * allows one to re-align the panel without changing the orientation of the panel.
                 * @return {?}
                 */
                ConnectedPositionStrategy.prototype.recalculateLastPosition = function () {
                    this._positionStrategy.reapplyLastPosition();
                };
                /**
                 * Sets the list of Scrollable containers that host the origin element so that
                 * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
                 * Scrollable must be an ancestor element of the strategy's origin element.
                 * @param {?} scrollables
                 * @return {?}
                 */
                ConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {
                    this._positionStrategy.withScrollableContainers(scrollables);
                };
                /**
                 * Adds a new preferred fallback position.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} originPos
                 * @param {?} overlayPos
                 * @param {?=} offsetX
                 * @param {?=} offsetY
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos, offsetX, offsetY) {
                    /** @type {?} */
                    var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);
                    ( /** @type {?} */(this))._preferredPositions.push(position);
                    ( /** @type {?} */(this))._positionStrategy.withPositions(( /** @type {?} */(this))._preferredPositions);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the layout direction so the overlay's position can be adjusted to match.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} dir New layout direction.
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.withDirection = function (dir) {
                    // Since the direction might be declared before the strategy is attached,
                    // we save the value in a temporary property and we'll transfer it to the
                    // overlay ref on attachment.
                    if (( /** @type {?} */(this))._overlayRef) {
                        ( /** @type {?} */(this))._overlayRef.setDirection(dir);
                    }
                    else {
                        ( /** @type {?} */(this))._direction = dir;
                    }
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets an offset for the overlay's connection point on the x-axis
                 * @template THIS
                 * @this {THIS}
                 * @param {?} offset New offset in the X axis.
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.withOffsetX = function (offset) {
                    ( /** @type {?} */(this))._positionStrategy.withDefaultOffsetX(offset);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets an offset for the overlay's connection point on the y-axis
                 * @template THIS
                 * @this {THIS}
                 * @param {?} offset New offset in the Y axis.
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.withOffsetY = function (offset) {
                    ( /** @type {?} */(this))._positionStrategy.withDefaultOffsetY(offset);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets whether the overlay's position should be locked in after it is positioned
                 * initially. When an overlay is locked in, it won't attempt to reposition itself
                 * when the position is re-applied (e.g. when the user scrolls away).
                 * @template THIS
                 * @this {THIS}
                 * @param {?} isLocked Whether the overlay should locked in.
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {
                    ( /** @type {?} */(this))._positionStrategy.withLockedPosition(isLocked);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Overwrites the current set of positions with an array of new ones.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} positions Position pairs to be set on the strategy.
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.withPositions = function (positions) {
                    ( /** @type {?} */(this))._preferredPositions = positions.slice();
                    ( /** @type {?} */(this))._positionStrategy.withPositions(( /** @type {?} */(this))._preferredPositions);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the origin element, relative to which to position the overlay.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} origin Reference to the new origin element.
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.setOrigin = function (origin) {
                    ( /** @type {?} */(this))._positionStrategy.setOrigin(origin);
                    return ( /** @type {?} */(this));
                };
                return ConnectedPositionStrategy;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Class to be added to the overlay pane wrapper.
             * @type {?}
             */
            var wrapperClass = 'cdk-global-overlay-wrapper';
            /**
             * A strategy for positioning overlays. Using this strategy, an overlay is given an
             * explicit position relative to the browser's viewport. We use flexbox, instead of
             * transforms, in order to avoid issues with subpixel rendering which can cause the
             * element to become blurry.
             */
            var GlobalPositionStrategy = /** @class */ (function () {
                function GlobalPositionStrategy() {
                    this._cssPosition = 'static';
                    this._topOffset = '';
                    this._bottomOffset = '';
                    this._leftOffset = '';
                    this._rightOffset = '';
                    this._alignItems = '';
                    this._justifyContent = '';
                    this._width = '';
                    this._height = '';
                }
                /**
                 * @param {?} overlayRef
                 * @return {?}
                 */
                GlobalPositionStrategy.prototype.attach = function (overlayRef) {
                    /** @type {?} */
                    var config = overlayRef.getConfig();
                    this._overlayRef = overlayRef;
                    if (this._width && !config.width) {
                        overlayRef.updateSize({ width: this._width });
                    }
                    if (this._height && !config.height) {
                        overlayRef.updateSize({ height: this._height });
                    }
                    overlayRef.hostElement.classList.add(wrapperClass);
                    this._isDisposed = false;
                };
                /**
                 * Sets the top position of the overlay. Clears any previously set vertical position.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} value New top offset.
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.top = function (value) {
                    if (value === void 0) { value = ''; }
                    ( /** @type {?} */(this))._bottomOffset = '';
                    ( /** @type {?} */(this))._topOffset = value;
                    ( /** @type {?} */(this))._alignItems = 'flex-start';
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the left position of the overlay. Clears any previously set horizontal position.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} value New left offset.
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.left = function (value) {
                    if (value === void 0) { value = ''; }
                    ( /** @type {?} */(this))._rightOffset = '';
                    ( /** @type {?} */(this))._leftOffset = value;
                    ( /** @type {?} */(this))._justifyContent = 'flex-start';
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the bottom position of the overlay. Clears any previously set vertical position.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} value New bottom offset.
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.bottom = function (value) {
                    if (value === void 0) { value = ''; }
                    ( /** @type {?} */(this))._topOffset = '';
                    ( /** @type {?} */(this))._bottomOffset = value;
                    ( /** @type {?} */(this))._alignItems = 'flex-end';
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the right position of the overlay. Clears any previously set horizontal position.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} value New right offset.
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.right = function (value) {
                    if (value === void 0) { value = ''; }
                    ( /** @type {?} */(this))._leftOffset = '';
                    ( /** @type {?} */(this))._rightOffset = value;
                    ( /** @type {?} */(this))._justifyContent = 'flex-end';
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the overlay width and clears any previously set width.
                 * @deprecated Pass the `width` through the `OverlayConfig`.
                 * \@breaking-change 8.0.0
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} value New width for the overlay
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.width = function (value) {
                    if (value === void 0) { value = ''; }
                    if (( /** @type {?} */(this))._overlayRef) {
                        ( /** @type {?} */(this))._overlayRef.updateSize({ width: value });
                    }
                    else {
                        ( /** @type {?} */(this))._width = value;
                    }
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the overlay height and clears any previously set height.
                 * @deprecated Pass the `height` through the `OverlayConfig`.
                 * \@breaking-change 8.0.0
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} value New height for the overlay
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.height = function (value) {
                    if (value === void 0) { value = ''; }
                    if (( /** @type {?} */(this))._overlayRef) {
                        ( /** @type {?} */(this))._overlayRef.updateSize({ height: value });
                    }
                    else {
                        ( /** @type {?} */(this))._height = value;
                    }
                    return ( /** @type {?} */(this));
                };
                /**
                 * Centers the overlay horizontally with an optional offset.
                 * Clears any previously set horizontal position.
                 *
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} offset Overlay offset from the horizontal center.
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {
                    if (offset === void 0) { offset = ''; }
                    ( /** @type {?} */(this)).left(offset);
                    ( /** @type {?} */(this))._justifyContent = 'center';
                    return ( /** @type {?} */(this));
                };
                /**
                 * Centers the overlay vertically with an optional offset.
                 * Clears any previously set vertical position.
                 *
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} offset Overlay offset from the vertical center.
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.centerVertically = function (offset) {
                    if (offset === void 0) { offset = ''; }
                    ( /** @type {?} */(this)).top(offset);
                    ( /** @type {?} */(this))._alignItems = 'center';
                    return ( /** @type {?} */(this));
                };
                /**
                 * Apply the position to the element.
                 * \@docs-private
                 * @return {?}
                 */
                GlobalPositionStrategy.prototype.apply = function () {
                    // Since the overlay ref applies the strategy asynchronously, it could
                    // have been disposed before it ends up being applied. If that is the
                    // case, we shouldn't do anything.
                    if (!this._overlayRef || !this._overlayRef.hasAttached()) {
                        return;
                    }
                    /** @type {?} */
                    var styles = this._overlayRef.overlayElement.style;
                    /** @type {?} */
                    var parentStyles = this._overlayRef.hostElement.style;
                    /** @type {?} */
                    var config = this._overlayRef.getConfig();
                    styles.position = this._cssPosition;
                    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;
                    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;
                    styles.marginBottom = this._bottomOffset;
                    styles.marginRight = this._rightOffset;
                    if (config.width === '100%') {
                        parentStyles.justifyContent = 'flex-start';
                    }
                    else if (this._justifyContent === 'center') {
                        parentStyles.justifyContent = 'center';
                    }
                    else if (this._overlayRef.getConfig().direction === 'rtl') {
                        // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we
                        // don't want that because our positioning is explicitly `left` and `right`, hence
                        // why we do another inversion to ensure that the overlay stays in the same position.
                        // TODO: reconsider this if we add `start` and `end` methods.
                        if (this._justifyContent === 'flex-start') {
                            parentStyles.justifyContent = 'flex-end';
                        }
                        else if (this._justifyContent === 'flex-end') {
                            parentStyles.justifyContent = 'flex-start';
                        }
                    }
                    else {
                        parentStyles.justifyContent = this._justifyContent;
                    }
                    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;
                };
                /**
                 * Cleans up the DOM changes from the position strategy.
                 * \@docs-private
                 * @return {?}
                 */
                GlobalPositionStrategy.prototype.dispose = function () {
                    if (this._isDisposed || !this._overlayRef) {
                        return;
                    }
                    /** @type {?} */
                    var styles = this._overlayRef.overlayElement.style;
                    /** @type {?} */
                    var parent = this._overlayRef.hostElement;
                    /** @type {?} */
                    var parentStyles = parent.style;
                    parent.classList.remove(wrapperClass);
                    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =
                        styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';
                    this._overlayRef = ( /** @type {?} */(null));
                    this._isDisposed = true;
                };
                return GlobalPositionStrategy;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Builder for overlay position strategy.
             */
            var OverlayPositionBuilder = /** @class */ (function () {
                /**
                 * @param {?} _viewportRuler
                 * @param {?} _document
                 * @param {?} _platform
                 * @param {?} _overlayContainer
                 */
                function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {
                    this._viewportRuler = _viewportRuler;
                    this._document = _document;
                    this._platform = _platform;
                    this._overlayContainer = _overlayContainer;
                }
                /**
                 * Creates a global position strategy.
                 * @return {?}
                 */
                OverlayPositionBuilder.prototype.global = function () {
                    return new GlobalPositionStrategy();
                };
                /**
                 * Creates a relative position strategy.
                 * @deprecated Use `flexibleConnectedTo` instead.
                 * \@breaking-change 8.0.0
                 * @param {?} elementRef
                 * @param {?} originPos
                 * @param {?} overlayPos
                 * @return {?}
                 */
                OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {
                    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);
                };
                /**
                 * Creates a flexible position strategy.
                 * @param {?} origin Origin relative to which to position the overlay.
                 * @return {?}
                 */
                OverlayPositionBuilder.prototype.flexibleConnectedTo = function (origin) {
                    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);
                };
                return OverlayPositionBuilder;
            }());
            OverlayPositionBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            OverlayPositionBuilder.ctorParameters = function () { return [
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"] },
                { type: OverlayContainer }
            ]; };
            /** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Next overlay unique ID.
             * @type {?}
             */
            var nextUniqueId = 0;
            // Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver
            // it needs is different based on where OverlayModule is imported.
            /**
             * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be
             * used as a low-level building block for other components. Dialogs, tooltips, menus,
             * selects, etc. can all be built using overlays. The service should primarily be used by authors
             * of re-usable components rather than developers building end-user applications.
             *
             * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.
             */
            var Overlay = /** @class */ (function () {
                /**
                 * @param {?} scrollStrategies
                 * @param {?} _overlayContainer
                 * @param {?} _componentFactoryResolver
                 * @param {?} _positionBuilder
                 * @param {?} _keyboardDispatcher
                 * @param {?} _injector
                 * @param {?} _ngZone
                 * @param {?} _document
                 * @param {?} _directionality
                 * @param {?=} _location
                 */
                function Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {
                    this.scrollStrategies = scrollStrategies;
                    this._overlayContainer = _overlayContainer;
                    this._componentFactoryResolver = _componentFactoryResolver;
                    this._positionBuilder = _positionBuilder;
                    this._keyboardDispatcher = _keyboardDispatcher;
                    this._injector = _injector;
                    this._ngZone = _ngZone;
                    this._document = _document;
                    this._directionality = _directionality;
                    this._location = _location;
                }
                /**
                 * Creates an overlay.
                 * @param {?=} config Configuration applied to the overlay.
                 * @return {?} Reference to the created overlay.
                 */
                Overlay.prototype.create = function (config) {
                    /** @type {?} */
                    var host = this._createHostElement();
                    /** @type {?} */
                    var pane = this._createPaneElement(host);
                    /** @type {?} */
                    var portalOutlet = this._createPortalOutlet(pane);
                    /** @type {?} */
                    var overlayConfig = new OverlayConfig(config);
                    overlayConfig.direction = overlayConfig.direction || this._directionality.value;
                    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);
                };
                /**
                 * Gets a position builder that can be used, via fluent API,
                 * to construct and configure a position strategy.
                 * @return {?} An overlay position builder.
                 */
                Overlay.prototype.position = function () {
                    return this._positionBuilder;
                };
                /**
                 * Creates the DOM element for an overlay and appends it to the overlay container.
                 * @private
                 * @param {?} host
                 * @return {?} Newly-created pane element
                 */
                Overlay.prototype._createPaneElement = function (host) {
                    /** @type {?} */
                    var pane = this._document.createElement('div');
                    pane.id = "cdk-overlay-" + nextUniqueId++;
                    pane.classList.add('cdk-overlay-pane');
                    host.appendChild(pane);
                    return pane;
                };
                /**
                 * Creates the host element that wraps around an overlay
                 * and can be used for advanced positioning.
                 * @private
                 * @return {?} Newly-create host element.
                 */
                Overlay.prototype._createHostElement = function () {
                    /** @type {?} */
                    var host = this._document.createElement('div');
                    this._overlayContainer.getContainerElement().appendChild(host);
                    return host;
                };
                /**
                 * Create a DomPortalOutlet into which the overlay content can be loaded.
                 * @private
                 * @param {?} pane The DOM element to turn into a portal outlet.
                 * @return {?} A portal outlet for the given DOM element.
                 */
                Overlay.prototype._createPortalOutlet = function (pane) {
                    // We have to resolve the ApplicationRef later in order to allow people
                    // to use overlay-based providers during app initialization.
                    if (!this._appRef) {
                        this._appRef = this._injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ApplicationRef"]);
                    }
                    return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["DomPortalOutlet"](pane, this._componentFactoryResolver, this._appRef, this._injector);
                };
                return Overlay;
            }());
            Overlay.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"] },
            ];
            /** @nocollapse */
            Overlay.ctorParameters = function () { return [
                { type: ScrollStrategyOptions },
                { type: OverlayContainer },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ComponentFactoryResolver"] },
                { type: OverlayPositionBuilder },
                { type: OverlayKeyboardDispatcher },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injector"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"] },
                { type: _angular_common__WEBPACK_IMPORTED_MODULE_2__["Location"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Default set of positions for the overlay. Follows the behavior of a dropdown.
             * @type {?}
             */
            var defaultPositionList = [
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'top'
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'bottom'
                },
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'bottom'
                },
                {
                    originX: 'end',
                    originY: 'bottom',
                    overlayX: 'end',
                    overlayY: 'top'
                }
            ];
            /**
             * Injection token that determines the scroll handling while the connected overlay is open.
             * @type {?}
             */
            var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('cdk-connected-overlay-scroll-strategy');
            /**
             * Directive applied to an element to make it usable as an origin for an Overlay using a
             * ConnectedPositionStrategy.
             */
            var CdkOverlayOrigin = /** @class */ (function () {
                /**
                 * @param {?} elementRef
                 */
                function CdkOverlayOrigin(elementRef) {
                    this.elementRef = elementRef;
                }
                return CdkOverlayOrigin;
            }());
            CdkOverlayOrigin.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',
                            exportAs: 'cdkOverlayOrigin',
                        },] },
            ];
            /** @nocollapse */
            CdkOverlayOrigin.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] }
            ]; };
            /**
             * Directive to facilitate declarative creation of an
             * Overlay using a FlexibleConnectedPositionStrategy.
             */
            var CdkConnectedOverlay = /** @class */ (function () {
                // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.
                /**
                 * @param {?} _overlay
                 * @param {?} templateRef
                 * @param {?} viewContainerRef
                 * @param {?} scrollStrategyFactory
                 * @param {?} _dir
                 */
                function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {
                    this._overlay = _overlay;
                    this._dir = _dir;
                    this._hasBackdrop = false;
                    this._lockPosition = false;
                    this._growAfterOpen = false;
                    this._flexibleDimensions = false;
                    this._push = false;
                    this._backdropSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    /**
                     * Margin between the overlay and the viewport edges.
                     */
                    this.viewportMargin = 0;
                    /**
                     * Whether the overlay is open.
                     */
                    this.open = false;
                    /**
                     * Event emitted when the backdrop is clicked.
                     */
                    this.backdropClick = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Event emitted when the position has changed.
                     */
                    this.positionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Event emitted when the overlay has been attached.
                     */
                    this.attach = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Event emitted when the overlay has been detached.
                     */
                    this.detach = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Emits when there are keyboard events that are targeted at the overlay.
                     */
                    this.overlayKeydown = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    this._templatePortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["TemplatePortal"](templateRef, viewContainerRef);
                    this._scrollStrategyFactory = scrollStrategyFactory;
                    this.scrollStrategy = this._scrollStrategyFactory();
                }
                Object.defineProperty(CdkConnectedOverlay.prototype, "offsetX", {
                    /**
                     * The offset in pixels for the overlay connection point on the x-axis
                     * @return {?}
                     */
                    get: function () { return this._offsetX; },
                    /**
                     * @param {?} offsetX
                     * @return {?}
                     */
                    set: function (offsetX) {
                        this._offsetX = offsetX;
                        if (this._position) {
                            this._updatePositionStrategy(this._position);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "offsetY", {
                    /**
                     * The offset in pixels for the overlay connection point on the y-axis
                     * @return {?}
                     */
                    get: function () { return this._offsetY; },
                    /**
                     * @param {?} offsetY
                     * @return {?}
                     */
                    set: function (offsetY) {
                        this._offsetY = offsetY;
                        if (this._position) {
                            this._updatePositionStrategy(this._position);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "hasBackdrop", {
                    /**
                     * Whether or not the overlay should attach a backdrop.
                     * @return {?}
                     */
                    get: function () { return this._hasBackdrop; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "lockPosition", {
                    /**
                     * Whether or not the overlay should be locked when scrolling.
                     * @return {?}
                     */
                    get: function () { return this._lockPosition; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._lockPosition = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "flexibleDimensions", {
                    /**
                     * Whether the overlay's width and height can be constrained to fit within the viewport.
                     * @return {?}
                     */
                    get: function () { return this._flexibleDimensions; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._flexibleDimensions = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "growAfterOpen", {
                    /**
                     * Whether the overlay can grow after the initial open when flexible positioning is turned on.
                     * @return {?}
                     */
                    get: function () { return this._growAfterOpen; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._growAfterOpen = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "push", {
                    /**
                     * Whether the overlay can be pushed on-screen if none of the provided positions fit.
                     * @return {?}
                     */
                    get: function () { return this._push; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._push = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "overlayRef", {
                    /**
                     * The associated overlay reference.
                     * @return {?}
                     */
                    get: function () {
                        return this._overlayRef;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "dir", {
                    /**
                     * The element's layout direction.
                     * @return {?}
                     */
                    get: function () {
                        return this._dir ? this._dir.value : 'ltr';
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype.ngOnDestroy = function () {
                    if (this._overlayRef) {
                        this._overlayRef.dispose();
                    }
                    this._backdropSubscription.unsubscribe();
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype.ngOnChanges = function (changes) {
                    if (this._position) {
                        this._updatePositionStrategy(this._position);
                        this._overlayRef.updateSize({
                            width: this.width,
                            minWidth: this.minWidth,
                            height: this.height,
                            minHeight: this.minHeight,
                        });
                        if (changes['origin'] && this.open) {
                            this._position.apply();
                        }
                    }
                    if (changes['open']) {
                        this.open ? this._attachOverlay() : this._detachOverlay();
                    }
                };
                /**
                 * Creates an overlay
                 * @private
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype._createOverlay = function () {
                    var _this = this;
                    if (!this.positions || !this.positions.length) {
                        this.positions = defaultPositionList;
                    }
                    this._overlayRef = this._overlay.create(this._buildConfig());
                    this._overlayRef.keydownEvents().subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        _this.overlayKeydown.next(event);
                        if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["ESCAPE"] && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["hasModifierKey"])(event)) {
                            event.preventDefault();
                            _this._detachOverlay();
                        }
                    }));
                };
                /**
                 * Builds the overlay config based on the directive's inputs
                 * @private
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype._buildConfig = function () {
                    /** @type {?} */
                    var positionStrategy = this._position = this._createPositionStrategy();
                    /** @type {?} */
                    var overlayConfig = new OverlayConfig({
                        direction: this._dir,
                        positionStrategy: positionStrategy,
                        scrollStrategy: this.scrollStrategy,
                        hasBackdrop: this.hasBackdrop
                    });
                    if (this.width || this.width === 0) {
                        overlayConfig.width = this.width;
                    }
                    if (this.height || this.height === 0) {
                        overlayConfig.height = this.height;
                    }
                    if (this.minWidth || this.minWidth === 0) {
                        overlayConfig.minWidth = this.minWidth;
                    }
                    if (this.minHeight || this.minHeight === 0) {
                        overlayConfig.minHeight = this.minHeight;
                    }
                    if (this.backdropClass) {
                        overlayConfig.backdropClass = this.backdropClass;
                    }
                    if (this.panelClass) {
                        overlayConfig.panelClass = this.panelClass;
                    }
                    return overlayConfig;
                };
                /**
                 * Updates the state of a position strategy, based on the values of the directive inputs.
                 * @private
                 * @param {?} positionStrategy
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype._updatePositionStrategy = function (positionStrategy) {
                    var _this = this;
                    /** @type {?} */
                    var positions = this.positions.map(( /**
                     * @param {?} currentPosition
                     * @return {?}
                     */function (/**
                     * @param {?} currentPosition
                     * @return {?}
                     */ currentPosition) { return ({
                        originX: currentPosition.originX,
                        originY: currentPosition.originY,
                        overlayX: currentPosition.overlayX,
                        overlayY: currentPosition.overlayY,
                        offsetX: currentPosition.offsetX || _this.offsetX,
                        offsetY: currentPosition.offsetY || _this.offsetY,
                        panelClass: currentPosition.panelClass || undefined,
                    }); }));
                    return positionStrategy
                        .setOrigin(this.origin.elementRef)
                        .withPositions(positions)
                        .withFlexibleDimensions(this.flexibleDimensions)
                        .withPush(this.push)
                        .withGrowAfterOpen(this.growAfterOpen)
                        .withViewportMargin(this.viewportMargin)
                        .withLockedPosition(this.lockPosition);
                };
                /**
                 * Returns the position strategy of the overlay to be set on the overlay config
                 * @private
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype._createPositionStrategy = function () {
                    var _this = this;
                    /** @type {?} */
                    var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);
                    this._updatePositionStrategy(strategy);
                    strategy.positionChanges.subscribe(( /**
                     * @param {?} p
                     * @return {?}
                     */function (/**
                     * @param {?} p
                     * @return {?}
                     */ p) { return _this.positionChange.emit(p); }));
                    return strategy;
                };
                /**
                 * Attaches the overlay and subscribes to backdrop clicks if backdrop exists
                 * @private
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype._attachOverlay = function () {
                    var _this = this;
                    if (!this._overlayRef) {
                        this._createOverlay();
                    }
                    else {
                        // Update the overlay size, in case the directive's inputs have changed
                        this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;
                    }
                    if (!this._overlayRef.hasAttached()) {
                        this._overlayRef.attach(this._templatePortal);
                        this.attach.emit();
                    }
                    if (this.hasBackdrop) {
                        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(( /**
                         * @param {?} event
                         * @return {?}
                         */function (/**
                         * @param {?} event
                         * @return {?}
                         */ event) {
                            _this.backdropClick.emit(event);
                        }));
                    }
                    else {
                        this._backdropSubscription.unsubscribe();
                    }
                };
                /**
                 * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists
                 * @private
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype._detachOverlay = function () {
                    if (this._overlayRef) {
                        this._overlayRef.detach();
                        this.detach.emit();
                    }
                    this._backdropSubscription.unsubscribe();
                };
                return CdkConnectedOverlay;
            }());
            CdkConnectedOverlay.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',
                            exportAs: 'cdkConnectedOverlay'
                        },] },
            ];
            /** @nocollapse */
            CdkConnectedOverlay.ctorParameters = function () { return [
                { type: Overlay },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
            ]; };
            CdkConnectedOverlay.propDecorators = {
                origin: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayOrigin',] }],
                positions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayPositions',] }],
                offsetX: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayOffsetX',] }],
                offsetY: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayOffsetY',] }],
                width: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayWidth',] }],
                height: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayHeight',] }],
                minWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayMinWidth',] }],
                minHeight: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayMinHeight',] }],
                backdropClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayBackdropClass',] }],
                panelClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayPanelClass',] }],
                viewportMargin: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayViewportMargin',] }],
                scrollStrategy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayScrollStrategy',] }],
                open: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayOpen',] }],
                hasBackdrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayHasBackdrop',] }],
                lockPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayLockPosition',] }],
                flexibleDimensions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayFlexibleDimensions',] }],
                growAfterOpen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayGrowAfterOpen',] }],
                push: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayPush',] }],
                backdropClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                positionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                attach: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                detach: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                overlayKeydown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }]
            };
            /**
             * \@docs-private
             * @param {?} overlay
             * @return {?}
             */
            function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
                return ( /**
                 * @return {?}
                 */function () { return overlay.scrollStrategies.reposition(); });
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {
                provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,
                deps: [Overlay],
                useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var OverlayModule = /** @class */ (function () {
                function OverlayModule() {
                }
                return OverlayModule;
            }());
            OverlayModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                            imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["BidiModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["PortalModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollingModule"]],
                            exports: [CdkConnectedOverlay, CdkOverlayOrigin, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollingModule"]],
                            declarations: [CdkConnectedOverlay, CdkOverlayOrigin],
                            providers: [
                                Overlay,
                                CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,
                            ],
                        },] },
            ];
            /**
             * @deprecated Use `OverlayModule` instead.
             * \@breaking-change 8.0.0
             * \@docs-private
             * @type {?}
             */
            var OVERLAY_PROVIDERS = [
                Overlay,
                OverlayPositionBuilder,
                OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,
                _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["VIEWPORT_RULER_PROVIDER"],
                OVERLAY_CONTAINER_PROVIDER,
                CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Alternative to OverlayContainer that supports correct displaying of overlay elements in
             * Fullscreen mode
             * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen
             *
             * Should be provided in the root component.
             */
            var FullscreenOverlayContainer = /** @class */ (function (_super) {
                __extends(FullscreenOverlayContainer, _super);
                /**
                 * @param {?} _document
                 */
                function FullscreenOverlayContainer(_document) {
                    return _super.call(this, _document) || this;
                }
                /**
                 * @return {?}
                 */
                FullscreenOverlayContainer.prototype.ngOnDestroy = function () {
                    _super.prototype.ngOnDestroy.call(this);
                    if (this._fullScreenEventName && this._fullScreenListener) {
                        this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);
                    }
                };
                /**
                 * @protected
                 * @return {?}
                 */
                FullscreenOverlayContainer.prototype._createContainer = function () {
                    var _this = this;
                    _super.prototype._createContainer.call(this);
                    this._adjustParentForFullscreenChange();
                    this._addFullscreenChangeListener(( /**
                     * @return {?}
                     */function () { return _this._adjustParentForFullscreenChange(); }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = function () {
                    if (!this._containerElement) {
                        return;
                    }
                    /** @type {?} */
                    var fullscreenElement = this.getFullscreenElement();
                    /** @type {?} */
                    var parent = fullscreenElement || this._document.body;
                    parent.appendChild(this._containerElement);
                };
                /**
                 * @private
                 * @param {?} fn
                 * @return {?}
                 */
                FullscreenOverlayContainer.prototype._addFullscreenChangeListener = function (fn) {
                    /** @type {?} */
                    var eventName = this._getEventName();
                    if (eventName) {
                        if (this._fullScreenListener) {
                            this._document.removeEventListener(eventName, this._fullScreenListener);
                        }
                        this._document.addEventListener(eventName, fn);
                        this._fullScreenListener = fn;
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                FullscreenOverlayContainer.prototype._getEventName = function () {
                    if (!this._fullScreenEventName) {
                        /** @type {?} */
                        var _document = ( /** @type {?} */(this._document));
                        if (_document.fullscreenEnabled) {
                            this._fullScreenEventName = 'fullscreenchange';
                        }
                        else if (_document.webkitFullscreenEnabled) {
                            this._fullScreenEventName = 'webkitfullscreenchange';
                        }
                        else if (_document.mozFullScreenEnabled) {
                            this._fullScreenEventName = 'mozfullscreenchange';
                        }
                        else if (_document.msFullscreenEnabled) {
                            this._fullScreenEventName = 'MSFullscreenChange';
                        }
                    }
                    return this._fullScreenEventName;
                };
                /**
                 * When the page is put into fullscreen mode, a specific element is specified.
                 * Only that element and its children are visible when in fullscreen mode.
                 * @return {?}
                 */
                FullscreenOverlayContainer.prototype.getFullscreenElement = function () {
                    /** @type {?} */
                    var _document = ( /** @type {?} */(this._document));
                    return _document.fullscreenElement ||
                        _document.webkitFullscreenElement ||
                        _document.mozFullScreenElement ||
                        _document.msFullscreenElement ||
                        null;
                };
                return FullscreenOverlayContainer;
            }(OverlayContainer));
            FullscreenOverlayContainer.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            FullscreenOverlayContainer.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ FullscreenOverlayContainer.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"])); }, token: FullscreenOverlayContainer, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=overlay.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/platform.js": 
        /*!*******************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/platform.js ***!
          \*******************************************************/
        /*! exports provided: Platform, PlatformModule, getSupportedInputTypes, supportsPassiveEventListeners, normalizePassiveListenerOptions, supportsScrollBehavior, getRtlScrollAxisType, RtlScrollAxisType, _supportsShadowDom */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Platform", function () { return Platform; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformModule", function () { return PlatformModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSupportedInputTypes", function () { return getSupportedInputTypes; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsPassiveEventListeners", function () { return supportsPassiveEventListeners; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizePassiveListenerOptions", function () { return normalizePassiveListenerOptions; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsScrollBehavior", function () { return supportsScrollBehavior; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRtlScrollAxisType", function () { return getRtlScrollAxisType; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RtlScrollAxisType", function () { return RtlScrollAxisType; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_supportsShadowDom", function () { return _supportsShadowDom; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Whether the current platform supports the V8 Break Iterator. The V8 check
            // is necessary to detect all Blink based browsers.
            /** @type {?} */
            var hasV8BreakIterator;
            // We need a try/catch around the reference to `Intl`, because accessing it in some cases can
            // cause IE to throw. These cases are tied to particular versions of Windows and can happen if
            // the consumer is providing a polyfilled `Map`. See:
            // https://github.com/Microsoft/ChakraCore/issues/3189
            // https://github.com/angular/components/issues/15687
            try {
                hasV8BreakIterator = (typeof Intl !== 'undefined' && (( /** @type {?} */(Intl))).v8BreakIterator);
            }
            catch (_a) {
                hasV8BreakIterator = false;
            }
            /**
             * Service to detect the current platform by comparing the userAgent strings and
             * checking browser-specific global properties.
             */
            var Platform = /** @class */ (function () {
                /**
                 * \@breaking-change 8.0.0 remove optional decorator
                 * @param {?=} _platformId
                 */
                function Platform(_platformId) {
                    this._platformId = _platformId;
                    /**
                     * Whether the Angular application is being rendered in the browser.
                     * We want to use the Angular platform check because if the Document is shimmed
                     * without the navigator, the following checks will fail. This is preferred because
                     * sometimes the Document may be shimmed without the user's knowledge or intention
                     */
                    this.isBrowser = this._platformId ?
                        Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformBrowser"])(this._platformId) : typeof document === 'object' && !!document;
                    /**
                     * Whether the current browser is Microsoft Edge.
                     */
                    this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);
                    /**
                     * Whether the current rendering engine is Microsoft Trident.
                     */
                    this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);
                    /**
                     * Whether the current rendering engine is Blink.
                     */
                    // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.
                    this.BLINK = this.isBrowser && (!!((( /** @type {?} */(window))).chrome || hasV8BreakIterator) &&
                        typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);
                    /**
                     * Whether the current rendering engine is WebKit.
                     */
                    // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to
                    // ensure that Webkit runs standalone and is not used as another engine's base.
                    this.WEBKIT = this.isBrowser &&
                        /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
                    /**
                     * Whether the current platform is Apple iOS.
                     */
                    this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&
                        !('MSStream' in window);
                    /**
                     * Whether the current browser is Firefox.
                     */
                    // It's difficult to detect the plain Gecko engine, because most of the browsers identify
                    // them self as Gecko-like browsers and modify the userAgent's according to that.
                    // Since we only cover one explicit Firefox case, we can simply check for Firefox
                    // instead of having an unstable check for Gecko.
                    this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
                    /**
                     * Whether the current platform is Android.
                     */
                    // Trident on mobile adds the android platform to the userAgent to trick detections.
                    this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;
                    /**
                     * Whether the current browser is Safari.
                     */
                    // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake
                    // this and just place the Safari keyword in the userAgent. To be more safe about Safari every
                    // Safari browser should also use Webkit as its layout engine.
                    this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
                }
                return Platform;
            }());
            Platform.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            Platform.ctorParameters = function () { return [
                { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] }
            ]; };
            /** @nocollapse */ Platform.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function Platform_Factory() { return new Platform(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"], 8)); }, token: Platform, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var PlatformModule = /** @class */ (function () {
                function PlatformModule() {
                }
                return PlatformModule;
            }());
            PlatformModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{},] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Cached result Set of input types support by the current browser.
             * @type {?}
             */
            var supportedInputTypes;
            /**
             * Types of `<input>` that *might* be supported.
             * @type {?}
             */
            var candidateInputTypes = [
                // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after
                // first changing it to something else:
                // The specified value "" does not conform to the required format.
                // The format is "#rrggbb" where rr, gg, bb are two-digit hexadecimal numbers.
                'color',
                'button',
                'checkbox',
                'date',
                'datetime-local',
                'email',
                'file',
                'hidden',
                'image',
                'month',
                'number',
                'password',
                'radio',
                'range',
                'reset',
                'search',
                'submit',
                'tel',
                'text',
                'time',
                'url',
                'week',
            ];
            /**
             * @return {?} The input types supported by this browser.
             */
            function getSupportedInputTypes() {
                // Result is cached.
                if (supportedInputTypes) {
                    return supportedInputTypes;
                }
                // We can't check if an input type is not supported until we're on the browser, so say that
                // everything is supported when not on the browser. We don't use `Platform` here since it's
                // just a helper function and can't inject it.
                if (typeof document !== 'object' || !document) {
                    supportedInputTypes = new Set(candidateInputTypes);
                    return supportedInputTypes;
                }
                /** @type {?} */
                var featureTestInput = document.createElement('input');
                supportedInputTypes = new Set(candidateInputTypes.filter(( /**
                 * @param {?} value
                 * @return {?}
                 */function (/**
                 * @param {?} value
                 * @return {?}
                 */ value) {
                    featureTestInput.setAttribute('type', value);
                    return featureTestInput.type === value;
                })));
                return supportedInputTypes;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Cached result of whether the user's browser supports passive event listeners.
             * @type {?}
             */
            var supportsPassiveEvents;
            /**
             * Checks whether the user's browser supports passive event listeners.
             * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
             * @return {?}
             */
            function supportsPassiveEventListeners() {
                if (supportsPassiveEvents == null && typeof window !== 'undefined') {
                    try {
                        window.addEventListener('test', ( /** @type {?} */(null)), Object.defineProperty({}, 'passive', {
                            get: ( /**
                             * @return {?}
                             */function () { return supportsPassiveEvents = true; })
                        }));
                    }
                    finally {
                        supportsPassiveEvents = supportsPassiveEvents || false;
                    }
                }
                return supportsPassiveEvents;
            }
            /**
             * Normalizes an `AddEventListener` object to something that can be passed
             * to `addEventListener` on any browser, no matter whether it supports the
             * `options` parameter.
             * @param {?} options Object to be normalized.
             * @return {?}
             */
            function normalizePassiveListenerOptions(options) {
                return supportsPassiveEventListeners() ? options : !!options.capture;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @enum {number} */
            var RtlScrollAxisType = {
                /**
                 * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled
                 * all the way right.
                 */
                NORMAL: 0,
                /**
                 * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled
                 * all the way right.
                 */
                NEGATED: 1,
                /**
                 * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled
                 * all the way right.
                 */
                INVERTED: 2,
            };
            RtlScrollAxisType[RtlScrollAxisType.NORMAL] = 'NORMAL';
            RtlScrollAxisType[RtlScrollAxisType.NEGATED] = 'NEGATED';
            RtlScrollAxisType[RtlScrollAxisType.INVERTED] = 'INVERTED';
            /**
             * Cached result of the way the browser handles the horizontal scroll axis in RTL mode.
             * @type {?}
             */
            var rtlScrollAxisType;
            /**
             * Check whether the browser supports scroll behaviors.
             * @return {?}
             */
            function supportsScrollBehavior() {
                return !!(typeof document == 'object' && 'scrollBehavior' in ( /** @type {?} */(document.documentElement)).style);
            }
            /**
             * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,
             * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.
             * @return {?}
             */
            function getRtlScrollAxisType() {
                // We can't check unless we're on the browser. Just assume 'normal' if we're not.
                if (typeof document !== 'object' || !document) {
                    return RtlScrollAxisType.NORMAL;
                }
                if (!rtlScrollAxisType) {
                    // Create a 1px wide scrolling container and a 2px wide content element.
                    /** @type {?} */
                    var scrollContainer = document.createElement('div');
                    /** @type {?} */
                    var containerStyle = scrollContainer.style;
                    scrollContainer.dir = 'rtl';
                    containerStyle.height = '1px';
                    containerStyle.width = '1px';
                    containerStyle.overflow = 'auto';
                    containerStyle.visibility = 'hidden';
                    containerStyle.pointerEvents = 'none';
                    containerStyle.position = 'absolute';
                    /** @type {?} */
                    var content = document.createElement('div');
                    /** @type {?} */
                    var contentStyle = content.style;
                    contentStyle.width = '2px';
                    contentStyle.height = '1px';
                    scrollContainer.appendChild(content);
                    document.body.appendChild(scrollContainer);
                    rtlScrollAxisType = RtlScrollAxisType.NORMAL;
                    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL
                    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're
                    // dealing with one of the other two types of browsers.
                    if (scrollContainer.scrollLeft === 0) {
                        // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an
                        // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by
                        // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will
                        // return 0 when we read it again.
                        scrollContainer.scrollLeft = 1;
                        rtlScrollAxisType =
                            scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;
                    }
                    ( /** @type {?} */(scrollContainer.parentNode)).removeChild(scrollContainer);
                }
                return rtlScrollAxisType;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var shadowDomIsSupported;
            /**
             * Checks whether the user's browser support Shadow DOM.
             * @return {?}
             */
            function _supportsShadowDom() {
                if (shadowDomIsSupported == null) {
                    /** @type {?} */
                    var head = typeof document !== 'undefined' ? document.head : null;
                    shadowDomIsSupported = !!(head && ((( /** @type {?} */(head))).createShadowRoot || head.attachShadow));
                }
                return shadowDomIsSupported;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=platform.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/portal.js": 
        /*!*****************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/portal.js ***!
          \*****************************************************/
        /*! exports provided: Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, BasePortalHost, DomPortalOutlet, DomPortalHost, CdkPortal, TemplatePortalDirective, CdkPortalOutlet, PortalHostDirective, PortalModule, PortalInjector */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Portal", function () { return Portal; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentPortal", function () { return ComponentPortal; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplatePortal", function () { return TemplatePortal; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasePortalOutlet", function () { return BasePortalOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasePortalHost", function () { return BasePortalHost; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomPortalOutlet", function () { return DomPortalOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomPortalHost", function () { return DomPortalHost; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkPortal", function () { return CdkPortal; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplatePortalDirective", function () { return TemplatePortalDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkPortalOutlet", function () { return CdkPortalOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PortalHostDirective", function () { return PortalHostDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PortalModule", function () { return PortalModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PortalInjector", function () { return PortalInjector; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Throws an exception when attempting to attach a null portal to a host.
             * \@docs-private
             * @return {?}
             */
            function throwNullPortalError() {
                throw Error('Must provide a portal to attach');
            }
            /**
             * Throws an exception when attempting to attach a portal to a host that is already attached.
             * \@docs-private
             * @return {?}
             */
            function throwPortalAlreadyAttachedError() {
                throw Error('Host already has a portal attached');
            }
            /**
             * Throws an exception when attempting to attach a portal to an already-disposed host.
             * \@docs-private
             * @return {?}
             */
            function throwPortalOutletAlreadyDisposedError() {
                throw Error('This PortalOutlet has already been disposed');
            }
            /**
             * Throws an exception when attempting to attach an unknown portal type.
             * \@docs-private
             * @return {?}
             */
            function throwUnknownPortalTypeError() {
                throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +
                    'a ComponentPortal or a TemplatePortal.');
            }
            /**
             * Throws an exception when attempting to attach a portal to a null host.
             * \@docs-private
             * @return {?}
             */
            function throwNullPortalOutletError() {
                throw Error('Attempting to attach a portal to a null PortalOutlet');
            }
            /**
             * Throws an exception when attempting to detach a portal that is not attached.
             * \@docs-private
             * @return {?}
             */
            function throwNoPortalAttachedError() {
                throw Error('Attempting to detach a portal that is not attached to a host');
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * A `Portal` is something that you want to render somewhere else.
             * It can be attach to / detached from a `PortalOutlet`.
             * @abstract
             * @template T
             */
            var Portal = /** @class */ (function () {
                function Portal() {
                }
                /**
                 * Attach this portal to a host.
                 * @param {?} host
                 * @return {?}
                 */
                Portal.prototype.attach = function (host) {
                    if (host == null) {
                        throwNullPortalOutletError();
                    }
                    if (host.hasAttached()) {
                        throwPortalAlreadyAttachedError();
                    }
                    this._attachedHost = host;
                    return ( /** @type {?} */(host.attach(this)));
                };
                /**
                 * Detach this portal from its host
                 * @return {?}
                 */
                Portal.prototype.detach = function () {
                    /** @type {?} */
                    var host = this._attachedHost;
                    if (host == null) {
                        throwNoPortalAttachedError();
                    }
                    else {
                        this._attachedHost = null;
                        host.detach();
                    }
                };
                Object.defineProperty(Portal.prototype, "isAttached", {
                    /**
                     * Whether this portal is attached to a host.
                     * @return {?}
                     */
                    get: function () {
                        return this._attachedHost != null;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Sets the PortalOutlet reference without performing `attach()`. This is used directly by
                 * the PortalOutlet when it is performing an `attach()` or `detach()`.
                 * @param {?} host
                 * @return {?}
                 */
                Portal.prototype.setAttachedHost = function (host) {
                    this._attachedHost = host;
                };
                return Portal;
            }());
            /**
             * A `ComponentPortal` is a portal that instantiates some Component upon attachment.
             * @template T
             */
            var ComponentPortal = /** @class */ (function (_super) {
                __extends(ComponentPortal, _super);
                /**
                 * @param {?} component
                 * @param {?=} viewContainerRef
                 * @param {?=} injector
                 * @param {?=} componentFactoryResolver
                 */
                function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {
                    var _this = _super.call(this) || this;
                    _this.component = component;
                    _this.viewContainerRef = viewContainerRef;
                    _this.injector = injector;
                    _this.componentFactoryResolver = componentFactoryResolver;
                    return _this;
                }
                return ComponentPortal;
            }(Portal));
            /**
             * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).
             * @template C
             */
            var TemplatePortal = /** @class */ (function (_super) {
                __extends(TemplatePortal, _super);
                /**
                 * @param {?} template
                 * @param {?} viewContainerRef
                 * @param {?=} context
                 */
                function TemplatePortal(template, viewContainerRef, context) {
                    var _this = _super.call(this) || this;
                    _this.templateRef = template;
                    _this.viewContainerRef = viewContainerRef;
                    _this.context = context;
                    return _this;
                }
                Object.defineProperty(TemplatePortal.prototype, "origin", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this.templateRef.elementRef;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Attach the portal to the provided `PortalOutlet`.
                 * When a context is provided it will override the `context` property of the `TemplatePortal`
                 * instance.
                 * @param {?} host
                 * @param {?=} context
                 * @return {?}
                 */
                TemplatePortal.prototype.attach = function (host, context) {
                    if (context === void 0) { context = this.context; }
                    this.context = context;
                    return _super.prototype.attach.call(this, host);
                };
                /**
                 * @return {?}
                 */
                TemplatePortal.prototype.detach = function () {
                    this.context = undefined;
                    return _super.prototype.detach.call(this);
                };
                return TemplatePortal;
            }(Portal));
            /**
             * Partial implementation of PortalOutlet that handles attaching
             * ComponentPortal and TemplatePortal.
             * @abstract
             */
            var BasePortalOutlet = /** @class */ (function () {
                function BasePortalOutlet() {
                    /**
                     * Whether this host has already been permanently disposed.
                     */
                    this._isDisposed = false;
                }
                /**
                 * Whether this host has an attached portal.
                 * @return {?}
                 */
                BasePortalOutlet.prototype.hasAttached = function () {
                    return !!this._attachedPortal;
                };
                /**
                 * Attaches a portal.
                 * @param {?} portal
                 * @return {?}
                 */
                BasePortalOutlet.prototype.attach = function (portal) {
                    if (!portal) {
                        throwNullPortalError();
                    }
                    if (this.hasAttached()) {
                        throwPortalAlreadyAttachedError();
                    }
                    if (this._isDisposed) {
                        throwPortalOutletAlreadyDisposedError();
                    }
                    if (portal instanceof ComponentPortal) {
                        this._attachedPortal = portal;
                        return this.attachComponentPortal(portal);
                    }
                    else if (portal instanceof TemplatePortal) {
                        this._attachedPortal = portal;
                        return this.attachTemplatePortal(portal);
                    }
                    throwUnknownPortalTypeError();
                };
                /**
                 * Detaches a previously attached portal.
                 * @return {?}
                 */
                BasePortalOutlet.prototype.detach = function () {
                    if (this._attachedPortal) {
                        this._attachedPortal.setAttachedHost(null);
                        this._attachedPortal = null;
                    }
                    this._invokeDisposeFn();
                };
                /**
                 * Permanently dispose of this portal host.
                 * @return {?}
                 */
                BasePortalOutlet.prototype.dispose = function () {
                    if (this.hasAttached()) {
                        this.detach();
                    }
                    this._invokeDisposeFn();
                    this._isDisposed = true;
                };
                /**
                 * \@docs-private
                 * @param {?} fn
                 * @return {?}
                 */
                BasePortalOutlet.prototype.setDisposeFn = function (fn) {
                    this._disposeFn = fn;
                };
                /**
                 * @private
                 * @return {?}
                 */
                BasePortalOutlet.prototype._invokeDisposeFn = function () {
                    if (this._disposeFn) {
                        this._disposeFn();
                        this._disposeFn = null;
                    }
                };
                return BasePortalOutlet;
            }());
            /**
             * @deprecated Use `BasePortalOutlet` instead.
             * \@breaking-change 9.0.0
             * @abstract
             */
            var BasePortalHost = /** @class */ (function (_super) {
                __extends(BasePortalHost, _super);
                function BasePortalHost() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return BasePortalHost;
            }(BasePortalOutlet));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular
             * application context.
             */
            var DomPortalOutlet = /** @class */ (function (_super) {
                __extends(DomPortalOutlet, _super);
                /**
                 * @param {?} outletElement
                 * @param {?} _componentFactoryResolver
                 * @param {?} _appRef
                 * @param {?} _defaultInjector
                 */
                function DomPortalOutlet(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {
                    var _this = _super.call(this) || this;
                    _this.outletElement = outletElement;
                    _this._componentFactoryResolver = _componentFactoryResolver;
                    _this._appRef = _appRef;
                    _this._defaultInjector = _defaultInjector;
                    return _this;
                }
                /**
                 * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
                 * @template T
                 * @param {?} portal Portal to be attached
                 * @return {?} Reference to the created component.
                 */
                DomPortalOutlet.prototype.attachComponentPortal = function (portal) {
                    var _this = this;
                    /** @type {?} */
                    var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
                    /** @type {?} */
                    var componentFactory = resolver.resolveComponentFactory(portal.component);
                    /** @type {?} */
                    var componentRef;
                    // If the portal specifies a ViewContainerRef, we will use that as the attachment point
                    // for the component (in terms of Angular's component tree, not rendering).
                    // When the ViewContainerRef is missing, we use the factory to create the component directly
                    // and then manually attach the view to the application.
                    if (portal.viewContainerRef) {
                        componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);
                        this.setDisposeFn(( /**
                         * @return {?}
                         */function () { return componentRef.destroy(); }));
                    }
                    else {
                        componentRef = componentFactory.create(portal.injector || this._defaultInjector);
                        this._appRef.attachView(componentRef.hostView);
                        this.setDisposeFn(( /**
                         * @return {?}
                         */function () {
                            _this._appRef.detachView(componentRef.hostView);
                            componentRef.destroy();
                        }));
                    }
                    // At this point the component has been instantiated, so we move it to the location in the DOM
                    // where we want it to be rendered.
                    this.outletElement.appendChild(this._getComponentRootNode(componentRef));
                    return componentRef;
                };
                /**
                 * Attaches a template portal to the DOM as an embedded view.
                 * @template C
                 * @param {?} portal Portal to be attached.
                 * @return {?} Reference to the created embedded view.
                 */
                DomPortalOutlet.prototype.attachTemplatePortal = function (portal) {
                    var _this = this;
                    /** @type {?} */
                    var viewContainer = portal.viewContainerRef;
                    /** @type {?} */
                    var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);
                    viewRef.detectChanges();
                    // The method `createEmbeddedView` will add the view as a child of the viewContainer.
                    // But for the DomPortalOutlet the view can be added everywhere in the DOM
                    // (e.g Overlay Container) To move the view to the specified host element. We just
                    // re-append the existing root nodes.
                    viewRef.rootNodes.forEach(( /**
                     * @param {?} rootNode
                     * @return {?}
                     */function (/**
                     * @param {?} rootNode
                     * @return {?}
                     */ rootNode) { return _this.outletElement.appendChild(rootNode); }));
                    this.setDisposeFn((( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var index = viewContainer.indexOf(viewRef);
                        if (index !== -1) {
                            viewContainer.remove(index);
                        }
                    })));
                    // TODO(jelbourn): Return locals from view.
                    return viewRef;
                };
                /**
                 * Clears out a portal from the DOM.
                 * @return {?}
                 */
                DomPortalOutlet.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    if (this.outletElement.parentNode != null) {
                        this.outletElement.parentNode.removeChild(this.outletElement);
                    }
                };
                /**
                 * Gets the root HTMLElement for an instantiated component.
                 * @private
                 * @param {?} componentRef
                 * @return {?}
                 */
                DomPortalOutlet.prototype._getComponentRootNode = function (componentRef) {
                    return ( /** @type {?} */((( /** @type {?} */(componentRef.hostView))).rootNodes[0]));
                };
                return DomPortalOutlet;
            }(BasePortalOutlet));
            /**
             * @deprecated Use `DomPortalOutlet` instead.
             * \@breaking-change 9.0.0
             */
            var DomPortalHost = /** @class */ (function (_super) {
                __extends(DomPortalHost, _super);
                function DomPortalHost() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return DomPortalHost;
            }(DomPortalOutlet));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,
             * the directive instance itself can be attached to a host, enabling declarative use of portals.
             */
            var CdkPortal = /** @class */ (function (_super) {
                __extends(CdkPortal, _super);
                /**
                 * @param {?} templateRef
                 * @param {?} viewContainerRef
                 */
                function CdkPortal(templateRef, viewContainerRef) {
                    return _super.call(this, templateRef, viewContainerRef) || this;
                }
                return CdkPortal;
            }(TemplatePortal));
            CdkPortal.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdkPortal]',
                            exportAs: 'cdkPortal',
                        },] },
            ];
            /** @nocollapse */
            CdkPortal.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }
            ]; };
            /**
             * @deprecated Use `CdkPortal` instead.
             * \@breaking-change 9.0.0
             */
            var TemplatePortalDirective = /** @class */ (function (_super) {
                __extends(TemplatePortalDirective, _super);
                function TemplatePortalDirective() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return TemplatePortalDirective;
            }(CdkPortal));
            TemplatePortalDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdk-portal], [portal]',
                            exportAs: 'cdkPortal',
                            providers: [{
                                    provide: CdkPortal,
                                    useExisting: TemplatePortalDirective
                                }]
                        },] },
            ];
            /**
             * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be
             * directly attached to it, enabling declarative use.
             *
             * Usage:
             * `<ng-template [cdkPortalOutlet]="greeting"></ng-template>`
             */
            var CdkPortalOutlet = /** @class */ (function (_super) {
                __extends(CdkPortalOutlet, _super);
                /**
                 * @param {?} _componentFactoryResolver
                 * @param {?} _viewContainerRef
                 */
                function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef) {
                    var _this = _super.call(this) || this;
                    _this._componentFactoryResolver = _componentFactoryResolver;
                    _this._viewContainerRef = _viewContainerRef;
                    /**
                     * Whether the portal component is initialized.
                     */
                    _this._isInitialized = false;
                    /**
                     * Emits when a portal is attached to the outlet.
                     */
                    _this.attached = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    return _this;
                }
                Object.defineProperty(CdkPortalOutlet.prototype, "portal", {
                    /**
                     * Portal associated with the Portal outlet.
                     * @return {?}
                     */
                    get: function () {
                        return this._attachedPortal;
                    },
                    /**
                     * @param {?} portal
                     * @return {?}
                     */
                    set: function (portal) {
                        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have
                        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`
                        // and attach a portal programmatically in the parent component. When Angular does the first CD
                        // round, it will fire the setter with empty string, causing the user's content to be cleared.
                        if (this.hasAttached() && !portal && !this._isInitialized) {
                            return;
                        }
                        if (this.hasAttached()) {
                            _super.prototype.detach.call(this);
                        }
                        if (portal) {
                            _super.prototype.attach.call(this, portal);
                        }
                        this._attachedPortal = portal;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkPortalOutlet.prototype, "attachedRef", {
                    /**
                     * Component or view reference that is attached to the portal.
                     * @return {?}
                     */
                    get: function () {
                        return this._attachedRef;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkPortalOutlet.prototype.ngOnInit = function () {
                    this._isInitialized = true;
                };
                /**
                 * @return {?}
                 */
                CdkPortalOutlet.prototype.ngOnDestroy = function () {
                    _super.prototype.dispose.call(this);
                    this._attachedPortal = null;
                    this._attachedRef = null;
                };
                /**
                 * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.
                 *
                 * @template T
                 * @param {?} portal Portal to be attached to the portal outlet.
                 * @return {?} Reference to the created component.
                 */
                CdkPortalOutlet.prototype.attachComponentPortal = function (portal) {
                    portal.setAttachedHost(this);
                    // If the portal specifies an origin, use that as the logical location of the component
                    // in the application tree. Otherwise use the location of this PortalOutlet.
                    /** @type {?} */
                    var viewContainerRef = portal.viewContainerRef != null ?
                        portal.viewContainerRef :
                        this._viewContainerRef;
                    /** @type {?} */
                    var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
                    /** @type {?} */
                    var componentFactory = resolver.resolveComponentFactory(portal.component);
                    /** @type {?} */
                    var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);
                    _super.prototype.setDisposeFn.call(this, ( /**
                     * @return {?}
                     */function () { return ref.destroy(); }));
                    this._attachedPortal = portal;
                    this._attachedRef = ref;
                    this.attached.emit(ref);
                    return ref;
                };
                /**
                 * Attach the given TemplatePortal to this PortlHost as an embedded View.
                 * @template C
                 * @param {?} portal Portal to be attached.
                 * @return {?} Reference to the created embedded view.
                 */
                CdkPortalOutlet.prototype.attachTemplatePortal = function (portal) {
                    var _this = this;
                    portal.setAttachedHost(this);
                    /** @type {?} */
                    var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);
                    _super.prototype.setDisposeFn.call(this, ( /**
                     * @return {?}
                     */function () { return _this._viewContainerRef.clear(); }));
                    this._attachedPortal = portal;
                    this._attachedRef = viewRef;
                    this.attached.emit(viewRef);
                    return viewRef;
                };
                return CdkPortalOutlet;
            }(BasePortalOutlet));
            CdkPortalOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdkPortalOutlet]',
                            exportAs: 'cdkPortalOutlet',
                            inputs: ['portal: cdkPortalOutlet']
                        },] },
            ];
            /** @nocollapse */
            CdkPortalOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }
            ]; };
            CdkPortalOutlet.propDecorators = {
                attached: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
            };
            /**
             * @deprecated Use `CdkPortalOutlet` instead.
             * \@breaking-change 9.0.0
             */
            var PortalHostDirective = /** @class */ (function (_super) {
                __extends(PortalHostDirective, _super);
                function PortalHostDirective() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return PortalHostDirective;
            }(CdkPortalOutlet));
            PortalHostDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdkPortalHost], [portalHost]',
                            exportAs: 'cdkPortalHost',
                            inputs: ['portal: cdkPortalHost'],
                            providers: [{
                                    provide: CdkPortalOutlet,
                                    useExisting: PortalHostDirective
                                }]
                        },] },
            ];
            var PortalModule = /** @class */ (function () {
                function PortalModule() {
                }
                return PortalModule;
            }());
            PortalModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],
                            declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Custom injector to be used when providing custom
             * injection tokens to components inside a portal.
             * \@docs-private
             */
            var PortalInjector = /** @class */ (function () {
                /**
                 * @param {?} _parentInjector
                 * @param {?} _customTokens
                 */
                function PortalInjector(_parentInjector, _customTokens) {
                    this._parentInjector = _parentInjector;
                    this._customTokens = _customTokens;
                }
                /**
                 * @param {?} token
                 * @param {?=} notFoundValue
                 * @return {?}
                 */
                PortalInjector.prototype.get = function (token, notFoundValue) {
                    /** @type {?} */
                    var value = this._customTokens.get(token);
                    if (typeof value !== 'undefined') {
                        return value;
                    }
                    return this._parentInjector.get(token, notFoundValue);
                };
                return PortalInjector;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=portal.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/scrolling.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/scrolling.js ***!
          \********************************************************/
        /*! exports provided: _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_fixedSizeVirtualScrollStrategyFactory", function () { return _fixedSizeVirtualScrollStrategyFactory; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FixedSizeVirtualScrollStrategy", function () { return FixedSizeVirtualScrollStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkFixedSizeVirtualScroll", function () { return CdkFixedSizeVirtualScroll; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL_DISPATCHER_PROVIDER_FACTORY", function () { return SCROLL_DISPATCHER_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_SCROLL_TIME", function () { return DEFAULT_SCROLL_TIME; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollDispatcher", function () { return ScrollDispatcher; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL_DISPATCHER_PROVIDER", function () { return SCROLL_DISPATCHER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkScrollable", function () { return CdkScrollable; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollingModule", function () { return ScrollingModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollDispatchModule", function () { return ScrollDispatchModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VIEWPORT_RULER_PROVIDER_FACTORY", function () { return VIEWPORT_RULER_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_RESIZE_TIME", function () { return DEFAULT_RESIZE_TIME; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewportRuler", function () { return ViewportRuler; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VIEWPORT_RULER_PROVIDER", function () { return VIEWPORT_RULER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkVirtualForOf", function () { return CdkVirtualForOf; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VIRTUAL_SCROLL_STRATEGY", function () { return VIRTUAL_SCROLL_STRATEGY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkVirtualScrollViewport", function () { return CdkVirtualScrollViewport; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The injection token used to specify the virtual scrolling strategy.
             * @type {?}
             */
            var VIRTUAL_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('VIRTUAL_SCROLL_STRATEGY');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Virtual scrolling strategy for lists with items of known fixed size.
             */
            var FixedSizeVirtualScrollStrategy = /** @class */ (function () {
                /**
                 * @param {?} itemSize The size of the items in the virtually scrolling list.
                 * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more
                 * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.
                 */
                function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {
                    this._scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * \@docs-private Implemented as part of VirtualScrollStrategy.
                     */
                    this.scrolledIndexChange = this._scrolledIndexChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["distinctUntilChanged"])());
                    /**
                     * The attached viewport.
                     */
                    this._viewport = null;
                    this._itemSize = itemSize;
                    this._minBufferPx = minBufferPx;
                    this._maxBufferPx = maxBufferPx;
                }
                /**
                 * Attaches this scroll strategy to a viewport.
                 * @param {?} viewport The viewport to attach this strategy to.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.attach = function (viewport) {
                    this._viewport = viewport;
                    this._updateTotalContentSize();
                    this._updateRenderedRange();
                };
                /**
                 * Detaches this scroll strategy from the currently attached viewport.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.detach = function () {
                    this._scrolledIndexChange.complete();
                    this._viewport = null;
                };
                /**
                 * Update the item size and buffer size.
                 * @param {?} itemSize The size of the items in the virtually scrolling list.
                 * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more
                 * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.updateItemAndBufferSize = function (itemSize, minBufferPx, maxBufferPx) {
                    if (maxBufferPx < minBufferPx) {
                        throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');
                    }
                    this._itemSize = itemSize;
                    this._minBufferPx = minBufferPx;
                    this._maxBufferPx = maxBufferPx;
                    this._updateTotalContentSize();
                    this._updateRenderedRange();
                };
                /**
                 * \@docs-private Implemented as part of VirtualScrollStrategy.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.onContentScrolled = function () {
                    this._updateRenderedRange();
                };
                /**
                 * \@docs-private Implemented as part of VirtualScrollStrategy.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.onDataLengthChanged = function () {
                    this._updateTotalContentSize();
                    this._updateRenderedRange();
                };
                /**
                 * \@docs-private Implemented as part of VirtualScrollStrategy.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.onContentRendered = function () { };
                /**
                 * \@docs-private Implemented as part of VirtualScrollStrategy.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.onRenderedOffsetChanged = function () { };
                /**
                 * Scroll to the offset for the given index.
                 * @param {?} index The index of the element to scroll to.
                 * @param {?} behavior The ScrollBehavior to use when scrolling.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.scrollToIndex = function (index, behavior) {
                    if (this._viewport) {
                        this._viewport.scrollToOffset(index * this._itemSize, behavior);
                    }
                };
                /**
                 * Update the viewport's total content size.
                 * @private
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype._updateTotalContentSize = function () {
                    if (!this._viewport) {
                        return;
                    }
                    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);
                };
                /**
                 * Update the viewport's rendered range.
                 * @private
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype._updateRenderedRange = function () {
                    if (!this._viewport) {
                        return;
                    }
                    /** @type {?} */
                    var scrollOffset = this._viewport.measureScrollOffset();
                    /** @type {?} */
                    var firstVisibleIndex = scrollOffset / this._itemSize;
                    /** @type {?} */
                    var renderedRange = this._viewport.getRenderedRange();
                    /** @type {?} */
                    var newRange = { start: renderedRange.start, end: renderedRange.end };
                    /** @type {?} */
                    var viewportSize = this._viewport.getViewportSize();
                    /** @type {?} */
                    var dataLength = this._viewport.getDataLength();
                    /** @type {?} */
                    var startBuffer = scrollOffset - newRange.start * this._itemSize;
                    if (startBuffer < this._minBufferPx && newRange.start != 0) {
                        /** @type {?} */
                        var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);
                        newRange.start = Math.max(0, newRange.start - expandStart);
                        newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));
                    }
                    else {
                        /** @type {?} */
                        var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);
                        if (endBuffer < this._minBufferPx && newRange.end != dataLength) {
                            /** @type {?} */
                            var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);
                            if (expandEnd > 0) {
                                newRange.end = Math.min(dataLength, newRange.end + expandEnd);
                                newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));
                            }
                        }
                    }
                    this._viewport.setRenderedRange(newRange);
                    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);
                    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));
                };
                return FixedSizeVirtualScrollStrategy;
            }());
            /**
             * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created
             * `FixedSizeVirtualScrollStrategy` from the given directive.
             * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the
             *     `FixedSizeVirtualScrollStrategy` from.
             * @return {?}
             */
            function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {
                return fixedSizeDir._scrollStrategy;
            }
            /**
             * A virtual scroll strategy that supports fixed-size items.
             */
            var CdkFixedSizeVirtualScroll = /** @class */ (function () {
                function CdkFixedSizeVirtualScroll() {
                    this._itemSize = 20;
                    this._minBufferPx = 100;
                    this._maxBufferPx = 200;
                    /**
                     * The scroll strategy used by this directive.
                     */
                    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);
                }
                Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, "itemSize", {
                    /**
                     * The size of the items in the list (in pixels).
                     * @return {?}
                     */
                    get: function () { return this._itemSize; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._itemSize = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceNumberProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, "minBufferPx", {
                    /**
                     * The minimum amount of buffer rendered beyond the viewport (in pixels).
                     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
                     * @return {?}
                     */
                    get: function () { return this._minBufferPx; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._minBufferPx = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceNumberProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, "maxBufferPx", {
                    /**
                     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
                     * @return {?}
                     */
                    get: function () { return this._maxBufferPx; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._maxBufferPx = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceNumberProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkFixedSizeVirtualScroll.prototype.ngOnChanges = function () {
                    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);
                };
                return CdkFixedSizeVirtualScroll;
            }());
            CdkFixedSizeVirtualScroll.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'cdk-virtual-scroll-viewport[itemSize]',
                            providers: [{
                                    provide: VIRTUAL_SCROLL_STRATEGY,
                                    useFactory: _fixedSizeVirtualScrollStrategyFactory,
                                    deps: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                                             * @return {?}
                                             */function () { return CdkFixedSizeVirtualScroll; }))],
                                }],
                        },] },
            ];
            CdkFixedSizeVirtualScroll.propDecorators = {
                itemSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                minBufferPx: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                maxBufferPx: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Time in ms to throttle the scrolling events by default.
             * @type {?}
             */
            var DEFAULT_SCROLL_TIME = 20;
            /**
             * Service contained all registered Scrollable references and emits an event when any one of the
             * Scrollable references emit a scrolled event.
             */
            var ScrollDispatcher = /** @class */ (function () {
                /**
                 * @param {?} _ngZone
                 * @param {?} _platform
                 */
                function ScrollDispatcher(_ngZone, _platform) {
                    this._ngZone = _ngZone;
                    this._platform = _platform;
                    /**
                     * Subject for notifying that a registered scrollable reference element has been scrolled.
                     */
                    this._scrolled = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Keeps track of the global `scroll` and `resize` subscriptions.
                     */
                    this._globalSubscription = null;
                    /**
                     * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.
                     */
                    this._scrolledCount = 0;
                    /**
                     * Map of all the scrollable references that are registered with the service and their
                     * scroll event subscriptions.
                     */
                    this.scrollContainers = new Map();
                }
                /**
                 * Registers a scrollable instance with the service and listens for its scrolled events. When the
                 * scrollable is scrolled, the service emits the event to its scrolled observable.
                 * @param {?} scrollable Scrollable instance to be registered.
                 * @return {?}
                 */
                ScrollDispatcher.prototype.register = function (scrollable) {
                    var _this = this;
                    if (!this.scrollContainers.has(scrollable)) {
                        this.scrollContainers.set(scrollable, scrollable.elementScrolled()
                            .subscribe(( /**
                     * @return {?}
                     */function () { return _this._scrolled.next(scrollable); })));
                    }
                };
                /**
                 * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.
                 * @param {?} scrollable Scrollable instance to be deregistered.
                 * @return {?}
                 */
                ScrollDispatcher.prototype.deregister = function (scrollable) {
                    /** @type {?} */
                    var scrollableReference = this.scrollContainers.get(scrollable);
                    if (scrollableReference) {
                        scrollableReference.unsubscribe();
                        this.scrollContainers.delete(scrollable);
                    }
                };
                /**
                 * Returns an observable that emits an event whenever any of the registered Scrollable
                 * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
                 * to override the default "throttle" time.
                 *
                 * **Note:** in order to avoid hitting change detection for every scroll event,
                 * all of the events emitted from this stream will be run outside the Angular zone.
                 * If you need to update any data bindings as a result of a scroll event, you have
                 * to run the callback using `NgZone.run`.
                 * @param {?=} auditTimeInMs
                 * @return {?}
                 */
                ScrollDispatcher.prototype.scrolled = function (auditTimeInMs) {
                    var _this = this;
                    if (auditTimeInMs === void 0) { auditTimeInMs = DEFAULT_SCROLL_TIME; }
                    if (!this._platform.isBrowser) {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])();
                    }
                    return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) {
                        if (!_this._globalSubscription) {
                            _this._addGlobalListener();
                        }
                        // In the case of a 0ms delay, use an observable without auditTime
                        // since it does add a perceptible delay in processing overhead.
                        /** @type {?} */
                        var subscription = auditTimeInMs > 0 ?
                            _this._scrolled.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["auditTime"])(auditTimeInMs)).subscribe(observer) :
                            _this._scrolled.subscribe(observer);
                        _this._scrolledCount++;
                        return ( /**
                         * @return {?}
                         */function () {
                            subscription.unsubscribe();
                            _this._scrolledCount--;
                            if (!_this._scrolledCount) {
                                _this._removeGlobalListener();
                            }
                        });
                    }));
                };
                /**
                 * @return {?}
                 */
                ScrollDispatcher.prototype.ngOnDestroy = function () {
                    var _this = this;
                    this._removeGlobalListener();
                    this.scrollContainers.forEach(( /**
                     * @param {?} _
                     * @param {?} container
                     * @return {?}
                     */function (_, container) { return _this.deregister(container); }));
                    this._scrolled.complete();
                };
                /**
                 * Returns an observable that emits whenever any of the
                 * scrollable ancestors of an element are scrolled.
                 * @param {?} elementRef Element whose ancestors to listen for.
                 * @param {?=} auditTimeInMs Time to throttle the scroll events.
                 * @return {?}
                 */
                ScrollDispatcher.prototype.ancestorScrolled = function (elementRef, auditTimeInMs) {
                    /** @type {?} */
                    var ancestors = this.getAncestorScrollContainers(elementRef);
                    return this.scrolled(auditTimeInMs).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(( /**
                     * @param {?} target
                     * @return {?}
                     */function (/**
                     * @param {?} target
                     * @return {?}
                     */ target) {
                        return !target || ancestors.indexOf(target) > -1;
                    })));
                };
                /**
                 * Returns all registered Scrollables that contain the provided element.
                 * @param {?} elementRef
                 * @return {?}
                 */
                ScrollDispatcher.prototype.getAncestorScrollContainers = function (elementRef) {
                    var _this = this;
                    /** @type {?} */
                    var scrollingContainers = [];
                    this.scrollContainers.forEach(( /**
                     * @param {?} _subscription
                     * @param {?} scrollable
                     * @return {?}
                     */function (_subscription, scrollable) {
                        if (_this._scrollableContainsElement(scrollable, elementRef)) {
                            scrollingContainers.push(scrollable);
                        }
                    }));
                    return scrollingContainers;
                };
                /**
                 * Returns true if the element is contained within the provided Scrollable.
                 * @private
                 * @param {?} scrollable
                 * @param {?} elementRef
                 * @return {?}
                 */
                ScrollDispatcher.prototype._scrollableContainsElement = function (scrollable, elementRef) {
                    /** @type {?} */
                    var element = elementRef.nativeElement;
                    /** @type {?} */
                    var scrollableElement = scrollable.getElementRef().nativeElement;
                    // Traverse through the element parents until we reach null, checking if any of the elements
                    // are the scrollable's element.
                    do {
                        if (element == scrollableElement) {
                            return true;
                        }
                    } while (element = ( /** @type {?} */(element)).parentElement);
                    return false;
                };
                /**
                 * Sets up the global scroll listeners.
                 * @private
                 * @return {?}
                 */
                ScrollDispatcher.prototype._addGlobalListener = function () {
                    var _this = this;
                    this._globalSubscription = this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window.document, 'scroll').subscribe(( /**
                         * @return {?}
                         */function () { return _this._scrolled.next(); }));
                    }));
                };
                /**
                 * Cleans up the global scroll listener.
                 * @private
                 * @return {?}
                 */
                ScrollDispatcher.prototype._removeGlobalListener = function () {
                    if (this._globalSubscription) {
                        this._globalSubscription.unsubscribe();
                        this._globalSubscription = null;
                    }
                };
                return ScrollDispatcher;
            }());
            ScrollDispatcher.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            ScrollDispatcher.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"] }
            ]; };
            /** @nocollapse */ ScrollDispatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"])); }, token: ScrollDispatcher, providedIn: "root" });
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} parentDispatcher
             * @param {?} ngZone
             * @param {?} platform
             * @return {?}
             */
            function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {
                return parentDispatcher || new ScrollDispatcher(ngZone, platform);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var SCROLL_DISPATCHER_PROVIDER = {
                // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.
                provide: ScrollDispatcher,
                deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"](), ScrollDispatcher], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]],
                useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Sends an event when the directive's element is scrolled. Registers itself with the
             * ScrollDispatcher service to include itself as part of its collection of scrolling events that it
             * can be listened to through the service.
             */
            var CdkScrollable = /** @class */ (function () {
                /**
                 * @param {?} elementRef
                 * @param {?} scrollDispatcher
                 * @param {?} ngZone
                 * @param {?=} dir
                 */
                function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {
                    var _this = this;
                    this.elementRef = elementRef;
                    this.scrollDispatcher = scrollDispatcher;
                    this.ngZone = ngZone;
                    this.dir = dir;
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    this._elementScrolled = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) { return _this.ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () { return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(_this.elementRef.nativeElement, 'scroll').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(_this._destroyed))
                        .subscribe(observer); })); }));
                }
                /**
                 * @return {?}
                 */
                CdkScrollable.prototype.ngOnInit = function () {
                    this.scrollDispatcher.register(this);
                };
                /**
                 * @return {?}
                 */
                CdkScrollable.prototype.ngOnDestroy = function () {
                    this.scrollDispatcher.deregister(this);
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * Returns observable that emits when a scroll event is fired on the host element.
                 * @return {?}
                 */
                CdkScrollable.prototype.elementScrolled = function () {
                    return this._elementScrolled;
                };
                /**
                 * Gets the ElementRef for the viewport.
                 * @return {?}
                 */
                CdkScrollable.prototype.getElementRef = function () {
                    return this.elementRef;
                };
                /**
                 * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
                 * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
                 * left and right always refer to the left and right side of the scrolling container irrespective
                 * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
                 * in an RTL context.
                 * @param {?} options specified the offsets to scroll to.
                 * @return {?}
                 */
                CdkScrollable.prototype.scrollTo = function (options) {
                    /** @type {?} */
                    var el = this.elementRef.nativeElement;
                    /** @type {?} */
                    var isRtl = this.dir && this.dir.value == 'rtl';
                    // Rewrite start & end offsets as right or left offsets.
                    options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;
                    options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;
                    // Rewrite the bottom offset as a top offset.
                    if (options.bottom != null) {
                        (( /** @type {?} */(options))).top =
                            el.scrollHeight - el.clientHeight - options.bottom;
                    }
                    // Rewrite the right offset as a left offset.
                    if (isRtl && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() != _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].NORMAL) {
                        if (options.left != null) {
                            (( /** @type {?} */(options))).right =
                                el.scrollWidth - el.clientWidth - options.left;
                        }
                        if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].INVERTED) {
                            options.left = options.right;
                        }
                        else if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].NEGATED) {
                            options.left = options.right ? -options.right : options.right;
                        }
                    }
                    else {
                        if (options.right != null) {
                            (( /** @type {?} */(options))).left =
                                el.scrollWidth - el.clientWidth - options.right;
                        }
                    }
                    this._applyScrollToOptions(options);
                };
                /**
                 * @private
                 * @param {?} options
                 * @return {?}
                 */
                CdkScrollable.prototype._applyScrollToOptions = function (options) {
                    /** @type {?} */
                    var el = this.elementRef.nativeElement;
                    if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["supportsScrollBehavior"])()) {
                        el.scrollTo(options);
                    }
                    else {
                        if (options.top != null) {
                            el.scrollTop = options.top;
                        }
                        if (options.left != null) {
                            el.scrollLeft = options.left;
                        }
                    }
                };
                /**
                 * Measures the scroll offset relative to the specified edge of the viewport. This method can be
                 * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent
                 * about what scrollLeft means in RTL. The values returned by this method are normalized such that
                 * left and right always refer to the left and right side of the scrolling container irrespective
                 * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
                 * in an RTL context.
                 * @param {?} from The edge to measure from.
                 * @return {?}
                 */
                CdkScrollable.prototype.measureScrollOffset = function (from) {
                    /** @type {?} */
                    var LEFT = 'left';
                    /** @type {?} */
                    var RIGHT = 'right';
                    /** @type {?} */
                    var el = this.elementRef.nativeElement;
                    if (from == 'top') {
                        return el.scrollTop;
                    }
                    if (from == 'bottom') {
                        return el.scrollHeight - el.clientHeight - el.scrollTop;
                    }
                    // Rewrite start & end as left or right offsets.
                    /** @type {?} */
                    var isRtl = this.dir && this.dir.value == 'rtl';
                    if (from == 'start') {
                        from = isRtl ? RIGHT : LEFT;
                    }
                    else if (from == 'end') {
                        from = isRtl ? LEFT : RIGHT;
                    }
                    if (isRtl && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].INVERTED) {
                        // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and
                        // 0 when scrolled all the way right.
                        if (from == LEFT) {
                            return el.scrollWidth - el.clientWidth - el.scrollLeft;
                        }
                        else {
                            return el.scrollLeft;
                        }
                    }
                    else if (isRtl && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].NEGATED) {
                        // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and
                        // 0 when scrolled all the way right.
                        if (from == LEFT) {
                            return el.scrollLeft + el.scrollWidth - el.clientWidth;
                        }
                        else {
                            return -el.scrollLeft;
                        }
                    }
                    else {
                        // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and
                        // (scrollWidth - clientWidth) when scrolled all the way right.
                        if (from == LEFT) {
                            return el.scrollLeft;
                        }
                        else {
                            return el.scrollWidth - el.clientWidth - el.scrollLeft;
                        }
                    }
                };
                return CdkScrollable;
            }());
            CdkScrollable.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdk-scrollable], [cdkScrollable]'
                        },] },
            ];
            /** @nocollapse */
            CdkScrollable.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: ScrollDispatcher },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Checks if the given ranges are equal.
             * @param {?} r1
             * @param {?} r2
             * @return {?}
             */
            function rangesEqual(r1, r2) {
                return r1.start == r2.start && r1.end == r2.end;
            }
            /**
             * Scheduler to be used for scroll events. Needs to fall back to
             * something that doesn't rely on requestAnimationFrame on environments
             * that don't support it (e.g. server-side rendering).
             * @type {?}
             */
            var SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? rxjs__WEBPACK_IMPORTED_MODULE_2__["animationFrameScheduler"] : rxjs__WEBPACK_IMPORTED_MODULE_2__["asapScheduler"];
            /**
             * A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.
             */
            var CdkVirtualScrollViewport = /** @class */ (function (_super) {
                __extends(CdkVirtualScrollViewport, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} _changeDetectorRef
                 * @param {?} ngZone
                 * @param {?} _scrollStrategy
                 * @param {?} dir
                 * @param {?} scrollDispatcher
                 */
                function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {
                    var _this = _super.call(this, elementRef, scrollDispatcher, ngZone, dir) || this;
                    _this.elementRef = elementRef;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._scrollStrategy = _scrollStrategy;
                    /**
                     * Emits when the viewport is detached from a CdkVirtualForOf.
                     */
                    _this._detachedSubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits when the rendered range changes.
                     */
                    _this._renderedRangeSubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    _this._orientation = 'vertical';
                    // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll
                    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because
                    // depending on how the strategy calculates the scrolled index, it may come at a cost to
                    // performance.
                    /**
                     * Emits when the index of the first element visible in the viewport changes.
                     */
                    _this.scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) { return _this._scrollStrategy.scrolledIndexChange.subscribe(( /**
                     * @param {?} index
                     * @return {?}
                     */function (/**
                     * @param {?} index
                     * @return {?}
                     */ index) { return Promise.resolve().then(( /**
                     * @return {?}
                     */function () { return _this.ngZone.run(( /**
                     * @return {?}
                     */function () { return observer.next(index); })); })); })); }));
                    /**
                     * A stream that emits whenever the rendered range changes.
                     */
                    _this.renderedRangeStream = _this._renderedRangeSubject.asObservable();
                    /**
                     * The total size of all content (in pixels), including content that is not currently rendered.
                     */
                    _this._totalContentSize = 0;
                    /**
                     * A string representing the `style.width` property value to be used for the spacer element.
                     */
                    _this._totalContentWidth = '';
                    /**
                     * A string representing the `style.height` property value to be used for the spacer element.
                     */
                    _this._totalContentHeight = '';
                    /**
                     * The currently rendered range of indices.
                     */
                    _this._renderedRange = { start: 0, end: 0 };
                    /**
                     * The length of the data bound to this viewport (in number of items).
                     */
                    _this._dataLength = 0;
                    /**
                     * The size of the viewport (in pixels).
                     */
                    _this._viewportSize = 0;
                    /**
                     * The last rendered content offset that was set.
                     */
                    _this._renderedContentOffset = 0;
                    /**
                     * Whether the last rendered content offset was to the end of the content (and therefore needs to
                     * be rewritten as an offset to the start of the content).
                     */
                    _this._renderedContentOffsetNeedsRewrite = false;
                    /**
                     * Whether there is a pending change detection cycle.
                     */
                    _this._isChangeDetectionPending = false;
                    /**
                     * A list of functions to run after the next change detection cycle.
                     */
                    _this._runAfterChangeDetection = [];
                    if (!_scrollStrategy) {
                        throw Error('Error: cdk-virtual-scroll-viewport requires the "itemSize" property to be set.');
                    }
                    return _this;
                }
                Object.defineProperty(CdkVirtualScrollViewport.prototype, "orientation", {
                    /**
                     * The direction the viewport scrolls.
                     * @return {?}
                     */
                    get: function () {
                        return this._orientation;
                    },
                    /**
                     * @param {?} orientation
                     * @return {?}
                     */
                    set: function (orientation) {
                        if (this._orientation !== orientation) {
                            this._orientation = orientation;
                            this._calculateSpacerSize();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.ngOnInit = function () {
                    var _this = this;
                    _super.prototype.ngOnInit.call(this);
                    // It's still too early to measure the viewport at this point. Deferring with a promise allows
                    // the Viewport to be rendered with the correct size before we measure. We run this outside the
                    // zone to avoid causing more change detection cycles. We handle the change detection loop
                    // ourselves instead.
                    this.ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () { return Promise.resolve().then(( /**
                     * @return {?}
                     */function () {
                        _this._measureViewportSize();
                        _this._scrollStrategy.attach(_this);
                        _this.elementScrolled()
                            .pipe(
                        // Start off with a fake scroll event so we properly detect our initial position.
                        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(( /** @type {?} */(null))), 
                        // Collect multiple events into one until the next animation frame. This way if
                        // there are multiple scroll events in the same frame we only need to recheck
                        // our layout once.
                        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["auditTime"])(0, SCROLL_SCHEDULER))
                            .subscribe(( /**
                     * @return {?}
                     */function () { return _this._scrollStrategy.onContentScrolled(); }));
                        _this._markChangeDetectionNeeded();
                    })); }));
                };
                /**
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.ngOnDestroy = function () {
                    this.detach();
                    this._scrollStrategy.detach();
                    // Complete all subjects
                    this._renderedRangeSubject.complete();
                    this._detachedSubject.complete();
                    _super.prototype.ngOnDestroy.call(this);
                };
                /**
                 * Attaches a `CdkVirtualForOf` to this viewport.
                 * @param {?} forOf
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.attach = function (forOf) {
                    var _this = this;
                    if (this._forOf) {
                        throw Error('CdkVirtualScrollViewport is already attached.');
                    }
                    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length
                    // changes. Run outside the zone to avoid triggering change detection, since we're managing the
                    // change detection loop ourselves.
                    this.ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._forOf = forOf;
                        _this._forOf.dataStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(_this._detachedSubject)).subscribe(( /**
                         * @param {?} data
                         * @return {?}
                         */function (/**
                         * @param {?} data
                         * @return {?}
                         */ data) {
                            /** @type {?} */
                            var newLength = data.length;
                            if (newLength !== _this._dataLength) {
                                _this._dataLength = newLength;
                                _this._scrollStrategy.onDataLengthChanged();
                            }
                            _this._doChangeDetection();
                        }));
                    }));
                };
                /**
                 * Detaches the current `CdkVirtualForOf`.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.detach = function () {
                    this._forOf = null;
                    this._detachedSubject.next();
                };
                /**
                 * Gets the length of the data bound to this viewport (in number of items).
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.getDataLength = function () {
                    return this._dataLength;
                };
                /**
                 * Gets the size of the viewport (in pixels).
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.getViewportSize = function () {
                    return this._viewportSize;
                };
                // TODO(mmalerba): This is technically out of sync with what's really rendered until a render
                // cycle happens. I'm being careful to only call it after the render cycle is complete and before
                // setting it to something else, but its error prone and should probably be split into
                // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.
                /**
                 * Get the current rendered range of items.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.getRenderedRange = function () {
                    return this._renderedRange;
                };
                /**
                 * Sets the total size of all content (in pixels), including content that is not currently
                 * rendered.
                 * @param {?} size
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.setTotalContentSize = function (size) {
                    if (this._totalContentSize !== size) {
                        this._totalContentSize = size;
                        this._calculateSpacerSize();
                        this._markChangeDetectionNeeded();
                    }
                };
                /**
                 * Sets the currently rendered range of indices.
                 * @param {?} range
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.setRenderedRange = function (range) {
                    var _this = this;
                    if (!rangesEqual(this._renderedRange, range)) {
                        this._renderedRangeSubject.next(this._renderedRange = range);
                        this._markChangeDetectionNeeded(( /**
                         * @return {?}
                         */function () { return _this._scrollStrategy.onContentRendered(); }));
                    }
                };
                /**
                 * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.getOffsetToRenderedContentStart = function () {
                    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;
                };
                /**
                 * Sets the offset from the start of the viewport to either the start or end of the rendered data
                 * (in pixels).
                 * @param {?} offset
                 * @param {?=} to
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.setRenderedContentOffset = function (offset, to) {
                    var _this = this;
                    if (to === void 0) { to = 'to-start'; }
                    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis
                    // in the negative direction.
                    /** @type {?} */
                    var isRtl = this.dir && this.dir.value == 'rtl';
                    /** @type {?} */
                    var isHorizontal = this.orientation == 'horizontal';
                    /** @type {?} */
                    var axis = isHorizontal ? 'X' : 'Y';
                    /** @type {?} */
                    var axisDirection = isHorizontal && isRtl ? -1 : 1;
                    /** @type {?} */
                    var transform = "translate" + axis + "(" + Number(axisDirection * offset) + "px)";
                    this._renderedContentOffset = offset;
                    if (to === 'to-end') {
                        transform += " translate" + axis + "(-100%)";
                        // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise
                        // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would
                        // expand upward).
                        this._renderedContentOffsetNeedsRewrite = true;
                    }
                    if (this._renderedContentTransform != transform) {
                        // We know this value is safe because we parse `offset` with `Number()` before passing it
                        // into the string.
                        this._renderedContentTransform = transform;
                        this._markChangeDetectionNeeded(( /**
                         * @return {?}
                         */function () {
                            if (_this._renderedContentOffsetNeedsRewrite) {
                                _this._renderedContentOffset -= _this.measureRenderedContentSize();
                                _this._renderedContentOffsetNeedsRewrite = false;
                                _this.setRenderedContentOffset(_this._renderedContentOffset);
                            }
                            else {
                                _this._scrollStrategy.onRenderedOffsetChanged();
                            }
                        }));
                    }
                };
                /**
                 * Scrolls to the given offset from the start of the viewport. Please note that this is not always
                 * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left
                 * direction, this would be the equivalent of setting a fictional `scrollRight` property.
                 * @param {?} offset The offset to scroll to.
                 * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.scrollToOffset = function (offset, behavior) {
                    if (behavior === void 0) { behavior = 'auto'; }
                    /** @type {?} */
                    var options = { behavior: behavior };
                    if (this.orientation === 'horizontal') {
                        options.start = offset;
                    }
                    else {
                        options.top = offset;
                    }
                    this.scrollTo(options);
                };
                /**
                 * Scrolls to the offset for the given index.
                 * @param {?} index The index of the element to scroll to.
                 * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.scrollToIndex = function (index, behavior) {
                    if (behavior === void 0) { behavior = 'auto'; }
                    this._scrollStrategy.scrollToIndex(index, behavior);
                };
                /**
                 * Gets the current scroll offset from the start of the viewport (in pixels).
                 * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'
                 *     in horizontal mode.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.measureScrollOffset = function (from) {
                    return _super.prototype.measureScrollOffset.call(this, from ? from : this.orientation === 'horizontal' ? 'start' : 'top');
                };
                /**
                 * Measure the combined size of all of the rendered items.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.measureRenderedContentSize = function () {
                    /** @type {?} */
                    var contentEl = this._contentWrapper.nativeElement;
                    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;
                };
                /**
                 * Measure the total combined size of the given range. Throws if the range includes items that are
                 * not rendered.
                 * @param {?} range
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.measureRangeSize = function (range) {
                    if (!this._forOf) {
                        return 0;
                    }
                    return this._forOf.measureRangeSize(range, this.orientation);
                };
                /**
                 * Update the viewport dimensions and re-render.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.checkViewportSize = function () {
                    // TODO: Cleanup later when add logic for handling content resize
                    this._measureViewportSize();
                    this._scrollStrategy.onDataLengthChanged();
                };
                /**
                 * Measure the viewport size.
                 * @private
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype._measureViewportSize = function () {
                    /** @type {?} */
                    var viewportEl = this.elementRef.nativeElement;
                    this._viewportSize = this.orientation === 'horizontal' ?
                        viewportEl.clientWidth : viewportEl.clientHeight;
                };
                /**
                 * Queue up change detection to run.
                 * @private
                 * @param {?=} runAfter
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype._markChangeDetectionNeeded = function (runAfter) {
                    var _this = this;
                    if (runAfter) {
                        this._runAfterChangeDetection.push(runAfter);
                    }
                    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of
                    // properties sequentially we only have to run `_doChangeDetection` once at the end.
                    if (!this._isChangeDetectionPending) {
                        this._isChangeDetectionPending = true;
                        this.ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () { return Promise.resolve().then(( /**
                         * @return {?}
                         */function () {
                            _this._doChangeDetection();
                        })); }));
                    }
                };
                /**
                 * Run change detection.
                 * @private
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype._doChangeDetection = function () {
                    var _this = this;
                    this._isChangeDetectionPending = false;
                    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection
                    // from the root, since the repeated items are content projected in. Calling `detectChanges`
                    // instead does not properly check the projected content.
                    this.ngZone.run(( /**
                     * @return {?}
                     */function () { return _this._changeDetectorRef.markForCheck(); }));
                    // Apply the content transform. The transform can't be set via an Angular binding because
                    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of
                    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through
                    // the `Number` function first to coerce it to a numeric value.
                    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;
                    /** @type {?} */
                    var runAfterChangeDetection = this._runAfterChangeDetection;
                    this._runAfterChangeDetection = [];
                    for (var _b = 0, runAfterChangeDetection_1 = runAfterChangeDetection; _b < runAfterChangeDetection_1.length; _b++) {
                        var fn = runAfterChangeDetection_1[_b];
                        fn();
                    }
                };
                /**
                 * Calculates the `style.width` and `style.height` for the spacer element.
                 * @private
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype._calculateSpacerSize = function () {
                    this._totalContentHeight =
                        this.orientation === 'horizontal' ? '' : this._totalContentSize + "px";
                    this._totalContentWidth =
                        this.orientation === 'horizontal' ? this._totalContentSize + "px" : '';
                };
                return CdkVirtualScrollViewport;
            }(CdkScrollable));
            CdkVirtualScrollViewport.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'cdk-virtual-scroll-viewport',
                            template: "<div #contentWrapper class=\"cdk-virtual-scroll-content-wrapper\"><ng-content></ng-content></div><div class=\"cdk-virtual-scroll-spacer\" [style.width]=\"_totalContentWidth\" [style.height]=\"_totalContentHeight\"></div>",
                            styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}"],
                            host: {
                                'class': 'cdk-virtual-scroll-viewport',
                                '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === "horizontal"',
                                '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== "horizontal"',
                            },
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            providers: [{
                                    provide: CdkScrollable,
                                    useExisting: CdkVirtualScrollViewport,
                                }]
                        },] },
            ];
            /** @nocollapse */
            CdkVirtualScrollViewport.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [VIRTUAL_SCROLL_STRATEGY,] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: ScrollDispatcher }
            ]; };
            CdkVirtualScrollViewport.propDecorators = {
                orientation: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                scrolledIndexChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _contentWrapper: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['contentWrapper', { static: true },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Helper to extract size from a DOM Node.
             * @param {?} orientation
             * @param {?} node
             * @return {?}
             */
            function getSize(orientation, node) {
                /** @type {?} */
                var el = ( /** @type {?} */(node));
                if (!el.getBoundingClientRect) {
                    return 0;
                }
                /** @type {?} */
                var rect = el.getBoundingClientRect();
                return orientation == 'horizontal' ? rect.width : rect.height;
            }
            /**
             * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling
             * container.
             * @template T
             */
            var CdkVirtualForOf = /** @class */ (function () {
                /**
                 * @param {?} _viewContainerRef
                 * @param {?} _template
                 * @param {?} _differs
                 * @param {?} _viewport
                 * @param {?} ngZone
                 */
                function CdkVirtualForOf(_viewContainerRef, _template, _differs, _viewport, ngZone) {
                    var _this = this;
                    this._viewContainerRef = _viewContainerRef;
                    this._template = _template;
                    this._differs = _differs;
                    this._viewport = _viewport;
                    /**
                     * Emits when the rendered view of the data changes.
                     */
                    this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Subject that emits when a new DataSource instance is given.
                     */
                    this._dataSourceChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * The size of the cache used to store templates that are not being used for re-use later.
                     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.
                     */
                    this.cdkVirtualForTemplateCacheSize = 20;
                    /**
                     * Emits whenever the data in the current DataSource changes.
                     */
                    this.dataStream = this._dataSourceChanges
                        .pipe(
                    // Start off with null `DataSource`.
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(( /** @type {?} */(null))), 
                    // Bundle up the previous and current data sources so we can work with both.
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["pairwise"])(), 
                    // Use `_changeDataSource` to disconnect from the previous data source and connect to the
                    // new one, passing back a stream of data changes which we run through `switchMap` to give
                    // us a data stream that emits the latest data from whatever the current `DataSource` is.
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])(( /**
                     * @param {?} __0
                     * @return {?}
                     */function (_b) {
                        var prev = _b[0], cur = _b[1];
                        return _this._changeDataSource(prev, cur);
                    })), 
                    // Replay the last emitted data when someone subscribes.
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["shareReplay"])(1));
                    /**
                     * The differ used to calculate changes to the data.
                     */
                    this._differ = null;
                    /**
                     * The template cache used to hold on ot template instancess that have been stamped out, but don't
                     * currently need to be rendered. These instances will be reused in the future rather than
                     * stamping out brand new ones.
                     */
                    this._templateCache = [];
                    /**
                     * Whether the rendered data should be updated during the next ngDoCheck cycle.
                     */
                    this._needsUpdate = false;
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    this.dataStream.subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (/**
                     * @param {?} data
                     * @return {?}
                     */ data) {
                        _this._data = data;
                        _this._onRenderedDataChange();
                    }));
                    this._viewport.renderedRangeStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @param {?} range
                     * @return {?}
                     */function (/**
                     * @param {?} range
                     * @return {?}
                     */ range) {
                        _this._renderedRange = range;
                        ngZone.run(( /**
                         * @return {?}
                         */function () { return _this.viewChange.next(_this._renderedRange); }));
                        _this._onRenderedDataChange();
                    }));
                    this._viewport.attach(this);
                }
                Object.defineProperty(CdkVirtualForOf.prototype, "cdkVirtualForOf", {
                    /**
                     * The DataSource to display.
                     * @return {?}
                     */
                    get: function () {
                        return this._cdkVirtualForOf;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._cdkVirtualForOf = value;
                        /** @type {?} */
                        var ds = Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__["isDataSource"])(value) ? value :
                            // Slice the value if its an NgIterable to ensure we're working with an array.
                            new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__["ArrayDataSource"](value instanceof rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"] ? value : Array.prototype.slice.call(value || []));
                        this._dataSourceChanges.next(ds);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkVirtualForOf.prototype, "cdkVirtualForTrackBy", {
                    /**
                     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and
                     * the item and produces a value to be used as the item's identity when tracking changes.
                     * @return {?}
                     */
                    get: function () {
                        return this._cdkVirtualForTrackBy;
                    },
                    /**
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        var _this = this;
                        this._needsUpdate = true;
                        this._cdkVirtualForTrackBy = fn ?
                            ( /**
                             * @param {?} index
                             * @param {?} item
                             * @return {?}
                             */function (index, item) { return fn(index + (_this._renderedRange ? _this._renderedRange.start : 0), item); }) :
                            undefined;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkVirtualForOf.prototype, "cdkVirtualForTemplate", {
                    /**
                     * The template used to stamp out new elements.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value) {
                            this._needsUpdate = true;
                            this._template = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Measures the combined size (width for horizontal orientation, height for vertical) of all items
                 * in the specified range. Throws an error if the range includes items that are not currently
                 * rendered.
                 * @param {?} range
                 * @param {?} orientation
                 * @return {?}
                 */
                CdkVirtualForOf.prototype.measureRangeSize = function (range, orientation) {
                    if (range.start >= range.end) {
                        return 0;
                    }
                    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {
                        throw Error("Error: attempted to measure an item that isn't rendered.");
                    }
                    // The index into the list of rendered views for the first item in the range.
                    /** @type {?} */
                    var renderedStartIndex = range.start - this._renderedRange.start;
                    // The length of the range we're measuring.
                    /** @type {?} */
                    var rangeLen = range.end - range.start;
                    // Loop over all root nodes for all items in the range and sum up their size.
                    /** @type {?} */
                    var totalSize = 0;
                    /** @type {?} */
                    var i = rangeLen;
                    while (i--) {
                        /** @type {?} */
                        var view = ( /** @type {?} */(this._viewContainerRef.get(i + renderedStartIndex)));
                        /** @type {?} */
                        var j = view ? view.rootNodes.length : 0;
                        while (j--) {
                            totalSize += getSize(orientation, ( /** @type {?} */(view)).rootNodes[j]);
                        }
                    }
                    return totalSize;
                };
                /**
                 * @return {?}
                 */
                CdkVirtualForOf.prototype.ngDoCheck = function () {
                    if (this._differ && this._needsUpdate) {
                        // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of
                        // this list being rendered (can use simpler algorithm) vs needs update due to data actually
                        // changing (need to do this diff).
                        /** @type {?} */
                        var changes = this._differ.diff(this._renderedItems);
                        if (!changes) {
                            this._updateContext();
                        }
                        else {
                            this._applyChanges(changes);
                        }
                        this._needsUpdate = false;
                    }
                };
                /**
                 * @return {?}
                 */
                CdkVirtualForOf.prototype.ngOnDestroy = function () {
                    this._viewport.detach();
                    this._dataSourceChanges.next();
                    this._dataSourceChanges.complete();
                    this.viewChange.complete();
                    this._destroyed.next();
                    this._destroyed.complete();
                    for (var _b = 0, _c = this._templateCache; _b < _c.length; _b++) {
                        var view = _c[_b];
                        view.destroy();
                    }
                };
                /**
                 * React to scroll state changes in the viewport.
                 * @private
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._onRenderedDataChange = function () {
                    if (!this._renderedRange) {
                        return;
                    }
                    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);
                    if (!this._differ) {
                        this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);
                    }
                    this._needsUpdate = true;
                };
                /**
                 * Swap out one `DataSource` for another.
                 * @private
                 * @param {?} oldDs
                 * @param {?} newDs
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._changeDataSource = function (oldDs, newDs) {
                    if (oldDs) {
                        oldDs.disconnect(this);
                    }
                    this._needsUpdate = true;
                    return newDs ? newDs.connect(this) : Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])();
                };
                /**
                 * Update the `CdkVirtualForOfContext` for all views.
                 * @private
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._updateContext = function () {
                    /** @type {?} */
                    var count = this._data.length;
                    /** @type {?} */
                    var i = this._viewContainerRef.length;
                    while (i--) {
                        /** @type {?} */
                        var view = ( /** @type {?} */(this._viewContainerRef.get(i)));
                        view.context.index = this._renderedRange.start + i;
                        view.context.count = count;
                        this._updateComputedContextProperties(view.context);
                        view.detectChanges();
                    }
                };
                /**
                 * Apply changes to the DOM.
                 * @private
                 * @param {?} changes
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._applyChanges = function (changes) {
                    var _this = this;
                    // Rearrange the views to put them in the right location.
                    changes.forEachOperation(( /**
                     * @param {?} record
                     * @param {?} adjustedPreviousIndex
                     * @param {?} currentIndex
                     * @return {?}
                     */function (record, adjustedPreviousIndex, currentIndex) {
                        if (record.previousIndex == null) { // Item added.
                            // Item added.
                            /** @type {?} */
                            var view = _this._insertViewForNewItem(( /** @type {?} */(currentIndex)));
                            view.context.$implicit = record.item;
                        }
                        else if (currentIndex == null) { // Item removed.
                            _this._cacheView(_this._detachView(( /** @type {?} */(adjustedPreviousIndex))));
                        }
                        else { // Item moved.
                            // Item moved.
                            /** @type {?} */
                            var view = ( /** @type {?} */(_this._viewContainerRef.get(( /** @type {?} */(adjustedPreviousIndex)))));
                            _this._viewContainerRef.move(view, currentIndex);
                            view.context.$implicit = record.item;
                        }
                    }));
                    // Update $implicit for any items that had an identity change.
                    changes.forEachIdentityChange(( /**
                     * @param {?} record
                     * @return {?}
                     */function (record) {
                        /** @type {?} */
                        var view = ( /** @type {?} */(_this._viewContainerRef.get(( /** @type {?} */(record.currentIndex)))));
                        view.context.$implicit = record.item;
                    }));
                    // Update the context variables on all items.
                    /** @type {?} */
                    var count = this._data.length;
                    /** @type {?} */
                    var i = this._viewContainerRef.length;
                    while (i--) {
                        /** @type {?} */
                        var view = ( /** @type {?} */(this._viewContainerRef.get(i)));
                        view.context.index = this._renderedRange.start + i;
                        view.context.count = count;
                        this._updateComputedContextProperties(view.context);
                    }
                };
                /**
                 * Cache the given detached view.
                 * @private
                 * @param {?} view
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._cacheView = function (view) {
                    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {
                        this._templateCache.push(view);
                    }
                    else {
                        /** @type {?} */
                        var index = this._viewContainerRef.indexOf(view);
                        // It's very unlikely that the index will ever be -1, but just in case,
                        // destroy the view on its own, otherwise destroy it through the
                        // container to ensure that all the references are removed.
                        if (index === -1) {
                            view.destroy();
                        }
                        else {
                            this._viewContainerRef.remove(index);
                        }
                    }
                };
                /**
                 * Inserts a view for a new item, either from the cache or by creating a new one.
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._insertViewForNewItem = function (index) {
                    return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);
                };
                /**
                 * Update the computed properties on the `CdkVirtualForOfContext`.
                 * @private
                 * @param {?} context
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._updateComputedContextProperties = function (context) {
                    context.first = context.index === 0;
                    context.last = context.index === context.count - 1;
                    context.even = context.index % 2 === 0;
                    context.odd = !context.even;
                };
                /**
                 * Creates a new embedded view and moves it to the given index
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._createEmbeddedViewAt = function (index) {
                    // Note that it's important that we insert the item directly at the proper index,
                    // rather than inserting it and the moving it in place, because if there's a directive
                    // on the same node that injects the `ViewContainerRef`, Angular will insert another
                    // comment node which can throw off the move when it's being repeated for all items.
                    return this._viewContainerRef.createEmbeddedView(this._template, {
                        $implicit: ( /** @type {?} */(null)),
                        cdkVirtualForOf: this._cdkVirtualForOf,
                        index: -1,
                        count: -1,
                        first: false,
                        last: false,
                        odd: false,
                        even: false
                    }, index);
                };
                /**
                 * Inserts a recycled view from the cache at the given index.
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._insertViewFromCache = function (index) {
                    /** @type {?} */
                    var cachedView = this._templateCache.pop();
                    if (cachedView) {
                        this._viewContainerRef.insert(cachedView, index);
                    }
                    return cachedView || null;
                };
                /**
                 * Detaches the embedded view at the given index.
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._detachView = function (index) {
                    return ( /** @type {?} */(this._viewContainerRef.detach(index)));
                };
                return CdkVirtualForOf;
            }());
            CdkVirtualForOf.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdkVirtualFor][cdkVirtualForOf]',
                        },] },
            ];
            /** @nocollapse */
            CdkVirtualForOf.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"] },
                { type: CdkVirtualScrollViewport, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }
            ]; };
            CdkVirtualForOf.propDecorators = {
                cdkVirtualForOf: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                cdkVirtualForTrackBy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                cdkVirtualForTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                cdkVirtualForTemplateCacheSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var ScrollingModule = /** @class */ (function () {
                function ScrollingModule() {
                }
                return ScrollingModule;
            }());
            ScrollingModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["BidiModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["PlatformModule"]],
                            exports: [
                                _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["BidiModule"],
                                CdkFixedSizeVirtualScroll,
                                CdkScrollable,
                                CdkVirtualForOf,
                                CdkVirtualScrollViewport,
                            ],
                            declarations: [
                                CdkFixedSizeVirtualScroll,
                                CdkScrollable,
                                CdkVirtualForOf,
                                CdkVirtualScrollViewport,
                            ],
                        },] },
            ];
            /**
             * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.
             * \@breaking-change 8.0.0 delete this alias
             */
            var ScrollDispatchModule = /** @class */ (function () {
                function ScrollDispatchModule() {
                }
                return ScrollDispatchModule;
            }());
            ScrollDispatchModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [ScrollingModule],
                            exports: [ScrollingModule],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Time in ms to throttle the resize events by default.
             * @type {?}
             */
            var DEFAULT_RESIZE_TIME = 20;
            /**
             * Simple utility for getting the bounds of the browser viewport.
             * \@docs-private
             */
            var ViewportRuler = /** @class */ (function () {
                /**
                 * @param {?} _platform
                 * @param {?} ngZone
                 */
                function ViewportRuler(_platform, ngZone) {
                    var _this = this;
                    this._platform = _platform;
                    ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._change = _platform.isBrowser ?
                            Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window, 'resize'), Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window, 'orientationchange')) :
                            Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])();
                        // Note that we need to do the subscription inside `runOutsideAngular`
                        // since subscribing is what causes the event listener to be added.
                        _this._invalidateCache = _this.change().subscribe(( /**
                         * @return {?}
                         */function () { return _this._updateViewportSize(); }));
                    }));
                }
                /**
                 * @return {?}
                 */
                ViewportRuler.prototype.ngOnDestroy = function () {
                    this._invalidateCache.unsubscribe();
                };
                /**
                 * Returns the viewport's width and height.
                 * @return {?}
                 */
                ViewportRuler.prototype.getViewportSize = function () {
                    if (!this._viewportSize) {
                        this._updateViewportSize();
                    }
                    /** @type {?} */
                    var output = { width: this._viewportSize.width, height: this._viewportSize.height };
                    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.
                    if (!this._platform.isBrowser) {
                        this._viewportSize = ( /** @type {?} */(null));
                    }
                    return output;
                };
                /**
                 * Gets a ClientRect for the viewport's bounds.
                 * @return {?}
                 */
                ViewportRuler.prototype.getViewportRect = function () {
                    // Use the document element's bounding rect rather than the window scroll properties
                    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll
                    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different
                    // conceptual viewports. Under most circumstances these viewports are equivalent, but they
                    // can disagree when the page is pinch-zoomed (on devices that support touch).
                    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4
                    // We use the documentElement instead of the body because, by default (without a css reset)
                    // browsers typically give the document body an 8px margin, which is not included in
                    // getBoundingClientRect().
                    /** @type {?} */
                    var scrollPosition = this.getViewportScrollPosition();
                    var _b = this.getViewportSize(), width = _b.width, height = _b.height;
                    return {
                        top: scrollPosition.top,
                        left: scrollPosition.left,
                        bottom: scrollPosition.top + height,
                        right: scrollPosition.left + width,
                        height: height,
                        width: width,
                    };
                };
                /**
                 * Gets the (top, left) scroll position of the viewport.
                 * @return {?}
                 */
                ViewportRuler.prototype.getViewportScrollPosition = function () {
                    // While we can get a reference to the fake document
                    // during SSR, it doesn't have getBoundingClientRect.
                    if (!this._platform.isBrowser) {
                        return { top: 0, left: 0 };
                    }
                    // The top-left-corner of the viewport is determined by the scroll position of the document
                    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about
                    // whether `document.body` or `document.documentElement` is the scrolled element, so reading
                    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of
                    // `document.documentElement` works consistently, where the `top` and `left` values will
                    // equal negative the scroll position.
                    /** @type {?} */
                    var documentElement = ( /** @type {?} */(document.documentElement));
                    /** @type {?} */
                    var documentRect = documentElement.getBoundingClientRect();
                    /** @type {?} */
                    var top = -documentRect.top || document.body.scrollTop || window.scrollY ||
                        documentElement.scrollTop || 0;
                    /** @type {?} */
                    var left = -documentRect.left || document.body.scrollLeft || window.scrollX ||
                        documentElement.scrollLeft || 0;
                    return { top: top, left: left };
                };
                /**
                 * Returns a stream that emits whenever the size of the viewport changes.
                 * @param {?=} throttleTime Time in milliseconds to throttle the stream.
                 * @return {?}
                 */
                ViewportRuler.prototype.change = function (throttleTime) {
                    if (throttleTime === void 0) { throttleTime = DEFAULT_RESIZE_TIME; }
                    return throttleTime > 0 ? this._change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["auditTime"])(throttleTime)) : this._change;
                };
                /**
                 * Updates the cached viewport size.
                 * @private
                 * @return {?}
                 */
                ViewportRuler.prototype._updateViewportSize = function () {
                    this._viewportSize = this._platform.isBrowser ?
                        { width: window.innerWidth, height: window.innerHeight } :
                        { width: 0, height: 0 };
                };
                return ViewportRuler;
            }());
            ViewportRuler.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            ViewportRuler.ctorParameters = function () { return [
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }
            ]; };
            /** @nocollapse */ ViewportRuler.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ViewportRuler_Factory() { return new ViewportRuler(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"])); }, token: ViewportRuler, providedIn: "root" });
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} parentRuler
             * @param {?} platform
             * @param {?} ngZone
             * @return {?}
             */
            function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {
                return parentRuler || new ViewportRuler(platform, ngZone);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var VIEWPORT_RULER_PROVIDER = {
                // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.
                provide: ViewportRuler,
                deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"](), ViewportRuler], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]],
                useFactory: VIEWPORT_RULER_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=scrolling.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/stepper.js": 
        /*!******************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/stepper.js ***!
          \******************************************************/
        /*! exports provided: StepperSelectionEvent, STEP_STATE, STEPPER_GLOBAL_OPTIONS, MAT_STEPPER_GLOBAL_OPTIONS, CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious, CdkStepperModule, CdkStepHeader */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StepperSelectionEvent", function () { return StepperSelectionEvent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STEP_STATE", function () { return STEP_STATE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STEPPER_GLOBAL_OPTIONS", function () { return STEPPER_GLOBAL_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_STEPPER_GLOBAL_OPTIONS", function () { return MAT_STEPPER_GLOBAL_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkStep", function () { return CdkStep; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkStepper", function () { return CdkStepper; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkStepLabel", function () { return CdkStepLabel; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkStepperNext", function () { return CdkStepperNext; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkStepperPrevious", function () { return CdkStepperPrevious; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkStepperModule", function () { return CdkStepperModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkStepHeader", function () { return CdkStepHeader; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var CdkStepHeader = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function CdkStepHeader(_elementRef) {
                    this._elementRef = _elementRef;
                }
                /**
                 * Focuses the step header.
                 * @return {?}
                 */
                CdkStepHeader.prototype.focus = function () {
                    this._elementRef.nativeElement.focus();
                };
                return CdkStepHeader;
            }());
            CdkStepHeader.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdkStepHeader]',
                            host: {
                                'role': 'tab',
                            },
                        },] },
            ];
            /** @nocollapse */
            CdkStepHeader.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var CdkStepLabel = /** @class */ (function () {
                /**
                 * @param {?} template
                 */
                function CdkStepLabel(/** @docs-private */ template) {
                    this.template = template;
                }
                return CdkStepLabel;
            }());
            CdkStepLabel.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdkStepLabel]',
                        },] },
            ];
            /** @nocollapse */
            CdkStepLabel.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Used to generate unique ID for each stepper component.
             * @type {?}
             */
            var nextId = 0;
            /**
             * Change event emitted on selection changes.
             */
            var StepperSelectionEvent = /** @class */ (function () {
                function StepperSelectionEvent() {
                }
                return StepperSelectionEvent;
            }());
            /**
             * Enum to represent the different states of the steps.
             * @type {?}
             */
            var STEP_STATE = {
                NUMBER: 'number',
                EDIT: 'edit',
                DONE: 'done',
                ERROR: 'error'
            };
            /**
             * InjectionToken that can be used to specify the global stepper options.
             * @type {?}
             */
            var STEPPER_GLOBAL_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('STEPPER_GLOBAL_OPTIONS');
            /**
             * InjectionToken that can be used to specify the global stepper options.
             * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.
             * \@breaking-change 8.0.0.
             * @type {?}
             */
            var MAT_STEPPER_GLOBAL_OPTIONS = STEPPER_GLOBAL_OPTIONS;
            var CdkStep = /** @class */ (function () {
                /**
                 * \@breaking-change 8.0.0 remove the `?` after `stepperOptions`
                 * @param {?} _stepper
                 * @param {?=} stepperOptions
                 */
                function CdkStep(_stepper, stepperOptions) {
                    this._stepper = _stepper;
                    /**
                     * Whether user has seen the expanded step content or not.
                     */
                    this.interacted = false;
                    this._editable = true;
                    this._optional = false;
                    this._completedOverride = null;
                    this._customError = null;
                    this._stepperOptions = stepperOptions ? stepperOptions : {};
                    this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;
                    this._showError = !!this._stepperOptions.showError;
                }
                Object.defineProperty(CdkStep.prototype, "editable", {
                    /**
                     * Whether the user can return to this step once it has been marked as completed.
                     * @return {?}
                     */
                    get: function () {
                        return this._editable;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._editable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkStep.prototype, "optional", {
                    /**
                     * Whether the completion of step is optional.
                     * @return {?}
                     */
                    get: function () {
                        return this._optional;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._optional = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkStep.prototype, "completed", {
                    /**
                     * Whether step is marked as completed.
                     * @return {?}
                     */
                    get: function () {
                        return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._completedOverride = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @private
                 * @return {?}
                 */
                CdkStep.prototype._getDefaultCompleted = function () {
                    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;
                };
                Object.defineProperty(CdkStep.prototype, "hasError", {
                    /**
                     * Whether step has an error.
                     * @return {?}
                     */
                    get: function () {
                        return this._customError == null ? this._getDefaultError() : this._customError;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._customError = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @private
                 * @return {?}
                 */
                CdkStep.prototype._getDefaultError = function () {
                    return this.stepControl && this.stepControl.invalid && this.interacted;
                };
                /**
                 * Selects this step component.
                 * @return {?}
                 */
                CdkStep.prototype.select = function () {
                    this._stepper.selected = this;
                };
                /**
                 * Resets the step to its initial state. Note that this includes resetting form data.
                 * @return {?}
                 */
                CdkStep.prototype.reset = function () {
                    this.interacted = false;
                    if (this._completedOverride != null) {
                        this._completedOverride = false;
                    }
                    if (this._customError != null) {
                        this._customError = false;
                    }
                    if (this.stepControl) {
                        this.stepControl.reset();
                    }
                };
                /**
                 * @return {?}
                 */
                CdkStep.prototype.ngOnChanges = function () {
                    // Since basically all inputs of the MatStep get proxied through the view down to the
                    // underlying MatStepHeader, we have to make sure that change detection runs correctly.
                    this._stepper._stateChanged();
                };
                return CdkStep;
            }());
            CdkStep.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'cdk-step',
                            exportAs: 'cdkStep',
                            template: '<ng-template><ng-content></ng-content></ng-template>',
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            CdkStep.ctorParameters = function () { return [
                { type: CdkStepper, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                                                 * @return {?}
                                                 */function () { return CdkStepper; })),] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [STEPPER_GLOBAL_OPTIONS,] }] }
            ]; };
            CdkStep.propDecorators = {
                stepLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [CdkStepLabel, { static: false },] }],
                content: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"], { static: true },] }],
                stepControl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                errorMessage: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['aria-label',] }],
                ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['aria-labelledby',] }],
                state: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                editable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                optional: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                completed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                hasError: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            var CdkStepper = /** @class */ (function () {
                /**
                 * @param {?} _dir
                 * @param {?} _changeDetectorRef
                 * @param {?=} _elementRef
                 * @param {?=} _document
                 */
                function CdkStepper(_dir, _changeDetectorRef, _elementRef, _document) {
                    this._dir = _dir;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._elementRef = _elementRef;
                    /**
                     * Emits when the component is destroyed.
                     */
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
                    this._linear = false;
                    this._selectedIndex = 0;
                    /**
                     * Event emitted when the selected step has changed.
                     */
                    this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    this._orientation = 'horizontal';
                    this._groupId = nextId++;
                    this._document = _document;
                }
                Object.defineProperty(CdkStepper.prototype, "steps", {
                    /**
                     * The list of step components that the stepper is holding.
                     * @return {?}
                     */
                    get: function () {
                        return this._steps;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkStepper.prototype, "linear", {
                    /**
                     * Whether the validity of previous steps should be checked or not.
                     * @return {?}
                     */
                    get: function () {
                        return this._linear;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._linear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkStepper.prototype, "selectedIndex", {
                    /**
                     * The index of the selected step.
                     * @return {?}
                     */
                    get: function () {
                        return this._selectedIndex;
                    },
                    /**
                     * @param {?} index
                     * @return {?}
                     */
                    set: function (index) {
                        /** @type {?} */
                        var newIndex = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(index);
                        if (this.steps) {
                            // Ensure that the index can't be out of bounds.
                            if (newIndex < 0 || newIndex > this.steps.length - 1) {
                                throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');
                            }
                            if (this._selectedIndex != newIndex && !this._anyControlsInvalidOrPending(newIndex) &&
                                (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {
                                this._updateSelectedItemIndex(index);
                            }
                        }
                        else {
                            this._selectedIndex = newIndex;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkStepper.prototype, "selected", {
                    /**
                     * The step that is selected.
                     * @return {?}
                     */
                    get: function () {
                        // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.
                        return this.steps ? this.steps.toArray()[this.selectedIndex] : ( /** @type {?} */(undefined));
                    },
                    /**
                     * @param {?} step
                     * @return {?}
                     */
                    set: function (step) {
                        this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkStepper.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    // Note that while the step headers are content children by default, any components that
                    // extend this one might have them as view chidren. We initialize the keyboard handling in
                    // AfterViewInit so we're guaranteed for both view and content children to be defined.
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusKeyManager"](this._stepHeader)
                        .withWrap()
                        .withVerticalOrientation(this._orientation === 'vertical');
                    (this._dir ? (( /** @type {?} */(this._dir.change))) : Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])())
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["startWith"])(this._layoutDirection()), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._destroyed))
                        .subscribe(( /**
                 * @param {?} direction
                 * @return {?}
                 */function (/**
                 * @param {?} direction
                 * @return {?}
                 */ direction) { return _this._keyManager.withHorizontalOrientation(direction); }));
                    this._keyManager.updateActiveItemIndex(this._selectedIndex);
                    this.steps.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @return {?}
                     */function () {
                        if (!_this.selected) {
                            _this._selectedIndex = Math.max(_this._selectedIndex - 1, 0);
                        }
                    }));
                };
                /**
                 * @return {?}
                 */
                CdkStepper.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * Selects and focuses the next step in list.
                 * @return {?}
                 */
                CdkStepper.prototype.next = function () {
                    this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);
                };
                /**
                 * Selects and focuses the previous step in list.
                 * @return {?}
                 */
                CdkStepper.prototype.previous = function () {
                    this.selectedIndex = Math.max(this._selectedIndex - 1, 0);
                };
                /**
                 * Resets the stepper to its initial state. Note that this includes clearing form data.
                 * @return {?}
                 */
                CdkStepper.prototype.reset = function () {
                    this._updateSelectedItemIndex(0);
                    this.steps.forEach(( /**
                     * @param {?} step
                     * @return {?}
                     */function (/**
                     * @param {?} step
                     * @return {?}
                     */ step) { return step.reset(); }));
                    this._stateChanged();
                };
                /**
                 * Returns a unique id for each step label element.
                 * @param {?} i
                 * @return {?}
                 */
                CdkStepper.prototype._getStepLabelId = function (i) {
                    return "cdk-step-label-" + this._groupId + "-" + i;
                };
                /**
                 * Returns unique id for each step content element.
                 * @param {?} i
                 * @return {?}
                 */
                CdkStepper.prototype._getStepContentId = function (i) {
                    return "cdk-step-content-" + this._groupId + "-" + i;
                };
                /**
                 * Marks the component to be change detected.
                 * @return {?}
                 */
                CdkStepper.prototype._stateChanged = function () {
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Returns position state of the step with the given index.
                 * @param {?} index
                 * @return {?}
                 */
                CdkStepper.prototype._getAnimationDirection = function (index) {
                    /** @type {?} */
                    var position = index - this._selectedIndex;
                    if (position < 0) {
                        return this._layoutDirection() === 'rtl' ? 'next' : 'previous';
                    }
                    else if (position > 0) {
                        return this._layoutDirection() === 'rtl' ? 'previous' : 'next';
                    }
                    return 'current';
                };
                /**
                 * Returns the type of icon to be displayed.
                 * @param {?} index
                 * @param {?=} state
                 * @return {?}
                 */
                CdkStepper.prototype._getIndicatorType = function (index, state) {
                    if (state === void 0) { state = STEP_STATE.NUMBER; }
                    /** @type {?} */
                    var step = this.steps.toArray()[index];
                    /** @type {?} */
                    var isCurrentStep = this._isCurrentStep(index);
                    return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) :
                        this._getGuidelineLogic(step, isCurrentStep, state);
                };
                /**
                 * @private
                 * @param {?} step
                 * @param {?} isCurrentStep
                 * @return {?}
                 */
                CdkStepper.prototype._getDefaultIndicatorLogic = function (step, isCurrentStep) {
                    if (step._showError && step.hasError && !isCurrentStep) {
                        return STEP_STATE.ERROR;
                    }
                    else if (!step.completed || isCurrentStep) {
                        return STEP_STATE.NUMBER;
                    }
                    else {
                        return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;
                    }
                };
                /**
                 * @private
                 * @param {?} step
                 * @param {?} isCurrentStep
                 * @param {?=} state
                 * @return {?}
                 */
                CdkStepper.prototype._getGuidelineLogic = function (step, isCurrentStep, state) {
                    if (state === void 0) { state = STEP_STATE.NUMBER; }
                    if (step._showError && step.hasError && !isCurrentStep) {
                        return STEP_STATE.ERROR;
                    }
                    else if (step.completed && !isCurrentStep) {
                        return STEP_STATE.DONE;
                    }
                    else if (step.completed && isCurrentStep) {
                        return state;
                    }
                    else if (step.editable && isCurrentStep) {
                        return STEP_STATE.EDIT;
                    }
                    else {
                        return state;
                    }
                };
                /**
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                CdkStepper.prototype._isCurrentStep = function (index) {
                    return this._selectedIndex === index;
                };
                /**
                 * Returns the index of the currently-focused step header.
                 * @return {?}
                 */
                CdkStepper.prototype._getFocusIndex = function () {
                    return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;
                };
                /**
                 * @private
                 * @param {?} newIndex
                 * @return {?}
                 */
                CdkStepper.prototype._updateSelectedItemIndex = function (newIndex) {
                    /** @type {?} */
                    var stepsArray = this.steps.toArray();
                    this.selectionChange.emit({
                        selectedIndex: newIndex,
                        previouslySelectedIndex: this._selectedIndex,
                        selectedStep: stepsArray[newIndex],
                        previouslySelectedStep: stepsArray[this._selectedIndex],
                    });
                    // If focus is inside the stepper, move it to the next header, otherwise it may become
                    // lost when the active step content is hidden. We can't be more granular with the check
                    // (e.g. checking whether focus is inside the active step), because we don't have a
                    // reference to the elements that are rendering out the content.
                    this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :
                        this._keyManager.updateActiveItemIndex(newIndex);
                    this._selectedIndex = newIndex;
                    this._stateChanged();
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                CdkStepper.prototype._onKeydown = function (event) {
                    /** @type {?} */
                    var hasModifier = Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["hasModifierKey"])(event);
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    /** @type {?} */
                    var manager = this._keyManager;
                    if (manager.activeItemIndex != null && !hasModifier &&
                        (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["SPACE"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["ENTER"])) {
                        this.selectedIndex = manager.activeItemIndex;
                        event.preventDefault();
                    }
                    else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["HOME"]) {
                        manager.setFirstItemActive();
                        event.preventDefault();
                    }
                    else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["END"]) {
                        manager.setLastItemActive();
                        event.preventDefault();
                    }
                    else {
                        manager.onKeydown(event);
                    }
                };
                /**
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                CdkStepper.prototype._anyControlsInvalidOrPending = function (index) {
                    /** @type {?} */
                    var steps = this.steps.toArray();
                    steps[this._selectedIndex].interacted = true;
                    if (this._linear && index >= 0) {
                        return steps.slice(0, index).some(( /**
                         * @param {?} step
                         * @return {?}
                         */function (/**
                         * @param {?} step
                         * @return {?}
                         */ step) {
                            /** @type {?} */
                            var control = step.stepControl;
                            /** @type {?} */
                            var isIncomplete = control ? (control.invalid || control.pending || !step.interacted) : !step.completed;
                            return isIncomplete && !step.optional && !step._completedOverride;
                        }));
                    }
                    return false;
                };
                /**
                 * @private
                 * @return {?}
                 */
                CdkStepper.prototype._layoutDirection = function () {
                    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
                };
                /**
                 * Checks whether the stepper contains the focused element.
                 * @private
                 * @return {?}
                 */
                CdkStepper.prototype._containsFocus = function () {
                    if (!this._document || !this._elementRef) {
                        return false;
                    }
                    /** @type {?} */
                    var stepperElement = this._elementRef.nativeElement;
                    /** @type {?} */
                    var focusedElement = this._document.activeElement;
                    return stepperElement === focusedElement || stepperElement.contains(focusedElement);
                };
                return CdkStepper;
            }());
            CdkStepper.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdkStepper]',
                            exportAs: 'cdkStepper',
                        },] },
            ];
            /** @nocollapse */
            CdkStepper.ctorParameters = function () { return [
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"],] }] }
            ]; };
            CdkStepper.propDecorators = {
                _steps: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [CdkStep,] }],
                _stepHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [CdkStepHeader,] }],
                linear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selectedIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Button that moves to the next step in a stepper workflow.
             */
            var CdkStepperNext = /** @class */ (function () {
                /**
                 * @param {?} _stepper
                 */
                function CdkStepperNext(_stepper) {
                    this._stepper = _stepper;
                    /**
                     * Type of the next button. Defaults to "submit" if not specified.
                     */
                    this.type = 'submit';
                }
                // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
                // In Ivy the `host` bindings will be merged when this class is extended, whereas in
                // ViewEngine they're overwritten.
                // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
                // tslint:disable-next-line:no-host-decorator-in-concrete
                /**
                 * @return {?}
                 */
                CdkStepperNext.prototype._handleClick = function () {
                    this._stepper.next();
                };
                return CdkStepperNext;
            }());
            CdkStepperNext.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'button[cdkStepperNext]',
                            host: {
                                '[type]': 'type',
                            }
                        },] },
            ];
            /** @nocollapse */
            CdkStepperNext.ctorParameters = function () { return [
                { type: CdkStepper }
            ]; };
            CdkStepperNext.propDecorators = {
                type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                _handleClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['click',] }]
            };
            /**
             * Button that moves to the previous step in a stepper workflow.
             */
            var CdkStepperPrevious = /** @class */ (function () {
                /**
                 * @param {?} _stepper
                 */
                function CdkStepperPrevious(_stepper) {
                    this._stepper = _stepper;
                    /**
                     * Type of the previous button. Defaults to "button" if not specified.
                     */
                    this.type = 'button';
                }
                // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
                // In Ivy the `host` bindings will be merged when this class is extended, whereas in
                // ViewEngine they're overwritten.
                // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
                // tslint:disable-next-line:no-host-decorator-in-concrete
                /**
                 * @return {?}
                 */
                CdkStepperPrevious.prototype._handleClick = function () {
                    this._stepper.previous();
                };
                return CdkStepperPrevious;
            }());
            CdkStepperPrevious.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'button[cdkStepperPrevious]',
                            host: {
                                '[type]': 'type',
                            }
                        },] },
            ];
            /** @nocollapse */
            CdkStepperPrevious.ctorParameters = function () { return [
                { type: CdkStepper }
            ]; };
            CdkStepperPrevious.propDecorators = {
                type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                _handleClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['click',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var CdkStepperModule = /** @class */ (function () {
                function CdkStepperModule() {
                }
                return CdkStepperModule;
            }());
            CdkStepperModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"], _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]],
                            exports: [
                                CdkStep,
                                CdkStepper,
                                CdkStepHeader,
                                CdkStepLabel,
                                CdkStepperNext,
                                CdkStepperPrevious,
                            ],
                            declarations: [
                                CdkStep,
                                CdkStepper,
                                CdkStepHeader,
                                CdkStepLabel,
                                CdkStepperNext,
                                CdkStepperPrevious,
                            ]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=stepper.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/table.js": 
        /*!****************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/table.js ***!
          \****************************************************/
        /*! exports provided: DataSource, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput, TEXT_COLUMN_OPTIONS, CdkTextColumn */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataRowOutlet", function () { return DataRowOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderRowOutlet", function () { return HeaderRowOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FooterRowOutlet", function () { return FooterRowOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_TABLE_TEMPLATE", function () { return CDK_TABLE_TEMPLATE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTable", function () { return CdkTable; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkCellDef", function () { return CdkCellDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkHeaderCellDef", function () { return CdkHeaderCellDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkFooterCellDef", function () { return CdkFooterCellDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkColumnDef", function () { return CdkColumnDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseCdkCell", function () { return BaseCdkCell; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkHeaderCell", function () { return CdkHeaderCell; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkFooterCell", function () { return CdkFooterCell; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkCell", function () { return CdkCell; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_ROW_TEMPLATE", function () { return CDK_ROW_TEMPLATE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseRowDef", function () { return BaseRowDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkHeaderRowDef", function () { return CdkHeaderRowDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkFooterRowDef", function () { return CdkFooterRowDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkRowDef", function () { return CdkRowDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkCellOutlet", function () { return CdkCellOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkHeaderRow", function () { return CdkHeaderRow; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkFooterRow", function () { return CdkFooterRow; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkRow", function () { return CdkRow; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTableModule", function () { return CdkTableModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STICKY_DIRECTIONS", function () { return STICKY_DIRECTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StickyStyler", function () { return StickyStyler; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mixinHasStickyInput", function () { return mixinHasStickyInput; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEXT_COLUMN_OPTIONS", function () { return TEXT_COLUMN_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTextColumn", function () { return CdkTextColumn; });
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataSource", function () { return _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__["DataSource"]; });
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Mixin to provide a directive with a function that checks if the sticky input has been
             * changed since the last time the function was called. Essentially adds a dirty-check to the
             * sticky value.
             * \@docs-private
             * @template T
             * @param {?} base
             * @return {?}
             */
            function mixinHasStickyInput(base) {
                return /** @class */ (function (_super) {
                    __extends(class_1, _super);
                    /**
                     * @param {...?} args
                     */
                    function class_1() {
                        var args = [];
                        for (var _b = 0; _b < arguments.length; _b++) {
                            args[_b] = arguments[_b];
                        }
                        var _this = _super.apply(this, args) || this;
                        _this._sticky = false;
                        /**
                         * Whether the sticky input has changed since it was last checked.
                         */
                        _this._hasStickyChanged = false;
                        return _this;
                    }
                    Object.defineProperty(class_1.prototype, "sticky", {
                        /**
                         * Whether sticky positioning should be applied.
                         * @return {?}
                         */
                        get: function () { return this._sticky; },
                        /**
                         * @param {?} v
                         * @return {?}
                         */
                        set: function (v) {
                            /** @type {?} */
                            var prevValue = this._sticky;
                            this._sticky = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(v);
                            this._hasStickyChanged = prevValue !== this._sticky;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    /**
                     * Whether the sticky value has changed since this was last called.
                     * @return {?}
                     */
                    class_1.prototype.hasStickyChanged = function () {
                        /** @type {?} */
                        var hasStickyChanged = this._hasStickyChanged;
                        this._hasStickyChanged = false;
                        return hasStickyChanged;
                    };
                    /**
                     * Resets the dirty check for cases where the sticky state has been used without checking.
                     * @return {?}
                     */
                    class_1.prototype.resetStickyChanged = function () {
                        this._hasStickyChanged = false;
                    };
                    return class_1;
                }(base));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Cell definition for a CDK table.
             * Captures the template of a column's data row cell as well as cell-specific properties.
             */
            var CdkCellDef = /** @class */ (function () {
                /**
                 * @param {?} template
                 */
                function CdkCellDef(/** @docs-private */ template) {
                    this.template = template;
                }
                return CdkCellDef;
            }());
            CdkCellDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[cdkCellDef]' },] },
            ];
            /** @nocollapse */
            CdkCellDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"] }
            ]; };
            /**
             * Header cell definition for a CDK table.
             * Captures the template of a column's header cell and as well as cell-specific properties.
             */
            var CdkHeaderCellDef = /** @class */ (function () {
                /**
                 * @param {?} template
                 */
                function CdkHeaderCellDef(/** @docs-private */ template) {
                    this.template = template;
                }
                return CdkHeaderCellDef;
            }());
            CdkHeaderCellDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[cdkHeaderCellDef]' },] },
            ];
            /** @nocollapse */
            CdkHeaderCellDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"] }
            ]; };
            /**
             * Footer cell definition for a CDK table.
             * Captures the template of a column's footer cell and as well as cell-specific properties.
             */
            var CdkFooterCellDef = /** @class */ (function () {
                /**
                 * @param {?} template
                 */
                function CdkFooterCellDef(/** @docs-private */ template) {
                    this.template = template;
                }
                return CdkFooterCellDef;
            }());
            CdkFooterCellDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[cdkFooterCellDef]' },] },
            ];
            /** @nocollapse */
            CdkFooterCellDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"] }
            ]; };
            // Boilerplate for applying mixins to CdkColumnDef.
            /**
             * \@docs-private
             */
            var CdkColumnDefBase = /** @class */ (function () {
                function CdkColumnDefBase() {
                }
                return CdkColumnDefBase;
            }());
            /** @type {?} */
            var _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);
            /**
             * Column definition for the CDK table.
             * Defines a set of cells available for a table column.
             */
            var CdkColumnDef = /** @class */ (function (_super) {
                __extends(CdkColumnDef, _super);
                function CdkColumnDef() {
                    var _this = _super.apply(this, arguments) || this;
                    _this._stickyEnd = false;
                    return _this;
                }
                Object.defineProperty(CdkColumnDef.prototype, "name", {
                    /**
                     * Unique name for this column.
                     * @return {?}
                     */
                    get: function () {
                        return this._name;
                    },
                    /**
                     * @param {?} name
                     * @return {?}
                     */
                    set: function (name) {
                        // If the directive is set without a name (updated programatically), then this setter will
                        // trigger with an empty string and should not overwrite the programatically set value.
                        if (!name) {
                            return;
                        }
                        this._name = name;
                        this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkColumnDef.prototype, "stickyEnd", {
                    /**
                     * Whether this column should be sticky positioned on the end of the row. Should make sure
                     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value
                     * has been changed.
                     * @return {?}
                     */
                    get: function () {
                        return this._stickyEnd;
                    },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) {
                        /** @type {?} */
                        var prevValue = this._stickyEnd;
                        this._stickyEnd = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(v);
                        this._hasStickyChanged = prevValue !== this._stickyEnd;
                    },
                    enumerable: true,
                    configurable: true
                });
                return CdkColumnDef;
            }(_CdkColumnDefBase));
            CdkColumnDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkColumnDef]',
                            inputs: ['sticky'],
                            providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],
                        },] },
            ];
            CdkColumnDef.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkColumnDef',] }],
                stickyEnd: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['stickyEnd',] }],
                cell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"], args: [CdkCellDef, { static: false },] }],
                headerCell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"], args: [CdkHeaderCellDef, { static: false },] }],
                footerCell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"], args: [CdkFooterCellDef, { static: false },] }]
            };
            /**
             * Base class for the cells. Adds a CSS classname that identifies the column it renders in.
             */
            var BaseCdkCell = /** @class */ (function () {
                /**
                 * @param {?} columnDef
                 * @param {?} elementRef
                 */
                function BaseCdkCell(columnDef, elementRef) {
                    /** @type {?} */
                    var columnClassName = "cdk-column-" + columnDef.cssClassFriendlyName;
                    elementRef.nativeElement.classList.add(columnClassName);
                }
                return BaseCdkCell;
            }());
            /**
             * Header cell template container that adds the right classes and role.
             */
            var CdkHeaderCell = /** @class */ (function (_super) {
                __extends(CdkHeaderCell, _super);
                /**
                 * @param {?} columnDef
                 * @param {?} elementRef
                 */
                function CdkHeaderCell(columnDef, elementRef) {
                    return _super.call(this, columnDef, elementRef) || this;
                }
                return CdkHeaderCell;
            }(BaseCdkCell));
            CdkHeaderCell.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'cdk-header-cell, th[cdk-header-cell]',
                            host: {
                                'class': 'cdk-header-cell',
                                'role': 'columnheader',
                            },
                        },] },
            ];
            /** @nocollapse */
            CdkHeaderCell.ctorParameters = function () { return [
                { type: CdkColumnDef },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * Footer cell template container that adds the right classes and role.
             */
            var CdkFooterCell = /** @class */ (function (_super) {
                __extends(CdkFooterCell, _super);
                /**
                 * @param {?} columnDef
                 * @param {?} elementRef
                 */
                function CdkFooterCell(columnDef, elementRef) {
                    return _super.call(this, columnDef, elementRef) || this;
                }
                return CdkFooterCell;
            }(BaseCdkCell));
            CdkFooterCell.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'cdk-footer-cell, td[cdk-footer-cell]',
                            host: {
                                'class': 'cdk-footer-cell',
                                'role': 'gridcell',
                            },
                        },] },
            ];
            /** @nocollapse */
            CdkFooterCell.ctorParameters = function () { return [
                { type: CdkColumnDef },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * Cell template container that adds the right classes and role.
             */
            var CdkCell = /** @class */ (function (_super) {
                __extends(CdkCell, _super);
                /**
                 * @param {?} columnDef
                 * @param {?} elementRef
                 */
                function CdkCell(columnDef, elementRef) {
                    return _super.call(this, columnDef, elementRef) || this;
                }
                return CdkCell;
            }(BaseCdkCell));
            CdkCell.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'cdk-cell, td[cdk-cell]',
                            host: {
                                'class': 'cdk-cell',
                                'role': 'gridcell',
                            },
                        },] },
            ];
            /** @nocollapse */
            CdkCell.ctorParameters = function () { return [
                { type: CdkColumnDef },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The row template that can be used by the mat-table. Should not be used outside of the
             * material library.
             * @type {?}
             */
            var CDK_ROW_TEMPLATE = "<ng-container cdkCellOutlet></ng-container>";
            /**
             * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs
             * for changes and notifying the table.
             * @abstract
             */
            var BaseRowDef = /** @class */ (function () {
                /**
                 * @param {?} template
                 * @param {?} _differs
                 */
                function BaseRowDef(template, _differs) {
                    this.template = template;
                    this._differs = _differs;
                }
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                BaseRowDef.prototype.ngOnChanges = function (changes) {
                    // Create a new columns differ if one does not yet exist. Initialize it based on initial value
                    // of the columns property or an empty array if none is provided.
                    if (!this._columnsDiffer) {
                        /** @type {?} */
                        var columns = (changes['columns'] && changes['columns'].currentValue) || [];
                        this._columnsDiffer = this._differs.find(columns).create();
                        this._columnsDiffer.diff(columns);
                    }
                };
                /**
                 * Returns the difference between the current columns and the columns from the last diff, or null
                 * if there is no difference.
                 * @return {?}
                 */
                BaseRowDef.prototype.getColumnsDiff = function () {
                    return this._columnsDiffer.diff(this.columns);
                };
                /**
                 * Gets this row def's relevant cell template from the provided column def.
                 * @param {?} column
                 * @return {?}
                 */
                BaseRowDef.prototype.extractCellTemplate = function (column) {
                    if (this instanceof CdkHeaderRowDef) {
                        return column.headerCell.template;
                    }
                    if (this instanceof CdkFooterRowDef) {
                        return column.footerCell.template;
                    }
                    else {
                        return column.cell.template;
                    }
                };
                return BaseRowDef;
            }());
            // Boilerplate for applying mixins to CdkHeaderRowDef.
            /**
             * \@docs-private
             */
            var CdkHeaderRowDefBase = /** @class */ (function (_super) {
                __extends(CdkHeaderRowDefBase, _super);
                function CdkHeaderRowDefBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return CdkHeaderRowDefBase;
            }(BaseRowDef));
            /** @type {?} */
            var _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);
            /**
             * Header row definition for the CDK table.
             * Captures the header row's template and other header properties such as the columns to display.
             */
            var CdkHeaderRowDef = /** @class */ (function (_super) {
                __extends(CdkHeaderRowDef, _super);
                /**
                 * @param {?} template
                 * @param {?} _differs
                 */
                function CdkHeaderRowDef(template, _differs) {
                    return _super.call(this, template, _differs) || this;
                }
                // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.
                // Explicitly define it so that the method is called as part of the Angular lifecycle.
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                CdkHeaderRowDef.prototype.ngOnChanges = function (changes) {
                    _super.prototype.ngOnChanges.call(this, changes);
                };
                return CdkHeaderRowDef;
            }(_CdkHeaderRowDefBase));
            CdkHeaderRowDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkHeaderRowDef]',
                            inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],
                        },] },
            ];
            /** @nocollapse */
            CdkHeaderRowDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"] }
            ]; };
            // Boilerplate for applying mixins to CdkFooterRowDef.
            /**
             * \@docs-private
             */
            var CdkFooterRowDefBase = /** @class */ (function (_super) {
                __extends(CdkFooterRowDefBase, _super);
                function CdkFooterRowDefBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return CdkFooterRowDefBase;
            }(BaseRowDef));
            /** @type {?} */
            var _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);
            /**
             * Footer row definition for the CDK table.
             * Captures the footer row's template and other footer properties such as the columns to display.
             */
            var CdkFooterRowDef = /** @class */ (function (_super) {
                __extends(CdkFooterRowDef, _super);
                /**
                 * @param {?} template
                 * @param {?} _differs
                 */
                function CdkFooterRowDef(template, _differs) {
                    return _super.call(this, template, _differs) || this;
                }
                // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.
                // Explicitly define it so that the method is called as part of the Angular lifecycle.
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                CdkFooterRowDef.prototype.ngOnChanges = function (changes) {
                    _super.prototype.ngOnChanges.call(this, changes);
                };
                return CdkFooterRowDef;
            }(_CdkFooterRowDefBase));
            CdkFooterRowDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkFooterRowDef]',
                            inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],
                        },] },
            ];
            /** @nocollapse */
            CdkFooterRowDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"] }
            ]; };
            /**
             * Data row definition for the CDK table.
             * Captures the header row's template and other row properties such as the columns to display and
             * a when predicate that describes when this row should be used.
             * @template T
             */
            var CdkRowDef = /** @class */ (function (_super) {
                __extends(CdkRowDef, _super);
                // TODO(andrewseguin): Add an input for providing a switch function to determine
                //   if this template should be used.
                /**
                 * @param {?} template
                 * @param {?} _differs
                 */
                function CdkRowDef(template, _differs) {
                    return _super.call(this, template, _differs) || this;
                }
                return CdkRowDef;
            }(BaseRowDef));
            CdkRowDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkRowDef]',
                            inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],
                        },] },
            ];
            /** @nocollapse */
            CdkRowDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"] }
            ]; };
            /**
             * Outlet for rendering cells inside of a row or header row.
             * \@docs-private
             */
            var CdkCellOutlet = /** @class */ (function () {
                /**
                 * @param {?} _viewContainer
                 */
                function CdkCellOutlet(_viewContainer) {
                    this._viewContainer = _viewContainer;
                    CdkCellOutlet.mostRecentCellOutlet = this;
                }
                /**
                 * @return {?}
                 */
                CdkCellOutlet.prototype.ngOnDestroy = function () {
                    // If this was the last outlet being rendered in the view, remove the reference
                    // from the static property after it has been destroyed to avoid leaking memory.
                    if (CdkCellOutlet.mostRecentCellOutlet === this) {
                        CdkCellOutlet.mostRecentCellOutlet = null;
                    }
                };
                return CdkCellOutlet;
            }());
            /**
             * Static property containing the latest constructed instance of this class.
             * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using
             * createEmbeddedView. After one of these components are created, this property will provide
             * a handle to provide that component's cells and context. After init, the CdkCellOutlet will
             * construct the cells with the provided context.
             */
            CdkCellOutlet.mostRecentCellOutlet = null;
            CdkCellOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[cdkCellOutlet]' },] },
            ];
            /** @nocollapse */
            CdkCellOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] }
            ]; };
            /**
             * Header template container that contains the cell outlet. Adds the right class and role.
             */
            var CdkHeaderRow = /** @class */ (function () {
                function CdkHeaderRow() {
                }
                return CdkHeaderRow;
            }());
            CdkHeaderRow.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'cdk-header-row, tr[cdk-header-row]',
                            template: CDK_ROW_TEMPLATE,
                            host: {
                                'class': 'cdk-header-row',
                                'role': 'row',
                            },
                            // See note on CdkTable for explanation on why this uses the default change detection strategy.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        },] },
            ];
            /**
             * Footer template container that contains the cell outlet. Adds the right class and role.
             */
            var CdkFooterRow = /** @class */ (function () {
                function CdkFooterRow() {
                }
                return CdkFooterRow;
            }());
            CdkFooterRow.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'cdk-footer-row, tr[cdk-footer-row]',
                            template: CDK_ROW_TEMPLATE,
                            host: {
                                'class': 'cdk-footer-row',
                                'role': 'row',
                            },
                            // See note on CdkTable for explanation on why this uses the default change detection strategy.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        },] },
            ];
            /**
             * Data row template container that contains the cell outlet. Adds the right class and role.
             */
            var CdkRow = /** @class */ (function () {
                function CdkRow() {
                }
                return CdkRow;
            }());
            CdkRow.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'cdk-row, tr[cdk-row]',
                            template: CDK_ROW_TEMPLATE,
                            host: {
                                'class': 'cdk-row',
                                'role': 'row',
                            },
                            // See note on CdkTable for explanation on why this uses the default change detection strategy.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * List of all possible directions that can be used for sticky positioning.
             * \@docs-private
             * @type {?}
             */
            var STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];
            /**
             * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.
             * \@docs-private
             */
            var StickyStyler = /** @class */ (function () {
                /**
                 * @param {?} _isNativeHtmlTable Whether the sticky logic should be based on a table
                 *     that uses the native `<table>` element.
                 * @param {?} _stickCellCss The CSS class that will be applied to every row/cell that has
                 *     sticky positioning applied.
                 * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning
                 *     by reversing left/right positions.
                 * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.
                 */
                function StickyStyler(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser) {
                    if (_isBrowser === void 0) { _isBrowser = true; }
                    this._isNativeHtmlTable = _isNativeHtmlTable;
                    this._stickCellCss = _stickCellCss;
                    this.direction = direction;
                    this._isBrowser = _isBrowser;
                }
                /**
                 * Clears the sticky positioning styles from the row and its cells by resetting the `position`
                 * style, setting the zIndex to 0, and unsetting each provided sticky direction.
                 * @param {?} rows The list of rows that should be cleared from sticking in the provided directions
                 * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.
                 * @return {?}
                 */
                StickyStyler.prototype.clearStickyPositioning = function (rows, stickyDirections) {
                    for (var _b = 0, rows_1 = rows; _b < rows_1.length; _b++) {
                        var row = rows_1[_b];
                        // If the row isn't an element (e.g. if it's an `ng-container`),
                        // it won't have inline styles or `children` so we skip it.
                        if (row.nodeType !== row.ELEMENT_NODE) {
                            continue;
                        }
                        this._removeStickyStyle(row, stickyDirections);
                        for (var i = 0; i < row.children.length; i++) {
                            /** @type {?} */
                            var cell = ( /** @type {?} */(row.children[i]));
                            this._removeStickyStyle(cell, stickyDirections);
                        }
                    }
                };
                /**
                 * Applies sticky left and right positions to the cells of each row according to the sticky
                 * states of the rendered column definitions.
                 * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.
                 * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell
                 *     in this index position should be stuck to the start of the row.
                 * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell
                 *     in this index position should be stuck to the end of the row.
                 * @return {?}
                 */
                StickyStyler.prototype.updateStickyColumns = function (rows, stickyStartStates, stickyEndStates) {
                    /** @type {?} */
                    var hasStickyColumns = stickyStartStates.some(( /**
                     * @param {?} state
                     * @return {?}
                     */function (/**
                     * @param {?} state
                     * @return {?}
                     */ state) { return state; })) || stickyEndStates.some(( /**
                     * @param {?} state
                     * @return {?}
                     */function (/**
                     * @param {?} state
                     * @return {?}
                     */ state) { return state; }));
                    if (!rows.length || !hasStickyColumns || !this._isBrowser) {
                        return;
                    }
                    /** @type {?} */
                    var firstRow = rows[0];
                    /** @type {?} */
                    var numCells = firstRow.children.length;
                    /** @type {?} */
                    var cellWidths = this._getCellWidths(firstRow);
                    /** @type {?} */
                    var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);
                    /** @type {?} */
                    var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);
                    /** @type {?} */
                    var isRtl = this.direction === 'rtl';
                    for (var _b = 0, rows_2 = rows; _b < rows_2.length; _b++) {
                        var row = rows_2[_b];
                        for (var i = 0; i < numCells; i++) {
                            /** @type {?} */
                            var cell = ( /** @type {?} */(row.children[i]));
                            if (stickyStartStates[i]) {
                                this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);
                            }
                            if (stickyEndStates[i]) {
                                this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);
                            }
                        }
                    }
                };
                /**
                 * Applies sticky positioning to the row's cells if using the native table layout, and to the
                 * row itself otherwise.
                 * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding
                 *     sticky state and to the provided top or bottom position.
                 * @param {?} stickyStates A list of boolean states where each state represents whether the row
                 *     should be stuck in the particular top or bottom position.
                 * @param {?} position The position direction in which the row should be stuck if that row should be
                 *     sticky.
                 *
                 * @return {?}
                 */
                StickyStyler.prototype.stickRows = function (rowsToStick, stickyStates, position) {
                    // Since we can't measure the rows on the server, we can't stick the rows properly.
                    if (!this._isBrowser) {
                        return;
                    }
                    // If positioning the rows to the bottom, reverse their order when evaluating the sticky
                    // position such that the last row stuck will be "bottom: 0px" and so on.
                    /** @type {?} */
                    var rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;
                    /** @type {?} */
                    var stickyHeight = 0;
                    for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
                        if (!stickyStates[rowIndex]) {
                            continue;
                        }
                        /** @type {?} */
                        var row = rows[rowIndex];
                        if (this._isNativeHtmlTable) {
                            for (var j = 0; j < row.children.length; j++) {
                                /** @type {?} */
                                var cell = ( /** @type {?} */(row.children[j]));
                                this._addStickyStyle(cell, position, stickyHeight);
                            }
                        }
                        else {
                            // Flex does not respect the stick positioning on the cells, needs to be applied to the row.
                            // If this is applied on a native table, Safari causes the header to fly in wrong direction.
                            this._addStickyStyle(row, position, stickyHeight);
                        }
                        if (rowIndex === rows.length - 1) {
                            // prevent unnecessary reflow from getBoundingClientRect()
                            return;
                        }
                        stickyHeight += row.getBoundingClientRect().height;
                    }
                };
                /**
                 * When using the native table in Safari, sticky footer cells do not stick. The only way to stick
                 * footer rows is to apply sticky styling to the tfoot container. This should only be done if
                 * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from
                 * the tfoot element.
                 * @param {?} tableElement
                 * @param {?} stickyStates
                 * @return {?}
                 */
                StickyStyler.prototype.updateStickyFooterContainer = function (tableElement, stickyStates) {
                    if (!this._isNativeHtmlTable) {
                        return;
                    }
                    /** @type {?} */
                    var tfoot = ( /** @type {?} */(tableElement.querySelector('tfoot')));
                    if (stickyStates.some(( /**
                     * @param {?} state
                     * @return {?}
                     */function (/**
                     * @param {?} state
                     * @return {?}
                     */ state) { return !state; }))) {
                        this._removeStickyStyle(tfoot, ['bottom']);
                    }
                    else {
                        this._addStickyStyle(tfoot, 'bottom', 0);
                    }
                };
                /**
                 * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating
                 * the zIndex, removing each of the provided sticky directions, and removing the
                 * sticky position if there are no more directions.
                 * @param {?} element
                 * @param {?} stickyDirections
                 * @return {?}
                 */
                StickyStyler.prototype._removeStickyStyle = function (element, stickyDirections) {
                    for (var _b = 0, stickyDirections_1 = stickyDirections; _b < stickyDirections_1.length; _b++) {
                        var dir = stickyDirections_1[_b];
                        element.style[dir] = '';
                    }
                    element.style.zIndex = this._getCalculatedZIndex(element);
                    // If the element no longer has any more sticky directions, remove sticky positioning and
                    // the sticky CSS class.
                    /** @type {?} */
                    var hasDirection = STICKY_DIRECTIONS.some(( /**
                     * @param {?} dir
                     * @return {?}
                     */function (/**
                     * @param {?} dir
                     * @return {?}
                     */ dir) { return !!element.style[dir]; }));
                    if (!hasDirection) {
                        element.style.position = '';
                        element.classList.remove(this._stickCellCss);
                    }
                };
                /**
                 * Adds the sticky styling to the element by adding the sticky style class, changing position
                 * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky
                 * direction and value.
                 * @param {?} element
                 * @param {?} dir
                 * @param {?} dirValue
                 * @return {?}
                 */
                StickyStyler.prototype._addStickyStyle = function (element, dir, dirValue) {
                    element.classList.add(this._stickCellCss);
                    element.style[dir] = dirValue + "px";
                    element.style.cssText += 'position: -webkit-sticky; position: sticky; ';
                    element.style.zIndex = this._getCalculatedZIndex(element);
                };
                /**
                 * Calculate what the z-index should be for the element, depending on what directions (top,
                 * bottom, left, right) have been set. It should be true that elements with a top direction
                 * should have the highest index since these are elements like a table header. If any of those
                 * elements are also sticky in another direction, then they should appear above other elements
                 * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements
                 * (e.g. footer rows) should then be next in the ordering such that they are below the header
                 * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)
                 * should minimally increment so that they are above non-sticky elements but below top and bottom
                 * elements.
                 * @param {?} element
                 * @return {?}
                 */
                StickyStyler.prototype._getCalculatedZIndex = function (element) {
                    /** @type {?} */
                    var zIndexIncrements = {
                        top: 100,
                        bottom: 10,
                        left: 1,
                        right: 1,
                    };
                    /** @type {?} */
                    var zIndex = 0;
                    for (var _b = 0, STICKY_DIRECTIONS_1 = STICKY_DIRECTIONS; _b < STICKY_DIRECTIONS_1.length; _b++) {
                        var dir = STICKY_DIRECTIONS_1[_b];
                        if (element.style[dir]) {
                            zIndex += zIndexIncrements[dir];
                        }
                    }
                    return zIndex ? "" + zIndex : '';
                };
                /**
                 * Gets the widths for each cell in the provided row.
                 * @param {?} row
                 * @return {?}
                 */
                StickyStyler.prototype._getCellWidths = function (row) {
                    /** @type {?} */
                    var cellWidths = [];
                    /** @type {?} */
                    var firstRowCells = row.children;
                    for (var i = 0; i < firstRowCells.length; i++) {
                        /** @type {?} */
                        var cell = ( /** @type {?} */(firstRowCells[i]));
                        cellWidths.push(cell.getBoundingClientRect().width);
                    }
                    return cellWidths;
                };
                /**
                 * Determines the left and right positions of each sticky column cell, which will be the
                 * accumulation of all sticky column cell widths to the left and right, respectively.
                 * Non-sticky cells do not need to have a value set since their positions will not be applied.
                 * @param {?} widths
                 * @param {?} stickyStates
                 * @return {?}
                 */
                StickyStyler.prototype._getStickyStartColumnPositions = function (widths, stickyStates) {
                    /** @type {?} */
                    var positions = [];
                    /** @type {?} */
                    var nextPosition = 0;
                    for (var i = 0; i < widths.length; i++) {
                        if (stickyStates[i]) {
                            positions[i] = nextPosition;
                            nextPosition += widths[i];
                        }
                    }
                    return positions;
                };
                /**
                 * Determines the left and right positions of each sticky column cell, which will be the
                 * accumulation of all sticky column cell widths to the left and right, respectively.
                 * Non-sticky cells do not need to have a value set since their positions will not be applied.
                 * @param {?} widths
                 * @param {?} stickyStates
                 * @return {?}
                 */
                StickyStyler.prototype._getStickyEndColumnPositions = function (widths, stickyStates) {
                    /** @type {?} */
                    var positions = [];
                    /** @type {?} */
                    var nextPosition = 0;
                    for (var i = widths.length; i > 0; i--) {
                        if (stickyStates[i]) {
                            positions[i] = nextPosition;
                            nextPosition += widths[i];
                        }
                    }
                    return positions;
                };
                return StickyStyler;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Returns an error to be thrown when attempting to find an unexisting column.
             * \@docs-private
             * @param {?} id Id whose lookup failed.
             * @return {?}
             */
            function getTableUnknownColumnError(id) {
                return Error("Could not find column with id \"" + id + "\".");
            }
            /**
             * Returns an error to be thrown when two column definitions have the same name.
             * \@docs-private
             * @param {?} name
             * @return {?}
             */
            function getTableDuplicateColumnNameError(name) {
                return Error("Duplicate column definition name provided: \"" + name + "\".");
            }
            /**
             * Returns an error to be thrown when there are multiple rows that are missing a when function.
             * \@docs-private
             * @return {?}
             */
            function getTableMultipleDefaultRowDefsError() {
                return Error("There can only be one default row without a when predicate function.");
            }
            /**
             * Returns an error to be thrown when there are no matching row defs for a particular set of data.
             * \@docs-private
             * @param {?} data
             * @return {?}
             */
            function getTableMissingMatchingRowDefError(data) {
                return Error("Could not find a matching row definition for the" +
                    ("provided row data: " + JSON.stringify(data)));
            }
            /**
             * Returns an error to be thrown when there is no row definitions present in the content.
             * \@docs-private
             * @return {?}
             */
            function getTableMissingRowDefsError() {
                return Error('Missing definitions for header, footer, and row; ' +
                    'cannot determine which columns should be rendered.');
            }
            /**
             * Returns an error to be thrown when the data source does not match the compatible types.
             * \@docs-private
             * @return {?}
             */
            function getTableUnknownDataSourceError() {
                return Error("Provided data source did not match an array, Observable, or DataSource");
            }
            /**
             * Returns an error to be thrown when the text column cannot find a parent table to inject.
             * \@docs-private
             * @return {?}
             */
            function getTableTextColumnMissingParentTableError() {
                return Error("Text column could not find a parent table for registration.");
            }
            /**
             * Returns an error to be thrown when a table text column doesn't have a name.
             * \@docs-private
             * @return {?}
             */
            function getTableTextColumnMissingNameError() {
                return Error("Table text column must have a name.");
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Provides a handle for the table to grab the view container's ng-container to insert data rows.
             * \@docs-private
             */
            var DataRowOutlet = /** @class */ (function () {
                /**
                 * @param {?} viewContainer
                 * @param {?} elementRef
                 */
                function DataRowOutlet(viewContainer, elementRef) {
                    this.viewContainer = viewContainer;
                    this.elementRef = elementRef;
                }
                return DataRowOutlet;
            }());
            DataRowOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[rowOutlet]' },] },
            ];
            /** @nocollapse */
            DataRowOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * Provides a handle for the table to grab the view container's ng-container to insert the header.
             * \@docs-private
             */
            var HeaderRowOutlet = /** @class */ (function () {
                /**
                 * @param {?} viewContainer
                 * @param {?} elementRef
                 */
                function HeaderRowOutlet(viewContainer, elementRef) {
                    this.viewContainer = viewContainer;
                    this.elementRef = elementRef;
                }
                return HeaderRowOutlet;
            }());
            HeaderRowOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[headerRowOutlet]' },] },
            ];
            /** @nocollapse */
            HeaderRowOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * Provides a handle for the table to grab the view container's ng-container to insert the footer.
             * \@docs-private
             */
            var FooterRowOutlet = /** @class */ (function () {
                /**
                 * @param {?} viewContainer
                 * @param {?} elementRef
                 */
                function FooterRowOutlet(viewContainer, elementRef) {
                    this.viewContainer = viewContainer;
                    this.elementRef = elementRef;
                }
                return FooterRowOutlet;
            }());
            FooterRowOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[footerRowOutlet]' },] },
            ];
            /** @nocollapse */
            FooterRowOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * The table template that can be used by the mat-table. Should not be used outside of the
             * material library.
             * \@docs-private
             * @type {?}
             */
            var CDK_TABLE_TEMPLATE = 
            // Note that according to MDN, the `caption` element has to be projected as the **first**
            // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption
            "\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n";
            /**
             * A data table that can render a header row, data rows, and a footer row.
             * Uses the dataSource input to determine the data to be rendered. The data can be provided either
             * as a data array, an Observable stream that emits the data array to render, or a DataSource with a
             * connect function that will return an Observable stream that emits the data array to render.
             * @template T
             */
            var CdkTable = /** @class */ (function () {
                /**
                 * @param {?} _differs
                 * @param {?} _changeDetectorRef
                 * @param {?} _elementRef
                 * @param {?} role
                 * @param {?} _dir
                 * @param {?} _document
                 * @param {?} _platform
                 */
                function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {
                    this._differs = _differs;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._elementRef = _elementRef;
                    this._dir = _dir;
                    this._platform = _platform;
                    /**
                     * Subject that emits when the component has been destroyed.
                     */
                    this._onDestroy = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
                    /**
                     * Map of all the user's defined columns (header, data, and footer cell template) identified by
                     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as
                     * any custom column definitions added to `_customColumnDefs`.
                     */
                    this._columnDefsByName = new Map();
                    /**
                     * Column definitions that were defined outside of the direct content children of the table.
                     * These will be defined when, e.g., creating a wrapper around the cdkTable that has
                     * column definitions as *its* content child.
                     */
                    this._customColumnDefs = new Set();
                    /**
                     * Data row definitions that were defined outside of the direct content children of the table.
                     * These will be defined when, e.g., creating a wrapper around the cdkTable that has
                     * built-in data rows as *its* content child.
                     */
                    this._customRowDefs = new Set();
                    /**
                     * Header row definitions that were defined outside of the direct content children of the table.
                     * These will be defined when, e.g., creating a wrapper around the cdkTable that has
                     * built-in header rows as *its* content child.
                     */
                    this._customHeaderRowDefs = new Set();
                    /**
                     * Footer row definitions that were defined outside of the direct content children of the table.
                     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a
                     * built-in footer row as *its* content child.
                     */
                    this._customFooterRowDefs = new Set();
                    /**
                     * Whether the header row definition has been changed. Triggers an update to the header row after
                     * content is checked. Initialized as true so that the table renders the initial set of rows.
                     */
                    this._headerRowDefChanged = true;
                    /**
                     * Whether the footer row definition has been changed. Triggers an update to the footer row after
                     * content is checked. Initialized as true so that the table renders the initial set of rows.
                     */
                    this._footerRowDefChanged = true;
                    /**
                     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing
                     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with
                     * the cached `RenderRow` objects when possible, the row identity is preserved when the data
                     * and row template matches, which allows the `IterableDiffer` to check rows by reference
                     * and understand which rows are added/moved/removed.
                     *
                     * Implemented as a map of maps where the first key is the `data: T` object and the second is the
                     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that
                     * contains an array of created pairs. The array is necessary to handle cases where the data
                     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be
                     * stored.
                     */
                    this._cachedRenderRowsMap = new Map();
                    /**
                     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by
                     * table subclasses.
                     */
                    this.stickyCssClass = 'cdk-table-sticky';
                    this._multiTemplateDataRows = false;
                    // TODO(andrewseguin): Remove max value as the end index
                    //   and instead calculate the view on init and scroll.
                    /**
                     * Stream containing the latest information on what rows are being displayed on screen.
                     * Can be used by the data source to as a heuristic of what data should be provided.
                     *
                     * \@docs-private
                     */
                    this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]({ start: 0, end: Number.MAX_VALUE });
                    if (!role) {
                        this._elementRef.nativeElement.setAttribute('role', 'grid');
                    }
                    this._document = _document;
                    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';
                }
                Object.defineProperty(CdkTable.prototype, "trackBy", {
                    /**
                     * Tracking function that will be used to check the differences in data changes. Used similarly
                     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data
                     * relative to the function to know if a row should be added/removed/moved.
                     * Accepts a function that takes two parameters, `index` and `item`.
                     * @return {?}
                     */
                    get: function () {
                        return this._trackByFn;
                    },
                    /**
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && fn != null && typeof fn !== 'function' && ( /** @type {?} */(console)) &&
                            ( /** @type {?} */(console.warn))) {
                            console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ".");
                        }
                        this._trackByFn = fn;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTable.prototype, "dataSource", {
                    /**
                     * The table's source of data, which can be provided in three ways (in order of complexity):
                     *   - Simple data array (each object represents one table row)
                     *   - Stream that emits a data array each time the array changes
                     *   - `DataSource` object that implements the connect/disconnect interface.
                     *
                     * If a data array is provided, the table must be notified when the array's objects are
                     * added, removed, or moved. This can be done by calling the `renderRows()` function which will
                     * render the diff since the last table render. If the data array reference is changed, the table
                     * will automatically trigger an update to the rows.
                     *
                     * When providing an Observable stream, the table will trigger an update automatically when the
                     * stream emits a new array of data.
                     *
                     * Finally, when providing a `DataSource` object, the table will use the Observable stream
                     * provided by the connect function and trigger updates when that stream emits new data array
                     * values. During the table's ngOnDestroy or when the data source is removed from the table, the
                     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any
                     * subscriptions registered during the connect process).
                     * @return {?}
                     */
                    get: function () {
                        return this._dataSource;
                    },
                    /**
                     * @param {?} dataSource
                     * @return {?}
                     */
                    set: function (dataSource) {
                        if (this._dataSource !== dataSource) {
                            this._switchDataSource(dataSource);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTable.prototype, "multiTemplateDataRows", {
                    /**
                     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'
                     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each
                     * dataobject will render the first row that evaluates its when predicate to true, in the order
                     * defined in the table, or otherwise the default row which does not have a when predicate.
                     * @return {?}
                     */
                    get: function () {
                        return this._multiTemplateDataRows;
                    },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) {
                        this._multiTemplateDataRows = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(v);
                        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),
                        // this setter will be invoked before the row outlet has been defined hence the null check.
                        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {
                            this._forceRenderDataRows();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkTable.prototype.ngOnInit = function () {
                    var _this = this;
                    this._setupStickyStyler();
                    if (this._isNativeHtmlTable) {
                        this._applyNativeTableSections();
                    }
                    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If
                    // the user has provided a custom trackBy, return the result of that function as evaluated
                    // with the values of the `RenderRow`'s data and index.
                    this._dataDiffer = this._differs.find([]).create(( /**
                     * @param {?} _i
                     * @param {?} dataRow
                     * @return {?}
                     */function (_i, dataRow) {
                        return _this.trackBy ? _this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;
                    }));
                };
                /**
                 * @return {?}
                 */
                CdkTable.prototype.ngAfterContentChecked = function () {
                    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.
                    this._cacheRowDefs();
                    this._cacheColumnDefs();
                    // Make sure that the user has at least added header, footer, or data row def.
                    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {
                        throw getTableMissingRowDefsError();
                    }
                    // Render updates if the list of columns have been changed for the header, row, or footer defs.
                    this._renderUpdatedColumns();
                    // If the header row definition has been changed, trigger a render to the header row.
                    if (this._headerRowDefChanged) {
                        this._forceRenderHeaderRows();
                        this._headerRowDefChanged = false;
                    }
                    // If the footer row definition has been changed, trigger a render to the footer row.
                    if (this._footerRowDefChanged) {
                        this._forceRenderFooterRows();
                        this._footerRowDefChanged = false;
                    }
                    // If there is a data source and row definitions, connect to the data source unless a
                    // connection has already been made.
                    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {
                        this._observeRenderChanges();
                    }
                    this._checkStickyStates();
                };
                /**
                 * @return {?}
                 */
                CdkTable.prototype.ngOnDestroy = function () {
                    this._rowOutlet.viewContainer.clear();
                    this._headerRowOutlet.viewContainer.clear();
                    this._footerRowOutlet.viewContainer.clear();
                    this._cachedRenderRowsMap.clear();
                    this._onDestroy.next();
                    this._onDestroy.complete();
                    if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__["isDataSource"])(this.dataSource)) {
                        this.dataSource.disconnect(this);
                    }
                };
                /**
                 * Renders rows based on the table's latest set of data, which was either provided directly as an
                 * input or retrieved through an Observable stream (directly or from a DataSource).
                 * Checks for differences in the data since the last diff to perform only the necessary
                 * changes (add/remove/move rows).
                 *
                 * If the table's data source is a DataSource or Observable, this will be invoked automatically
                 * each time the provided Observable stream emits a new data array. Otherwise if your data is
                 * an array, this function will need to be called to render any changes.
                 * @return {?}
                 */
                CdkTable.prototype.renderRows = function () {
                    var _this = this;
                    this._renderRows = this._getAllRenderRows();
                    /** @type {?} */
                    var changes = this._dataDiffer.diff(this._renderRows);
                    if (!changes) {
                        return;
                    }
                    /** @type {?} */
                    var viewContainer = this._rowOutlet.viewContainer;
                    changes.forEachOperation(( /**
                     * @param {?} record
                     * @param {?} prevIndex
                     * @param {?} currentIndex
                     * @return {?}
                     */function (record, prevIndex, currentIndex) {
                        if (record.previousIndex == null) {
                            _this._insertRow(record.item, ( /** @type {?} */(currentIndex)));
                        }
                        else if (currentIndex == null) {
                            viewContainer.remove(( /** @type {?} */(prevIndex)));
                        }
                        else {
                            /** @type {?} */
                            var view = ( /** @type {?} */(viewContainer.get(( /** @type {?} */(prevIndex)))));
                            viewContainer.move(( /** @type {?} */(view)), currentIndex);
                        }
                    }));
                    // Update the meta context of a row's context data (index, count, first, last, ...)
                    this._updateRowIndexContext();
                    // Update rows that did not get added/removed/moved but may have had their identity changed,
                    // e.g. if trackBy matched data on some property but the actual data reference changed.
                    changes.forEachIdentityChange(( /**
                     * @param {?} record
                     * @return {?}
                     */function (record) {
                        /** @type {?} */
                        var rowView = ( /** @type {?} */(viewContainer.get(( /** @type {?} */(record.currentIndex)))));
                        rowView.context.$implicit = record.item.data;
                    }));
                    this.updateStickyColumnStyles();
                };
                /**
                 * Sets the header row definition to be used. Overrides the header row definition gathered by
                 * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the
                 * table's content is checked.
                 * \@docs-private
                 * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead
                 * \@breaking-change 8.0.0
                 * @param {?} headerRowDef
                 * @return {?}
                 */
                CdkTable.prototype.setHeaderRowDef = function (headerRowDef) {
                    this._customHeaderRowDefs = new Set([headerRowDef]);
                    this._headerRowDefChanged = true;
                };
                /**
                 * Sets the footer row definition to be used. Overrides the footer row definition gathered by
                 * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the
                 * table's content is checked.
                 * \@docs-private
                 * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead
                 * \@breaking-change 8.0.0
                 * @param {?} footerRowDef
                 * @return {?}
                 */
                CdkTable.prototype.setFooterRowDef = function (footerRowDef) {
                    this._customFooterRowDefs = new Set([footerRowDef]);
                    this._footerRowDefChanged = true;
                };
                /**
                 * Adds a column definition that was not included as part of the content children.
                 * @param {?} columnDef
                 * @return {?}
                 */
                CdkTable.prototype.addColumnDef = function (columnDef) {
                    this._customColumnDefs.add(columnDef);
                };
                /**
                 * Removes a column definition that was not included as part of the content children.
                 * @param {?} columnDef
                 * @return {?}
                 */
                CdkTable.prototype.removeColumnDef = function (columnDef) {
                    this._customColumnDefs.delete(columnDef);
                };
                /**
                 * Adds a row definition that was not included as part of the content children.
                 * @param {?} rowDef
                 * @return {?}
                 */
                CdkTable.prototype.addRowDef = function (rowDef) {
                    this._customRowDefs.add(rowDef);
                };
                /**
                 * Removes a row definition that was not included as part of the content children.
                 * @param {?} rowDef
                 * @return {?}
                 */
                CdkTable.prototype.removeRowDef = function (rowDef) {
                    this._customRowDefs.delete(rowDef);
                };
                /**
                 * Adds a header row definition that was not included as part of the content children.
                 * @param {?} headerRowDef
                 * @return {?}
                 */
                CdkTable.prototype.addHeaderRowDef = function (headerRowDef) {
                    this._customHeaderRowDefs.add(headerRowDef);
                    this._headerRowDefChanged = true;
                };
                /**
                 * Removes a header row definition that was not included as part of the content children.
                 * @param {?} headerRowDef
                 * @return {?}
                 */
                CdkTable.prototype.removeHeaderRowDef = function (headerRowDef) {
                    this._customHeaderRowDefs.delete(headerRowDef);
                    this._headerRowDefChanged = true;
                };
                /**
                 * Adds a footer row definition that was not included as part of the content children.
                 * @param {?} footerRowDef
                 * @return {?}
                 */
                CdkTable.prototype.addFooterRowDef = function (footerRowDef) {
                    this._customFooterRowDefs.add(footerRowDef);
                    this._footerRowDefChanged = true;
                };
                /**
                 * Removes a footer row definition that was not included as part of the content children.
                 * @param {?} footerRowDef
                 * @return {?}
                 */
                CdkTable.prototype.removeFooterRowDef = function (footerRowDef) {
                    this._customFooterRowDefs.delete(footerRowDef);
                    this._footerRowDefChanged = true;
                };
                /**
                 * Updates the header sticky styles. First resets all applied styles with respect to the cells
                 * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is
                 * automatically called when the header row changes its displayed set of columns, or if its
                 * sticky input changes. May be called manually for cases where the cell content changes outside
                 * of these events.
                 * @return {?}
                 */
                CdkTable.prototype.updateStickyHeaderRowStyles = function () {
                    /** @type {?} */
                    var headerRows = this._getRenderedRows(this._headerRowOutlet);
                    /** @type {?} */
                    var tableElement = ( /** @type {?} */(this._elementRef.nativeElement));
                    // Hide the thead element if there are no header rows. This is necessary to satisfy
                    // overzealous a11y checkers that fail because the `rowgroup` element does not contain
                    // required child `row`.
                    /** @type {?} */
                    var thead = tableElement.querySelector('thead');
                    if (thead) {
                        thead.style.display = headerRows.length ? '' : 'none';
                    }
                    /** @type {?} */
                    var stickyStates = this._headerRowDefs.map(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return def.sticky; }));
                    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);
                    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');
                    // Reset the dirty state of the sticky input change since it has been used.
                    this._headerRowDefs.forEach(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return def.resetStickyChanged(); }));
                };
                /**
                 * Updates the footer sticky styles. First resets all applied styles with respect to the cells
                 * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is
                 * automatically called when the footer row changes its displayed set of columns, or if its
                 * sticky input changes. May be called manually for cases where the cell content changes outside
                 * of these events.
                 * @return {?}
                 */
                CdkTable.prototype.updateStickyFooterRowStyles = function () {
                    /** @type {?} */
                    var footerRows = this._getRenderedRows(this._footerRowOutlet);
                    /** @type {?} */
                    var tableElement = ( /** @type {?} */(this._elementRef.nativeElement));
                    // Hide the tfoot element if there are no footer rows. This is necessary to satisfy
                    // overzealous a11y checkers that fail because the `rowgroup` element does not contain
                    // required child `row`.
                    /** @type {?} */
                    var tfoot = tableElement.querySelector('tfoot');
                    if (tfoot) {
                        tfoot.style.display = footerRows.length ? '' : 'none';
                    }
                    /** @type {?} */
                    var stickyStates = this._footerRowDefs.map(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return def.sticky; }));
                    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);
                    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');
                    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);
                    // Reset the dirty state of the sticky input change since it has been used.
                    this._footerRowDefs.forEach(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return def.resetStickyChanged(); }));
                };
                /**
                 * Updates the column sticky styles. First resets all applied styles with respect to the cells
                 * sticking to the left and right. Then sticky styles are added for the left and right according
                 * to the column definitions for each cell in each row. This is automatically called when
                 * the data source provides a new set of data or when a column definition changes its sticky
                 * input. May be called manually for cases where the cell content changes outside of these events.
                 * @return {?}
                 */
                CdkTable.prototype.updateStickyColumnStyles = function () {
                    var _this = this;
                    /** @type {?} */
                    var headerRows = this._getRenderedRows(this._headerRowOutlet);
                    /** @type {?} */
                    var dataRows = this._getRenderedRows(this._rowOutlet);
                    /** @type {?} */
                    var footerRows = this._getRenderedRows(this._footerRowOutlet);
                    // Clear the left and right positioning from all columns in the table across all rows since
                    // sticky columns span across all table sections (header, data, footer)
                    this._stickyStyler.clearStickyPositioning(headerRows.concat(dataRows, footerRows), ['left', 'right']);
                    // Update the sticky styles for each header row depending on the def's sticky state
                    headerRows.forEach(( /**
                     * @param {?} headerRow
                     * @param {?} i
                     * @return {?}
                     */function (headerRow, i) {
                        _this._addStickyColumnStyles([headerRow], _this._headerRowDefs[i]);
                    }));
                    // Update the sticky styles for each data row depending on its def's sticky state
                    this._rowDefs.forEach(( /**
                     * @param {?} rowDef
                     * @return {?}
                     */function (/**
                     * @param {?} rowDef
                     * @return {?}
                     */ rowDef) {
                        // Collect all the rows rendered with this row definition.
                        /** @type {?} */
                        var rows = [];
                        for (var i = 0; i < dataRows.length; i++) {
                            if (_this._renderRows[i].rowDef === rowDef) {
                                rows.push(dataRows[i]);
                            }
                        }
                        _this._addStickyColumnStyles(rows, rowDef);
                    }));
                    // Update the sticky styles for each footer row depending on the def's sticky state
                    footerRows.forEach(( /**
                     * @param {?} footerRow
                     * @param {?} i
                     * @return {?}
                     */function (footerRow, i) {
                        _this._addStickyColumnStyles([footerRow], _this._footerRowDefs[i]);
                    }));
                    // Reset the dirty state of the sticky input change since it has been used.
                    Array.from(this._columnDefsByName.values()).forEach(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return def.resetStickyChanged(); }));
                };
                /**
                 * Get the list of RenderRow objects to render according to the current list of data and defined
                 * row definitions. If the previous list already contained a particular pair, it should be reused
                 * so that the differ equates their references.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._getAllRenderRows = function () {
                    /** @type {?} */
                    var renderRows = [];
                    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the
                    // new cache while unused ones can be picked up by garbage collection.
                    /** @type {?} */
                    var prevCachedRenderRows = this._cachedRenderRowsMap;
                    this._cachedRenderRowsMap = new Map();
                    // For each data object, get the list of rows that should be rendered, represented by the
                    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.
                    for (var i = 0; i < this._data.length; i++) {
                        /** @type {?} */
                        var data = this._data[i];
                        /** @type {?} */
                        var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));
                        if (!this._cachedRenderRowsMap.has(data)) {
                            this._cachedRenderRowsMap.set(data, new WeakMap());
                        }
                        for (var j = 0; j < renderRowsForData.length; j++) {
                            /** @type {?} */
                            var renderRow = renderRowsForData[j];
                            /** @type {?} */
                            var cache = ( /** @type {?} */(this._cachedRenderRowsMap.get(renderRow.data)));
                            if (cache.has(renderRow.rowDef)) {
                                ( /** @type {?} */(cache.get(renderRow.rowDef))).push(renderRow);
                            }
                            else {
                                cache.set(renderRow.rowDef, [renderRow]);
                            }
                            renderRows.push(renderRow);
                        }
                    }
                    return renderRows;
                };
                /**
                 * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that
                 * should be rendered for this data. Reuses the cached RenderRow objects if they match the same
                 * `(T, CdkRowDef)` pair.
                 * @private
                 * @param {?} data
                 * @param {?} dataIndex
                 * @param {?=} cache
                 * @return {?}
                 */
                CdkTable.prototype._getRenderRowsForData = function (data, dataIndex, cache) {
                    /** @type {?} */
                    var rowDefs = this._getRowDefs(data, dataIndex);
                    return rowDefs.map(( /**
                     * @param {?} rowDef
                     * @return {?}
                     */function (/**
                     * @param {?} rowDef
                     * @return {?}
                     */ rowDef) {
                        /** @type {?} */
                        var cachedRenderRows = (cache && cache.has(rowDef)) ? ( /** @type {?} */(cache.get(rowDef))) : [];
                        if (cachedRenderRows.length) {
                            /** @type {?} */
                            var dataRow = ( /** @type {?} */(cachedRenderRows.shift()));
                            dataRow.dataIndex = dataIndex;
                            return dataRow;
                        }
                        else {
                            return { data: data, rowDef: rowDef, dataIndex: dataIndex };
                        }
                    }));
                };
                /**
                 * Update the map containing the content's column definitions.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._cacheColumnDefs = function () {
                    var _this = this;
                    this._columnDefsByName.clear();
                    /** @type {?} */
                    var columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);
                    columnDefs.forEach(( /**
                     * @param {?} columnDef
                     * @return {?}
                     */function (/**
                     * @param {?} columnDef
                     * @return {?}
                     */ columnDef) {
                        if (_this._columnDefsByName.has(columnDef.name)) {
                            throw getTableDuplicateColumnNameError(columnDef.name);
                        }
                        _this._columnDefsByName.set(columnDef.name, columnDef);
                    }));
                };
                /**
                 * Update the list of all available row definitions that can be used.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._cacheRowDefs = function () {
                    this._headerRowDefs =
                        mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);
                    this._footerRowDefs =
                        mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);
                    this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);
                    // After all row definitions are determined, find the row definition to be considered default.
                    /** @type {?} */
                    var defaultRowDefs = this._rowDefs.filter(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return !def.when; }));
                    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {
                        throw getTableMultipleDefaultRowDefsError();
                    }
                    this._defaultRowDef = defaultRowDefs[0];
                };
                /**
                 * Check if the header, data, or footer rows have changed what columns they want to display or
                 * whether the sticky states have changed for the header or footer. If there is a diff, then
                 * re-render that section.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._renderUpdatedColumns = function () {
                    /** @type {?} */
                    var columnsDiffReducer = ( /**
                     * @param {?} acc
                     * @param {?} def
                     * @return {?}
                     */function (acc, def) { return acc || !!def.getColumnsDiff(); });
                    // Force re-render data rows if the list of column definitions have changed.
                    if (this._rowDefs.reduce(columnsDiffReducer, false)) {
                        this._forceRenderDataRows();
                    }
                    // Force re-render header/footer rows if the list of column definitions have changed..
                    if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {
                        this._forceRenderHeaderRows();
                    }
                    if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {
                        this._forceRenderFooterRows();
                    }
                };
                /**
                 * Switch to the provided data source by resetting the data and unsubscribing from the current
                 * render change subscription if one exists. If the data source is null, interpret this by
                 * clearing the row outlet. Otherwise start listening for new data.
                 * @private
                 * @param {?} dataSource
                 * @return {?}
                 */
                CdkTable.prototype._switchDataSource = function (dataSource) {
                    this._data = [];
                    if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__["isDataSource"])(this.dataSource)) {
                        this.dataSource.disconnect(this);
                    }
                    // Stop listening for data from the previous data source.
                    if (this._renderChangeSubscription) {
                        this._renderChangeSubscription.unsubscribe();
                        this._renderChangeSubscription = null;
                    }
                    if (!dataSource) {
                        if (this._dataDiffer) {
                            this._dataDiffer.diff([]);
                        }
                        this._rowOutlet.viewContainer.clear();
                    }
                    this._dataSource = dataSource;
                };
                /**
                 * Set up a subscription for the data provided by the data source.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._observeRenderChanges = function () {
                    var _this = this;
                    // If no data source has been set, there is nothing to observe for changes.
                    if (!this.dataSource) {
                        return;
                    }
                    /** @type {?} */
                    var dataStream;
                    if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__["isDataSource"])(this.dataSource)) {
                        dataStream = this.dataSource.connect(this);
                    }
                    else if (this.dataSource instanceof rxjs__WEBPACK_IMPORTED_MODULE_6__["Observable"]) {
                        dataStream = this.dataSource;
                    }
                    else if (Array.isArray(this.dataSource)) {
                        dataStream = Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])(this.dataSource);
                    }
                    if (dataStream === undefined) {
                        throw getTableUnknownDataSourceError();
                    }
                    this._renderChangeSubscription = dataStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._onDestroy)).subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (/**
                     * @param {?} data
                     * @return {?}
                     */ data) {
                        _this._data = data || [];
                        _this.renderRows();
                    }));
                };
                /**
                 * Clears any existing content in the header row outlet and creates a new embedded view
                 * in the outlet using the header row definition.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._forceRenderHeaderRows = function () {
                    var _this = this;
                    // Clear the header row outlet if any content exists.
                    if (this._headerRowOutlet.viewContainer.length > 0) {
                        this._headerRowOutlet.viewContainer.clear();
                    }
                    this._headerRowDefs.forEach(( /**
                     * @param {?} def
                     * @param {?} i
                     * @return {?}
                     */function (def, i) { return _this._renderRow(_this._headerRowOutlet, def, i); }));
                    this.updateStickyHeaderRowStyles();
                    this.updateStickyColumnStyles();
                };
                /**
                 * Clears any existing content in the footer row outlet and creates a new embedded view
                 * in the outlet using the footer row definition.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._forceRenderFooterRows = function () {
                    var _this = this;
                    // Clear the footer row outlet if any content exists.
                    if (this._footerRowOutlet.viewContainer.length > 0) {
                        this._footerRowOutlet.viewContainer.clear();
                    }
                    this._footerRowDefs.forEach(( /**
                     * @param {?} def
                     * @param {?} i
                     * @return {?}
                     */function (def, i) { return _this._renderRow(_this._footerRowOutlet, def, i); }));
                    this.updateStickyFooterRowStyles();
                    this.updateStickyColumnStyles();
                };
                /**
                 * Adds the sticky column styles for the rows according to the columns' stick states.
                 * @private
                 * @param {?} rows
                 * @param {?} rowDef
                 * @return {?}
                 */
                CdkTable.prototype._addStickyColumnStyles = function (rows, rowDef) {
                    var _this = this;
                    /** @type {?} */
                    var columnDefs = Array.from(rowDef.columns || []).map(( /**
                     * @param {?} columnName
                     * @return {?}
                     */function (/**
                     * @param {?} columnName
                     * @return {?}
                     */ columnName) {
                        /** @type {?} */
                        var columnDef = _this._columnDefsByName.get(columnName);
                        if (!columnDef) {
                            throw getTableUnknownColumnError(columnName);
                        }
                        return ( /** @type {?} */(columnDef));
                    }));
                    /** @type {?} */
                    var stickyStartStates = columnDefs.map(( /**
                     * @param {?} columnDef
                     * @return {?}
                     */function (/**
                     * @param {?} columnDef
                     * @return {?}
                     */ columnDef) { return columnDef.sticky; }));
                    /** @type {?} */
                    var stickyEndStates = columnDefs.map(( /**
                     * @param {?} columnDef
                     * @return {?}
                     */function (/**
                     * @param {?} columnDef
                     * @return {?}
                     */ columnDef) { return columnDef.stickyEnd; }));
                    this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);
                };
                /**
                 * Gets the list of rows that have been rendered in the row outlet.
                 * @param {?} rowOutlet
                 * @return {?}
                 */
                CdkTable.prototype._getRenderedRows = function (rowOutlet) {
                    /** @type {?} */
                    var renderedRows = [];
                    for (var i = 0; i < rowOutlet.viewContainer.length; i++) {
                        /** @type {?} */
                        var viewRef = (( /** @type {?} */(( /** @type {?} */(rowOutlet.viewContainer.get(i))))));
                        renderedRows.push(viewRef.rootNodes[0]);
                    }
                    return renderedRows;
                };
                /**
                 * Get the matching row definitions that should be used for this row data. If there is only
                 * one row definition, it is returned. Otherwise, find the row definitions that has a when
                 * predicate that returns true with the data. If none return true, return the default row
                 * definition.
                 * @param {?} data
                 * @param {?} dataIndex
                 * @return {?}
                 */
                CdkTable.prototype._getRowDefs = function (data, dataIndex) {
                    if (this._rowDefs.length == 1) {
                        return [this._rowDefs[0]];
                    }
                    /** @type {?} */
                    var rowDefs = [];
                    if (this.multiTemplateDataRows) {
                        rowDefs = this._rowDefs.filter(( /**
                         * @param {?} def
                         * @return {?}
                         */function (/**
                         * @param {?} def
                         * @return {?}
                         */ def) { return !def.when || def.when(dataIndex, data); }));
                    }
                    else {
                        /** @type {?} */
                        var rowDef = this._rowDefs.find(( /**
                         * @param {?} def
                         * @return {?}
                         */function (/**
                         * @param {?} def
                         * @return {?}
                         */ def) { return def.when && def.when(dataIndex, data); })) || this._defaultRowDef;
                        if (rowDef) {
                            rowDefs.push(rowDef);
                        }
                    }
                    if (!rowDefs.length) {
                        throw getTableMissingMatchingRowDefError(data);
                    }
                    return rowDefs;
                };
                /**
                 * Create the embedded view for the data row template and place it in the correct index location
                 * within the data row view container.
                 * @private
                 * @param {?} renderRow
                 * @param {?} renderIndex
                 * @return {?}
                 */
                CdkTable.prototype._insertRow = function (renderRow, renderIndex) {
                    /** @type {?} */
                    var rowDef = renderRow.rowDef;
                    /** @type {?} */
                    var context = { $implicit: renderRow.data };
                    this._renderRow(this._rowOutlet, rowDef, renderIndex, context);
                };
                /**
                 * Creates a new row template in the outlet and fills it with the set of cell templates.
                 * Optionally takes a context to provide to the row and cells, as well as an optional index
                 * of where to place the new row template in the outlet.
                 * @private
                 * @param {?} outlet
                 * @param {?} rowDef
                 * @param {?} index
                 * @param {?=} context
                 * @return {?}
                 */
                CdkTable.prototype._renderRow = function (outlet, rowDef, index, context) {
                    if (context === void 0) { context = {}; }
                    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView
                    outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);
                    for (var _b = 0, _c = this._getCellTemplates(rowDef); _b < _c.length; _b++) {
                        var cellTemplate = _c[_b];
                        if (CdkCellOutlet.mostRecentCellOutlet) {
                            CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);
                        }
                    }
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Updates the index-related context for each row to reflect any changes in the index of the rows,
                 * e.g. first/last/even/odd.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._updateRowIndexContext = function () {
                    /** @type {?} */
                    var viewContainer = this._rowOutlet.viewContainer;
                    for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {
                        /** @type {?} */
                        var viewRef = ( /** @type {?} */(viewContainer.get(renderIndex)));
                        /** @type {?} */
                        var context = ( /** @type {?} */(viewRef.context));
                        context.count = count;
                        context.first = renderIndex === 0;
                        context.last = renderIndex === count - 1;
                        context.even = renderIndex % 2 === 0;
                        context.odd = !context.even;
                        if (this.multiTemplateDataRows) {
                            context.dataIndex = this._renderRows[renderIndex].dataIndex;
                            context.renderIndex = renderIndex;
                        }
                        else {
                            context.index = this._renderRows[renderIndex].dataIndex;
                        }
                    }
                };
                /**
                 * Gets the column definitions for the provided row def.
                 * @private
                 * @param {?} rowDef
                 * @return {?}
                 */
                CdkTable.prototype._getCellTemplates = function (rowDef) {
                    var _this = this;
                    if (!rowDef || !rowDef.columns) {
                        return [];
                    }
                    return Array.from(rowDef.columns, ( /**
                     * @param {?} columnId
                     * @return {?}
                     */function (/**
                     * @param {?} columnId
                     * @return {?}
                     */ columnId) {
                        /** @type {?} */
                        var column = _this._columnDefsByName.get(columnId);
                        if (!column) {
                            throw getTableUnknownColumnError(columnId);
                        }
                        return rowDef.extractCellTemplate(column);
                    }));
                };
                /**
                 * Adds native table sections (e.g. tbody) and moves the row outlets into them.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._applyNativeTableSections = function () {
                    /** @type {?} */
                    var documentFragment = this._document.createDocumentFragment();
                    /** @type {?} */
                    var sections = [
                        { tag: 'thead', outlet: this._headerRowOutlet },
                        { tag: 'tbody', outlet: this._rowOutlet },
                        { tag: 'tfoot', outlet: this._footerRowOutlet },
                    ];
                    for (var _b = 0, sections_1 = sections; _b < sections_1.length; _b++) {
                        var section = sections_1[_b];
                        /** @type {?} */
                        var element = this._document.createElement(section.tag);
                        element.setAttribute('role', 'rowgroup');
                        element.appendChild(section.outlet.elementRef.nativeElement);
                        documentFragment.appendChild(element);
                    }
                    // Use a DocumentFragment so we don't hit the DOM on each iteration.
                    this._elementRef.nativeElement.appendChild(documentFragment);
                };
                /**
                 * Forces a re-render of the data rows. Should be called in cases where there has been an input
                 * change that affects the evaluation of which rows should be rendered, e.g. toggling
                 * `multiTemplateDataRows` or adding/removing row definitions.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._forceRenderDataRows = function () {
                    this._dataDiffer.diff([]);
                    this._rowOutlet.viewContainer.clear();
                    this.renderRows();
                    this.updateStickyColumnStyles();
                };
                /**
                 * Checks if there has been a change in sticky states since last check and applies the correct
                 * sticky styles. Since checking resets the "dirty" state, this should only be performed once
                 * during a change detection and after the inputs are settled (after content check).
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._checkStickyStates = function () {
                    /** @type {?} */
                    var stickyCheckReducer = ( /**
                     * @param {?} acc
                     * @param {?} d
                     * @return {?}
                     */function (acc, d) {
                        return acc || d.hasStickyChanged();
                    });
                    // Note that the check needs to occur for every definition since it notifies the definition
                    // that it can reset its dirty state. Using another operator like `some` may short-circuit
                    // remaining definitions and leave them in an unchecked state.
                    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {
                        this.updateStickyHeaderRowStyles();
                    }
                    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {
                        this.updateStickyFooterRowStyles();
                    }
                    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {
                        this.updateStickyColumnStyles();
                    }
                };
                /**
                 * Creates the sticky styler that will be used for sticky rows and columns. Listens
                 * for directionality changes and provides the latest direction to the styler. Re-applies column
                 * stickiness when directionality changes.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._setupStickyStyler = function () {
                    var _this = this;
                    /** @type {?} */
                    var direction = this._dir ? this._dir.value : 'ltr';
                    this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);
                    (this._dir ? this._dir.change : Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])())
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._onDestroy))
                        .subscribe(( /**
                 * @param {?} value
                 * @return {?}
                 */function (/**
                 * @param {?} value
                 * @return {?}
                 */ value) {
                        _this._stickyStyler.direction = value;
                        _this.updateStickyColumnStyles();
                    }));
                };
                return CdkTable;
            }());
            CdkTable.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'cdk-table, table[cdk-table]',
                            exportAs: 'cdkTable',
                            template: CDK_TABLE_TEMPLATE,
                            host: {
                                'class': 'cdk-table',
                            },
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            // The "OnPush" status for the `MatTable` component is effectively a noop, so we are removing it.
                            // The view for `MatTable` consists entirely of templates declared in other views. As they are
                            // declared elsewhere, they are checked when their declaration points are checked.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                        },] },
            ];
            /** @nocollapse */
            CdkTable.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"], args: ['role',] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"],] }] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"] }
            ]; };
            CdkTable.propDecorators = {
                trackBy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                dataSource: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                multiTemplateDataRows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                _rowOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [DataRowOutlet, { static: true },] }],
                _headerRowOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [HeaderRowOutlet, { static: true },] }],
                _footerRowOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [FooterRowOutlet, { static: true },] }],
                _contentColumnDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [CdkColumnDef,] }],
                _contentRowDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [CdkRowDef,] }],
                _contentHeaderRowDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [CdkHeaderRowDef,] }],
                _contentFooterRowDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [CdkFooterRowDef,] }]
            };
            /**
             * Utility function that gets a merged list of the entries in a QueryList and values of a Set.
             * @template T
             * @param {?} queryList
             * @param {?} set
             * @return {?}
             */
            function mergeQueryListAndSet(queryList, set) {
                return queryList.toArray().concat(Array.from(set));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used to specify the text column options.
             * @type {?}
             */
            var TEXT_COLUMN_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('text-column-options');
            /**
             * Column that simply shows text content for the header and row cells. Assumes that the table
             * is using the native table implementation (`<table>`).
             *
             * By default, the name of this column will be the header text and data property accessor.
             * The header text can be overridden with the `headerText` input. Cell values can be overridden with
             * the `dataAccessor` input. Change the text justification to the start or end using the `justify`
             * input.
             * @template T
             */
            var CdkTextColumn = /** @class */ (function () {
                /**
                 * @param {?} _table
                 * @param {?} _options
                 */
                function CdkTextColumn(_table, _options) {
                    this._table = _table;
                    this._options = _options;
                    /**
                     * Alignment of the cell values.
                     */
                    this.justify = 'start';
                    this._options = _options || {};
                }
                Object.defineProperty(CdkTextColumn.prototype, "name", {
                    /**
                     * Column name that should be used to reference this column.
                     * @return {?}
                     */
                    get: function () {
                        return this._name;
                    },
                    /**
                     * @param {?} name
                     * @return {?}
                     */
                    set: function (name) {
                        this._name = name;
                        // With Ivy, inputs can be initialized before static query results are
                        // available. In that case, we defer the synchronization until "ngOnInit" fires.
                        this._syncColumnDefName();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkTextColumn.prototype.ngOnInit = function () {
                    this._syncColumnDefName();
                    if (this.headerText === undefined) {
                        this.headerText = this._createDefaultHeaderText();
                    }
                    if (!this.dataAccessor) {
                        this.dataAccessor =
                            this._options.defaultDataAccessor || (( /**
                             * @param {?} data
                             * @param {?} name
                             * @return {?}
                             */function (data, name) { return (( /** @type {?} */(data)))[name]; }));
                    }
                    if (this._table) {
                        // Provide the cell and headerCell directly to the table with the static `ViewChild` query,
                        // since the columnDef will not pick up its content by the time the table finishes checking
                        // its content and initializing the rows.
                        this.columnDef.cell = this.cell;
                        this.columnDef.headerCell = this.headerCell;
                        this._table.addColumnDef(this.columnDef);
                    }
                    else {
                        throw getTableTextColumnMissingParentTableError();
                    }
                };
                /**
                 * @return {?}
                 */
                CdkTextColumn.prototype.ngOnDestroy = function () {
                    if (this._table) {
                        this._table.removeColumnDef(this.columnDef);
                    }
                };
                /**
                 * Creates a default header text. Use the options' header text transformation function if one
                 * has been provided. Otherwise simply capitalize the column name.
                 * @return {?}
                 */
                CdkTextColumn.prototype._createDefaultHeaderText = function () {
                    /** @type {?} */
                    var name = this.name;
                    if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && !name) {
                        throw getTableTextColumnMissingNameError();
                    }
                    if (this._options && this._options.defaultHeaderTextTransform) {
                        return this._options.defaultHeaderTextTransform(name);
                    }
                    return name[0].toUpperCase() + name.slice(1);
                };
                /**
                 * Synchronizes the column definition name with the text column name.
                 * @private
                 * @return {?}
                 */
                CdkTextColumn.prototype._syncColumnDefName = function () {
                    if (this.columnDef) {
                        this.columnDef.name = this.name;
                    }
                };
                return CdkTextColumn;
            }());
            CdkTextColumn.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'cdk-text-column',
                            template: "\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  ",
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            // Change detection is intentionally not set to OnPush. This component's template will be provided
                            // to the table to be inserted into its view. This is problematic when change detection runs since
                            // the bindings in this template will be evaluated _after_ the table's view is evaluated, which
                            // mean's the template in the table's view will not have the updated value (and in fact will cause
                            // an ExpressionChangedAfterItHasBeenCheckedError).
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                        },] },
            ];
            /** @nocollapse */
            CdkTextColumn.ctorParameters = function () { return [
                { type: CdkTable, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [TEXT_COLUMN_OPTIONS,] }] }
            ]; };
            CdkTextColumn.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                headerText: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                dataAccessor: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                justify: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                columnDef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [CdkColumnDef, { static: true },] }],
                cell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [CdkCellDef, { static: true },] }],
                headerCell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [CdkHeaderCellDef, { static: true },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var EXPORTED_DECLARATIONS = [
                CdkTable,
                CdkRowDef,
                CdkCellDef,
                CdkCellOutlet,
                CdkHeaderCellDef,
                CdkFooterCellDef,
                CdkColumnDef,
                CdkCell,
                CdkRow,
                CdkHeaderCell,
                CdkFooterCell,
                CdkHeaderRow,
                CdkHeaderRowDef,
                CdkFooterRow,
                CdkFooterRowDef,
                DataRowOutlet,
                HeaderRowOutlet,
                FooterRowOutlet,
                CdkTextColumn,
            ];
            var CdkTableModule = /** @class */ (function () {
                function CdkTableModule() {
                }
                return CdkTableModule;
            }());
            CdkTableModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]],
                            exports: EXPORTED_DECLARATIONS,
                            declarations: EXPORTED_DECLARATIONS
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=table.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/text-field.js": 
        /*!*********************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/text-field.js ***!
          \*********************************************************/
        /*! exports provided: AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AutofillMonitor", function () { return AutofillMonitor; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkAutofill", function () { return CdkAutofill; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTextareaAutosize", function () { return CdkTextareaAutosize; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextFieldModule", function () { return TextFieldModule; });
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Options to pass to the animationstart listener.
             * @type {?}
             */
            var listenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["normalizePassiveListenerOptions"])({ passive: true });
            /**
             * An injectable service that can be used to monitor the autofill state of an input.
             * Based on the following blog post:
             * https://medium.com/\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7
             */
            var AutofillMonitor = /** @class */ (function () {
                /**
                 * @param {?} _platform
                 * @param {?} _ngZone
                 */
                function AutofillMonitor(_platform, _ngZone) {
                    this._platform = _platform;
                    this._ngZone = _ngZone;
                    this._monitoredElements = new Map();
                }
                /**
                 * @param {?} elementOrRef
                 * @return {?}
                 */
                AutofillMonitor.prototype.monitor = function (elementOrRef) {
                    var _this = this;
                    if (!this._platform.isBrowser) {
                        return rxjs__WEBPACK_IMPORTED_MODULE_3__["EMPTY"];
                    }
                    /** @type {?} */
                    var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceElement"])(elementOrRef);
                    /** @type {?} */
                    var info = this._monitoredElements.get(element);
                    if (info) {
                        return info.subject.asObservable();
                    }
                    /** @type {?} */
                    var result = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
                    /** @type {?} */
                    var cssClass = 'cdk-text-field-autofilled';
                    /** @type {?} */
                    var listener = ( /** @type {?} */((( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        // Animation events fire on initial element render, we check for the presence of the autofill
                        // CSS class to make sure this is a real change in state, not just the initial render before
                        // we fire off events.
                        if (event.animationName === 'cdk-text-field-autofill-start' &&
                            !element.classList.contains(cssClass)) {
                            element.classList.add(cssClass);
                            _this._ngZone.run(( /**
                             * @return {?}
                             */function () { return result.next({ target: ( /** @type {?} */(event.target)), isAutofilled: true }); }));
                        }
                        else if (event.animationName === 'cdk-text-field-autofill-end' &&
                            element.classList.contains(cssClass)) {
                            element.classList.remove(cssClass);
                            _this._ngZone.run(( /**
                             * @return {?}
                             */function () { return result.next({ target: ( /** @type {?} */(event.target)), isAutofilled: false }); }));
                        }
                    }))));
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        element.addEventListener('animationstart', listener, listenerOptions);
                        element.classList.add('cdk-text-field-autofill-monitored');
                    }));
                    this._monitoredElements.set(element, {
                        subject: result,
                        unlisten: ( /**
                         * @return {?}
                         */function () {
                            element.removeEventListener('animationstart', listener, listenerOptions);
                        })
                    });
                    return result.asObservable();
                };
                /**
                 * @param {?} elementOrRef
                 * @return {?}
                 */
                AutofillMonitor.prototype.stopMonitoring = function (elementOrRef) {
                    /** @type {?} */
                    var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceElement"])(elementOrRef);
                    /** @type {?} */
                    var info = this._monitoredElements.get(element);
                    if (info) {
                        info.unlisten();
                        info.subject.complete();
                        element.classList.remove('cdk-text-field-autofill-monitored');
                        element.classList.remove('cdk-text-field-autofilled');
                        this._monitoredElements.delete(element);
                    }
                };
                /**
                 * @return {?}
                 */
                AutofillMonitor.prototype.ngOnDestroy = function () {
                    var _this = this;
                    this._monitoredElements.forEach(( /**
                     * @param {?} _info
                     * @param {?} element
                     * @return {?}
                     */function (_info, element) { return _this.stopMonitoring(element); }));
                };
                return AutofillMonitor;
            }());
            AutofillMonitor.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            AutofillMonitor.ctorParameters = function () { return [
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["Platform"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] }
            ]; };
            /** @nocollapse */ AutofillMonitor.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["Platform"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"])); }, token: AutofillMonitor, providedIn: "root" });
            /**
             * A directive that can be used to monitor the autofill state of an input.
             */
            var CdkAutofill = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _autofillMonitor
                 */
                function CdkAutofill(_elementRef, _autofillMonitor) {
                    this._elementRef = _elementRef;
                    this._autofillMonitor = _autofillMonitor;
                    /**
                     * Emits when the autofill state of the element changes.
                     */
                    this.cdkAutofill = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                }
                /**
                 * @return {?}
                 */
                CdkAutofill.prototype.ngOnInit = function () {
                    var _this = this;
                    this._autofillMonitor
                        .monitor(this._elementRef)
                        .subscribe(( /**
                 * @param {?} event
                 * @return {?}
                 */function (/**
                 * @param {?} event
                 * @return {?}
                 */ event) { return _this.cdkAutofill.emit(event); }));
                };
                /**
                 * @return {?}
                 */
                CdkAutofill.prototype.ngOnDestroy = function () {
                    this._autofillMonitor.stopMonitoring(this._elementRef);
                };
                return CdkAutofill;
            }());
            CdkAutofill.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkAutofill]',
                        },] },
            ];
            /** @nocollapse */
            CdkAutofill.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: AutofillMonitor }
            ]; };
            CdkAutofill.propDecorators = {
                cdkAutofill: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Directive to automatically resize a textarea to fit its content.
             */
            var CdkTextareaAutosize = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _platform
                 * @param {?} _ngZone
                 */
                function CdkTextareaAutosize(_elementRef, _platform, _ngZone) {
                    this._elementRef = _elementRef;
                    this._platform = _platform;
                    this._ngZone = _ngZone;
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
                    this._enabled = true;
                    /**
                     * Value of minRows as of last resize. If the minRows has decreased, the
                     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight
                     * does not have the same problem because it does not affect the textarea's scrollHeight.
                     */
                    this._previousMinRows = -1;
                    this._textareaElement = ( /** @type {?} */(this._elementRef.nativeElement));
                }
                Object.defineProperty(CdkTextareaAutosize.prototype, "minRows", {
                    /**
                     * Minimum amount of rows in the textarea.
                     * @return {?}
                     */
                    get: function () { return this._minRows; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._minRows = value;
                        this._setMinHeight();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTextareaAutosize.prototype, "maxRows", {
                    /**
                     * Maximum amount of rows in the textarea.
                     * @return {?}
                     */
                    get: function () { return this._maxRows; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._maxRows = value;
                        this._setMaxHeight();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTextareaAutosize.prototype, "enabled", {
                    /**
                     * Whether autosizing is enabled or not
                     * @return {?}
                     */
                    get: function () { return this._enabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                        // Only act if the actual value changed. This specifically helps to not run
                        // resizeToFitContent too early (i.e. before ngAfterViewInit)
                        if (this._enabled !== value) {
                            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Sets the minimum height of the textarea as determined by minRows.
                 * @return {?}
                 */
                CdkTextareaAutosize.prototype._setMinHeight = function () {
                    /** @type {?} */
                    var minHeight = this.minRows && this._cachedLineHeight ?
                        this.minRows * this._cachedLineHeight + "px" : null;
                    if (minHeight) {
                        this._textareaElement.style.minHeight = minHeight;
                    }
                };
                /**
                 * Sets the maximum height of the textarea as determined by maxRows.
                 * @return {?}
                 */
                CdkTextareaAutosize.prototype._setMaxHeight = function () {
                    /** @type {?} */
                    var maxHeight = this.maxRows && this._cachedLineHeight ?
                        this.maxRows * this._cachedLineHeight + "px" : null;
                    if (maxHeight) {
                        this._textareaElement.style.maxHeight = maxHeight;
                    }
                };
                /**
                 * @return {?}
                 */
                CdkTextareaAutosize.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    if (this._platform.isBrowser) {
                        // Remember the height which we started with in case autosizing is disabled
                        this._initialHeight = this._textareaElement.style.height;
                        this.resizeToFitContent();
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () {
                            Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["fromEvent"])(window, 'resize')
                                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["auditTime"])(16), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(_this._destroyed))
                                .subscribe(( /**
                         * @return {?}
                         */function () { return _this.resizeToFitContent(true); }));
                        }));
                    }
                };
                /**
                 * @return {?}
                 */
                CdkTextareaAutosize.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * Cache the height of a single-row textarea if it has not already been cached.
                 *
                 * We need to know how large a single "row" of a textarea is in order to apply minRows and
                 * maxRows. For the initial version, we will assume that the height of a single line in the
                 * textarea does not ever change.
                 * @private
                 * @return {?}
                 */
                CdkTextareaAutosize.prototype._cacheTextareaLineHeight = function () {
                    if (this._cachedLineHeight) {
                        return;
                    }
                    // Use a clone element because we have to override some styles.
                    /** @type {?} */
                    var textareaClone = ( /** @type {?} */(this._textareaElement.cloneNode(false)));
                    textareaClone.rows = 1;
                    // Use `position: absolute` so that this doesn't cause a browser layout and use
                    // `visibility: hidden` so that nothing is rendered. Clear any other styles that
                    // would affect the height.
                    textareaClone.style.position = 'absolute';
                    textareaClone.style.visibility = 'hidden';
                    textareaClone.style.border = 'none';
                    textareaClone.style.padding = '0';
                    textareaClone.style.height = '';
                    textareaClone.style.minHeight = '';
                    textareaClone.style.maxHeight = '';
                    // In Firefox it happens that textarea elements are always bigger than the specified amount
                    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.
                    // As a workaround that removes the extra space for the scrollbar, we can just set overflow
                    // to hidden. This ensures that there is no invalid calculation of the line height.
                    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654
                    textareaClone.style.overflow = 'hidden';
                    ( /** @type {?} */(this._textareaElement.parentNode)).appendChild(textareaClone);
                    this._cachedLineHeight = textareaClone.clientHeight;
                    ( /** @type {?} */(this._textareaElement.parentNode)).removeChild(textareaClone);
                    // Min and max heights have to be re-calculated if the cached line height changes
                    this._setMinHeight();
                    this._setMaxHeight();
                };
                /**
                 * @return {?}
                 */
                CdkTextareaAutosize.prototype.ngDoCheck = function () {
                    if (this._platform.isBrowser) {
                        this.resizeToFitContent();
                    }
                };
                /**
                 * Resize the textarea to fit its content.
                 * @param {?=} force Whether to force a height recalculation. By default the height will be
                 *    recalculated only if the value changed since the last call.
                 * @return {?}
                 */
                CdkTextareaAutosize.prototype.resizeToFitContent = function (force) {
                    var _this = this;
                    if (force === void 0) { force = false; }
                    // If autosizing is disabled, just skip everything else
                    if (!this._enabled) {
                        return;
                    }
                    this._cacheTextareaLineHeight();
                    // If we haven't determined the line-height yet, we know we're still hidden and there's no point
                    // in checking the height of the textarea.
                    if (!this._cachedLineHeight) {
                        return;
                    }
                    /** @type {?} */
                    var textarea = ( /** @type {?} */(this._elementRef.nativeElement));
                    /** @type {?} */
                    var value = textarea.value;
                    // Only resize if the value or minRows have changed since these calculations can be expensive.
                    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {
                        return;
                    }
                    /** @type {?} */
                    var placeholderText = textarea.placeholder;
                    // Reset the textarea height to auto in order to shrink back to its default size.
                    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.
                    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight
                    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders
                    // need to be removed temporarily.
                    textarea.classList.add('cdk-textarea-autosize-measuring');
                    textarea.placeholder = '';
                    // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with
                    // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).
                    /** @type {?} */
                    var height = textarea.scrollHeight - 4;
                    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.
                    textarea.style.height = height + "px";
                    textarea.classList.remove('cdk-textarea-autosize-measuring');
                    textarea.placeholder = placeholderText;
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        if (typeof requestAnimationFrame !== 'undefined') {
                            requestAnimationFrame(( /**
                             * @return {?}
                             */function () { return _this._scrollToCaretPosition(textarea); }));
                        }
                        else {
                            setTimeout(( /**
                             * @return {?}
                             */function () { return _this._scrollToCaretPosition(textarea); }));
                        }
                    }));
                    this._previousValue = value;
                    this._previousMinRows = this._minRows;
                };
                /**
                 * Resets the textarea to its original size
                 * @return {?}
                 */
                CdkTextareaAutosize.prototype.reset = function () {
                    // Do not try to change the textarea, if the initialHeight has not been determined yet
                    // This might potentially remove styles when reset() is called before ngAfterViewInit
                    if (this._initialHeight === undefined) {
                        return;
                    }
                    this._textareaElement.style.height = this._initialHeight;
                };
                /**
                 * @return {?}
                 */
                CdkTextareaAutosize.prototype._noopInputHandler = function () {
                    // no-op handler that ensures we're running change detection on input events.
                };
                /**
                 * Scrolls a textarea to the caret position. On Firefox resizing the textarea will
                 * prevent it from scrolling to the caret position. We need to re-set the selection
                 * in order for it to scroll to the proper position.
                 * @private
                 * @param {?} textarea
                 * @return {?}
                 */
                CdkTextareaAutosize.prototype._scrollToCaretPosition = function (textarea) {
                    var selectionStart = textarea.selectionStart, selectionEnd = textarea.selectionEnd;
                    // IE will throw an "Unspecified error" if we try to set the selection range after the
                    // element has been removed from the DOM. Assert that the directive hasn't been destroyed
                    // between the time we requested the animation frame and when it was executed.
                    // Also note that we have to assert that the textarea is focused before we set the
                    // selection range. Setting the selection range on a non-focused textarea will cause
                    // it to receive focus on IE and Edge.
                    if (!this._destroyed.isStopped && document.activeElement === textarea) {
                        textarea.setSelectionRange(selectionStart, selectionEnd);
                    }
                };
                return CdkTextareaAutosize;
            }());
            CdkTextareaAutosize.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'textarea[cdkTextareaAutosize]',
                            exportAs: 'cdkTextareaAutosize',
                            host: {
                                'class': 'cdk-textarea-autosize',
                                // Textarea elements that have the directive applied should have a single row by default.
                                // Browsers normally show two rows by default and therefore this limits the minRows binding.
                                'rows': '1',
                                '(input)': '_noopInputHandler()',
                            },
                        },] },
            ];
            /** @nocollapse */
            CdkTextareaAutosize.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["Platform"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] }
            ]; };
            CdkTextareaAutosize.propDecorators = {
                minRows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkAutosizeMinRows',] }],
                maxRows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkAutosizeMaxRows',] }],
                enabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkTextareaAutosize',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var TextFieldModule = /** @class */ (function () {
                function TextFieldModule() {
                }
                return TextFieldModule;
            }());
            TextFieldModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            declarations: [CdkAutofill, CdkTextareaAutosize],
                            imports: [_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["PlatformModule"]],
                            exports: [CdkAutofill, CdkTextareaAutosize],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=text-field.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/tree.js": 
        /*!***************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/tree.js ***!
          \***************************************************/
        /*! exports provided: BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet, CdkTree, CdkTreeNode, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseTreeControl", function () { return BaseTreeControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatTreeControl", function () { return FlatTreeControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NestedTreeControl", function () { return NestedTreeControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkNestedTreeNode", function () { return CdkNestedTreeNode; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodeOutletContext", function () { return CdkTreeNodeOutletContext; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodeDef", function () { return CdkTreeNodeDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodePadding", function () { return CdkTreeNodePadding; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_TREE_NODE_OUTLET_NODE", function () { return CDK_TREE_NODE_OUTLET_NODE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodeOutlet", function () { return CdkTreeNodeOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTree", function () { return CdkTree; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNode", function () { return CdkTreeNode; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeNoValidDataSourceError", function () { return getTreeNoValidDataSourceError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeMultipleDefaultNodeDefsError", function () { return getTreeMultipleDefaultNodeDefsError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeMissingMatchingNodeDefError", function () { return getTreeMissingMatchingNodeDefError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeControlMissingError", function () { return getTreeControlMissingError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeControlFunctionsMissingError", function () { return getTreeControlFunctionsMissingError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeModule", function () { return CdkTreeModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodeToggle", function () { return CdkTreeNodeToggle; });
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Base tree control. It has basic toggle/expand/collapse operations on a single data node.
             * @abstract
             * @template T
             */
            var BaseTreeControl = /** @class */ (function () {
                function BaseTreeControl() {
                    /**
                     * A selection model with multi-selection to track expansion status.
                     */
                    this.expansionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__["SelectionModel"](true);
                }
                /**
                 * Toggles one single data node's expanded/collapsed state.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.toggle = function (dataNode) {
                    this.expansionModel.toggle(dataNode);
                };
                /**
                 * Expands one single data node.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.expand = function (dataNode) {
                    this.expansionModel.select(dataNode);
                };
                /**
                 * Collapses one single data node.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.collapse = function (dataNode) {
                    this.expansionModel.deselect(dataNode);
                };
                /**
                 * Whether a given data node is expanded or not. Returns true if the data node is expanded.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.isExpanded = function (dataNode) {
                    return this.expansionModel.isSelected(dataNode);
                };
                /**
                 * Toggles a subtree rooted at `node` recursively.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.toggleDescendants = function (dataNode) {
                    this.expansionModel.isSelected(dataNode)
                        ? this.collapseDescendants(dataNode)
                        : this.expandDescendants(dataNode);
                };
                /**
                 * Collapse all dataNodes in the tree.
                 * @return {?}
                 */
                BaseTreeControl.prototype.collapseAll = function () {
                    this.expansionModel.clear();
                };
                /**
                 * Expands a subtree rooted at given data node recursively.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.expandDescendants = function (dataNode) {
                    var _b;
                    /** @type {?} */
                    var toBeProcessed = [dataNode];
                    toBeProcessed.push.apply(toBeProcessed, this.getDescendants(dataNode));
                    (_b = this.expansionModel).select.apply(_b, toBeProcessed);
                };
                /**
                 * Collapses a subtree rooted at given data node recursively.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.collapseDescendants = function (dataNode) {
                    var _b;
                    /** @type {?} */
                    var toBeProcessed = [dataNode];
                    toBeProcessed.push.apply(toBeProcessed, this.getDescendants(dataNode));
                    (_b = this.expansionModel).deselect.apply(_b, toBeProcessed);
                };
                return BaseTreeControl;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.
             * @template T
             */
            var FlatTreeControl = /** @class */ (function (_super) {
                __extends(FlatTreeControl, _super);
                /**
                 * Construct with flat tree data node functions getLevel and isExpandable.
                 * @param {?} getLevel
                 * @param {?} isExpandable
                 */
                function FlatTreeControl(getLevel, isExpandable) {
                    var _this = _super.call(this) || this;
                    _this.getLevel = getLevel;
                    _this.isExpandable = isExpandable;
                    return _this;
                }
                /**
                 * Gets a list of the data node's subtree of descendent data nodes.
                 *
                 * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes
                 * with correct levels.
                 * @param {?} dataNode
                 * @return {?}
                 */
                FlatTreeControl.prototype.getDescendants = function (dataNode) {
                    /** @type {?} */
                    var startIndex = this.dataNodes.indexOf(dataNode);
                    /** @type {?} */
                    var results = [];
                    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.
                    // The level of descendants of a tree node must be greater than the level of the given
                    // tree node.
                    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.
                    // If we reach a node whose level is greater than the level of the tree node, we hit a
                    // sibling of an ancestor.
                    for (var i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {
                        results.push(this.dataNodes[i]);
                    }
                    return results;
                };
                /**
                 * Expands all data nodes in the tree.
                 *
                 * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened
                 * data nodes of the tree.
                 * @return {?}
                 */
                FlatTreeControl.prototype.expandAll = function () {
                    var _b;
                    (_b = this.expansionModel).select.apply(_b, this.dataNodes);
                };
                return FlatTreeControl;
            }(BaseTreeControl));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.
             * @template T
             */
            var NestedTreeControl = /** @class */ (function (_super) {
                __extends(NestedTreeControl, _super);
                /**
                 * Construct with nested tree function getChildren.
                 * @param {?} getChildren
                 */
                function NestedTreeControl(getChildren) {
                    var _this = _super.call(this) || this;
                    _this.getChildren = getChildren;
                    return _this;
                }
                /**
                 * Expands all dataNodes in the tree.
                 *
                 * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level
                 * data nodes of the tree.
                 * @return {?}
                 */
                NestedTreeControl.prototype.expandAll = function () {
                    var _b;
                    var _this = this;
                    this.expansionModel.clear();
                    /** @type {?} */
                    var allNodes = this.dataNodes.reduce(( /**
                     * @param {?} accumulator
                     * @param {?} dataNode
                     * @return {?}
                     */function (accumulator, dataNode) { return accumulator.concat(_this.getDescendants(dataNode), [dataNode]); }), []);
                    (_b = this.expansionModel).select.apply(_b, allNodes);
                };
                /**
                 * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.
                 * @param {?} dataNode
                 * @return {?}
                 */
                NestedTreeControl.prototype.getDescendants = function (dataNode) {
                    /** @type {?} */
                    var descendants = [];
                    this._getDescendants(descendants, dataNode);
                    // Remove the node itself
                    return descendants.splice(1);
                };
                /**
                 * A helper function to get descendants recursively.
                 * @protected
                 * @param {?} descendants
                 * @param {?} dataNode
                 * @return {?}
                 */
                NestedTreeControl.prototype._getDescendants = function (descendants, dataNode) {
                    var _this = this;
                    descendants.push(dataNode);
                    /** @type {?} */
                    var childrenNodes = this.getChildren(dataNode);
                    if (Array.isArray(childrenNodes)) {
                        childrenNodes.forEach(( /**
                         * @param {?} child
                         * @return {?}
                         */function (child) { return _this._getDescendants(descendants, child); }));
                    }
                    else if (childrenNodes instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
                        // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that
                        // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.
                        childrenNodes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["filter"])(( /** @type {?} */(Boolean))))
                            .subscribe(( /**
                     * @param {?} children
                     * @return {?}
                     */function (/**
                     * @param {?} children
                     * @return {?}
                     */ children) {
                            for (var _b = 0, children_1 = children; _b < children_1.length; _b++) {
                                var child = children_1[_b];
                                _this._getDescendants(descendants, child);
                            }
                        }));
                    }
                };
                return NestedTreeControl;
            }(BaseTreeControl));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token used to provide a `CdkTreeNode` to its outlet.
             * Used primarily to avoid circular imports.
             * \@docs-private
             * @type {?}
             */
            var CDK_TREE_NODE_OUTLET_NODE = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('CDK_TREE_NODE_OUTLET_NODE');
            /**
             * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes
             * inside the outlet.
             */
            var CdkTreeNodeOutlet = /** @class */ (function () {
                /**
                 * @param {?} viewContainer
                 * @param {?=} _node
                 */
                function CdkTreeNodeOutlet(viewContainer, _node) {
                    this.viewContainer = viewContainer;
                    this._node = _node;
                }
                return CdkTreeNodeOutlet;
            }());
            CdkTreeNodeOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[cdkTreeNodeOutlet]'
                        },] },
            ];
            /** @nocollapse */
            CdkTreeNodeOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Context provided to the tree node component.
             * @template T
             */
            var CdkTreeNodeOutletContext = /** @class */ (function () {
                /**
                 * @param {?} data
                 */
                function CdkTreeNodeOutletContext(data) {
                    this.$implicit = data;
                }
                return CdkTreeNodeOutletContext;
            }());
            /**
             * Data node definition for the CdkTree.
             * Captures the node's template and a when predicate that describes when this node should be used.
             * @template T
             */
            var CdkTreeNodeDef = /** @class */ (function () {
                /**
                 * \@docs-private
                 * @param {?} template
                 */
                function CdkTreeNodeDef(template) {
                    this.template = template;
                }
                return CdkTreeNodeDef;
            }());
            CdkTreeNodeDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[cdkTreeNodeDef]',
                            inputs: [
                                'when: cdkTreeNodeDefWhen'
                            ],
                        },] },
            ];
            /** @nocollapse */
            CdkTreeNodeDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Returns an error to be thrown when there is no usable data.
             * \@docs-private
             * @return {?}
             */
            function getTreeNoValidDataSourceError() {
                return Error("A valid data source must be provided.");
            }
            /**
             * Returns an error to be thrown when there are multiple nodes that are missing a when function.
             * \@docs-private
             * @return {?}
             */
            function getTreeMultipleDefaultNodeDefsError() {
                return Error("There can only be one default row without a when predicate function.");
            }
            /**
             * Returns an error to be thrown when there are no matching node defs for a particular set of data.
             * \@docs-private
             * @return {?}
             */
            function getTreeMissingMatchingNodeDefError() {
                return Error("Could not find a matching node definition for the provided node data.");
            }
            /**
             * Returns an error to be thrown when there are tree control.
             * \@docs-private
             * @return {?}
             */
            function getTreeControlMissingError() {
                return Error("Could not find a tree control for the tree.");
            }
            /**
             * Returns an error to be thrown when tree control did not implement functions for flat/nested node.
             * \@docs-private
             * @return {?}
             */
            function getTreeControlFunctionsMissingError() {
                return Error("Could not find functions for nested/flat tree in tree control.");
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * CDK tree component that connects with a data source to retrieve data of type `T` and renders
             * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.
             * @template T
             */
            var CdkTree = /** @class */ (function () {
                /**
                 * @param {?} _differs
                 * @param {?} _changeDetectorRef
                 */
                function CdkTree(_differs, _changeDetectorRef) {
                    this._differs = _differs;
                    this._changeDetectorRef = _changeDetectorRef;
                    /**
                     * Subject that emits when the component has been destroyed.
                     */
                    this._onDestroy = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    /**
                     * Level of nodes
                     */
                    this._levels = new Map();
                    // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.
                    //     Remove the MAX_VALUE in viewChange
                    /**
                     * Stream containing the latest information on what rows are being displayed on screen.
                     * Can be used by the data source to as a heuristic of what data should be provided.
                     */
                    this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"]({ start: 0, end: Number.MAX_VALUE });
                }
                Object.defineProperty(CdkTree.prototype, "dataSource", {
                    /**
                     * Provides a stream containing the latest data array to render. Influenced by the tree's
                     * stream of view window (what dataNodes are currently on screen).
                     * Data source can be an observable of data array, or a data array to render.
                     * @return {?}
                     */
                    get: function () { return this._dataSource; },
                    /**
                     * @param {?} dataSource
                     * @return {?}
                     */
                    set: function (dataSource) {
                        if (this._dataSource !== dataSource) {
                            this._switchDataSource(dataSource);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkTree.prototype.ngOnInit = function () {
                    this._dataDiffer = this._differs.find([]).create(this.trackBy);
                    if (!this.treeControl) {
                        throw getTreeControlMissingError();
                    }
                };
                /**
                 * @return {?}
                 */
                CdkTree.prototype.ngOnDestroy = function () {
                    this._nodeOutlet.viewContainer.clear();
                    this._onDestroy.next();
                    this._onDestroy.complete();
                    if (this._dataSource && typeof (( /** @type {?} */(this._dataSource))).disconnect === 'function') {
                        (( /** @type {?} */(this.dataSource))).disconnect(this);
                    }
                    if (this._dataSubscription) {
                        this._dataSubscription.unsubscribe();
                        this._dataSubscription = null;
                    }
                };
                /**
                 * @return {?}
                 */
                CdkTree.prototype.ngAfterContentChecked = function () {
                    /** @type {?} */
                    var defaultNodeDefs = this._nodeDefs.filter(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return !def.when; }));
                    if (defaultNodeDefs.length > 1) {
                        throw getTreeMultipleDefaultNodeDefsError();
                    }
                    this._defaultNodeDef = defaultNodeDefs[0];
                    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {
                        this._observeRenderChanges();
                    }
                };
                // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL
                //     and nested trees.
                /**
                 * Switch to the provided data source by resetting the data and unsubscribing from the current
                 * render change subscription if one exists. If the data source is null, interpret this by
                 * clearing the node outlet. Otherwise start listening for new data.
                 * @private
                 * @param {?} dataSource
                 * @return {?}
                 */
                CdkTree.prototype._switchDataSource = function (dataSource) {
                    if (this._dataSource && typeof (( /** @type {?} */(this._dataSource))).disconnect === 'function') {
                        (( /** @type {?} */(this.dataSource))).disconnect(this);
                    }
                    if (this._dataSubscription) {
                        this._dataSubscription.unsubscribe();
                        this._dataSubscription = null;
                    }
                    // Remove the all dataNodes if there is now no data source
                    if (!dataSource) {
                        this._nodeOutlet.viewContainer.clear();
                    }
                    this._dataSource = dataSource;
                    if (this._nodeDefs) {
                        this._observeRenderChanges();
                    }
                };
                /**
                 * Set up a subscription for the data provided by the data source.
                 * @private
                 * @return {?}
                 */
                CdkTree.prototype._observeRenderChanges = function () {
                    var _this = this;
                    /** @type {?} */
                    var dataStream;
                    if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__["isDataSource"])(this._dataSource)) {
                        dataStream = this._dataSource.connect(this);
                    }
                    else if (this._dataSource instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
                        dataStream = this._dataSource;
                    }
                    else if (Array.isArray(this._dataSource)) {
                        dataStream = Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(this._dataSource);
                    }
                    if (dataStream) {
                        this._dataSubscription = dataStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._onDestroy))
                            .subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (/**
                     * @param {?} data
                     * @return {?}
                     */ data) { return _this.renderNodeChanges(data); }));
                    }
                    else {
                        throw getTreeNoValidDataSourceError();
                    }
                };
                /**
                 * Check for changes made in the data and render each change (node added/removed/moved).
                 * @param {?} data
                 * @param {?=} dataDiffer
                 * @param {?=} viewContainer
                 * @param {?=} parentData
                 * @return {?}
                 */
                CdkTree.prototype.renderNodeChanges = function (data, dataDiffer, viewContainer, parentData) {
                    var _this = this;
                    if (dataDiffer === void 0) { dataDiffer = this._dataDiffer; }
                    if (viewContainer === void 0) { viewContainer = this._nodeOutlet.viewContainer; }
                    /** @type {?} */
                    var changes = dataDiffer.diff(data);
                    if (!changes) {
                        return;
                    }
                    changes.forEachOperation(( /**
                     * @param {?} item
                     * @param {?} adjustedPreviousIndex
                     * @param {?} currentIndex
                     * @return {?}
                     */function (item, adjustedPreviousIndex, currentIndex) {
                        if (item.previousIndex == null) {
                            _this.insertNode(data[( /** @type {?} */(currentIndex))], ( /** @type {?} */(currentIndex)), viewContainer, parentData);
                        }
                        else if (currentIndex == null) {
                            viewContainer.remove(( /** @type {?} */(adjustedPreviousIndex)));
                            _this._levels.delete(item.item);
                        }
                        else {
                            /** @type {?} */
                            var view = viewContainer.get(( /** @type {?} */(adjustedPreviousIndex)));
                            viewContainer.move(( /** @type {?} */(view)), currentIndex);
                        }
                    }));
                    this._changeDetectorRef.detectChanges();
                };
                /**
                 * Finds the matching node definition that should be used for this node data. If there is only
                 * one node definition, it is returned. Otherwise, find the node definition that has a when
                 * predicate that returns true with the data. If none return true, return the default node
                 * definition.
                 * @param {?} data
                 * @param {?} i
                 * @return {?}
                 */
                CdkTree.prototype._getNodeDef = function (data, i) {
                    if (this._nodeDefs.length === 1) {
                        return this._nodeDefs.first;
                    }
                    /** @type {?} */
                    var nodeDef = this._nodeDefs.find(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return def.when && def.when(i, data); })) || this._defaultNodeDef;
                    if (!nodeDef) {
                        throw getTreeMissingMatchingNodeDefError();
                    }
                    return nodeDef;
                };
                /**
                 * Create the embedded view for the data node template and place it in the correct index location
                 * within the data node view container.
                 * @param {?} nodeData
                 * @param {?} index
                 * @param {?=} viewContainer
                 * @param {?=} parentData
                 * @return {?}
                 */
                CdkTree.prototype.insertNode = function (nodeData, index, viewContainer, parentData) {
                    /** @type {?} */
                    var node = this._getNodeDef(nodeData, index);
                    // Node context that will be provided to created embedded view
                    /** @type {?} */
                    var context = new CdkTreeNodeOutletContext(nodeData);
                    // If the tree is flat tree, then use the `getLevel` function in flat tree control
                    // Otherwise, use the level of parent node.
                    if (this.treeControl.getLevel) {
                        context.level = this.treeControl.getLevel(nodeData);
                    }
                    else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {
                        context.level = ( /** @type {?} */(this._levels.get(parentData))) + 1;
                    }
                    else {
                        context.level = 0;
                    }
                    this._levels.set(nodeData, context.level);
                    // Use default tree nodeOutlet, or nested node's nodeOutlet
                    /** @type {?} */
                    var container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;
                    container.createEmbeddedView(node.template, context, index);
                    // Set the data to just created `CdkTreeNode`.
                    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable
                    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.
                    if (CdkTreeNode.mostRecentTreeNode) {
                        CdkTreeNode.mostRecentTreeNode.data = nodeData;
                    }
                };
                return CdkTree;
            }());
            CdkTree.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{ selector: 'cdk-tree',
                            exportAs: 'cdkTree',
                            template: "<ng-container cdkTreeNodeOutlet></ng-container>",
                            host: {
                                'class': 'cdk-tree',
                                'role': 'tree',
                            },
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                            // The "OnPush" status for the `CdkTree` component is effectively a noop, so we are removing it.
                            // The view for `CdkTree` consists entirely of templates declared in other views. As they are
                            // declared elsewhere, they are checked when their declaration points are checked.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].Default
                        },] },
            ];
            /** @nocollapse */
            CdkTree.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] }
            ]; };
            CdkTree.propDecorators = {
                dataSource: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                treeControl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                trackBy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                _nodeOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: [CdkTreeNodeOutlet, { static: true },] }],
                _nodeDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [CdkTreeNodeDef,] }]
            };
            /**
             * Tree node for CdkTree. It contains the data in the tree node.
             * @template T
             */
            var CdkTreeNode = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _tree
                 */
                function CdkTreeNode(_elementRef, _tree) {
                    this._elementRef = _elementRef;
                    this._tree = _tree;
                    /**
                     * Subject that emits when the component has been destroyed.
                     */
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    /**
                     * Emits when the node's data has changed.
                     */
                    this._dataChanges = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    /**
                     * The role of the node should be 'group' if it's an internal node,
                     * and 'treeitem' if it's a leaf node.
                     */
                    this.role = 'treeitem';
                    CdkTreeNode.mostRecentTreeNode = ( /** @type {?} */(this));
                }
                Object.defineProperty(CdkTreeNode.prototype, "data", {
                    /**
                     * The tree node's data.
                     * @return {?}
                     */
                    get: function () { return this._data; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._data) {
                            this._data = value;
                            this._setRoleFromData();
                            this._dataChanges.next();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTreeNode.prototype, "isExpanded", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._tree.treeControl.isExpanded(this._data);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTreeNode.prototype, "level", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkTreeNode.prototype.ngOnDestroy = function () {
                    // If this is the last tree node being destroyed,
                    // clear out the reference to avoid leaking memory.
                    if (CdkTreeNode.mostRecentTreeNode === this) {
                        CdkTreeNode.mostRecentTreeNode = null;
                    }
                    this._dataChanges.complete();
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * Focuses the menu item. Implements for FocusableOption.
                 * @return {?}
                 */
                CdkTreeNode.prototype.focus = function () {
                    this._elementRef.nativeElement.focus();
                };
                /**
                 * @protected
                 * @return {?}
                 */
                CdkTreeNode.prototype._setRoleFromData = function () {
                    var _this = this;
                    if (this._tree.treeControl.isExpandable) {
                        this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';
                    }
                    else {
                        if (!this._tree.treeControl.getChildren) {
                            throw getTreeControlFunctionsMissingError();
                        }
                        /** @type {?} */
                        var childrenNodes = this._tree.treeControl.getChildren(this._data);
                        if (Array.isArray(childrenNodes)) {
                            this._setRoleFromChildren(( /** @type {?} */(childrenNodes)));
                        }
                        else if (childrenNodes instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
                            childrenNodes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._destroyed))
                                .subscribe(( /**
                         * @param {?} children
                         * @return {?}
                         */function (/**
                         * @param {?} children
                         * @return {?}
                         */ children) { return _this._setRoleFromChildren(children); }));
                        }
                    }
                };
                /**
                 * @protected
                 * @param {?} children
                 * @return {?}
                 */
                CdkTreeNode.prototype._setRoleFromChildren = function (children) {
                    this.role = children && children.length ? 'group' : 'treeitem';
                };
                return CdkTreeNode;
            }());
            /**
             * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it
             * in `CdkTree` and set the data to it.
             */
            CdkTreeNode.mostRecentTreeNode = null;
            CdkTreeNode.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: 'cdk-tree-node',
                            exportAs: 'cdkTreeNode',
                            host: {
                                '[attr.aria-expanded]': 'isExpanded',
                                '[attr.aria-level]': 'role === "treeitem" ? level : null',
                                '[attr.role]': 'role',
                                'class': 'cdk-tree-node',
                            },
                        },] },
            ];
            /** @nocollapse */
            CdkTreeNode.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: CdkTree }
            ]; };
            CdkTreeNode.propDecorators = {
                role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Nested node is a child of `<cdk-tree>`. It works with nested tree.
             * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will
             * be added in the `cdkTreeNodeOutlet` in tree node template.
             * For example:
             *   ```html
             *   <cdk-nested-tree-node>
             *     {{node.name}}
             *     <ng-template cdkTreeNodeOutlet></ng-template>
             *   </cdk-nested-tree-node>
             *   ```
             * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be
             * like this:
             *   ```html
             *   <cdk-nested-tree-node>
             *     {{node.name}}
             *      <cdk-nested-tree-node>{{child1.name}}</cdk-nested-tree-node>
             *      <cdk-nested-tree-node>{{child2.name}}</cdk-nested-tree-node>
             *   </cdk-nested-tree-node>
             *   ```
             * @template T
             */
            var CdkNestedTreeNode = /** @class */ (function (_super) {
                __extends(CdkNestedTreeNode, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} _tree
                 * @param {?} _differs
                 */
                function CdkNestedTreeNode(_elementRef, _tree, _differs) {
                    var _this = _super.call(this, _elementRef, _tree) || this;
                    _this._elementRef = _elementRef;
                    _this._tree = _tree;
                    _this._differs = _differs;
                    return _this;
                }
                /**
                 * @return {?}
                 */
                CdkNestedTreeNode.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);
                    if (!this._tree.treeControl.getChildren) {
                        throw getTreeControlFunctionsMissingError();
                    }
                    /** @type {?} */
                    var childrenNodes = this._tree.treeControl.getChildren(this.data);
                    if (Array.isArray(childrenNodes)) {
                        this.updateChildrenNodes(( /** @type {?} */(childrenNodes)));
                    }
                    else if (childrenNodes instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
                        childrenNodes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._destroyed))
                            .subscribe(( /**
                     * @param {?} result
                     * @return {?}
                     */function (/**
                     * @param {?} result
                     * @return {?}
                     */ result) { return _this.updateChildrenNodes(result); }));
                    }
                    this.nodeOutlet.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._destroyed))
                        .subscribe(( /**
                 * @return {?}
                 */function () { return _this.updateChildrenNodes(); }));
                };
                /**
                 * @return {?}
                 */
                CdkNestedTreeNode.prototype.ngOnDestroy = function () {
                    this._clear();
                    _super.prototype.ngOnDestroy.call(this);
                };
                /**
                 * Add children dataNodes to the NodeOutlet
                 * @protected
                 * @param {?=} children
                 * @return {?}
                 */
                CdkNestedTreeNode.prototype.updateChildrenNodes = function (children) {
                    /** @type {?} */
                    var outlet = this._getNodeOutlet();
                    if (children) {
                        this._children = children;
                    }
                    if (outlet && this._children) {
                        /** @type {?} */
                        var viewContainer = outlet.viewContainer;
                        this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);
                    }
                    else {
                        // Reset the data differ if there's no children nodes displayed
                        this._dataDiffer.diff([]);
                    }
                };
                /**
                 * Clear the children dataNodes.
                 * @protected
                 * @return {?}
                 */
                CdkNestedTreeNode.prototype._clear = function () {
                    /** @type {?} */
                    var outlet = this._getNodeOutlet();
                    if (outlet) {
                        outlet.viewContainer.clear();
                        this._dataDiffer.diff([]);
                    }
                };
                /**
                 * Gets the outlet for the current node.
                 * @private
                 * @return {?}
                 */
                CdkNestedTreeNode.prototype._getNodeOutlet = function () {
                    var _this = this;
                    /** @type {?} */
                    var outlets = this.nodeOutlet;
                    // Note that since we use `descendants: true` on the query, we have to ensure
                    // that we don't pick up the outlet of a child node by accident.
                    return outlets && outlets.find(( /**
                     * @param {?} outlet
                     * @return {?}
                     */function (/**
                     * @param {?} outlet
                     * @return {?}
                     */ outlet) { return !outlet._node || outlet._node === _this; }));
                };
                return CdkNestedTreeNode;
            }(CdkTreeNode));
            CdkNestedTreeNode.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: 'cdk-nested-tree-node',
                            exportAs: 'cdkNestedTreeNode',
                            host: {
                                '[attr.aria-expanded]': 'isExpanded',
                                '[attr.role]': 'role',
                                'class': 'cdk-tree-node cdk-nested-tree-node',
                            },
                            providers: [
                                { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },
                                { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }
                            ]
                        },] },
            ];
            /** @nocollapse */
            CdkNestedTreeNode.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: CdkTree },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"] }
            ]; };
            CdkNestedTreeNode.propDecorators = {
                nodeOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [CdkTreeNodeOutlet, {
                                // We need to use `descendants: true`, because Ivy will no longer match
                                // indirect descendants if it's left as false.
                                descendants: true
                            },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Regex used to split a string on its CSS units.
             * @type {?}
             */
            var cssUnitPattern = /([A-Za-z%]+)$/;
            /**
             * Indent for the children tree dataNodes.
             * This directive will add left-padding to the node to show hierarchy.
             * @template T
             */
            var CdkTreeNodePadding = /** @class */ (function () {
                /**
                 * @param {?} _treeNode
                 * @param {?} _tree
                 * @param {?} _renderer
                 * @param {?} _element
                 * @param {?} _dir
                 */
                function CdkTreeNodePadding(_treeNode, _tree, _renderer, _element, _dir) {
                    var _this = this;
                    this._treeNode = _treeNode;
                    this._tree = _tree;
                    this._renderer = _renderer;
                    this._element = _element;
                    this._dir = _dir;
                    /**
                     * Subject that emits when the component has been destroyed.
                     */
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    /**
                     * CSS units used for the indentation value.
                     */
                    this.indentUnits = 'px';
                    this._indent = 40;
                    this._setPadding();
                    if (_dir) {
                        _dir.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._destroyed)).subscribe(( /**
                         * @return {?}
                         */function () { return _this._setPadding(true); }));
                    }
                    // In Ivy the indentation binding might be set before the tree node's data has been added,
                    // which means that we'll miss the first render. We have to subscribe to changes in the
                    // data to ensure that everything is up to date.
                    _treeNode._dataChanges.subscribe(( /**
                     * @return {?}
                     */function () { return _this._setPadding(); }));
                }
                Object.defineProperty(CdkTreeNodePadding.prototype, "level", {
                    /**
                     * The level of depth of the tree node. The padding will be `level * indent` pixels.
                     * @return {?}
                     */
                    get: function () { return this._level; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        // Set to null as the fallback value so that _setPadding can fall back to the node level if the
                        // consumer set the directive as `cdkTreeNodePadding=""`. We still want to take this value if
                        // they set 0 explicitly.
                        this._level = ( /** @type {?} */(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(value, null)));
                        this._setPadding();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTreeNodePadding.prototype, "indent", {
                    /**
                     * The indent for each level. Can be a number or a CSS string.
                     * Default number 40px from material design menu sub-menu spec.
                     * @return {?}
                     */
                    get: function () { return this._indent; },
                    /**
                     * @param {?} indent
                     * @return {?}
                     */
                    set: function (indent) {
                        /** @type {?} */
                        var value = indent;
                        /** @type {?} */
                        var units = 'px';
                        if (typeof indent === 'string') {
                            /** @type {?} */
                            var parts = indent.split(cssUnitPattern);
                            value = parts[0];
                            units = parts[1] || units;
                        }
                        this.indentUnits = units;
                        this._indent = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(value);
                        this._setPadding();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkTreeNodePadding.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * The padding indent value for the tree node. Returns a string with px numbers if not null.
                 * @return {?}
                 */
                CdkTreeNodePadding.prototype._paddingIndent = function () {
                    /** @type {?} */
                    var nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)
                        ? this._tree.treeControl.getLevel(this._treeNode.data)
                        : null;
                    /** @type {?} */
                    var level = this._level == null ? nodeLevel : this._level;
                    return typeof level === 'number' ? "" + level * this._indent + this.indentUnits : null;
                };
                /**
                 * @param {?=} forceChange
                 * @return {?}
                 */
                CdkTreeNodePadding.prototype._setPadding = function (forceChange) {
                    if (forceChange === void 0) { forceChange = false; }
                    /** @type {?} */
                    var padding = this._paddingIndent();
                    if (padding !== this._currentPadding || forceChange) {
                        /** @type {?} */
                        var element = this._element.nativeElement;
                        /** @type {?} */
                        var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';
                        /** @type {?} */
                        var resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';
                        this._renderer.setStyle(element, paddingProp, padding);
                        this._renderer.setStyle(element, resetProp, null);
                        this._currentPadding = padding;
                    }
                };
                return CdkTreeNodePadding;
            }());
            CdkTreeNodePadding.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[cdkTreeNodePadding]',
                        },] },
            ];
            /** @nocollapse */
            CdkTreeNodePadding.ctorParameters = function () { return [
                { type: CdkTreeNode },
                { type: CdkTree },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
            ]; };
            CdkTreeNodePadding.propDecorators = {
                level: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkTreeNodePadding',] }],
                indent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkTreeNodePaddingIndent',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Node toggle to expand/collapse the node.
             * @template T
             */
            var CdkTreeNodeToggle = /** @class */ (function () {
                /**
                 * @param {?} _tree
                 * @param {?} _treeNode
                 */
                function CdkTreeNodeToggle(_tree, _treeNode) {
                    this._tree = _tree;
                    this._treeNode = _treeNode;
                    this._recursive = false;
                }
                Object.defineProperty(CdkTreeNodeToggle.prototype, "recursive", {
                    /**
                     * Whether expand/collapse the node recursively.
                     * @return {?}
                     */
                    get: function () { return this._recursive; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._recursive = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
                // In Ivy the `host` bindings will be merged when this class is extended, whereas in
                // ViewEngine they're overwritten.
                // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
                // tslint:disable-next-line:no-host-decorator-in-concrete
                /**
                 * @param {?} event
                 * @return {?}
                 */
                CdkTreeNodeToggle.prototype._toggle = function (event) {
                    this.recursive
                        ? this._tree.treeControl.toggleDescendants(this._treeNode.data)
                        : this._tree.treeControl.toggle(this._treeNode.data);
                    event.stopPropagation();
                };
                return CdkTreeNodeToggle;
            }());
            CdkTreeNodeToggle.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{ selector: '[cdkTreeNodeToggle]' },] },
            ];
            /** @nocollapse */
            CdkTreeNodeToggle.ctorParameters = function () { return [
                { type: CdkTree },
                { type: CdkTreeNode }
            ]; };
            CdkTreeNodeToggle.propDecorators = {
                recursive: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkTreeNodeToggleRecursive',] }],
                _toggle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["HostListener"], args: ['click', ['$event'],] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var EXPORTED_DECLARATIONS = [
                CdkNestedTreeNode,
                CdkTreeNodeDef,
                CdkTreeNodePadding,
                CdkTreeNodeToggle,
                CdkTree,
                CdkTreeNode,
                CdkTreeNodeOutlet,
            ];
            var CdkTreeModule = /** @class */ (function () {
                function CdkTreeModule() {
                }
                return CdkTreeModule;
            }());
            CdkTreeModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"]],
                            exports: EXPORTED_DECLARATIONS,
                            declarations: EXPORTED_DECLARATIONS,
                            providers: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["FocusMonitor"], CdkTreeNodeDef]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=tree.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/flex-layout/esm2015/core.js": 
        /*!***********************************************************!*\
          !*** ./node_modules/@angular/flex-layout/esm2015/core.js ***!
          \***********************************************************/
        /*! exports provided: ɵMatchMedia, ɵMockMatchMedia, ɵMockMatchMediaProvider, CoreModule, removeStyles, BROWSER_PROVIDER, CLASS_NAME, MediaChange, StylesheetMap, DEFAULT_CONFIG, LAYOUT_CONFIG, SERVER_TOKEN, BREAKPOINT, mergeAlias, BaseDirective2, DEFAULT_BREAKPOINTS, ScreenTypes, ORIENTATION_BREAKPOINTS, BreakPointRegistry, BREAKPOINTS, MediaObserver, MediaTrigger, sortDescendingPriority, sortAscendingPriority, coerceArray, StyleUtils, StyleBuilder, validateBasis, MediaMarshaller, BREAKPOINT_PRINT, PrintHook */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵMatchMedia", function () { return MatchMedia; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵMockMatchMedia", function () { return MockMatchMedia; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵMockMatchMediaProvider", function () { return MockMatchMediaProvider; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CoreModule", function () { return CoreModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeStyles", function () { return removeStyles; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BROWSER_PROVIDER", function () { return BROWSER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CLASS_NAME", function () { return CLASS_NAME; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MediaChange", function () { return MediaChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StylesheetMap", function () { return StylesheetMap; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_CONFIG", function () { return DEFAULT_CONFIG; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LAYOUT_CONFIG", function () { return LAYOUT_CONFIG; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SERVER_TOKEN", function () { return SERVER_TOKEN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BREAKPOINT", function () { return BREAKPOINT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeAlias", function () { return mergeAlias; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseDirective2", function () { return BaseDirective2; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_BREAKPOINTS", function () { return DEFAULT_BREAKPOINTS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScreenTypes", function () { return ScreenTypes; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORIENTATION_BREAKPOINTS", function () { return ORIENTATION_BREAKPOINTS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreakPointRegistry", function () { return BreakPointRegistry; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BREAKPOINTS", function () { return BREAKPOINTS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MediaObserver", function () { return MediaObserver; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MediaTrigger", function () { return MediaTrigger; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortDescendingPriority", function () { return sortDescendingPriority; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortAscendingPriority", function () { return sortAscendingPriority; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceArray", function () { return coerceArray; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleUtils", function () { return StyleUtils; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleBuilder", function () { return StyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateBasis", function () { return validateBasis; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MediaMarshaller", function () { return MediaMarshaller; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BREAKPOINT_PRINT", function () { return BREAKPOINT_PRINT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrintHook", function () { return PrintHook; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Find all of the server-generated stylings, if any, and remove them
             * This will be in the form of inline classes and the style block in the
             * head of the DOM
             * @param {?} _document
             * @param {?} platformId
             * @return {?}
             */
            function removeStyles(_document, platformId) {
                return ( /**
                 * @return {?}
                 */function () {
                    if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformBrowser"])(platformId)) {
                        /** @type {?} */
                        var elements = Array.from(_document.querySelectorAll("[class*=" + CLASS_NAME + "]"));
                        // RegExp constructor should only be used if passing a variable to the constructor.
                        // When using static regular expression it is more performant to use reg exp literal.
                        // This is also needed to provide Safari 9 compatibility, please see
                        // https://stackoverflow.com/questions/37919802 for more discussion.
                        /** @type {?} */
                        var classRegex_1 = /\bflex-layout-.+?\b/g;
                        elements.forEach(( /**
                         * @param {?} el
                         * @return {?}
                         */function (/**
                         * @param {?} el
                         * @return {?}
                         */ el) {
                            el.classList.contains(CLASS_NAME + "ssr") && el.parentNode ?
                                el.parentNode.removeChild(el) : el.className.replace(classRegex_1, '');
                        }));
                    }
                });
            }
            /**
             *  Provider to remove SSR styles on the browser
             * @type {?}
             */
            var BROWSER_PROVIDER = {
                provide: ( /** @type {?} */(_angular_core__WEBPACK_IMPORTED_MODULE_0__["APP_BOOTSTRAP_LISTENER"])),
                useFactory: removeStyles,
                deps: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]],
                multi: true
            };
            /** @type {?} */
            var CLASS_NAME = 'flex-layout-';
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * *****************************************************************
             * Define module for the MediaQuery API
             * *****************************************************************
             */
            var CoreModule = /** @class */ (function () {
                function CoreModule() {
                }
                return CoreModule;
            }());
            CoreModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            providers: [BROWSER_PROVIDER]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Class instances emitted [to observers] for each mql notification
             */
            var MediaChange = /** @class */ (function () {
                /**
                 * @param {?=} matches whether the mediaQuery is currently activated
                 * @param {?=} mediaQuery e.g. (min-width: 600px) and (max-width: 959px)
                 * @param {?=} mqAlias e.g. gt-sm, md, gt-lg
                 * @param {?=} suffix e.g. GtSM, Md, GtLg
                 * @param {?=} priority the priority of activation for the given breakpoint
                 */
                function MediaChange(matches, mediaQuery, mqAlias, suffix, priority) {
                    if (matches === void 0) { matches = false; }
                    if (mediaQuery === void 0) { mediaQuery = 'all'; }
                    if (mqAlias === void 0) { mqAlias = ''; }
                    if (suffix === void 0) { suffix = ''; }
                    if (priority === void 0) { priority = 0; }
                    this.matches = matches;
                    this.mediaQuery = mediaQuery;
                    this.mqAlias = mqAlias;
                    this.suffix = suffix;
                    this.priority = priority;
                    this.property = '';
                }
                /**
                 * Create an exact copy of the MediaChange
                 * @return {?}
                 */
                MediaChange.prototype.clone = function () {
                    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);
                };
                return MediaChange;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Utility to emulate a CSS stylesheet
             *
             * This utility class stores all of the styles for a given HTML element
             * as a readonly `stylesheet` map.
             */
            var StylesheetMap = /** @class */ (function () {
                function StylesheetMap() {
                    this.stylesheet = new Map();
                }
                /**
                 * Add an individual style to an HTML element
                 * @param {?} element
                 * @param {?} style
                 * @param {?} value
                 * @return {?}
                 */
                StylesheetMap.prototype.addStyleToElement = function (element, style, value) {
                    /** @type {?} */
                    var stylesheet = this.stylesheet.get(element);
                    if (stylesheet) {
                        stylesheet.set(style, value);
                    }
                    else {
                        this.stylesheet.set(element, new Map([[style, value]]));
                    }
                };
                /**
                 * Clear the virtual stylesheet
                 * @return {?}
                 */
                StylesheetMap.prototype.clearStyles = function () {
                    this.stylesheet.clear();
                };
                /**
                 * Retrieve a given style for an HTML element
                 * @param {?} el
                 * @param {?} styleName
                 * @return {?}
                 */
                StylesheetMap.prototype.getStyleForElement = function (el, styleName) {
                    /** @type {?} */
                    var styles = this.stylesheet.get(el);
                    /** @type {?} */
                    var value = '';
                    if (styles) {
                        /** @type {?} */
                        var style = styles.get(styleName);
                        if (typeof style === 'number' || typeof style === 'string') {
                            value = style + '';
                        }
                    }
                    return value;
                };
                return StylesheetMap;
            }());
            StylesheetMap.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ StylesheetMap.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function StylesheetMap_Factory() { return new StylesheetMap(); }, token: StylesheetMap, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_CONFIG = {
                addFlexToParent: true,
                addOrientationBps: false,
                disableDefaultBps: false,
                disableVendorPrefixes: false,
                serverLoaded: false,
                useColumnBasisZero: true,
                printWithBreakpoints: [],
                mediaTriggerAutoRestore: true,
                ssrObserveBreakpoints: [],
            };
            /** @type {?} */
            var LAYOUT_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('Flex Layout token, config options for the library', {
                providedIn: 'root',
                factory: ( /**
                 * @return {?}
                 */function () { return DEFAULT_CONFIG; })
            });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Token that is provided to tell whether the FlexLayoutServerModule
             * has been included in the bundle
             *
             * NOTE: This can be manually provided to disable styles when using SSR
             * @type {?}
             */
            var SERVER_TOKEN = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('FlexLayoutServerLoaded', {
                providedIn: 'root',
                factory: ( /**
                 * @return {?}
                 */function () { return false; })
            });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var BREAKPOINT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('Flex Layout token, collect all breakpoints into one provider', {
                providedIn: 'root',
                factory: ( /**
                 * @return {?}
                 */function () { return null; })
            });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * For the specified MediaChange, make sure it contains the breakpoint alias
             * and suffix (if available).
             * @param {?} dest
             * @param {?} source
             * @return {?}
             */
            function mergeAlias(dest, source) {
                dest = dest ? dest.clone() : new MediaChange();
                if (source) {
                    dest.mqAlias = source.alias;
                    dest.mediaQuery = source.mediaQuery;
                    dest.suffix = ( /** @type {?} */(source.suffix));
                    dest.priority = ( /** @type {?} */(source.priority));
                }
                return dest;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             * @type {?}
             */
            var INLINE = 'inline';
            /** @type {?} */
            var LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];
            /**
             * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles
             * @param {?} value
             * @return {?}
             */
            function buildLayoutCSS(value) {
                var _b = validateValue(value), direction = _b[0], wrap = _b[1], isInline = _b[2];
                return buildCSS(direction, wrap, isInline);
            }
            /**
             * Validate the value to be one of the acceptable value options
             * Use default fallback of 'row'
             * @param {?} value
             * @return {?}
             */
            function validateValue(value) {
                value = value ? value.toLowerCase() : '';
                var _b = value.split(' '), direction = _b[0], wrap = _b[1], inline = _b[2];
                // First value must be the `flex-direction`
                if (!LAYOUT_VALUES.find(( /**
                 * @param {?} x
                 * @return {?}
                 */function (/**
                 * @param {?} x
                 * @return {?}
                 */ x) { return x === direction; }))) {
                    direction = LAYOUT_VALUES[0];
                }
                if (wrap === INLINE) {
                    wrap = (inline !== INLINE) ? inline : '';
                    inline = INLINE;
                }
                return [direction, validateWrapValue(wrap), !!inline];
            }
            /**
             * Convert layout-wrap='<value>' to expected flex-wrap style
             * @param {?} value
             * @return {?}
             */
            function validateWrapValue(value) {
                if (!!value) {
                    switch (value.toLowerCase()) {
                        case 'reverse':
                        case 'wrap-reverse':
                        case 'reverse-wrap':
                            value = 'wrap-reverse';
                            break;
                        case 'no':
                        case 'none':
                        case 'nowrap':
                            value = 'nowrap';
                            break;
                        // All other values fallback to 'wrap'
                        default:
                            value = 'wrap';
                            break;
                    }
                }
                return value;
            }
            /**
             * Build the CSS that should be assigned to the element instance
             * BUG:
             *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.
             *      Use height instead if possible; height : <xxx>vh;
             *
             *  This way any padding or border specified on the child elements are
             *  laid out and drawn inside that element's specified width and height.
             * @param {?} direction
             * @param {?=} wrap
             * @param {?=} inline
             * @return {?}
             */
            function buildCSS(direction, wrap, inline) {
                if (wrap === void 0) { wrap = null; }
                if (inline === void 0) { inline = false; }
                return {
                    'display': inline ? 'inline-flex' : 'flex',
                    'box-sizing': 'border-box',
                    'flex-direction': direction,
                    'flex-wrap': !!wrap ? wrap : null
                };
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @abstract
             */
            var BaseDirective2 = /** @class */ (function () {
                /**
                 * @protected
                 * @param {?} elementRef
                 * @param {?} styleBuilder
                 * @param {?} styler
                 * @param {?} marshal
                 */
                function BaseDirective2(elementRef, styleBuilder, styler, marshal) {
                    this.elementRef = elementRef;
                    this.styleBuilder = styleBuilder;
                    this.styler = styler;
                    this.marshal = marshal;
                    this.DIRECTIVE_KEY = '';
                    this.inputs = [];
                    /**
                     * The most recently used styles for the builder
                     */
                    this.mru = {};
                    this.destroySubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Cache map for style computation
                     */
                    this.styleCache = new Map();
                }
                Object.defineProperty(BaseDirective2.prototype, "parentElement", {
                    /**
                     * Access to host element's parent DOM node
                     * @protected
                     * @return {?}
                     */
                    get: function () {
                        return this.elementRef.nativeElement.parentElement;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseDirective2.prototype, "nativeElement", {
                    /**
                     * Access to the HTMLElement for the directive
                     * @protected
                     * @return {?}
                     */
                    get: function () {
                        return this.elementRef.nativeElement;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseDirective2.prototype, "activatedValue", {
                    /**
                     * Access to the activated value for the directive
                     * @return {?}
                     */
                    get: function () {
                        return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * For \@Input changes
                 * @param {?} changes
                 * @return {?}
                 */
                BaseDirective2.prototype.ngOnChanges = function (changes) {
                    var _this = this;
                    Object.keys(changes).forEach(( /**
                     * @param {?} key
                     * @return {?}
                     */function (/**
                     * @param {?} key
                     * @return {?}
                     */ key) {
                        if (_this.inputs.indexOf(key) !== -1) {
                            /** @type {?} */
                            var bp = key.split('.').slice(1).join('.');
                            /** @type {?} */
                            var val = changes[key].currentValue;
                            _this.setValue(val, bp);
                        }
                    }));
                };
                /**
                 * @return {?}
                 */
                BaseDirective2.prototype.ngOnDestroy = function () {
                    this.destroySubject.next();
                    this.destroySubject.complete();
                    this.marshal.releaseElement(this.nativeElement);
                };
                /**
                 * Register with central marshaller service
                 * @protected
                 * @param {?=} extraTriggers
                 * @return {?}
                 */
                BaseDirective2.prototype.init = function (extraTriggers) {
                    if (extraTriggers === void 0) { extraTriggers = []; }
                    this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);
                };
                /**
                 * Add styles to the element using predefined style builder
                 * @protected
                 * @param {?} input
                 * @param {?=} parent
                 * @return {?}
                 */
                BaseDirective2.prototype.addStyles = function (input, parent) {
                    /** @type {?} */
                    var builder = this.styleBuilder;
                    /** @type {?} */
                    var useCache = builder.shouldCache;
                    /** @type {?} */
                    var genStyles = this.styleCache.get(input);
                    if (!genStyles || !useCache) {
                        genStyles = builder.buildStyles(input, parent);
                        if (useCache) {
                            this.styleCache.set(input, genStyles);
                        }
                    }
                    this.mru = Object.assign({}, genStyles);
                    this.applyStyleToElement(genStyles);
                    builder.sideEffect(input, genStyles, parent);
                };
                /**
                 * Remove generated styles from an element using predefined style builder
                 * @protected
                 * @return {?}
                 */
                BaseDirective2.prototype.clearStyles = function () {
                    var _this = this;
                    Object.keys(this.mru).forEach(( /**
                     * @param {?} k
                     * @return {?}
                     */function (/**
                     * @param {?} k
                     * @return {?}
                     */ k) {
                        _this.mru[k] = '';
                    }));
                    this.applyStyleToElement(this.mru);
                    this.mru = {};
                };
                /**
                 * Force trigger style updates on DOM element
                 * @protected
                 * @return {?}
                 */
                BaseDirective2.prototype.triggerUpdate = function () {
                    this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);
                };
                /**
                 * Determine the DOM element's Flexbox flow (flex-direction).
                 *
                 * Check inline style first then check computed (stylesheet) style.
                 * And optionally add the flow value to element's inline style.
                 * @protected
                 * @param {?} target
                 * @param {?=} addIfMissing
                 * @return {?}
                 */
                BaseDirective2.prototype.getFlexFlowDirection = function (target, addIfMissing) {
                    if (addIfMissing === void 0) { addIfMissing = false; }
                    if (target) {
                        var _b = this.styler.getFlowDirection(target), value = _b[0], hasInlineValue = _b[1];
                        if (!hasInlineValue && addIfMissing) {
                            /** @type {?} */
                            var style = buildLayoutCSS(value);
                            /** @type {?} */
                            var elements = [target];
                            this.styler.applyStyleToElements(style, elements);
                        }
                        return value.trim();
                    }
                    return 'row';
                };
                /**
                 * Applies styles given via string pair or object map to the directive element
                 * @protected
                 * @param {?} style
                 * @param {?=} value
                 * @param {?=} element
                 * @return {?}
                 */
                BaseDirective2.prototype.applyStyleToElement = function (style, value, element) {
                    if (element === void 0) { element = this.nativeElement; }
                    this.styler.applyStyleToElement(element, style, value);
                };
                /**
                 * @protected
                 * @param {?} val
                 * @param {?} bp
                 * @return {?}
                 */
                BaseDirective2.prototype.setValue = function (val, bp) {
                    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);
                };
                /**
                 * @protected
                 * @param {?} input
                 * @return {?}
                 */
                BaseDirective2.prototype.updateWithValue = function (input) {
                    this.addStyles(input);
                };
                return BaseDirective2;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * NOTE: Smaller ranges have HIGHER priority since the match is more specific
             * @type {?}
             */
            var DEFAULT_BREAKPOINTS = [
                {
                    alias: 'xs',
                    mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.9px)',
                    priority: 1000,
                },
                {
                    alias: 'sm',
                    mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.9px)',
                    priority: 900,
                },
                {
                    alias: 'md',
                    mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.9px)',
                    priority: 800,
                },
                {
                    alias: 'lg',
                    mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.9px)',
                    priority: 700,
                },
                {
                    alias: 'xl',
                    mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.9px)',
                    priority: 600,
                },
                {
                    alias: 'lt-sm',
                    overlapping: true,
                    mediaQuery: 'screen and (max-width: 599.9px)',
                    priority: 950,
                },
                {
                    alias: 'lt-md',
                    overlapping: true,
                    mediaQuery: 'screen and (max-width: 959.9px)',
                    priority: 850,
                },
                {
                    alias: 'lt-lg',
                    overlapping: true,
                    mediaQuery: 'screen and (max-width: 1279.9px)',
                    priority: 750,
                },
                {
                    alias: 'lt-xl',
                    overlapping: true,
                    priority: 650,
                    mediaQuery: 'screen and (max-width: 1919.9px)',
                },
                {
                    alias: 'gt-xs',
                    overlapping: true,
                    mediaQuery: 'screen and (min-width: 600px)',
                    priority: -950,
                },
                {
                    alias: 'gt-sm',
                    overlapping: true,
                    mediaQuery: 'screen and (min-width: 960px)',
                    priority: -850,
                }, {
                    alias: 'gt-md',
                    overlapping: true,
                    mediaQuery: 'screen and (min-width: 1280px)',
                    priority: -750,
                },
                {
                    alias: 'gt-lg',
                    overlapping: true,
                    mediaQuery: 'screen and (min-width: 1920px)',
                    priority: -650,
                }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /* tslint:disable */
            /** @type {?} */
            var HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.9px)';
            /** @type {?} */
            var HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.9px)';
            /** @type {?} */
            var TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.9px)';
            /** @type {?} */
            var TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.9px)';
            /** @type {?} */
            var WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';
            /** @type {?} */
            var WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';
            /** @type {?} */
            var ScreenTypes = {
                'HANDSET': HANDSET_PORTRAIT + ", " + HANDSET_LANDSCAPE,
                'TABLET': TABLET_PORTRAIT + " , " + TABLET_LANDSCAPE,
                'WEB': WEB_PORTRAIT + ", " + WEB_LANDSCAPE + " ",
                'HANDSET_PORTRAIT': "" + HANDSET_PORTRAIT,
                'TABLET_PORTRAIT': TABLET_PORTRAIT + " ",
                'WEB_PORTRAIT': "" + WEB_PORTRAIT,
                'HANDSET_LANDSCAPE': HANDSET_LANDSCAPE + "]",
                'TABLET_LANDSCAPE': "" + TABLET_LANDSCAPE,
                'WEB_LANDSCAPE': "" + WEB_LANDSCAPE
            };
            /**
             * Extended Breakpoints for handset/tablets with landscape or portrait orientations
             * @type {?}
             */
            var ORIENTATION_BREAKPOINTS = [
                { 'alias': 'handset', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET },
                { 'alias': 'handset.landscape', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE },
                { 'alias': 'handset.portrait', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT },
                { 'alias': 'tablet', priority: 2100, 'mediaQuery': ScreenTypes.TABLET },
                { 'alias': 'tablet.landscape', priority: 2100, 'mediaQuery': ScreenTypes.TABLET },
                { 'alias': 'tablet.portrait', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_PORTRAIT },
                { 'alias': 'web', priority: 2200, 'mediaQuery': ScreenTypes.WEB, overlapping: true },
                { 'alias': 'web.landscape', priority: 2200, 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping: true },
                { 'alias': 'web.portrait', priority: 2200, 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping: true }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Extends an object with the *enumerable* and *own* properties of one or more source objects,
             * similar to Object.assign.
             *
             * @param {?} dest The object which will have properties copied to it.
             * @param {...?} sources The source objects from which properties will be copied.
             * @return {?}
             */
            function extendObject(dest) {
                var sources = [];
                for (var _b = 1; _b < arguments.length; _b++) {
                    sources[_b - 1] = arguments[_b];
                }
                if (dest == null) {
                    throw TypeError('Cannot convert undefined or null to object');
                }
                for (var _c = 0, sources_1 = sources; _c < sources_1.length; _c++) {
                    var source = sources_1[_c];
                    if (source != null) {
                        for (var key in source) {
                            if (source.hasOwnProperty(key)) {
                                dest[key] = source[key];
                            }
                        }
                    }
                }
                return dest;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var ALIAS_DELIMITERS = /(\.|-|_)/g;
            /**
             * @param {?} part
             * @return {?}
             */
            function firstUpperCase(part) {
                /** @type {?} */
                var first = part.length > 0 ? part.charAt(0) : '';
                /** @type {?} */
                var remainder = (part.length > 1) ? part.slice(1) : '';
                return first.toUpperCase() + remainder;
            }
            /**
             * Converts snake-case to SnakeCase.
             * @param {?} name Text to UpperCamelCase
             * @return {?}
             */
            function camelCase(name) {
                return name
                    .replace(ALIAS_DELIMITERS, '|')
                    .split('|')
                    .map(firstUpperCase)
                    .join('');
            }
            /**
             * For each breakpoint, ensure that a Suffix is defined;
             * fallback to UpperCamelCase the unique Alias value
             * @param {?} list
             * @return {?}
             */
            function validateSuffixes(list) {
                list.forEach(( /**
                 * @param {?} bp
                 * @return {?}
                 */function (bp) {
                    if (!bp.suffix) {
                        bp.suffix = camelCase(bp.alias); // create Suffix value based on alias
                        bp.overlapping = !!bp.overlapping; // ensure default value
                    }
                }));
                return list;
            }
            /**
             * Merge a custom breakpoint list with the default list based on unique alias values
             *  - Items are added if the alias is not in the default list
             *  - Items are merged with the custom override if the alias exists in the default list
             * @param {?} defaults
             * @param {?=} custom
             * @return {?}
             */
            function mergeByAlias(defaults, custom) {
                if (custom === void 0) { custom = []; }
                /** @type {?} */
                var dict = {};
                defaults.forEach(( /**
                 * @param {?} bp
                 * @return {?}
                 */function (/**
                 * @param {?} bp
                 * @return {?}
                 */ bp) {
                    dict[bp.alias] = bp;
                }));
                // Merge custom breakpoints
                custom.forEach(( /**
                 * @param {?} bp
                 * @return {?}
                 */function (bp) {
                    if (dict[bp.alias]) {
                        extendObject(dict[bp.alias], bp);
                    }
                    else {
                        dict[bp.alias] = bp;
                    }
                }));
                return validateSuffixes(Object.keys(dict).map(( /**
                 * @param {?} k
                 * @return {?}
                 */function (/**
                 * @param {?} k
                 * @return {?}
                 */ k) { return dict[k]; })));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             *  Injection token unique to the flex-layout library.
             *  Use this token when build a custom provider (see below).
             * @type {?}
             */
            var BREAKPOINTS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('Token (@angular/flex-layout) Breakpoints', {
                providedIn: 'root',
                factory: ( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var breakpoints = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["inject"])(BREAKPOINT);
                    /** @type {?} */
                    var layoutConfig = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["inject"])(LAYOUT_CONFIG);
                    /** @type {?} */
                    var bpFlattenArray = [].concat.apply([], (breakpoints || [])
                        .map(( /**
                 * @param {?} v
                 * @return {?}
                 */function (v) { return Array.isArray(v) ? v : [v]; })));
                    /** @type {?} */
                    var builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)
                        .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);
                    return mergeByAlias(builtIns, bpFlattenArray);
                })
            });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * HOF to sort the breakpoints by descending priority
             * @template T
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function sortDescendingPriority(a, b) {
                /** @type {?} */
                var priorityA = a ? a.priority || 0 : 0;
                /** @type {?} */
                var priorityB = b ? b.priority || 0 : 0;
                return priorityB - priorityA;
            }
            /**
             * HOF to sort the breakpoints by ascending priority
             * @template T
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function sortAscendingPriority(a, b) {
                /** @type {?} */
                var pA = a.priority || 0;
                /** @type {?} */
                var pB = b.priority || 0;
                return pA - pB;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Registry of 1..n MediaQuery breakpoint ranges
             * This is published as a provider and may be overridden from custom, application-specific ranges
             *
             */
            var BreakPointRegistry = /** @class */ (function () {
                /**
                 * @param {?} list
                 */
                function BreakPointRegistry(list) {
                    /**
                     * Memoized BreakPoint Lookups
                     */
                    this.findByMap = new Map();
                    this.items = list.slice().sort(sortAscendingPriority);
                }
                /**
                 * Search breakpoints by alias (e.g. gt-xs)
                 * @param {?} alias
                 * @return {?}
                 */
                BreakPointRegistry.prototype.findByAlias = function (alias) {
                    return !alias ? null : this.findWithPredicate(alias, ( /**
                     * @param {?} bp
                     * @return {?}
                     */function (bp) { return bp.alias == alias; }));
                };
                /**
                 * @param {?} query
                 * @return {?}
                 */
                BreakPointRegistry.prototype.findByQuery = function (query) {
                    return this.findWithPredicate(query, ( /**
                     * @param {?} bp
                     * @return {?}
                     */function (bp) { return bp.mediaQuery == query; }));
                };
                Object.defineProperty(BreakPointRegistry.prototype, "overlappings", {
                    /**
                     * Get all the breakpoints whose ranges could overlapping `normal` ranges;
                     * e.g. gt-sm overlaps md, lg, and xl
                     * @return {?}
                     */
                    get: function () {
                        return this.items.filter(( /**
                         * @param {?} it
                         * @return {?}
                         */function (/**
                         * @param {?} it
                         * @return {?}
                         */ it) { return it.overlapping == true; }));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BreakPointRegistry.prototype, "aliases", {
                    /**
                     * Get list of all registered (non-empty) breakpoint aliases
                     * @return {?}
                     */
                    get: function () {
                        return this.items.map(( /**
                         * @param {?} it
                         * @return {?}
                         */function (/**
                         * @param {?} it
                         * @return {?}
                         */ it) { return it.alias; }));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BreakPointRegistry.prototype, "suffixes", {
                    /**
                     * Aliases are mapped to properties using suffixes
                     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'
                     * for property layoutGtSM.
                     * @return {?}
                     */
                    get: function () {
                        return this.items.map(( /**
                         * @param {?} it
                         * @return {?}
                         */function (/**
                         * @param {?} it
                         * @return {?}
                         */ it) { return !!it.suffix ? it.suffix : ''; }));
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Memoized lookup using custom predicate function
                 * @private
                 * @param {?} key
                 * @param {?} searchFn
                 * @return {?}
                 */
                BreakPointRegistry.prototype.findWithPredicate = function (key, searchFn) {
                    /** @type {?} */
                    var response = this.findByMap.get(key);
                    if (!response) {
                        response = this.items.find(searchFn) || null;
                        this.findByMap.set(key, response);
                    }
                    return response || null;
                };
                return BreakPointRegistry;
            }());
            BreakPointRegistry.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            BreakPointRegistry.ctorParameters = function () { return [
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [BREAKPOINTS,] }] }
            ]; };
            /** @nocollapse */ BreakPointRegistry.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function BreakPointRegistry_Factory() { return new BreakPointRegistry(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BREAKPOINTS)); }, token: BreakPointRegistry, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to
             * convert mediaQuery change callbacks to subscriber notifications. These notifications will be
             * performed within the ng Zone to trigger change detections and component updates.
             *
             * NOTE: both mediaQuery activations and de-activations are announced in notifications
             */
            var MatchMedia = /** @class */ (function () {
                /**
                 * @param {?} _zone
                 * @param {?} _platformId
                 * @param {?} _document
                 */
                function MatchMedia(_zone, _platformId, _document) {
                    this._zone = _zone;
                    this._platformId = _platformId;
                    this._document = _document;
                    /**
                     * Initialize source with 'all' so all non-responsive APIs trigger style updates
                     */
                    this.source = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"](new MediaChange(true));
                    this.registry = new Map();
                    this._observable$ = this.source.asObservable();
                }
                Object.defineProperty(MatchMedia.prototype, "activations", {
                    /**
                     * Publish list of all current activations
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var results = [];
                        this.registry.forEach(( /**
                         * @param {?} mql
                         * @param {?} key
                         * @return {?}
                         */function (mql, key) {
                            if (mql.matches) {
                                results.push(key);
                            }
                        }));
                        return results;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * For the specified mediaQuery?
                 * @param {?} mediaQuery
                 * @return {?}
                 */
                MatchMedia.prototype.isActive = function (mediaQuery) {
                    /** @type {?} */
                    var mql = this.registry.get(mediaQuery);
                    return !!mql ? mql.matches : false;
                };
                /**
                 * External observers can watch for all (or a specific) mql changes.
                 * Typically used by the MediaQueryAdaptor; optionally available to components
                 * who wish to use the MediaMonitor as mediaMonitor$ observable service.
                 *
                 * Use deferred registration process to register breakpoints only on subscription
                 * This logic also enforces logic to register all mediaQueries BEFORE notify
                 * subscribers of notifications.
                 * @param {?=} mqList
                 * @param {?=} filterOthers
                 * @return {?}
                 */
                MatchMedia.prototype.observe = function (mqList, filterOthers) {
                    var _this = this;
                    if (filterOthers === void 0) { filterOthers = false; }
                    if (mqList && mqList.length) {
                        /** @type {?} */
                        var matchMedia$ = this._observable$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(( /**
                         * @param {?} change
                         * @return {?}
                         */function (change) {
                            return !filterOthers ? true : (mqList.indexOf(change.mediaQuery) > -1);
                        })));
                        /** @type {?} */
                        var registration$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](( /**
                         * @param {?} observer
                         * @return {?}
                         */function (observer) {
                            // tslint:disable-line:max-line-length
                            /** @type {?} */
                            var matches = _this.registerQuery(mqList);
                            if (matches.length) {
                                /** @type {?} */
                                var lastChange = ( /** @type {?} */(matches.pop()));
                                matches.forEach(( /**
                                 * @param {?} e
                                 * @return {?}
                                 */function (e) {
                                    observer.next(e);
                                }));
                                _this.source.next(lastChange); // last match is cached
                            }
                            observer.complete();
                        }));
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"])(registration$, matchMedia$);
                    }
                    return this._observable$;
                };
                /**
                 * Based on the BreakPointRegistry provider, register internal listeners for each unique
                 * mediaQuery. Each listener emits specific MediaChange data to observers
                 * @param {?} mediaQuery
                 * @return {?}
                 */
                MatchMedia.prototype.registerQuery = function (mediaQuery) {
                    var _this = this;
                    /** @type {?} */
                    var list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];
                    /** @type {?} */
                    var matches = [];
                    buildQueryCss(list, this._document);
                    list.forEach(( /**
                     * @param {?} query
                     * @return {?}
                     */function (query) {
                        /** @type {?} */
                        var onMQLEvent = ( /**
                         * @param {?} e
                         * @return {?}
                         */function (e) {
                            _this._zone.run(( /**
                             * @return {?}
                             */function () { return _this.source.next(new MediaChange(e.matches, query)); }));
                        });
                        /** @type {?} */
                        var mql = _this.registry.get(query);
                        if (!mql) {
                            mql = _this.buildMQL(query);
                            mql.addListener(onMQLEvent);
                            _this.registry.set(query, mql);
                        }
                        if (mql.matches) {
                            matches.push(new MediaChange(true, query));
                        }
                    }));
                    return matches;
                };
                /**
                 * Call window.matchMedia() to build a MediaQueryList; which
                 * supports 0..n listeners for activation/deactivation
                 * @protected
                 * @param {?} query
                 * @return {?}
                 */
                MatchMedia.prototype.buildMQL = function (query) {
                    return constructMql(query, Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformBrowser"])(this._platformId));
                };
                return MatchMedia;
            }());
            MatchMedia.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            MatchMedia.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ MatchMedia.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function MatchMedia_Factory() { return new MatchMedia(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"])); }, token: MatchMedia, providedIn: "root" });
            /**
             * Private global registry for all dynamically-created, injected style tags
             * @see prepare(query)
             * @type {?}
             */
            var ALL_STYLES = {};
            /**
             * For Webkit engines that only trigger the MediaQueryList Listener
             * when there is at least one CSS selector for the respective media query.
             *
             * @param {?} mediaQueries
             * @param {?} _document
             * @return {?}
             */
            function buildQueryCss(mediaQueries, _document) {
                /** @type {?} */
                var list = mediaQueries.filter(( /**
                 * @param {?} it
                 * @return {?}
                 */function (/**
                 * @param {?} it
                 * @return {?}
                 */ it) { return !ALL_STYLES[it]; }));
                if (list.length > 0) {
                    /** @type {?} */
                    var query = list.join(', ');
                    try {
                        /** @type {?} */
                        var styleEl_1 = _document.createElement('style');
                        styleEl_1.setAttribute('type', 'text/css');
                        if (!(( /** @type {?} */(styleEl_1))).styleSheet) {
                            /** @type {?} */
                            var cssText = "\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media " + query + " {.fx-query-test{ }}\n";
                            styleEl_1.appendChild(_document.createTextNode(cssText));
                        }
                        ( /** @type {?} */(_document.head)).appendChild(styleEl_1);
                        // Store in private global registry
                        list.forEach(( /**
                         * @param {?} mq
                         * @return {?}
                         */function (/**
                         * @param {?} mq
                         * @return {?}
                         */ mq) { return ALL_STYLES[mq] = styleEl_1; }));
                    }
                    catch (e) {
                        console.error(e);
                    }
                }
            }
            /**
             * @param {?} query
             * @param {?} isBrowser
             * @return {?}
             */
            function constructMql(query, isBrowser) {
                /** @type {?} */
                var canListen = isBrowser && !!(( /** @type {?} */(window))).matchMedia('all').addListener;
                return canListen ? (( /** @type {?} */(window))).matchMedia(query) : ( /** @type {?} */(( /** @type {?} */({
                    matches: query === 'all' || query === '',
                    media: query,
                    addListener: ( /**
                     * @return {?}
                     */function () {
                    }),
                    removeListener: ( /**
                     * @return {?}
                     */function () {
                    })
                }))));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated
             * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery
             * range and to clearAll mediaQuery listeners.
             */
            var MockMatchMedia = /** @class */ (function (_super) {
                __extends(MockMatchMedia, _super);
                // Allow fallback to overlapping mediaQueries
                /**
                 * @param {?} _zone
                 * @param {?} _platformId
                 * @param {?} _document
                 * @param {?} _breakpoints
                 */
                function MockMatchMedia(_zone, _platformId, _document, _breakpoints) {
                    var _this = _super.call(this, _zone, _platformId, _document) || this;
                    _this._breakpoints = _breakpoints;
                    _this.autoRegisterQueries = true; // Used for testing BreakPoint registrations
                    // Used for testing BreakPoint registrations
                    _this.useOverlaps = false; // Allow fallback to overlapping mediaQueries
                    return _this;
                }
                /**
                 * Easy method to clear all listeners for all mediaQueries
                 * @return {?}
                 */
                MockMatchMedia.prototype.clearAll = function () {
                    this.registry.forEach(( /**
                     * @param {?} mql
                     * @return {?}
                     */function (mql) {
                        (( /** @type {?} */(mql))).destroy();
                    }));
                    this.registry.clear();
                    this.useOverlaps = false;
                };
                /**
                 * Feature to support manual, simulated activation of a mediaQuery.
                 * @param {?} mediaQuery
                 * @param {?=} useOverlaps
                 * @return {?}
                 */
                MockMatchMedia.prototype.activate = function (mediaQuery, useOverlaps) {
                    if (useOverlaps === void 0) { useOverlaps = false; }
                    useOverlaps = useOverlaps || this.useOverlaps;
                    mediaQuery = this._validateQuery(mediaQuery);
                    if (useOverlaps || !this.isActive(mediaQuery)) {
                        this._deactivateAll();
                        this._registerMediaQuery(mediaQuery);
                        this._activateWithOverlaps(mediaQuery, useOverlaps);
                    }
                    return this.hasActivated;
                };
                /**
                 * Converts an optional mediaQuery alias to a specific, valid mediaQuery
                 * @param {?} queryOrAlias
                 * @return {?}
                 */
                MockMatchMedia.prototype._validateQuery = function (queryOrAlias) {
                    /** @type {?} */
                    var bp = this._breakpoints.findByAlias(queryOrAlias);
                    return (bp && bp.mediaQuery) || queryOrAlias;
                };
                /**
                 * Manually onMediaChange any overlapping mediaQueries to simulate
                 * similar functionality in the window.matchMedia()
                 * @private
                 * @param {?} mediaQuery
                 * @param {?} useOverlaps
                 * @return {?}
                 */
                MockMatchMedia.prototype._activateWithOverlaps = function (mediaQuery, useOverlaps) {
                    if (useOverlaps) {
                        /** @type {?} */
                        var bp = this._breakpoints.findByQuery(mediaQuery);
                        /** @type {?} */
                        var alias = bp ? bp.alias : 'unknown';
                        // Simulate activation of overlapping lt-<XXX> ranges
                        switch (alias) {
                            case 'lg':
                                this._activateByAlias('lt-xl');
                                break;
                            case 'md':
                                this._activateByAlias('lt-xl, lt-lg');
                                break;
                            case 'sm':
                                this._activateByAlias('lt-xl, lt-lg, lt-md');
                                break;
                            case 'xs':
                                this._activateByAlias('lt-xl, lt-lg, lt-md, lt-sm');
                                break;
                        }
                        // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges
                        switch (alias) {
                            case 'xl':
                                this._activateByAlias('gt-lg, gt-md, gt-sm, gt-xs');
                                break;
                            case 'lg':
                                this._activateByAlias('gt-md, gt-sm, gt-xs');
                                break;
                            case 'md':
                                this._activateByAlias('gt-sm, gt-xs');
                                break;
                            case 'sm':
                                this._activateByAlias('gt-xs');
                                break;
                        }
                    }
                    // Activate last since the responsiveActivation is watching *this* mediaQuery
                    return this._activateByQuery(mediaQuery);
                };
                /**
                 *
                 * @private
                 * @param {?} aliases
                 * @return {?}
                 */
                MockMatchMedia.prototype._activateByAlias = function (aliases) {
                    var _this = this;
                    /** @type {?} */
                    var activate = ( /**
                     * @param {?} alias
                     * @return {?}
                     */function (alias) {
                        /** @type {?} */
                        var bp = _this._breakpoints.findByAlias(alias);
                        _this._activateByQuery(bp ? bp.mediaQuery : alias);
                    });
                    aliases.split(',').forEach(( /**
                     * @param {?} alias
                     * @return {?}
                     */function (/**
                     * @param {?} alias
                     * @return {?}
                     */ alias) { return activate(alias.trim()); }));
                };
                /**
                 *
                 * @private
                 * @param {?} mediaQuery
                 * @return {?}
                 */
                MockMatchMedia.prototype._activateByQuery = function (mediaQuery) {
                    /** @type {?} */
                    var mql = ( /** @type {?} */(this.registry.get(mediaQuery)));
                    if (mql && !this.isActive(mediaQuery)) {
                        this.registry.set(mediaQuery, mql.activate());
                    }
                    return this.hasActivated;
                };
                /**
                 * Deactivate all current MQLs and reset the buffer
                 * @private
                 * @template THIS
                 * @this {THIS}
                 * @return {THIS}
                 */
                MockMatchMedia.prototype._deactivateAll = function () {
                    ( /** @type {?} */(this)).registry.forEach(( /**
                     * @param {?} it
                     * @return {?}
                     */function (it) {
                        (( /** @type {?} */(it))).deactivate();
                    }));
                    return ( /** @type {?} */(this));
                };
                /**
                 * Insure the mediaQuery is registered with MatchMedia
                 * @private
                 * @param {?} mediaQuery
                 * @return {?}
                 */
                MockMatchMedia.prototype._registerMediaQuery = function (mediaQuery) {
                    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {
                        this.registerQuery(mediaQuery);
                    }
                };
                /**
                 * Call window.matchMedia() to build a MediaQueryList; which
                 * supports 0..n listeners for activation/deactivation
                 * @protected
                 * @param {?} query
                 * @return {?}
                 */
                MockMatchMedia.prototype.buildMQL = function (query) {
                    return new MockMediaQueryList(query);
                };
                Object.defineProperty(MockMatchMedia.prototype, "hasActivated", {
                    /**
                     * @protected
                     * @return {?}
                     */
                    get: function () {
                        return this.activations.length > 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                return MockMatchMedia;
            }(MatchMedia));
            MockMatchMedia.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
            ];
            /** @nocollapse */
            MockMatchMedia.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"],] }] },
                { type: BreakPointRegistry }
            ]; };
            /**
             * Special internal class to simulate a MediaQueryList and
             * - supports manual activation to simulate mediaQuery matching
             * - manages listeners
             */
            var MockMediaQueryList = /** @class */ (function () {
                /**
                 * @param {?} _mediaQuery
                 */
                function MockMediaQueryList(_mediaQuery) {
                    this._mediaQuery = _mediaQuery;
                    this._isActive = false;
                    this._listeners = [];
                    this.onchange = null;
                }
                Object.defineProperty(MockMediaQueryList.prototype, "matches", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._isActive;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MockMediaQueryList.prototype, "media", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._mediaQuery;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Destroy the current list by deactivating the
                 * listeners and clearing the internal list
                 * @return {?}
                 */
                MockMediaQueryList.prototype.destroy = function () {
                    this.deactivate();
                    this._listeners = [];
                };
                /**
                 * Notify all listeners that 'matches === TRUE'
                 * @return {?}
                 */
                MockMediaQueryList.prototype.activate = function () {
                    var _this = this;
                    if (!this._isActive) {
                        this._isActive = true;
                        this._listeners.forEach(( /**
                         * @param {?} callback
                         * @return {?}
                         */function (callback) {
                            /** @type {?} */
                            var cb = ( /** @type {?} */(callback));
                            cb.call(null, _this);
                        }));
                    }
                    return this;
                };
                /**
                 * Notify all listeners that 'matches === false'
                 * @return {?}
                 */
                MockMediaQueryList.prototype.deactivate = function () {
                    var _this = this;
                    if (this._isActive) {
                        this._isActive = false;
                        this._listeners.forEach(( /**
                         * @param {?} callback
                         * @return {?}
                         */function (callback) {
                            /** @type {?} */
                            var cb = ( /** @type {?} */(callback));
                            cb.call(null, _this);
                        }));
                    }
                    return this;
                };
                /**
                 * Add a listener to our internal list to activate later
                 * @param {?} listener
                 * @return {?}
                 */
                MockMediaQueryList.prototype.addListener = function (listener) {
                    if (this._listeners.indexOf(listener) === -1) {
                        this._listeners.push(listener);
                    }
                    if (this._isActive) {
                        /** @type {?} */
                        var cb = ( /** @type {?} */(listener));
                        cb.call(null, this);
                    }
                };
                /**
                 * Don't need to remove listeners in the testing environment
                 * @param {?} _
                 * @return {?}
                 */
                MockMediaQueryList.prototype.removeListener = function (_) {
                };
                /**
                 * @param {?} _
                 * @param {?} __
                 * @param {?=} ___
                 * @return {?}
                 */
                MockMediaQueryList.prototype.addEventListener = function (_, __, ___) {
                };
                /**
                 * @param {?} _
                 * @param {?} __
                 * @param {?=} ___
                 * @return {?}
                 */
                MockMediaQueryList.prototype.removeEventListener = function (_, __, ___) {
                };
                /**
                 * @param {?} _
                 * @return {?}
                 */
                MockMediaQueryList.prototype.dispatchEvent = function (_) {
                    return false;
                };
                return MockMediaQueryList;
            }());
            /**
             * Pre-configured provider for MockMatchMedia
             * @type {?}
             */
            var MockMatchMediaProvider = {
                // tslint:disable-line:variable-name
                provide: MatchMedia,
                useClass: MockMatchMedia
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var PRINT = 'print';
            /** @type {?} */
            var BREAKPOINT_PRINT = {
                alias: PRINT,
                mediaQuery: PRINT,
                priority: 1000
            };
            /**
             * PrintHook - Use to intercept print MediaQuery activations and force
             *             layouts to render with the specified print alias/breakpoint
             *
             * Used in MediaMarshaller and MediaObserver
             */
            var PrintHook = /** @class */ (function () {
                /**
                 * @param {?} breakpoints
                 * @param {?} layoutConfig
                 */
                function PrintHook(breakpoints, layoutConfig) {
                    this.breakpoints = breakpoints;
                    this.layoutConfig = layoutConfig;
                    /**
                     * Is this service currently in Print-mode ?
                     */
                    this.isPrinting = false;
                    this.queue = new PrintQueue();
                    this.deactivations = [];
                }
                /**
                 * Add 'print' mediaQuery: to listen for matchMedia activations
                 * @param {?} queries
                 * @return {?}
                 */
                PrintHook.prototype.withPrintQuery = function (queries) {
                    return queries.concat([PRINT]);
                };
                /**
                 * Is the MediaChange event for any 'print' \@media
                 * @param {?} e
                 * @return {?}
                 */
                PrintHook.prototype.isPrintEvent = function (e) {
                    return e.mediaQuery.startsWith(PRINT);
                };
                Object.defineProperty(PrintHook.prototype, "printAlias", {
                    /**
                     * What is the desired mqAlias to use while printing?
                     * @return {?}
                     */
                    get: function () {
                        return this.layoutConfig.printWithBreakpoints || [];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PrintHook.prototype, "printBreakPoints", {
                    /**
                     * Lookup breakpoints associated with print aliases.
                     * @return {?}
                     */
                    get: function () {
                        var _this = this;
                        return ( /** @type {?} */(this.printAlias
                            .map(( /**
                     * @param {?} alias
                     * @return {?}
                     */function (/**
                     * @param {?} alias
                     * @return {?}
                     */ alias) { return _this.breakpoints.findByAlias(alias); }))
                            .filter(( /**
                     * @param {?} bp
                     * @return {?}
                     */function (/**
                     * @param {?} bp
                     * @return {?}
                     */ bp) { return bp !== null; }))));
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Lookup breakpoint associated with mediaQuery
                 * @param {?} __0
                 * @return {?}
                 */
                PrintHook.prototype.getEventBreakpoints = function (_b) {
                    var mediaQuery = _b.mediaQuery;
                    /** @type {?} */
                    var bp = this.breakpoints.findByQuery(mediaQuery);
                    /** @type {?} */
                    var list = bp ? this.printBreakPoints.concat([bp]) : this.printBreakPoints;
                    return list.sort(sortDescendingPriority);
                };
                /**
                 * Update event with printAlias mediaQuery information
                 * @param {?} event
                 * @return {?}
                 */
                PrintHook.prototype.updateEvent = function (event) {
                    /** @type {?} */
                    var bp = this.breakpoints.findByQuery(event.mediaQuery);
                    if (this.isPrintEvent(event)) {
                        // Reset from 'print' to first (highest priority) print breakpoint
                        bp = this.getEventBreakpoints(event)[0];
                        event.mediaQuery = bp ? bp.mediaQuery : '';
                    }
                    return mergeAlias(event, bp);
                };
                /**
                 * Prepare RxJs filter operator with partial application
                 * @param {?} target
                 * @return {?} pipeable filter predicate
                 */
                PrintHook.prototype.interceptEvents = function (target) {
                    var _this = this;
                    return ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        if (_this.isPrintEvent(event)) {
                            if (event.matches && !_this.isPrinting) {
                                _this.startPrinting(target, _this.getEventBreakpoints(event));
                                target.updateStyles();
                            }
                            else if (!event.matches && _this.isPrinting) {
                                _this.stopPrinting(target);
                                target.updateStyles();
                            }
                        }
                        else {
                            _this.collectActivations(event);
                        }
                    });
                };
                /**
                 * Stop mediaChange event propagation in event streams
                 * @return {?}
                 */
                PrintHook.prototype.blockPropagation = function () {
                    var _this = this;
                    return ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        return !(_this.isPrinting || _this.isPrintEvent(event));
                    });
                };
                /**
                 * Save current activateBreakpoints (for later restore)
                 * and substitute only the printAlias breakpoint
                 * @protected
                 * @param {?} target
                 * @param {?} bpList
                 * @return {?}
                 */
                PrintHook.prototype.startPrinting = function (target, bpList) {
                    this.isPrinting = true;
                    target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);
                };
                /**
                 * For any print de-activations, reset the entire print queue
                 * @protected
                 * @param {?} target
                 * @return {?}
                 */
                PrintHook.prototype.stopPrinting = function (target) {
                    target.activatedBreakpoints = this.deactivations;
                    this.deactivations = [];
                    this.queue.clear();
                    this.isPrinting = false;
                };
                /**
                 * To restore pre-Print Activations, we must capture the proper
                 * list of breakpoint activations BEFORE print starts. OnBeforePrint()
                 * is not supported; so 'print' mediaQuery activations must be used.
                 *
                 * >  But activated breakpoints are deactivated BEFORE 'print' activation.
                 *
                 * Let's capture all de-activations using the following logic:
                 *
                 *  When not printing:
                 *    - clear cache when activating non-print breakpoint
                 *    - update cache (and sort) when deactivating
                 *
                 *  When printing:
                 *    - sort and save when starting print
                 *    - restore as activatedTargets and clear when stop printing
                 * @param {?} event
                 * @return {?}
                 */
                PrintHook.prototype.collectActivations = function (event) {
                    if (!this.isPrinting) {
                        if (!event.matches) {
                            /** @type {?} */
                            var bp = this.breakpoints.findByQuery(event.mediaQuery);
                            if (bp) { // Deactivating a breakpoint
                                this.deactivations.push(bp);
                                this.deactivations.sort(sortDescendingPriority);
                            }
                        }
                        else {
                            this.deactivations = [];
                        }
                    }
                };
                return PrintHook;
            }());
            PrintHook.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            PrintHook.ctorParameters = function () { return [
                { type: BreakPointRegistry },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [LAYOUT_CONFIG,] }] }
            ]; };
            /** @nocollapse */ PrintHook.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function PrintHook_Factory() { return new PrintHook(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BreakPointRegistry), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(LAYOUT_CONFIG)); }, token: PrintHook, providedIn: "root" });
            // ************************************************************************
            // Internal Utility class 'PrintQueue'
            // ************************************************************************
            /**
             * Utility class to manage print breakpoints + activatedBreakpoints
             * with correct sorting WHILE printing
             */
            var PrintQueue = /** @class */ (function () {
                function PrintQueue() {
                    /**
                     * Sorted queue with prioritized print breakpoints
                     */
                    this.printBreakpoints = [];
                }
                /**
                 * @param {?} bpList
                 * @return {?}
                 */
                PrintQueue.prototype.addPrintBreakpoints = function (bpList) {
                    var _this = this;
                    bpList.push(BREAKPOINT_PRINT);
                    bpList.sort(sortDescendingPriority);
                    bpList.forEach(( /**
                     * @param {?} bp
                     * @return {?}
                     */function (/**
                     * @param {?} bp
                     * @return {?}
                     */ bp) { return _this.addBreakpoint(bp); }));
                    return this.printBreakpoints;
                };
                /**
                 * Add Print breakpoint to queue
                 * @param {?} bp
                 * @return {?}
                 */
                PrintQueue.prototype.addBreakpoint = function (bp) {
                    if (!!bp) {
                        /** @type {?} */
                        var bpInList = this.printBreakpoints.find(( /**
                         * @param {?} it
                         * @return {?}
                         */function (/**
                         * @param {?} it
                         * @return {?}
                         */ it) { return it.mediaQuery === bp.mediaQuery; }));
                        if (bpInList === undefined) {
                            // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,
                            // register as highest priority in the queue
                            this.printBreakpoints = isPrintBreakPoint(bp) ? [bp].concat(this.printBreakpoints) : this.printBreakpoints.concat([bp]);
                        }
                    }
                };
                /**
                 * Restore original activated breakpoints and clear internal caches
                 * @return {?}
                 */
                PrintQueue.prototype.clear = function () {
                    this.printBreakpoints = [];
                };
                return PrintQueue;
            }());
            // ************************************************************************
            // Internal Utility methods
            // ************************************************************************
            /**
             * Only support intercept queueing if the Breakpoint is a print \@media query
             * @param {?} bp
             * @return {?}
             */
            function isPrintBreakPoint(bp) {
                return bp ? bp.mediaQuery.startsWith(PRINT) : false;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Wraps the provided value in an array, unless the provided value is an array.
             * @template T
             * @param {?} value
             * @return {?}
             */
            function coerceArray(value) {
                return Array.isArray(value) ? value : [value];
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine
             * if a mediaQuery is currently activated.
             *
             * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate
             * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*
             * in 1 event notification. The reported activations will be sorted in descending priority order.
             *
             * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange
             * notification. For custom mediaQuery notifications, alias information will not be injected and
             * those fields will be ''.
             *
             * Note: Developers should note that only mediaChange activations (not de-activations)
             *       are announced by the MediaObserver.
             *
             * \@usage
             *
             *  // RxJS
             *  import { filter } from 'rxjs/operators';
             *  import { MediaObserver } from '\@angular/flex-layout';
             *
             * \@Component({ ... })
             *  export class AppComponent {
             *    status: string = '';
             *
             *    constructor(mediaObserver: MediaObserver) {
             *      const media$ = mediaObserver.asObservable().pipe(
             *        filter((changes: MediaChange[]) => true)   // silly noop filter
             *      );
             *
             *      media$.subscribe((changes: MediaChange[]) => {
             *        let status = '';
             *        changes.forEach( change => {
             *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;
             *        });
             *        this.status = status;
             *     });
             *
             *    }
             *  }
             */
            var MediaObserver = /** @class */ (function () {
                /**
                 * @param {?} breakpoints
                 * @param {?} matchMedia
                 * @param {?} hook
                 */
                function MediaObserver(breakpoints, matchMedia, hook) {
                    this.breakpoints = breakpoints;
                    this.matchMedia = matchMedia;
                    this.hook = hook;
                    /**
                     * Filter MediaChange notifications for overlapping breakpoints
                     */
                    this.filterOverlaps = false;
                    this.destroyed$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    this._media$ = this.watchActivations();
                    this.media$ = this._media$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(( /**
                     * @param {?} changes
                     * @return {?}
                     */function (changes) { return changes.length > 0; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(( /**
                     * @param {?} changes
                     * @return {?}
                     */function (changes) { return changes[0]; })));
                }
                /**
                 * Completes the active subject, signalling to all complete for all
                 * MediaObserver subscribers
                 * @return {?}
                 */
                MediaObserver.prototype.ngOnDestroy = function () {
                    this.destroyed$.next();
                    this.destroyed$.complete();
                };
                // ************************************************
                // Public Methods
                // ************************************************
                /**
                 * Observe changes to current activation 'list'
                 * @return {?}
                 */
                MediaObserver.prototype.asObservable = function () {
                    return this._media$;
                };
                /**
                 * Allow programmatic query to determine if one or more media query/alias match
                 * the current viewport size.
                 * @param {?} value One or more media queries (or aliases) to check.
                 * @return {?} Whether any of the media queries match.
                 */
                MediaObserver.prototype.isActive = function (value) {
                    var _this = this;
                    /** @type {?} */
                    var aliases = splitQueries(coerceArray(value));
                    return aliases.some(( /**
                     * @param {?} alias
                     * @return {?}
                     */function (/**
                     * @param {?} alias
                     * @return {?}
                     */ alias) {
                        /** @type {?} */
                        var query = toMediaQuery(alias, _this.breakpoints);
                        return _this.matchMedia.isActive(query);
                    }));
                };
                // ************************************************
                // Internal Methods
                // ************************************************
                /**
                 * Register all the mediaQueries registered in the BreakPointRegistry
                 * This is needed so subscribers can be auto-notified of all standard, registered
                 * mediaQuery activations
                 * @private
                 * @return {?}
                 */
                MediaObserver.prototype.watchActivations = function () {
                    /** @type {?} */
                    var queries = this.breakpoints.items.map(( /**
                     * @param {?} bp
                     * @return {?}
                     */function (/**
                     * @param {?} bp
                     * @return {?}
                     */ bp) { return bp.mediaQuery; }));
                    return this.buildObservable(queries);
                };
                /**
                 * Only pass/announce activations (not de-activations)
                 *
                 * Since multiple-mediaQueries can be activation in a cycle,
                 * gather all current activations into a single list of changes to observers
                 *
                 * Inject associated (if any) alias information into the MediaChange event
                 * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only
                 * - Exclude print activations that do not have an associated mediaQuery
                 *
                 * NOTE: the raw MediaChange events [from MatchMedia] do not
                 *       contain important alias information; as such this info
                 *       must be injected into the MediaChange
                 * @private
                 * @param {?} mqList
                 * @return {?}
                 */
                MediaObserver.prototype.buildObservable = function (mqList) {
                    var _this = this;
                    /** @type {?} */
                    var hasChanges = ( /**
                     * @param {?} changes
                     * @return {?}
                     */function (changes) {
                        /** @type {?} */
                        var isValidQuery = ( /**
                         * @param {?} change
                         * @return {?}
                         */function (change) { return (change.mediaQuery.length > 0); });
                        return (changes.filter(isValidQuery).length > 0);
                    });
                    /** @type {?} */
                    var excludeOverlaps = ( /**
                     * @param {?} changes
                     * @return {?}
                     */function (changes) {
                        return !_this.filterOverlaps ? changes : changes.filter(( /**
                         * @param {?} change
                         * @return {?}
                         */function (/**
                         * @param {?} change
                         * @return {?}
                         */ change) {
                            /** @type {?} */
                            var bp = _this.breakpoints.findByQuery(change.mediaQuery);
                            return !bp ? true : !bp.overlapping;
                        }));
                    });
                    /**
                     */
                    return this.matchMedia
                        .observe(this.hook.withPrintQuery(mqList))
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(( /**
                 * @param {?} change
                 * @return {?}
                 */function (change) { return change.matches; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["debounceTime"])(0, rxjs__WEBPACK_IMPORTED_MODULE_2__["asapScheduler"]), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])(( /**
                     * @param {?} _
                     * @return {?}
                     */function (/**
                     * @param {?} _
                     * @return {?}
                     */ _) { return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(_this.findAllActivations()); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(excludeOverlaps), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(hasChanges), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this.destroyed$));
                };
                /**
                 * Find all current activations and prepare single list of activations
                 * sorted by descending priority.
                 * @private
                 * @return {?}
                 */
                MediaObserver.prototype.findAllActivations = function () {
                    var _this = this;
                    /** @type {?} */
                    var mergeMQAlias = ( /**
                     * @param {?} change
                     * @return {?}
                     */function (change) {
                        /** @type {?} */
                        var bp = _this.breakpoints.findByQuery(change.mediaQuery);
                        return mergeAlias(change, bp);
                    });
                    /** @type {?} */
                    var replaceWithPrintAlias = ( /**
                     * @param {?} change
                     * @return {?}
                     */function (change) {
                        return _this.hook.isPrintEvent(change) ? _this.hook.updateEvent(change) : change;
                    });
                    return this.matchMedia
                        .activations
                        .map(( /**
                 * @param {?} query
                 * @return {?}
                 */function (/**
                 * @param {?} query
                 * @return {?}
                 */ query) { return new MediaChange(true, query); }))
                        .map(replaceWithPrintAlias)
                        .map(mergeMQAlias)
                        .sort(sortDescendingPriority);
                };
                return MediaObserver;
            }());
            MediaObserver.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            MediaObserver.ctorParameters = function () { return [
                { type: BreakPointRegistry },
                { type: MatchMedia },
                { type: PrintHook }
            ]; };
            /** @nocollapse */ MediaObserver.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function MediaObserver_Factory() { return new MediaObserver(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BreakPointRegistry), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(MatchMedia), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PrintHook)); }, token: MediaObserver, providedIn: "root" });
            /**
             * Find associated breakpoint (if any)
             * @param {?} query
             * @param {?} locator
             * @return {?}
             */
            function toMediaQuery(query, locator) {
                /** @type {?} */
                var bp = locator.findByAlias(query) || locator.findByQuery(query);
                return bp ? bp.mediaQuery : query;
            }
            /**
             * Split each query string into separate query strings if two queries are provided as comma
             * separated.
             * @param {?} queries
             * @return {?}
             */
            function splitQueries(queries) {
                return queries.map(( /**
                 * @param {?} query
                 * @return {?}
                 */function (query) { return query.split(','); }))
                    .reduce(( /**
             * @param {?} a1
             * @param {?} a2
             * @return {?}
             */function (a1, a2) { return a1.concat(a2); }))
                    .map(( /**
             * @param {?} query
             * @return {?}
             */function (/**
             * @param {?} query
             * @return {?}
             */ query) { return query.trim(); }));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Class
             */
            var MediaTrigger = /** @class */ (function () {
                /**
                 * @param {?} breakpoints
                 * @param {?} matchMedia
                 * @param {?} layoutConfig
                 * @param {?} _platformId
                 * @param {?} _document
                 */
                function MediaTrigger(breakpoints, matchMedia, layoutConfig, _platformId, _document) {
                    this.breakpoints = breakpoints;
                    this.matchMedia = matchMedia;
                    this.layoutConfig = layoutConfig;
                    this._platformId = _platformId;
                    this._document = _document;
                    this.hasCachedRegistryMatches = false;
                    this.originalActivations = [];
                    this.originalRegistry = new Map();
                }
                /**
                 * Manually activate range of breakpoints
                 * @param {?} list array of mediaQuery or alias strings
                 * @return {?}
                 */
                MediaTrigger.prototype.activate = function (list) {
                    list = list.map(( /**
                     * @param {?} it
                     * @return {?}
                     */function (/**
                     * @param {?} it
                     * @return {?}
                     */ it) { return it.trim(); })); // trim queries
                    this.saveActivations();
                    this.deactivateAll();
                    this.setActivations(list);
                    this.prepareAutoRestore();
                };
                /**
                 * Restore original, 'real' breakpoints and emit events
                 * to trigger stream notification
                 * @return {?}
                 */
                MediaTrigger.prototype.restore = function () {
                    if (this.hasCachedRegistryMatches) {
                        /** @type {?} */
                        var extractQuery = ( /**
                         * @param {?} change
                         * @return {?}
                         */function (change) { return change.mediaQuery; });
                        /** @type {?} */
                        var list = this.originalActivations.map(extractQuery);
                        try {
                            this.deactivateAll();
                            this.restoreRegistryMatches();
                            this.setActivations(list);
                        }
                        finally {
                            this.originalActivations = [];
                            if (this.resizeSubscription) {
                                this.resizeSubscription.unsubscribe();
                            }
                        }
                    }
                };
                // ************************************************
                // Internal Methods
                // ************************************************
                /**
                 * Whenever window resizes, immediately auto-restore original
                 * activations (if we are simulating activations)
                 * @private
                 * @return {?}
                 */
                MediaTrigger.prototype.prepareAutoRestore = function () {
                    /** @type {?} */
                    var isBrowser = Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformBrowser"])(this._platformId) && this._document;
                    /** @type {?} */
                    var enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;
                    if (enableAutoRestore) {
                        /** @type {?} */
                        var resize$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window, 'resize').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1));
                        this.resizeSubscription = resize$.subscribe(this.restore.bind(this));
                    }
                };
                /**
                 * Notify all matchMedia subscribers of de-activations
                 *
                 * Note: we must force 'matches' updates for
                 *       future matchMedia::activation lookups
                 * @private
                 * @return {?}
                 */
                MediaTrigger.prototype.deactivateAll = function () {
                    /** @type {?} */
                    var list = this.currentActivations;
                    this.forceRegistryMatches(list, false);
                    this.simulateMediaChanges(list, false);
                };
                /**
                 * Cache current activations as sorted, prioritized list of MediaChanges
                 * @private
                 * @return {?}
                 */
                MediaTrigger.prototype.saveActivations = function () {
                    var _this = this;
                    if (!this.hasCachedRegistryMatches) {
                        /** @type {?} */
                        var toMediaChange = ( /**
                         * @param {?} query
                         * @return {?}
                         */function (query) { return new MediaChange(true, query); });
                        /** @type {?} */
                        var mergeMQAlias = ( /**
                         * @param {?} change
                         * @return {?}
                         */function (change) {
                            /** @type {?} */
                            var bp = _this.breakpoints.findByQuery(change.mediaQuery);
                            return mergeAlias(change, bp);
                        });
                        this.originalActivations = this.currentActivations
                            .map(toMediaChange)
                            .map(mergeMQAlias)
                            .sort(sortDescendingPriority);
                        this.cacheRegistryMatches();
                    }
                };
                /**
                 * Force set manual activations for specified mediaQuery list
                 * @private
                 * @param {?} list
                 * @return {?}
                 */
                MediaTrigger.prototype.setActivations = function (list) {
                    if (!!this.originalRegistry) {
                        this.forceRegistryMatches(list, true);
                    }
                    this.simulateMediaChanges(list);
                };
                /**
                 * For specified mediaQuery list manually simulate activations or deactivations
                 * @private
                 * @param {?} queries
                 * @param {?=} matches
                 * @return {?}
                 */
                MediaTrigger.prototype.simulateMediaChanges = function (queries, matches) {
                    var _this = this;
                    if (matches === void 0) { matches = true; }
                    /** @type {?} */
                    var toMediaQuery = ( /**
                     * @param {?} query
                     * @return {?}
                     */function (query) {
                        /** @type {?} */
                        var locator = _this.breakpoints;
                        /** @type {?} */
                        var bp = locator.findByAlias(query) || locator.findByQuery(query);
                        return bp ? bp.mediaQuery : query;
                    });
                    /** @type {?} */
                    var emitChangeEvent = ( /**
                     * @param {?} query
                     * @return {?}
                     */function (query) { return _this.emitChangeEvent(matches, query); });
                    queries.map(toMediaQuery).forEach(emitChangeEvent);
                };
                /**
                 * Replace current registry with simulated registry...
                 * Note: this is required since MediaQueryList::matches is 'readOnly'
                 * @private
                 * @param {?} queries
                 * @param {?} matches
                 * @return {?}
                 */
                MediaTrigger.prototype.forceRegistryMatches = function (queries, matches) {
                    /** @type {?} */
                    var registry = new Map();
                    queries.forEach(( /**
                     * @param {?} query
                     * @return {?}
                     */function (/**
                     * @param {?} query
                     * @return {?}
                     */ query) {
                        registry.set(query, ( /** @type {?} */({ matches: matches })));
                    }));
                    this.matchMedia.registry = registry;
                };
                /**
                 * Save current MatchMedia::registry items.
                 * @private
                 * @return {?}
                 */
                MediaTrigger.prototype.cacheRegistryMatches = function () {
                    /** @type {?} */
                    var target = this.originalRegistry;
                    target.clear();
                    this.matchMedia.registry.forEach(( /**
                     * @param {?} value
                     * @param {?} key
                     * @return {?}
                     */function (value, key) {
                        target.set(key, value);
                    }));
                    this.hasCachedRegistryMatches = true;
                };
                /**
                 * Restore original, 'true' registry
                 * @private
                 * @return {?}
                 */
                MediaTrigger.prototype.restoreRegistryMatches = function () {
                    /** @type {?} */
                    var target = this.matchMedia.registry;
                    target.clear();
                    this.originalRegistry.forEach(( /**
                     * @param {?} value
                     * @param {?} key
                     * @return {?}
                     */function (value, key) {
                        target.set(key, value);
                    }));
                    this.originalRegistry.clear();
                    this.hasCachedRegistryMatches = false;
                };
                /**
                 * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver
                 * @private
                 * @param {?} matches
                 * @param {?} query
                 * @return {?}
                 */
                MediaTrigger.prototype.emitChangeEvent = function (matches, query) {
                    this.matchMedia.source.next(new MediaChange(matches, query));
                };
                Object.defineProperty(MediaTrigger.prototype, "currentActivations", {
                    /**
                     * @private
                     * @return {?}
                     */
                    get: function () {
                        return this.matchMedia.activations;
                    },
                    enumerable: true,
                    configurable: true
                });
                return MediaTrigger;
            }());
            MediaTrigger.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            MediaTrigger.ctorParameters = function () { return [
                { type: BreakPointRegistry },
                { type: MatchMedia },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [LAYOUT_CONFIG,] }] },
                { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ MediaTrigger.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function MediaTrigger_Factory() { return new MediaTrigger(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BreakPointRegistry), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(MatchMedia), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(LAYOUT_CONFIG), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"])); }, token: MediaTrigger, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Applies CSS prefixes to appropriate style keys.
             *
             * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.
             *    {
             *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10
             *      display: flex;             NEW, Spec - Firefox, Chrome, Opera
             *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7
             *      // display: -ms-flexbox;   TWEENER - IE 10
             *      // display: -moz-flexbox;  OLD - Firefox
             *    }
             * @param {?} target
             * @return {?}
             */
            function applyCssPrefixes(target) {
                for (var key in target) {
                    /** @type {?} */
                    var value = target[key] || '';
                    switch (key) {
                        case 'display':
                            if (value === 'flex') {
                                target['display'] = [
                                    '-webkit-flex',
                                    'flex'
                                ];
                            }
                            else if (value === 'inline-flex') {
                                target['display'] = [
                                    '-webkit-inline-flex',
                                    'inline-flex'
                                ];
                            }
                            else {
                                target['display'] = value;
                            }
                            break;
                        case 'align-items':
                        case 'align-self':
                        case 'align-content':
                        case 'flex':
                        case 'flex-basis':
                        case 'flex-flow':
                        case 'flex-grow':
                        case 'flex-shrink':
                        case 'flex-wrap':
                        case 'justify-content':
                            target['-webkit-' + key] = value;
                            break;
                        case 'flex-direction':
                            value = value || 'row';
                            target['-webkit-flex-direction'] = value;
                            target['flex-direction'] = value;
                            break;
                        case 'order':
                            target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;
                            break;
                    }
                }
                return target;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var StyleUtils = /** @class */ (function () {
                /**
                 * @param {?} _serverStylesheet
                 * @param {?} _serverModuleLoaded
                 * @param {?} _platformId
                 * @param {?} layoutConfig
                 */
                function StyleUtils(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {
                    this._serverStylesheet = _serverStylesheet;
                    this._serverModuleLoaded = _serverModuleLoaded;
                    this._platformId = _platformId;
                    this.layoutConfig = layoutConfig;
                }
                /**
                 * Applies styles given via string pair or object map to the directive element
                 * @param {?} element
                 * @param {?} style
                 * @param {?=} value
                 * @return {?}
                 */
                StyleUtils.prototype.applyStyleToElement = function (element, style, value) {
                    if (value === void 0) { value = null; }
                    /** @type {?} */
                    var styles = {};
                    if (typeof style === 'string') {
                        styles[style] = value;
                        style = styles;
                    }
                    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);
                    this._applyMultiValueStyleToElement(styles, element);
                };
                /**
                 * Applies styles given via string pair or object map to the directive's element
                 * @param {?} style
                 * @param {?=} elements
                 * @return {?}
                 */
                StyleUtils.prototype.applyStyleToElements = function (style, elements) {
                    var _this = this;
                    if (elements === void 0) { elements = []; }
                    /** @type {?} */
                    var styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);
                    elements.forEach(( /**
                     * @param {?} el
                     * @return {?}
                     */function (/**
                     * @param {?} el
                     * @return {?}
                     */ el) {
                        _this._applyMultiValueStyleToElement(styles, el);
                    }));
                };
                /**
                 * Determine the DOM element's Flexbox flow (flex-direction)
                 *
                 * Check inline style first then check computed (stylesheet) style
                 * @param {?} target
                 * @return {?}
                 */
                StyleUtils.prototype.getFlowDirection = function (target) {
                    /** @type {?} */
                    var query = 'flex-direction';
                    /** @type {?} */
                    var value = this.lookupStyle(target, query);
                    /** @type {?} */
                    var hasInlineValue = this.lookupInlineStyle(target, query) ||
                        (Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformServer"])(this._platformId) && this._serverModuleLoaded) ? value : '';
                    return [value || 'row', hasInlineValue];
                };
                /**
                 * Find the DOM element's raw attribute value (if any)
                 * @param {?} element
                 * @param {?} attribute
                 * @return {?}
                 */
                StyleUtils.prototype.lookupAttributeValue = function (element, attribute) {
                    return element.getAttribute(attribute) || '';
                };
                /**
                 * Find the DOM element's inline style value (if any)
                 * @param {?} element
                 * @param {?} styleName
                 * @return {?}
                 */
                StyleUtils.prototype.lookupInlineStyle = function (element, styleName) {
                    return Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformBrowser"])(this._platformId) ?
                        element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);
                };
                /**
                 * Determine the inline or inherited CSS style
                 * NOTE: platform-server has no implementation for getComputedStyle
                 * @param {?} element
                 * @param {?} styleName
                 * @param {?=} inlineOnly
                 * @return {?}
                 */
                StyleUtils.prototype.lookupStyle = function (element, styleName, inlineOnly) {
                    if (inlineOnly === void 0) { inlineOnly = false; }
                    /** @type {?} */
                    var value = '';
                    if (element) {
                        /** @type {?} */
                        var immediateValue = value = this.lookupInlineStyle(element, styleName);
                        if (!immediateValue) {
                            if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformBrowser"])(this._platformId)) {
                                if (!inlineOnly) {
                                    value = getComputedStyle(element).getPropertyValue(styleName);
                                }
                            }
                            else {
                                if (this._serverModuleLoaded) {
                                    value = this._serverStylesheet.getStyleForElement(element, styleName);
                                }
                            }
                        }
                    }
                    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;
                    //       in which case getComputedStyle() should determine a valid value.
                    return value ? value.trim() : '';
                };
                /**
                 * Applies the styles to the element. The styles object map may contain an array of values
                 * Each value will be added as element style
                 * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones
                 * @private
                 * @param {?} styles
                 * @param {?} element
                 * @return {?}
                 */
                StyleUtils.prototype._applyMultiValueStyleToElement = function (styles, element) {
                    var _this = this;
                    Object.keys(styles).sort().forEach(( /**
                     * @param {?} key
                     * @return {?}
                     */function (/**
                     * @param {?} key
                     * @return {?}
                     */ key) {
                        /** @type {?} */
                        var el = styles[key];
                        /** @type {?} */
                        var values = Array.isArray(el) ? el : [el];
                        values.sort();
                        for (var _b = 0, values_1 = values; _b < values_1.length; _b++) {
                            var value = values_1[_b];
                            value = value ? value + '' : '';
                            if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformBrowser"])(_this._platformId) || !_this._serverModuleLoaded) {
                                Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformBrowser"])(_this._platformId) ?
                                    element.style.setProperty(key, value) : _this._setServerStyle(element, key, value);
                            }
                            else {
                                _this._serverStylesheet.addStyleToElement(element, key, value);
                            }
                        }
                    }));
                };
                /**
                 * @private
                 * @param {?} element
                 * @param {?} styleName
                 * @param {?=} styleValue
                 * @return {?}
                 */
                StyleUtils.prototype._setServerStyle = function (element, styleName, styleValue) {
                    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
                    /** @type {?} */
                    var styleMap = this._readStyleAttribute(element);
                    styleMap[styleName] = styleValue || '';
                    this._writeStyleAttribute(element, styleMap);
                };
                /**
                 * @private
                 * @param {?} element
                 * @param {?} styleName
                 * @return {?}
                 */
                StyleUtils.prototype._getServerStyle = function (element, styleName) {
                    /** @type {?} */
                    var styleMap = this._readStyleAttribute(element);
                    return styleMap[styleName] || '';
                };
                /**
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                StyleUtils.prototype._readStyleAttribute = function (element) {
                    /** @type {?} */
                    var styleMap = {};
                    /** @type {?} */
                    var styleAttribute = element.getAttribute('style');
                    if (styleAttribute) {
                        /** @type {?} */
                        var styleList = styleAttribute.split(/;+/g);
                        for (var i = 0; i < styleList.length; i++) {
                            /** @type {?} */
                            var style = styleList[i].trim();
                            if (style.length > 0) {
                                /** @type {?} */
                                var colonIndex = style.indexOf(':');
                                if (colonIndex === -1) {
                                    throw new Error("Invalid CSS style: " + style);
                                }
                                /** @type {?} */
                                var name = style.substr(0, colonIndex).trim();
                                styleMap[name] = style.substr(colonIndex + 1).trim();
                            }
                        }
                    }
                    return styleMap;
                };
                /**
                 * @private
                 * @param {?} element
                 * @param {?} styleMap
                 * @return {?}
                 */
                StyleUtils.prototype._writeStyleAttribute = function (element, styleMap) {
                    /** @type {?} */
                    var styleAttrValue = '';
                    for (var key in styleMap) {
                        /** @type {?} */
                        var newValue = styleMap[key];
                        if (newValue) {
                            styleAttrValue += key + ':' + styleMap[key] + ';';
                        }
                    }
                    element.setAttribute('style', styleAttrValue);
                };
                return StyleUtils;
            }());
            StyleUtils.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            StyleUtils.ctorParameters = function () { return [
                { type: StylesheetMap, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: Boolean, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [SERVER_TOKEN,] }] },
                { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [LAYOUT_CONFIG,] }] }
            ]; };
            /** @nocollapse */ StyleUtils.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function StyleUtils_Factory() { return new StyleUtils(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(StylesheetMap, 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(SERVER_TOKEN, 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(LAYOUT_CONFIG)); }, token: StyleUtils, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * A class that encapsulates CSS style generation for common directives
             * @abstract
             */
            var StyleBuilder = /** @class */ (function () {
                function StyleBuilder() {
                    /**
                     * Whether to cache the generated output styles
                     */
                    this.shouldCache = true;
                }
                /**
                 * Run a side effect computation given the input string and the computed styles
                 * from the build task and the host configuration object
                 * NOTE: This should be a no-op unless an algorithm is provided in a subclass
                 * @param {?} _input
                 * @param {?} _styles
                 * @param {?=} _parent
                 * @return {?}
                 */
                StyleBuilder.prototype.sideEffect = function (_input, _styles, _parent) {
                };
                return StyleBuilder;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The flex API permits 3 or 1 parts of the value:
             *    - `flex-grow flex-shrink flex-basis`, or
             *    - `flex-basis`
             * @param {?} basis
             * @param {?=} grow
             * @param {?=} shrink
             * @return {?}
             */
            function validateBasis(basis, grow, shrink) {
                if (grow === void 0) { grow = '1'; }
                if (shrink === void 0) { shrink = '1'; }
                /** @type {?} */
                var parts = [grow, shrink, basis];
                /** @type {?} */
                var j = basis.indexOf('calc');
                if (j > 0) {
                    parts[2] = _validateCalcValue(basis.substring(j).trim());
                    /** @type {?} */
                    var matches = basis.substr(0, j).trim().split(' ');
                    if (matches.length == 2) {
                        parts[0] = matches[0];
                        parts[1] = matches[1];
                    }
                }
                else if (j == 0) {
                    parts[2] = _validateCalcValue(basis.trim());
                }
                else {
                    /** @type {?} */
                    var matches = basis.split(' ');
                    parts = (matches.length === 3) ? matches : [
                        grow, shrink, basis
                    ];
                }
                return parts;
            }
            /**
             * Calc expressions require whitespace before & after any expression operators
             * This is a simple, crude whitespace padding solution.
             *   - '3 3 calc(15em + 20px)'
             *   - calc(100% / 7 * 2)
             *   - 'calc(15em + 20px)'
             *   - 'calc(15em+20px)'
             *   - '37px'
             *   = '43%'
             * @param {?} calc
             * @return {?}
             */
            function _validateCalcValue(calc) {
                return calc.replace(/[\s]/g, '').replace(/[\/\*\+\-]/g, ' $& ');
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * MediaMarshaller - register responsive values from directives and
             *                   trigger them based on media query events
             */
            var MediaMarshaller = /** @class */ (function () {
                /**
                 * @param {?} matchMedia
                 * @param {?} breakpoints
                 * @param {?} hook
                 */
                function MediaMarshaller(matchMedia, breakpoints, hook) {
                    this.matchMedia = matchMedia;
                    this.breakpoints = breakpoints;
                    this.hook = hook;
                    this.activatedBreakpoints = [];
                    this.elementMap = new Map();
                    this.elementKeyMap = new WeakMap();
                    this.watcherMap = new WeakMap(); // special triggers to update elements
                    // special triggers to update elements
                    this.updateMap = new WeakMap(); // callback functions to update styles
                    // callback functions to update styles
                    this.clearMap = new WeakMap(); // callback functions to clear styles
                    // callback functions to clear styles
                    this.subject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    this.observeActivations();
                }
                Object.defineProperty(MediaMarshaller.prototype, "activatedAlias", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Update styles on breakpoint activates or deactivates
                 * @param {?} mc
                 * @return {?}
                 */
                MediaMarshaller.prototype.onMediaChange = function (mc) {
                    /** @type {?} */
                    var bp = this.findByQuery(mc.mediaQuery);
                    if (bp) {
                        mc = mergeAlias(mc, bp);
                        if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {
                            this.activatedBreakpoints.push(bp);
                            this.activatedBreakpoints.sort(sortDescendingPriority);
                            this.updateStyles();
                        }
                        else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {
                            // Remove the breakpoint when it's deactivated
                            this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);
                            this.activatedBreakpoints.sort(sortDescendingPriority);
                            this.updateStyles();
                        }
                    }
                };
                /**
                 * initialize the marshaller with necessary elements for delegation on an element
                 * @param {?} element
                 * @param {?} key
                 * @param {?=} updateFn optional callback so that custom bp directives don't have to re-provide this
                 * @param {?=} clearFn optional callback so that custom bp directives don't have to re-provide this
                 * @param {?=} extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)
                 * @return {?}
                 */
                MediaMarshaller.prototype.init = function (element, key, updateFn, clearFn, extraTriggers) {
                    if (extraTriggers === void 0) { extraTriggers = []; }
                    initBuilderMap(this.updateMap, element, key, updateFn);
                    initBuilderMap(this.clearMap, element, key, clearFn);
                    this.buildElementKeyMap(element, key);
                    this.watchExtraTriggers(element, key, extraTriggers);
                };
                /**
                 * get the value for an element and key and optionally a given breakpoint
                 * @param {?} element
                 * @param {?} key
                 * @param {?=} bp
                 * @return {?}
                 */
                MediaMarshaller.prototype.getValue = function (element, key, bp) {
                    /** @type {?} */
                    var bpMap = this.elementMap.get(element);
                    if (bpMap) {
                        /** @type {?} */
                        var values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);
                        if (values) {
                            return values.get(key);
                        }
                    }
                    return undefined;
                };
                /**
                 * whether the element has values for a given key
                 * @param {?} element
                 * @param {?} key
                 * @return {?}
                 */
                MediaMarshaller.prototype.hasValue = function (element, key) {
                    /** @type {?} */
                    var bpMap = this.elementMap.get(element);
                    if (bpMap) {
                        /** @type {?} */
                        var values = this.getActivatedValues(bpMap, key);
                        if (values) {
                            return values.get(key) !== undefined || false;
                        }
                    }
                    return false;
                };
                /**
                 * Set the value for an input on a directive
                 * @param {?} element the element in question
                 * @param {?} key the type of the directive (e.g. flex, layout-gap, etc)
                 * @param {?} val the value for the breakpoint
                 * @param {?} bp the breakpoint suffix (empty string = default)
                 * @return {?}
                 */
                MediaMarshaller.prototype.setValue = function (element, key, val, bp) {
                    /** @type {?} */
                    var bpMap = this.elementMap.get(element);
                    if (!bpMap) {
                        bpMap = new Map().set(bp, new Map().set(key, val));
                        this.elementMap.set(element, bpMap);
                    }
                    else {
                        /** @type {?} */
                        var values = (bpMap.get(bp) || new Map()).set(key, val);
                        bpMap.set(bp, values);
                        this.elementMap.set(element, bpMap);
                    }
                    /** @type {?} */
                    var value = this.getValue(element, key);
                    if (value !== undefined) {
                        this.updateElement(element, key, value);
                    }
                };
                /**
                 * Track element value changes for a specific key
                 * @param {?} element
                 * @param {?} key
                 * @return {?}
                 */
                MediaMarshaller.prototype.trackValue = function (element, key) {
                    return this.subject
                        .asObservable()
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(( /**
                 * @param {?} v
                 * @return {?}
                 */function (/**
                 * @param {?} v
                 * @return {?}
                 */ v) { return v.element === element && v.key === key; })));
                };
                /**
                 * update all styles for all elements on the current breakpoint
                 * @return {?}
                 */
                MediaMarshaller.prototype.updateStyles = function () {
                    var _this = this;
                    this.elementMap.forEach(( /**
                     * @param {?} bpMap
                     * @param {?} el
                     * @return {?}
                     */function (bpMap, el) {
                        /** @type {?} */
                        var keyMap = new Set(( /** @type {?} */(_this.elementKeyMap.get(el))));
                        /** @type {?} */
                        var valueMap = _this.getActivatedValues(bpMap);
                        if (valueMap) {
                            valueMap.forEach(( /**
                             * @param {?} v
                             * @param {?} k
                             * @return {?}
                             */function (v, k) {
                                _this.updateElement(el, k, v);
                                keyMap.delete(k);
                            }));
                        }
                        keyMap.forEach(( /**
                         * @param {?} k
                         * @return {?}
                         */function (/**
                         * @param {?} k
                         * @return {?}
                         */ k) {
                            valueMap = _this.getActivatedValues(bpMap, k);
                            if (valueMap) {
                                /** @type {?} */
                                var value = valueMap.get(k);
                                _this.updateElement(el, k, value);
                            }
                            else {
                                _this.clearElement(el, k);
                            }
                        }));
                    }));
                };
                /**
                 * clear the styles for a given element
                 * @param {?} element
                 * @param {?} key
                 * @return {?}
                 */
                MediaMarshaller.prototype.clearElement = function (element, key) {
                    /** @type {?} */
                    var builders = this.clearMap.get(element);
                    if (builders) {
                        /** @type {?} */
                        var clearFn = ( /** @type {?} */(builders.get(key)));
                        if (!!clearFn) {
                            clearFn();
                            this.subject.next({ element: element, key: key, value: '' });
                        }
                    }
                };
                /**
                 * update a given element with the activated values for a given key
                 * @param {?} element
                 * @param {?} key
                 * @param {?} value
                 * @return {?}
                 */
                MediaMarshaller.prototype.updateElement = function (element, key, value) {
                    /** @type {?} */
                    var builders = this.updateMap.get(element);
                    if (builders) {
                        /** @type {?} */
                        var updateFn = ( /** @type {?} */(builders.get(key)));
                        if (!!updateFn) {
                            updateFn(value);
                            this.subject.next({ element: element, key: key, value: value });
                        }
                    }
                };
                /**
                 * release all references to a given element
                 * @param {?} element
                 * @return {?}
                 */
                MediaMarshaller.prototype.releaseElement = function (element) {
                    /** @type {?} */
                    var watcherMap = this.watcherMap.get(element);
                    if (watcherMap) {
                        watcherMap.forEach(( /**
                         * @param {?} s
                         * @return {?}
                         */function (/**
                         * @param {?} s
                         * @return {?}
                         */ s) { return s.unsubscribe(); }));
                        this.watcherMap.delete(element);
                    }
                    /** @type {?} */
                    var elementMap = this.elementMap.get(element);
                    if (elementMap) {
                        elementMap.forEach(( /**
                         * @param {?} _
                         * @param {?} s
                         * @return {?}
                         */function (_, s) { return elementMap.delete(s); }));
                        this.elementMap.delete(element);
                    }
                };
                /**
                 * trigger an update for a given element and key (e.g. layout)
                 * @param {?} element
                 * @param {?=} key
                 * @return {?}
                 */
                MediaMarshaller.prototype.triggerUpdate = function (element, key) {
                    var _this = this;
                    /** @type {?} */
                    var bpMap = this.elementMap.get(element);
                    if (bpMap) {
                        /** @type {?} */
                        var valueMap = this.getActivatedValues(bpMap, key);
                        if (valueMap) {
                            if (key) {
                                this.updateElement(element, key, valueMap.get(key));
                            }
                            else {
                                valueMap.forEach(( /**
                                 * @param {?} v
                                 * @param {?} k
                                 * @return {?}
                                 */function (v, k) { return _this.updateElement(element, k, v); }));
                            }
                        }
                    }
                };
                /**
                 * Cross-reference for HTMLElement with directive key
                 * @private
                 * @param {?} element
                 * @param {?} key
                 * @return {?}
                 */
                MediaMarshaller.prototype.buildElementKeyMap = function (element, key) {
                    /** @type {?} */
                    var keyMap = this.elementKeyMap.get(element);
                    if (!keyMap) {
                        keyMap = new Set();
                        this.elementKeyMap.set(element, keyMap);
                    }
                    keyMap.add(key);
                };
                /**
                 * Other triggers that should force style updates:
                 * - directionality
                 * - layout changes
                 * - mutationobserver updates
                 * @private
                 * @param {?} element
                 * @param {?} key
                 * @param {?} triggers
                 * @return {?}
                 */
                MediaMarshaller.prototype.watchExtraTriggers = function (element, key, triggers) {
                    var _this = this;
                    if (triggers && triggers.length) {
                        /** @type {?} */
                        var watchers = this.watcherMap.get(element);
                        if (!watchers) {
                            watchers = new Map();
                            this.watcherMap.set(element, watchers);
                        }
                        /** @type {?} */
                        var subscription = watchers.get(key);
                        if (!subscription) {
                            /** @type {?} */
                            var newSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"]).apply(void 0, triggers).subscribe(( /**
                             * @return {?}
                             */function () {
                                /** @type {?} */
                                var currentValue = _this.getValue(element, key);
                                _this.updateElement(element, key, currentValue);
                            }));
                            watchers.set(key, newSubscription);
                        }
                    }
                };
                /**
                 * Breakpoint locator by mediaQuery
                 * @private
                 * @param {?} query
                 * @return {?}
                 */
                MediaMarshaller.prototype.findByQuery = function (query) {
                    return this.breakpoints.findByQuery(query);
                };
                /**
                 * get the fallback breakpoint for a given element, starting with the current breakpoint
                 * @private
                 * @param {?} bpMap
                 * @param {?=} key
                 * @return {?}
                 */
                MediaMarshaller.prototype.getActivatedValues = function (bpMap, key) {
                    for (var i = 0; i < this.activatedBreakpoints.length; i++) {
                        /** @type {?} */
                        var activatedBp = this.activatedBreakpoints[i];
                        /** @type {?} */
                        var valueMap = bpMap.get(activatedBp.alias);
                        if (valueMap) {
                            if (key === undefined || valueMap.has(key)) {
                                return valueMap;
                            }
                        }
                    }
                    /** @type {?} */
                    var lastHope = bpMap.get('');
                    return (key === undefined || lastHope && lastHope.has(key)) ? lastHope : undefined;
                };
                /**
                 * Watch for mediaQuery breakpoint activations
                 * @private
                 * @return {?}
                 */
                MediaMarshaller.prototype.observeActivations = function () {
                    /** @type {?} */
                    var target = ( /** @type {?} */(( /** @type {?} */(this))));
                    /** @type {?} */
                    var queries = this.breakpoints.items.map(( /**
                     * @param {?} bp
                     * @return {?}
                     */function (/**
                     * @param {?} bp
                     * @return {?}
                     */ bp) { return bp.mediaQuery; }));
                    this.matchMedia
                        .observe(this.hook.withPrintQuery(queries))
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(this.hook.interceptEvents(target)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(this.hook.blockPropagation()))
                        .subscribe(this.onMediaChange.bind(this));
                };
                return MediaMarshaller;
            }());
            MediaMarshaller.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            MediaMarshaller.ctorParameters = function () { return [
                { type: MatchMedia },
                { type: BreakPointRegistry },
                { type: PrintHook }
            ]; };
            /** @nocollapse */ MediaMarshaller.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function MediaMarshaller_Factory() { return new MediaMarshaller(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(MatchMedia), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BreakPointRegistry), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PrintHook)); }, token: MediaMarshaller, providedIn: "root" });
            /**
             * @param {?} map
             * @param {?} element
             * @param {?} key
             * @param {?=} input
             * @return {?}
             */
            function initBuilderMap(map$$1, element, key, input) {
                if (input !== undefined) {
                    /** @type {?} */
                    var oldMap = map$$1.get(element);
                    if (!oldMap) {
                        oldMap = new Map();
                        map$$1.set(element, oldMap);
                    }
                    oldMap.set(key, input);
                }
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=core.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/flex-layout/esm2015/extended.js": 
        /*!***************************************************************!*\
          !*** ./node_modules/@angular/flex-layout/esm2015/extended.js ***!
          \***************************************************************/
        /*! exports provided: ExtendedModule, ClassDirective, LayoutNgClassImplProvider, DefaultClassDirective, ImgSrcStyleBuilder, ImgSrcDirective, DefaultImgSrcDirective, ShowHideStyleBuilder, ShowHideDirective, DefaultShowHideDirective, StyleDirective, LayoutNgStyleImplProvider, DefaultStyleDirective */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExtendedModule", function () { return ExtendedModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClassDirective", function () { return ClassDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutNgClassImplProvider", function () { return LayoutNgClassImplProvider; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultClassDirective", function () { return DefaultClassDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImgSrcStyleBuilder", function () { return ImgSrcStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImgSrcDirective", function () { return ImgSrcDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultImgSrcDirective", function () { return DefaultImgSrcDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShowHideStyleBuilder", function () { return ShowHideStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShowHideDirective", function () { return ShowHideDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultShowHideDirective", function () { return DefaultShowHideDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleDirective", function () { return StyleDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutNgStyleImplProvider", function () { return LayoutNgStyleImplProvider; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultStyleDirective", function () { return DefaultStyleDirective; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/flex-layout/core */ "./node_modules/@angular/flex-layout/esm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var ImgSrcStyleBuilder = /** @class */ (function (_super) {
                __extends(ImgSrcStyleBuilder, _super);
                function ImgSrcStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} url
                 * @return {?}
                 */
                ImgSrcStyleBuilder.prototype.buildStyles = function (url) {
                    return { 'content': url ? "url(" + url + ")" : '' };
                };
                return ImgSrcStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["StyleBuilder"]));
            ImgSrcStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ ImgSrcStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ImgSrcStyleBuilder_Factory() { return new ImgSrcStyleBuilder(); }, token: ImgSrcStyleBuilder, providedIn: "root" });
            var ImgSrcDirective = /** @class */ (function (_super) {
                __extends(ImgSrcDirective, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} styleBuilder
                 * @param {?} styler
                 * @param {?} marshal
                 * @param {?} platformId
                 * @param {?} serverModuleLoaded
                 */
                function ImgSrcDirective(elementRef, styleBuilder, styler, marshal, platformId, serverModuleLoaded) {
                    var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;
                    _this.elementRef = elementRef;
                    _this.styleBuilder = styleBuilder;
                    _this.styler = styler;
                    _this.marshal = marshal;
                    _this.platformId = platformId;
                    _this.serverModuleLoaded = serverModuleLoaded;
                    _this.DIRECTIVE_KEY = 'img-src';
                    _this.defaultSrc = '';
                    _this.styleCache = imgSrcCache;
                    _this.init();
                    _this.setValue(_this.nativeElement.getAttribute('src') || '', '');
                    if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformServer"])(_this.platformId) && _this.serverModuleLoaded) {
                        _this.nativeElement.setAttribute('src', '');
                    }
                    return _this;
                }
                Object.defineProperty(ImgSrcDirective.prototype, "src", {
                    /**
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) {
                        this.defaultSrc = val;
                        this.setValue(this.defaultSrc, '');
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Use the [responsively] activated input value to update
                 * the host img src attribute or assign a default `img.src=''`
                 * if the src has not been defined.
                 *
                 * Do nothing to standard `<img src="">` usages, only when responsive
                 * keys are present do we actually call `setAttribute()`
                 * @protected
                 * @param {?=} value
                 * @return {?}
                 */
                ImgSrcDirective.prototype.updateWithValue = function (value) {
                    /** @type {?} */
                    var url = value || this.defaultSrc;
                    if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformServer"])(this.platformId) && this.serverModuleLoaded) {
                        this.addStyles(url);
                    }
                    else {
                        this.nativeElement.setAttribute('src', url);
                    }
                };
                return ImgSrcDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["BaseDirective2"]));
            ImgSrcDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'img-src-directive' },] },
            ];
            /** @nocollapse */
            ImgSrcDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: ImgSrcStyleBuilder },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["StyleUtils"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["MediaMarshaller"] },
                { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] },
                { type: Boolean, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["SERVER_TOKEN"],] }] }
            ]; };
            ImgSrcDirective.propDecorators = {
                src: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['src',] }]
            };
            /** @type {?} */
            var imgSrcCache = new Map();
            /** @type {?} */
            var inputs = [
                'src.xs', 'src.sm', 'src.md', 'src.lg', 'src.xl',
                'src.lt-sm', 'src.lt-md', 'src.lt-lg', 'src.lt-xl',
                'src.gt-xs', 'src.gt-sm', 'src.gt-md', 'src.gt-lg'
            ];
            /** @type {?} */
            var selector = "\n  img[src.xs],    img[src.sm],    img[src.md],    img[src.lg],   img[src.xl],\n  img[src.lt-sm], img[src.lt-md], img[src.lt-lg], img[src.lt-xl],\n  img[src.gt-xs], img[src.gt-sm], img[src.gt-md], img[src.gt-lg]\n";
            /**
             * This directive provides a responsive API for the HTML <img> 'src' attribute
             * and will update the img.src property upon each responsive activation.
             *
             * e.g.
             *      <img src="defaultScene.jpg" src.xs="mobileScene.jpg"></img>
             *
             * @see https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-src/
             */
            var DefaultImgSrcDirective = /** @class */ (function (_super) {
                __extends(DefaultImgSrcDirective, _super);
                function DefaultImgSrcDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs;
                    return _this;
                }
                return DefaultImgSrcDirective;
            }(ImgSrcDirective));
            DefaultImgSrcDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector, inputs: inputs },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var ClassDirective = /** @class */ (function (_super) {
                __extends(ClassDirective, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} styler
                 * @param {?} marshal
                 * @param {?} delegate
                 * @param {?} ngClassInstance
                 */
                function ClassDirective(elementRef, styler, marshal, delegate, ngClassInstance) {
                    var _this = _super.call(this, elementRef, ( /** @type {?} */(null)), styler, marshal) || this;
                    _this.elementRef = elementRef;
                    _this.styler = styler;
                    _this.marshal = marshal;
                    _this.delegate = delegate;
                    _this.ngClassInstance = ngClassInstance;
                    _this.DIRECTIVE_KEY = 'ngClass';
                    if (!_this.ngClassInstance) {
                        // Create an instance NgClass Directive instance only if `ngClass=""` has NOT been defined on
                        // the same host element; since the responsive variations may be defined...
                        _this.ngClassInstance = new _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgClass"](_this.delegate);
                    }
                    _this.init();
                    _this.setValue('', '');
                    return _this;
                }
                Object.defineProperty(ClassDirective.prototype, "klass", {
                    /**
                     * Capture class assignments so we cache the default classes
                     * which are merged with activated styles and used as fallbacks.
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) {
                        this.ngClassInstance.klass = val;
                        this.setValue(val, '');
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @protected
                 * @param {?} value
                 * @return {?}
                 */
                ClassDirective.prototype.updateWithValue = function (value) {
                    this.ngClassInstance.ngClass = value;
                    this.ngClassInstance.ngDoCheck();
                };
                // ******************************************************************
                // Lifecycle Hooks
                // ******************************************************************
                /**
                 * For ChangeDetectionStrategy.onPush and ngOnChanges() updates
                 * @return {?}
                 */
                ClassDirective.prototype.ngDoCheck = function () {
                    this.ngClassInstance.ngDoCheck();
                };
                return ClassDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["BaseDirective2"]));
            ClassDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'class-directive' },] },
            ];
            /** @nocollapse */
            ClassDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["StyleUtils"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["MediaMarshaller"] },
                { type: _angular_common__WEBPACK_IMPORTED_MODULE_1__["ɵNgClassImpl"] },
                { type: _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgClass"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }] }
            ]; };
            ClassDirective.propDecorators = {
                klass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['class',] }]
            };
            /** @type {?} */
            var inputs$1 = [
                'ngClass', 'ngClass.xs', 'ngClass.sm', 'ngClass.md', 'ngClass.lg', 'ngClass.xl',
                'ngClass.lt-sm', 'ngClass.lt-md', 'ngClass.lt-lg', 'ngClass.lt-xl',
                'ngClass.gt-xs', 'ngClass.gt-sm', 'ngClass.gt-md', 'ngClass.gt-lg'
            ];
            /** @type {?} */
            var selector$1 = "\n  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],\n  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],\n  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]\n";
            // tslint:disable-next-line:variable-name
            /** @type {?} */
            var LayoutNgClassImplProvider = {
                provide: _angular_common__WEBPACK_IMPORTED_MODULE_1__["ɵNgClassImpl"],
                useClass: _angular_common__WEBPACK_IMPORTED_MODULE_1__["ɵNgClassR2Impl"]
            };
            /**
             * Directive to add responsive support for ngClass.
             * This maintains the core functionality of 'ngClass' and adds responsive API
             * Note: this class is a no-op when rendered on the server
             */
            var DefaultClassDirective = /** @class */ (function (_super) {
                __extends(DefaultClassDirective, _super);
                function DefaultClassDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$1;
                    return _this;
                }
                return DefaultClassDirective;
            }(ClassDirective));
            DefaultClassDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$1, inputs: inputs$1, providers: [LayoutNgClassImplProvider] },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var ShowHideStyleBuilder = /** @class */ (function (_super) {
                __extends(ShowHideStyleBuilder, _super);
                function ShowHideStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} show
                 * @param {?} parent
                 * @return {?}
                 */
                ShowHideStyleBuilder.prototype.buildStyles = function (show, parent) {
                    /** @type {?} */
                    var shouldShow = show === 'true';
                    return { 'display': shouldShow ? parent.display : 'none' };
                };
                return ShowHideStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["StyleBuilder"]));
            ShowHideStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ ShowHideStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ShowHideStyleBuilder_Factory() { return new ShowHideStyleBuilder(); }, token: ShowHideStyleBuilder, providedIn: "root" });
            var ShowHideDirective = /** @class */ (function (_super) {
                __extends(ShowHideDirective, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} styleBuilder
                 * @param {?} styler
                 * @param {?} marshal
                 * @param {?} layoutConfig
                 * @param {?} platformId
                 * @param {?} serverModuleLoaded
                 */
                function ShowHideDirective(elementRef, styleBuilder, styler, marshal, layoutConfig, platformId, serverModuleLoaded) {
                    var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;
                    _this.elementRef = elementRef;
                    _this.styleBuilder = styleBuilder;
                    _this.styler = styler;
                    _this.marshal = marshal;
                    _this.layoutConfig = layoutConfig;
                    _this.platformId = platformId;
                    _this.serverModuleLoaded = serverModuleLoaded;
                    _this.DIRECTIVE_KEY = 'show-hide';
                    /**
                     * Original dom Elements CSS display style
                     */
                    _this.display = '';
                    _this.hasLayout = false;
                    _this.hasFlexChild = false;
                    return _this;
                }
                // *********************************************
                // Lifecycle Methods
                // *********************************************
                /**
                 * @return {?}
                 */
                ShowHideDirective.prototype.ngAfterViewInit = function () {
                    this.trackExtraTriggers();
                    /** @type {?} */
                    var children = Array.from(this.nativeElement.children);
                    for (var i = 0; i < children.length; i++) {
                        if (this.marshal.hasValue(( /** @type {?} */(children[i])), 'flex')) {
                            this.hasFlexChild = true;
                            break;
                        }
                    }
                    if (DISPLAY_MAP.has(this.nativeElement)) {
                        this.display = ( /** @type {?} */(DISPLAY_MAP.get(this.nativeElement)));
                    }
                    else {
                        this.display = this.getDisplayStyle();
                        DISPLAY_MAP.set(this.nativeElement, this.display);
                    }
                    this.init();
                    // set the default to show unless explicitly overridden
                    /** @type {?} */
                    var defaultValue = this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY, '');
                    if (defaultValue === undefined || defaultValue === '') {
                        this.setValue(true, '');
                    }
                    else {
                        this.triggerUpdate();
                    }
                };
                /**
                 * On changes to any \@Input properties...
                 * Default to use the non-responsive Input value ('fxShow')
                 * Then conditionally override with the mq-activated Input's current value
                 * @param {?} changes
                 * @return {?}
                 */
                ShowHideDirective.prototype.ngOnChanges = function (changes) {
                    var _this = this;
                    Object.keys(changes).forEach(( /**
                     * @param {?} key
                     * @return {?}
                     */function (/**
                     * @param {?} key
                     * @return {?}
                     */ key) {
                        if (_this.inputs.indexOf(key) !== -1) {
                            /** @type {?} */
                            var inputKey = key.split('.');
                            /** @type {?} */
                            var bp = inputKey.slice(1).join('.');
                            /** @type {?} */
                            var inputValue = changes[key].currentValue;
                            /** @type {?} */
                            var shouldShow = inputValue !== '' ?
                                inputValue !== 0 ? Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(inputValue) : false
                                : true;
                            if (inputKey[0] === 'fxHide') {
                                shouldShow = !shouldShow;
                            }
                            _this.setValue(shouldShow, bp);
                        }
                    }));
                };
                // *********************************************
                // Protected methods
                // *********************************************
                /**
                 *  Watch for these extra triggers to update fxShow, fxHide stylings
                 * @protected
                 * @return {?}
                 */
                ShowHideDirective.prototype.trackExtraTriggers = function () {
                    var _this = this;
                    this.hasLayout = this.marshal.hasValue(this.nativeElement, 'layout');
                    ['layout', 'layout-align'].forEach(( /**
                     * @param {?} key
                     * @return {?}
                     */function (/**
                     * @param {?} key
                     * @return {?}
                     */ key) {
                        _this.marshal
                            .trackValue(_this.nativeElement, key)
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(_this.destroySubject))
                            .subscribe(_this.triggerUpdate.bind(_this));
                    }));
                };
                /**
                 * Override accessor to the current HTMLElement's `display` style
                 * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'
                 * unless it was already explicitly specified inline or in a CSS stylesheet.
                 * @protected
                 * @return {?}
                 */
                ShowHideDirective.prototype.getDisplayStyle = function () {
                    return (this.hasLayout || (this.hasFlexChild && this.layoutConfig.addFlexToParent)) ?
                        'flex' : this.styler.lookupStyle(this.nativeElement, 'display', true);
                };
                /**
                 * Validate the visibility value and then update the host's inline display style
                 * @protected
                 * @param {?=} value
                 * @return {?}
                 */
                ShowHideDirective.prototype.updateWithValue = function (value) {
                    if (value === void 0) { value = true; }
                    if (value === '') {
                        return;
                    }
                    this.addStyles(value ? 'true' : 'false', { display: this.display });
                    if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformServer"])(this.platformId) && this.serverModuleLoaded) {
                        this.nativeElement.style.setProperty('display', '');
                    }
                    this.marshal.triggerUpdate(( /** @type {?} */(this.parentElement)), 'layout-gap');
                };
                return ShowHideDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["BaseDirective2"]));
            ShowHideDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'show-hide-directive' },] },
            ];
            /** @nocollapse */
            ShowHideDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: ShowHideStyleBuilder },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["StyleUtils"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["MediaMarshaller"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["LAYOUT_CONFIG"],] }] },
                { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] },
                { type: Boolean, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["SERVER_TOKEN"],] }] }
            ]; };
            /** @type {?} */
            var DISPLAY_MAP = new WeakMap();
            /** @type {?} */
            var inputs$2 = [
                'fxShow', 'fxShow.print',
                'fxShow.xs', 'fxShow.sm', 'fxShow.md', 'fxShow.lg', 'fxShow.xl',
                'fxShow.lt-sm', 'fxShow.lt-md', 'fxShow.lt-lg', 'fxShow.lt-xl',
                'fxShow.gt-xs', 'fxShow.gt-sm', 'fxShow.gt-md', 'fxShow.gt-lg',
                'fxHide', 'fxHide.print',
                'fxHide.xs', 'fxHide.sm', 'fxHide.md', 'fxHide.lg', 'fxHide.xl',
                'fxHide.lt-sm', 'fxHide.lt-md', 'fxHide.lt-lg', 'fxHide.lt-xl',
                'fxHide.gt-xs', 'fxHide.gt-sm', 'fxHide.gt-md', 'fxHide.gt-lg'
            ];
            /** @type {?} */
            var selector$2 = "\n  [fxShow], [fxShow.print],\n  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],\n  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],\n  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],\n  [fxHide], [fxHide.print],\n  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],\n  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],\n  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]\n";
            /**
             * 'show' Layout API directive
             */
            var DefaultShowHideDirective = /** @class */ (function (_super) {
                __extends(DefaultShowHideDirective, _super);
                function DefaultShowHideDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$2;
                    return _this;
                }
                return DefaultShowHideDirective;
            }(ShowHideDirective));
            DefaultShowHideDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$2, inputs: inputs$2 },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * NgStyle allowed inputs
             */
            var NgStyleKeyValue = /** @class */ (function () {
                /**
                 * @param {?} key
                 * @param {?} value
                 * @param {?=} noQuotes
                 */
                function NgStyleKeyValue(key, value, noQuotes) {
                    if (noQuotes === void 0) { noQuotes = true; }
                    this.key = key;
                    this.value = value;
                    this.key = noQuotes ? key.replace(/['"]/g, '').trim() : key.trim();
                    this.value = noQuotes ? value.replace(/['"]/g, '').trim() : value.trim();
                    this.value = this.value.replace(/;/, '');
                }
                return NgStyleKeyValue;
            }());
            /**
             * @param {?} target
             * @return {?}
             */
            function getType(target) {
                /** @type {?} */
                var what = typeof target;
                if (what === 'object') {
                    return (target.constructor === Array) ? 'array' :
                        (target.constructor === Set) ? 'set' : 'object';
                }
                return what;
            }
            /**
             * Split string of key:value pairs into Array of k-v pairs
             * e.g.  'key:value; key:value; key:value;' -> ['key:value',...]
             * @param {?} source
             * @param {?=} delimiter
             * @return {?}
             */
            function buildRawList(source, delimiter) {
                if (delimiter === void 0) { delimiter = ';'; }
                return String(source)
                    .trim()
                    .split(delimiter)
                    .map(( /**
             * @param {?} val
             * @return {?}
             */function (val) { return val.trim(); }))
                    .filter(( /**
             * @param {?} val
             * @return {?}
             */function (/**
             * @param {?} val
             * @return {?}
             */ val) { return val !== ''; }));
            }
            /**
             * Convert array of key:value strings to a iterable map object
             * @param {?} styles
             * @param {?=} sanitize
             * @return {?}
             */
            function buildMapFromList(styles, sanitize) {
                /** @type {?} */
                var sanitizeValue = ( /**
                 * @param {?} it
                 * @return {?}
                 */function (it) {
                    if (sanitize) {
                        it.value = sanitize(it.value);
                    }
                    return it;
                });
                return styles
                    .map(stringToKeyValue)
                    .filter(( /**
             * @param {?} entry
             * @return {?}
             */function (/**
             * @param {?} entry
             * @return {?}
             */ entry) { return !!entry; }))
                    .map(sanitizeValue)
                    .reduce(keyValuesToMap, ( /** @type {?} */({})));
            }
            /**
             * Convert Set<string> or raw Object to an iterable NgStyleMap
             * @param {?} source
             * @param {?=} sanitize
             * @return {?}
             */
            function buildMapFromSet(source, sanitize) {
                /** @type {?} */
                var list = [];
                if (getType(source) === 'set') {
                    (( /** @type {?} */(source))).forEach(( /**
                     * @param {?} entry
                     * @return {?}
                     */function (/**
                     * @param {?} entry
                     * @return {?}
                     */ entry) { return list.push(entry); }));
                }
                else {
                    Object.keys(source).forEach(( /**
                     * @param {?} key
                     * @return {?}
                     */function (key) {
                        list.push(key + ":" + (( /** @type {?} */(source)))[key]);
                    }));
                }
                return buildMapFromList(list, sanitize);
            }
            /**
             * Convert 'key:value' -> [key, value]
             * @param {?} it
             * @return {?}
             */
            function stringToKeyValue(it) {
                var _b = it.split(':'), key = _b[0], vals = _b.slice(1);
                return new NgStyleKeyValue(key, vals.join(':'));
            }
            /**
             * Convert [ [key,value] ] -> { key : value }
             * @param {?} map
             * @param {?} entry
             * @return {?}
             */
            function keyValuesToMap(map, entry) {
                if (!!entry.key) {
                    map[entry.key] = entry.value;
                }
                return map;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var StyleDirective = /** @class */ (function (_super) {
                __extends(StyleDirective, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} styler
                 * @param {?} marshal
                 * @param {?} delegate
                 * @param {?} sanitizer
                 * @param {?} ngStyleInstance
                 * @param {?} serverLoaded
                 * @param {?} platformId
                 */
                function StyleDirective(elementRef, styler, marshal, delegate, sanitizer, ngStyleInstance, serverLoaded, platformId) {
                    var _this = _super.call(this, elementRef, ( /** @type {?} */(null)), styler, marshal) || this;
                    _this.elementRef = elementRef;
                    _this.styler = styler;
                    _this.marshal = marshal;
                    _this.delegate = delegate;
                    _this.sanitizer = sanitizer;
                    _this.ngStyleInstance = ngStyleInstance;
                    _this.DIRECTIVE_KEY = 'ngStyle';
                    if (!_this.ngStyleInstance) {
                        // Create an instance NgClass Directive instance only if `ngClass=""` has NOT been
                        // defined on the same host element; since the responsive variations may be defined...
                        _this.ngStyleInstance = new _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgStyle"](_this.delegate);
                    }
                    _this.init();
                    /** @type {?} */
                    var styles = _this.nativeElement.getAttribute('style') || '';
                    _this.fallbackStyles = _this.buildStyleMap(styles);
                    _this.isServer = serverLoaded && Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformServer"])(platformId);
                    return _this;
                }
                /**
                 * Add generated styles
                 * @protected
                 * @param {?} value
                 * @return {?}
                 */
                StyleDirective.prototype.updateWithValue = function (value) {
                    /** @type {?} */
                    var styles = this.buildStyleMap(value);
                    this.ngStyleInstance.ngStyle = Object.assign({}, this.fallbackStyles, styles);
                    if (this.isServer) {
                        this.applyStyleToElement(styles);
                    }
                    this.ngStyleInstance.ngDoCheck();
                };
                /**
                 * Remove generated styles
                 * @protected
                 * @return {?}
                 */
                StyleDirective.prototype.clearStyles = function () {
                    this.ngStyleInstance.ngStyle = this.fallbackStyles;
                    this.ngStyleInstance.ngDoCheck();
                };
                /**
                 * Convert raw strings to ngStyleMap; which is required by ngStyle
                 * NOTE: Raw string key-value pairs MUST be delimited by `;`
                 *       Comma-delimiters are not supported due to complexities of
                 *       possible style values such as `rgba(x,x,x,x)` and others
                 * @protected
                 * @param {?} styles
                 * @return {?}
                 */
                StyleDirective.prototype.buildStyleMap = function (styles) {
                    var _this = this;
                    // Always safe-guard (aka sanitize) style property values
                    /** @type {?} */
                    var sanitizer = ( /**
                     * @param {?} val
                     * @return {?}
                     */function (val) { return _this.sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__["SecurityContext"].STYLE, val) || ''; });
                    if (styles) {
                        switch (getType(styles)) {
                            case 'string': return buildMapFromList$1(buildRawList(styles), sanitizer);
                            case 'array': return buildMapFromList$1(( /** @type {?} */(styles)), sanitizer);
                            case 'set': return buildMapFromSet(styles, sanitizer);
                            default: return buildMapFromSet(styles, sanitizer);
                        }
                    }
                    return {};
                };
                // ******************************************************************
                // Lifecycle Hooks
                // ******************************************************************
                /**
                 * For ChangeDetectionStrategy.onPush and ngOnChanges() updates
                 * @return {?}
                 */
                StyleDirective.prototype.ngDoCheck = function () {
                    this.ngStyleInstance.ngDoCheck();
                };
                return StyleDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["BaseDirective2"]));
            StyleDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'style-directive' },] },
            ];
            /** @nocollapse */
            StyleDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["StyleUtils"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["MediaMarshaller"] },
                { type: _angular_common__WEBPACK_IMPORTED_MODULE_1__["ɵNgStyleImpl"] },
                { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__["DomSanitizer"] },
                { type: _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgStyle"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }] },
                { type: Boolean, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["SERVER_TOKEN"],] }] },
                { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] }
            ]; };
            /** @type {?} */
            var inputs$3 = [
                'ngStyle',
                'ngStyle.xs', 'ngStyle.sm', 'ngStyle.md', 'ngStyle.lg', 'ngStyle.xl',
                'ngStyle.lt-sm', 'ngStyle.lt-md', 'ngStyle.lt-lg', 'ngStyle.lt-xl',
                'ngStyle.gt-xs', 'ngStyle.gt-sm', 'ngStyle.gt-md', 'ngStyle.gt-lg'
            ];
            /** @type {?} */
            var selector$3 = "\n  [ngStyle],\n  [ngStyle.xs], [ngStyle.sm], [ngStyle.md], [ngStyle.lg], [ngStyle.xl],\n  [ngStyle.lt-sm], [ngStyle.lt-md], [ngStyle.lt-lg], [ngStyle.lt-xl],\n  [ngStyle.gt-xs], [ngStyle.gt-sm], [ngStyle.gt-md], [ngStyle.gt-lg]\n";
            // tslint:disable-next-line:variable-name
            /** @type {?} */
            var LayoutNgStyleImplProvider = {
                provide: _angular_common__WEBPACK_IMPORTED_MODULE_1__["ɵNgStyleImpl"],
                useClass: _angular_common__WEBPACK_IMPORTED_MODULE_1__["ɵNgStyleR2Impl"]
            };
            /**
             * Directive to add responsive support for ngStyle.
             *
             */
            var DefaultStyleDirective = /** @class */ (function (_super) {
                __extends(DefaultStyleDirective, _super);
                function DefaultStyleDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$3;
                    return _this;
                }
                return DefaultStyleDirective;
            }(StyleDirective));
            DefaultStyleDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$3, inputs: inputs$3, providers: [LayoutNgStyleImplProvider] },] },
            ];
            /**
             * Build a styles map from a list of styles, while sanitizing bad values first
             * @param {?} styles
             * @param {?=} sanitize
             * @return {?}
             */
            function buildMapFromList$1(styles, sanitize) {
                /** @type {?} */
                var sanitizeValue = ( /**
                 * @param {?} it
                 * @return {?}
                 */function (it) {
                    if (sanitize) {
                        it.value = sanitize(it.value);
                    }
                    return it;
                });
                return styles
                    .map(stringToKeyValue)
                    .filter(( /**
             * @param {?} entry
             * @return {?}
             */function (/**
             * @param {?} entry
             * @return {?}
             */ entry) { return !!entry; }))
                    .map(sanitizeValue)
                    .reduce(keyValuesToMap, ( /** @type {?} */({})));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var ALL_DIRECTIVES = [
                DefaultShowHideDirective,
                DefaultClassDirective,
                DefaultStyleDirective,
                DefaultImgSrcDirective,
                ClassDirective,
                ImgSrcDirective,
                ShowHideDirective,
                StyleDirective,
            ];
            /**
             * *****************************************************************
             * Define module for the Extended API
             * *****************************************************************
             */
            var ExtendedModule = /** @class */ (function () {
                function ExtendedModule() {
                }
                return ExtendedModule;
            }());
            ExtendedModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["CoreModule"]],
                            declarations: ALL_DIRECTIVES.slice(),
                            exports: ALL_DIRECTIVES.slice()
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=extended.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/flex-layout/esm2015/flex-layout.js": 
        /*!******************************************************************!*\
          !*** ./node_modules/@angular/flex-layout/esm2015/flex-layout.js ***!
          \******************************************************************/
        /*! exports provided: ɵMatchMedia, ɵMockMatchMedia, ɵMockMatchMediaProvider, CoreModule, removeStyles, BROWSER_PROVIDER, CLASS_NAME, MediaChange, StylesheetMap, DEFAULT_CONFIG, LAYOUT_CONFIG, SERVER_TOKEN, BREAKPOINT, mergeAlias, BaseDirective2, DEFAULT_BREAKPOINTS, ScreenTypes, ORIENTATION_BREAKPOINTS, BreakPointRegistry, BREAKPOINTS, MediaObserver, MediaTrigger, sortDescendingPriority, sortAscendingPriority, coerceArray, StyleUtils, StyleBuilder, validateBasis, MediaMarshaller, BREAKPOINT_PRINT, PrintHook, ExtendedModule, ClassDirective, LayoutNgClassImplProvider, DefaultClassDirective, ImgSrcStyleBuilder, ImgSrcDirective, DefaultImgSrcDirective, ShowHideStyleBuilder, ShowHideDirective, DefaultShowHideDirective, StyleDirective, LayoutNgStyleImplProvider, DefaultStyleDirective, FlexModule, FlexStyleBuilder, FlexDirective, DefaultFlexDirective, FlexAlignStyleBuilder, FlexAlignDirective, DefaultFlexAlignDirective, FlexFillStyleBuilder, FlexFillDirective, FlexOffsetStyleBuilder, FlexOffsetDirective, DefaultFlexOffsetDirective, FlexOrderStyleBuilder, FlexOrderDirective, DefaultFlexOrderDirective, LayoutStyleBuilder, LayoutDirective, DefaultLayoutDirective, LayoutAlignStyleBuilder, LayoutAlignDirective, DefaultLayoutAlignDirective, LayoutGapStyleBuilder, LayoutGapDirective, DefaultLayoutGapDirective, ɵf2, ɵe2, ɵd2, ɵi2, ɵh2, ɵg2, ɵl2, ɵk2, ɵj2, ɵo2, ɵn2, ɵm2, ɵr2, ɵq2, ɵp2, ɵu2, ɵt2, ɵs2, ɵx2, ɵw2, ɵv2, ɵba2, ɵz2, ɵy2, ɵc2, ɵb2, ɵa2, ɵbd2, ɵbc2, ɵbb2, ɵbg2, ɵbf2, ɵbe2, GridModule, VERSION, FlexLayoutModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function () { return VERSION; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexLayoutModule", function () { return FlexLayoutModule; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/flex-layout/core */ "./node_modules/@angular/flex-layout/esm2015/core.js");
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵMatchMedia", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["ɵMatchMedia"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵMockMatchMedia", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["ɵMockMatchMedia"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵMockMatchMediaProvider", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["ɵMockMatchMediaProvider"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CoreModule", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["CoreModule"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "removeStyles", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["removeStyles"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BROWSER_PROVIDER", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["BROWSER_PROVIDER"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CLASS_NAME", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["CLASS_NAME"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MediaChange", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["MediaChange"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StylesheetMap", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["StylesheetMap"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_CONFIG", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["DEFAULT_CONFIG"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LAYOUT_CONFIG", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["LAYOUT_CONFIG"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SERVER_TOKEN", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["SERVER_TOKEN"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BREAKPOINT", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["BREAKPOINT"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mergeAlias", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["mergeAlias"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseDirective2", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["BaseDirective2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_BREAKPOINTS", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["DEFAULT_BREAKPOINTS"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ScreenTypes", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["ScreenTypes"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ORIENTATION_BREAKPOINTS", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["ORIENTATION_BREAKPOINTS"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BreakPointRegistry", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["BreakPointRegistry"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BREAKPOINTS", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["BREAKPOINTS"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MediaObserver", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["MediaObserver"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MediaTrigger", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["MediaTrigger"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sortDescendingPriority", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["sortDescendingPriority"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sortAscendingPriority", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["sortAscendingPriority"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "coerceArray", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["coerceArray"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StyleUtils", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["StyleUtils"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StyleBuilder", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["StyleBuilder"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "validateBasis", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["validateBasis"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MediaMarshaller", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["MediaMarshaller"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BREAKPOINT_PRINT", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["BREAKPOINT_PRINT"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PrintHook", function () { return _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["PrintHook"]; });
            /* harmony import */ var _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/flex-layout/extended */ "./node_modules/@angular/flex-layout/esm2015/extended.js");
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExtendedModule", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["ExtendedModule"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ClassDirective", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["ClassDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LayoutNgClassImplProvider", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["LayoutNgClassImplProvider"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultClassDirective", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["DefaultClassDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ImgSrcStyleBuilder", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["ImgSrcStyleBuilder"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ImgSrcDirective", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["ImgSrcDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultImgSrcDirective", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["DefaultImgSrcDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ShowHideStyleBuilder", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["ShowHideStyleBuilder"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ShowHideDirective", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["ShowHideDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultShowHideDirective", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["DefaultShowHideDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StyleDirective", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["StyleDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LayoutNgStyleImplProvider", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["LayoutNgStyleImplProvider"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultStyleDirective", function () { return _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["DefaultStyleDirective"]; });
            /* harmony import */ var _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/flex-layout/flex */ "./node_modules/@angular/flex-layout/esm2015/flex.js");
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlexModule", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexModule"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlexStyleBuilder", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexStyleBuilder"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlexDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultFlexDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["DefaultFlexDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlexAlignStyleBuilder", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexAlignStyleBuilder"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlexAlignDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexAlignDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultFlexAlignDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["DefaultFlexAlignDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlexFillStyleBuilder", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexFillStyleBuilder"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlexFillDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexFillDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlexOffsetStyleBuilder", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexOffsetStyleBuilder"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlexOffsetDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexOffsetDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultFlexOffsetDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["DefaultFlexOffsetDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlexOrderStyleBuilder", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexOrderStyleBuilder"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlexOrderDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexOrderDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultFlexOrderDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["DefaultFlexOrderDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LayoutStyleBuilder", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["LayoutStyleBuilder"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LayoutDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["LayoutDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultLayoutDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["DefaultLayoutDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LayoutAlignStyleBuilder", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["LayoutAlignStyleBuilder"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LayoutAlignDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["LayoutAlignDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultLayoutAlignDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["DefaultLayoutAlignDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LayoutGapStyleBuilder", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["LayoutGapStyleBuilder"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LayoutGapDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["LayoutGapDirective"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultLayoutGapDirective", function () { return _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["DefaultLayoutGapDirective"]; });
            /* harmony import */ var _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/flex-layout/grid */ "./node_modules/@angular/flex-layout/esm2015/grid.js");
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵf2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵf2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵe2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵe2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵd2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵd2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵi2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵi2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵh2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵh2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵg2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵg2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵl2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵl2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵk2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵk2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵj2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵj2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵo2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵo2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵn2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵn2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵm2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵm2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵr2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵr2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵq2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵq2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵp2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵp2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵu2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵu2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵt2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵt2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵs2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵs2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵx2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵx2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵw2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵw2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵv2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵv2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵba2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵba2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵz2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵz2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵy2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵy2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵc2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵc2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵb2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵb2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵa2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵa2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵbd2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵbd2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵbc2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵbc2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵbb2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵbb2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵbg2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵbg2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵbf2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵbf2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵbe2", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["ɵbe2"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GridModule", function () { return _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["GridModule"]; });
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Current version of Angular Flex-Layout.
             * @type {?}
             */
            var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('8.0.0-beta.27');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * FlexLayoutModule -- the main import for all utilities in the Angular Layout library
             * * Will automatically provide Flex, Grid, and Extended modules for use in the application
             * * Can be configured using the static withConfig method, options viewable on the Wiki's
             *   Configuration page
             */
            var FlexLayoutModule = /** @class */ (function () {
                /**
                 * @param {?} serverModuleLoaded
                 * @param {?} platformId
                 */
                function FlexLayoutModule(serverModuleLoaded, platformId) {
                    if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformServer"])(platformId) && !serverModuleLoaded) {
                        console.warn('Warning: Flex Layout loaded on the server without FlexLayoutServerModule');
                    }
                }
                /**
                 * Initialize the FlexLayoutModule with a set of config options,
                 * which sets the corresponding tokens accordingly
                 * @param {?} configOptions
                 * @param {?=} breakpoints
                 * @return {?}
                 */
                FlexLayoutModule.withConfig = function (configOptions, breakpoints) {
                    if (breakpoints === void 0) { breakpoints = []; }
                    return {
                        ngModule: FlexLayoutModule,
                        providers: configOptions.serverLoaded ?
                            [
                                { provide: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["LAYOUT_CONFIG"], useValue: Object.assign({}, _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["DEFAULT_CONFIG"], configOptions) },
                                { provide: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["BREAKPOINT"], useValue: breakpoints, multi: true },
                                { provide: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["SERVER_TOKEN"], useValue: true },
                            ] : [
                            { provide: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["LAYOUT_CONFIG"], useValue: Object.assign({}, _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["DEFAULT_CONFIG"], configOptions) },
                            { provide: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["BREAKPOINT"], useValue: breakpoints, multi: true },
                        ]
                    };
                };
                return FlexLayoutModule;
            }());
            FlexLayoutModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexModule"], _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["ExtendedModule"], _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["GridModule"]],
                            exports: [_angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_4__["FlexModule"], _angular_flex_layout_extended__WEBPACK_IMPORTED_MODULE_3__["ExtendedModule"], _angular_flex_layout_grid__WEBPACK_IMPORTED_MODULE_5__["GridModule"]]
                        },] },
            ];
            /** @nocollapse */
            FlexLayoutModule.ctorParameters = function () { return [
                { type: Boolean, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_2__["SERVER_TOKEN"],] }] },
                { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=flex-layout.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/flex-layout/esm2015/flex.js": 
        /*!***********************************************************!*\
          !*** ./node_modules/@angular/flex-layout/esm2015/flex.js ***!
          \***********************************************************/
        /*! exports provided: FlexModule, FlexStyleBuilder, FlexDirective, DefaultFlexDirective, FlexAlignStyleBuilder, FlexAlignDirective, DefaultFlexAlignDirective, FlexFillStyleBuilder, FlexFillDirective, FlexOffsetStyleBuilder, FlexOffsetDirective, DefaultFlexOffsetDirective, FlexOrderStyleBuilder, FlexOrderDirective, DefaultFlexOrderDirective, LayoutStyleBuilder, LayoutDirective, DefaultLayoutDirective, LayoutAlignStyleBuilder, LayoutAlignDirective, DefaultLayoutAlignDirective, LayoutGapStyleBuilder, LayoutGapDirective, DefaultLayoutGapDirective */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexModule", function () { return FlexModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexStyleBuilder", function () { return FlexStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexDirective", function () { return FlexDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultFlexDirective", function () { return DefaultFlexDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexAlignStyleBuilder", function () { return FlexAlignStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexAlignDirective", function () { return FlexAlignDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultFlexAlignDirective", function () { return DefaultFlexAlignDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexFillStyleBuilder", function () { return FlexFillStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexFillDirective", function () { return FlexFillDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexOffsetStyleBuilder", function () { return FlexOffsetStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexOffsetDirective", function () { return FlexOffsetDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultFlexOffsetDirective", function () { return DefaultFlexOffsetDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexOrderStyleBuilder", function () { return FlexOrderStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexOrderDirective", function () { return FlexOrderDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultFlexOrderDirective", function () { return DefaultFlexOrderDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutStyleBuilder", function () { return LayoutStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutDirective", function () { return LayoutDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultLayoutDirective", function () { return DefaultLayoutDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutAlignStyleBuilder", function () { return LayoutAlignStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutAlignDirective", function () { return LayoutAlignDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultLayoutAlignDirective", function () { return DefaultLayoutAlignDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutGapStyleBuilder", function () { return LayoutGapStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutGapDirective", function () { return LayoutGapDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultLayoutGapDirective", function () { return DefaultLayoutGapDirective; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/flex-layout/core */ "./node_modules/@angular/flex-layout/esm2015/core.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             * @type {?}
             */
            var INLINE = 'inline';
            /** @type {?} */
            var LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];
            /**
             * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles
             * @param {?} value
             * @return {?}
             */
            function buildLayoutCSS(value) {
                var _b = validateValue(value), direction = _b[0], wrap = _b[1], isInline = _b[2];
                return buildCSS(direction, wrap, isInline);
            }
            /**
             * Validate the value to be one of the acceptable value options
             * Use default fallback of 'row'
             * @param {?} value
             * @return {?}
             */
            function validateValue(value) {
                value = value ? value.toLowerCase() : '';
                var _b = value.split(' '), direction = _b[0], wrap = _b[1], inline = _b[2];
                // First value must be the `flex-direction`
                if (!LAYOUT_VALUES.find(( /**
                 * @param {?} x
                 * @return {?}
                 */function (/**
                 * @param {?} x
                 * @return {?}
                 */ x) { return x === direction; }))) {
                    direction = LAYOUT_VALUES[0];
                }
                if (wrap === INLINE) {
                    wrap = (inline !== INLINE) ? inline : '';
                    inline = INLINE;
                }
                return [direction, validateWrapValue(wrap), !!inline];
            }
            /**
             * Determine if the validated, flex-direction value specifies
             * a horizontal/row flow.
             * @param {?} value
             * @return {?}
             */
            function isFlowHorizontal(value) {
                var flow = validateValue(value)[0];
                return flow.indexOf('row') > -1;
            }
            /**
             * Convert layout-wrap='<value>' to expected flex-wrap style
             * @param {?} value
             * @return {?}
             */
            function validateWrapValue(value) {
                if (!!value) {
                    switch (value.toLowerCase()) {
                        case 'reverse':
                        case 'wrap-reverse':
                        case 'reverse-wrap':
                            value = 'wrap-reverse';
                            break;
                        case 'no':
                        case 'none':
                        case 'nowrap':
                            value = 'nowrap';
                            break;
                        // All other values fallback to 'wrap'
                        default:
                            value = 'wrap';
                            break;
                    }
                }
                return value;
            }
            /**
             * Build the CSS that should be assigned to the element instance
             * BUG:
             *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.
             *      Use height instead if possible; height : <xxx>vh;
             *
             *  This way any padding or border specified on the child elements are
             *  laid out and drawn inside that element's specified width and height.
             * @param {?} direction
             * @param {?=} wrap
             * @param {?=} inline
             * @return {?}
             */
            function buildCSS(direction, wrap, inline) {
                if (wrap === void 0) { wrap = null; }
                if (inline === void 0) { inline = false; }
                return {
                    'display': inline ? 'inline-flex' : 'flex',
                    'box-sizing': 'border-box',
                    'flex-direction': direction,
                    'flex-wrap': !!wrap ? wrap : null
                };
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var LayoutStyleBuilder = /** @class */ (function (_super) {
                __extends(LayoutStyleBuilder, _super);
                function LayoutStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @return {?}
                 */
                LayoutStyleBuilder.prototype.buildStyles = function (input) {
                    return buildLayoutCSS(input);
                };
                return LayoutStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            LayoutStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ LayoutStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function LayoutStyleBuilder_Factory() { return new LayoutStyleBuilder(); }, token: LayoutStyleBuilder, providedIn: "root" });
            /** @type {?} */
            var inputs = [
                'fxLayout', 'fxLayout.xs', 'fxLayout.sm', 'fxLayout.md',
                'fxLayout.lg', 'fxLayout.xl', 'fxLayout.lt-sm', 'fxLayout.lt-md',
                'fxLayout.lt-lg', 'fxLayout.lt-xl', 'fxLayout.gt-xs', 'fxLayout.gt-sm',
                'fxLayout.gt-md', 'fxLayout.gt-lg'
            ];
            /** @type {?} */
            var selector = "\n  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],\n  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],\n  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],\n  [fxLayout.gt-md], [fxLayout.gt-lg]\n";
            /**
             * 'layout' flexbox styling directive
             * Defines the positioning flow direction for the child elements: row or column
             * Optional values: column or row (default)
             * @see https://css-tricks.com/almanac/properties/f/flex-direction/
             *
             */
            var LayoutDirective = /** @class */ (function (_super) {
                __extends(LayoutDirective, _super);
                /**
                 * @param {?} elRef
                 * @param {?} styleUtils
                 * @param {?} styleBuilder
                 * @param {?} marshal
                 */
                function LayoutDirective(elRef, styleUtils, styleBuilder, marshal) {
                    var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;
                    _this.elRef = elRef;
                    _this.styleUtils = styleUtils;
                    _this.styleBuilder = styleBuilder;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'layout';
                    _this.styleCache = layoutCache;
                    _this.init();
                    return _this;
                }
                return LayoutDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            LayoutDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'layout-directive' },] },
            ];
            /** @nocollapse */
            LayoutDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: LayoutStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            var DefaultLayoutDirective = /** @class */ (function (_super) {
                __extends(DefaultLayoutDirective, _super);
                function DefaultLayoutDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs;
                    return _this;
                }
                return DefaultLayoutDirective;
            }(LayoutDirective));
            DefaultLayoutDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector, inputs: inputs },] },
            ];
            /** @type {?} */
            var layoutCache = new Map();
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var CLEAR_MARGIN_CSS = {
                'margin-left': null,
                'margin-right': null,
                'margin-top': null,
                'margin-bottom': null
            };
            var LayoutGapStyleBuilder = /** @class */ (function (_super) {
                __extends(LayoutGapStyleBuilder, _super);
                /**
                 * @param {?} _styler
                 */
                function LayoutGapStyleBuilder(_styler) {
                    var _this = _super.call(this) || this;
                    _this._styler = _styler;
                    return _this;
                }
                /**
                 * @param {?} gapValue
                 * @param {?} parent
                 * @return {?}
                 */
                LayoutGapStyleBuilder.prototype.buildStyles = function (gapValue, parent) {
                    if (gapValue.endsWith(GRID_SPECIFIER)) {
                        gapValue = gapValue.slice(0, gapValue.indexOf(GRID_SPECIFIER));
                        // Add the margin to the host element
                        return buildGridMargin(gapValue, parent.directionality);
                    }
                    else {
                        return {};
                    }
                };
                /**
                 * @param {?} gapValue
                 * @param {?} _styles
                 * @param {?} parent
                 * @return {?}
                 */
                LayoutGapStyleBuilder.prototype.sideEffect = function (gapValue, _styles, parent) {
                    /** @type {?} */
                    var items = parent.items;
                    if (gapValue.endsWith(GRID_SPECIFIER)) {
                        gapValue = gapValue.slice(0, gapValue.indexOf(GRID_SPECIFIER));
                        // For each `element` children, set the padding
                        /** @type {?} */
                        var paddingStyles = buildGridPadding(gapValue, parent.directionality);
                        this._styler.applyStyleToElements(paddingStyles, parent.items);
                    }
                    else {
                        /** @type {?} */
                        var lastItem = ( /** @type {?} */(items.pop()));
                        // For each `element` children EXCEPT the last,
                        // set the margin right/bottom styles...
                        /** @type {?} */
                        var gapCss = buildGapCSS(gapValue, parent);
                        this._styler.applyStyleToElements(gapCss, items);
                        // Clear all gaps for all visible elements
                        this._styler.applyStyleToElements(CLEAR_MARGIN_CSS, [lastItem]);
                    }
                };
                return LayoutGapStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            LayoutGapStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            LayoutGapStyleBuilder.ctorParameters = function () { return [
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] }
            ]; };
            /** @nocollapse */ LayoutGapStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function LayoutGapStyleBuilder_Factory() { return new LayoutGapStyleBuilder(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"])); }, token: LayoutGapStyleBuilder, providedIn: "root" });
            /** @type {?} */
            var inputs$1 = [
                'fxLayoutGap', 'fxLayoutGap.xs', 'fxLayoutGap.sm', 'fxLayoutGap.md',
                'fxLayoutGap.lg', 'fxLayoutGap.xl', 'fxLayoutGap.lt-sm', 'fxLayoutGap.lt-md',
                'fxLayoutGap.lt-lg', 'fxLayoutGap.lt-xl', 'fxLayoutGap.gt-xs', 'fxLayoutGap.gt-sm',
                'fxLayoutGap.gt-md', 'fxLayoutGap.gt-lg'
            ];
            /** @type {?} */
            var selector$1 = "\n  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],\n  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],\n  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],\n  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]\n";
            /**
             * 'layout-padding' styling directive
             *  Defines padding of child elements in a layout container
             */
            var LayoutGapDirective = /** @class */ (function (_super) {
                __extends(LayoutGapDirective, _super);
                /**
                 * @param {?} elRef
                 * @param {?} zone
                 * @param {?} directionality
                 * @param {?} styleUtils
                 * @param {?} styleBuilder
                 * @param {?} marshal
                 */
                function LayoutGapDirective(elRef, zone, directionality, styleUtils, styleBuilder, marshal) {
                    var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;
                    _this.elRef = elRef;
                    _this.zone = zone;
                    _this.directionality = directionality;
                    _this.styleUtils = styleUtils;
                    _this.styleBuilder = styleBuilder;
                    _this.marshal = marshal;
                    _this.layout = 'row'; // default flex-direction
                    // default flex-direction
                    _this.DIRECTIVE_KEY = 'layout-gap';
                    _this.observerSubject = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
                    /** @type {?} */
                    var extraTriggers = [_this.directionality.change, _this.observerSubject.asObservable()];
                    _this.init(extraTriggers);
                    _this.marshal
                        .trackValue(_this.nativeElement, 'layout')
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(_this.destroySubject))
                        .subscribe(_this.onLayoutChange.bind(_this));
                    return _this;
                }
                Object.defineProperty(LayoutGapDirective.prototype, "childrenNodes", {
                    /**
                     * Special accessor to query for all child 'element' nodes regardless of type, class, etc
                     * @protected
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var obj = this.nativeElement.children;
                        /** @type {?} */
                        var buffer = [];
                        // iterate backwards ensuring that length is an UInt32
                        for (var i = obj.length; i--;) {
                            buffer[i] = obj[i];
                        }
                        return buffer;
                    },
                    enumerable: true,
                    configurable: true
                });
                // *********************************************
                // Lifecycle Methods
                // *********************************************
                /**
                 * @return {?}
                 */
                LayoutGapDirective.prototype.ngAfterContentInit = function () {
                    this.buildChildObservable();
                    this.triggerUpdate();
                };
                /**
                 * @return {?}
                 */
                LayoutGapDirective.prototype.ngOnDestroy = function () {
                    _super.prototype.ngOnDestroy.call(this);
                    if (this.observer) {
                        this.observer.disconnect();
                    }
                };
                // *********************************************
                // Protected methods
                // *********************************************
                /**
                 * Cache the parent container 'flex-direction' and update the 'margin' styles
                 * @protected
                 * @param {?} matcher
                 * @return {?}
                 */
                LayoutGapDirective.prototype.onLayoutChange = function (matcher) {
                    var _this = this;
                    /** @type {?} */
                    var layout = matcher.value;
                    // Make sure to filter out 'wrap' option
                    /** @type {?} */
                    var direction = layout.split(' ');
                    this.layout = direction[0];
                    if (!LAYOUT_VALUES.find(( /**
                     * @param {?} x
                     * @return {?}
                     */function (/**
                     * @param {?} x
                     * @return {?}
                     */ x) { return x === _this.layout; }))) {
                        this.layout = 'row';
                    }
                    this.triggerUpdate();
                };
                /**
                 *
                 * @protected
                 * @param {?} value
                 * @return {?}
                 */
                LayoutGapDirective.prototype.updateWithValue = function (value) {
                    var _this = this;
                    // Gather all non-hidden Element nodes
                    /** @type {?} */
                    var items = this.childrenNodes
                        .filter(( /**
                 * @param {?} el
                 * @return {?}
                 */function (/**
                 * @param {?} el
                 * @return {?}
                 */ el) { return el.nodeType === 1 && _this.willDisplay(el); }))
                        .sort(( /**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */function (a, b) {
                        /** @type {?} */
                        var orderA = +_this.styler.lookupStyle(a, 'order');
                        /** @type {?} */
                        var orderB = +_this.styler.lookupStyle(b, 'order');
                        if (isNaN(orderA) || isNaN(orderB) || orderA === orderB) {
                            return 0;
                        }
                        else {
                            return orderA > orderB ? 1 : -1;
                        }
                    }));
                    if (items.length > 0) {
                        /** @type {?} */
                        var directionality = this.directionality.value;
                        /** @type {?} */
                        var layout = this.layout;
                        if (layout === 'row' && directionality === 'rtl') {
                            this.styleCache = layoutGapCacheRowRtl;
                        }
                        else if (layout === 'row' && directionality !== 'rtl') {
                            this.styleCache = layoutGapCacheRowLtr;
                        }
                        else if (layout === 'column' && directionality === 'rtl') {
                            this.styleCache = layoutGapCacheColumnRtl;
                        }
                        else if (layout === 'column' && directionality !== 'rtl') {
                            this.styleCache = layoutGapCacheColumnLtr;
                        }
                        this.addStyles(value, { directionality: directionality, items: items, layout: layout });
                    }
                };
                /**
                 * We need to override clearStyles because in most cases mru isn't populated
                 * @protected
                 * @return {?}
                 */
                LayoutGapDirective.prototype.clearStyles = function () {
                    var _b;
                    /** @type {?} */
                    var gridMode = Object.keys(this.mru).length > 0;
                    /** @type {?} */
                    var childrenStyle = gridMode ? 'padding' :
                        getMarginType(this.directionality.value, this.layout);
                    // If there are styles on the parent remove them
                    if (gridMode) {
                        _super.prototype.clearStyles.call(this);
                    }
                    // Then remove the children styles too
                    this.styleUtils.applyStyleToElements((_b = {}, _b[childrenStyle] = '', _b), this.childrenNodes);
                };
                /**
                 * Determine if an element will show or hide based on current activation
                 * @protected
                 * @param {?} source
                 * @return {?}
                 */
                LayoutGapDirective.prototype.willDisplay = function (source) {
                    /** @type {?} */
                    var value = this.marshal.getValue(source, 'show-hide');
                    return value === true ||
                        (value === undefined && this.styleUtils.lookupStyle(source, 'display') !== 'none');
                };
                /**
                 * @protected
                 * @return {?}
                 */
                LayoutGapDirective.prototype.buildChildObservable = function () {
                    var _this = this;
                    this.zone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        if (typeof MutationObserver !== 'undefined') {
                            _this.observer = new MutationObserver(( /**
                             * @param {?} mutations
                             * @return {?}
                             */function (mutations) {
                                /** @type {?} */
                                var validatedChanges = ( /**
                                 * @param {?} it
                                 * @return {?}
                                 */function (it) {
                                    return (it.addedNodes && it.addedNodes.length > 0) ||
                                        (it.removedNodes && it.removedNodes.length > 0);
                                });
                                // update gap styles only for child 'added' or 'removed' events
                                if (mutations.some(validatedChanges)) {
                                    _this.observerSubject.next();
                                }
                            }));
                            _this.observer.observe(_this.nativeElement, { childList: true });
                        }
                    }));
                };
                return LayoutGapDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            LayoutGapDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'layout-gap-directive' },] },
            ];
            /** @nocollapse */
            LayoutGapDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: LayoutGapStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            var DefaultLayoutGapDirective = /** @class */ (function (_super) {
                __extends(DefaultLayoutGapDirective, _super);
                function DefaultLayoutGapDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$1;
                    return _this;
                }
                return DefaultLayoutGapDirective;
            }(LayoutGapDirective));
            DefaultLayoutGapDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$1, inputs: inputs$1 },] },
            ];
            /** @type {?} */
            var layoutGapCacheRowRtl = new Map();
            /** @type {?} */
            var layoutGapCacheColumnRtl = new Map();
            /** @type {?} */
            var layoutGapCacheRowLtr = new Map();
            /** @type {?} */
            var layoutGapCacheColumnLtr = new Map();
            /** @type {?} */
            var GRID_SPECIFIER = ' grid';
            /**
             * @param {?} value
             * @param {?} directionality
             * @return {?}
             */
            function buildGridPadding(value, directionality) {
                /** @type {?} */
                var paddingTop = '0px';
                /** @type {?} */
                var paddingRight = '0px';
                /** @type {?} */
                var paddingBottom = value;
                /** @type {?} */
                var paddingLeft = '0px';
                if (directionality === 'rtl') {
                    paddingLeft = value;
                }
                else {
                    paddingRight = value;
                }
                return { 'padding': paddingTop + " " + paddingRight + " " + paddingBottom + " " + paddingLeft };
            }
            /**
             * @param {?} value
             * @param {?} directionality
             * @return {?}
             */
            function buildGridMargin(value, directionality) {
                /** @type {?} */
                var marginTop = '0px';
                /** @type {?} */
                var marginRight = '0px';
                /** @type {?} */
                var marginBottom = '-' + value;
                /** @type {?} */
                var marginLeft = '0px';
                if (directionality === 'rtl') {
                    marginLeft = '-' + value;
                }
                else {
                    marginRight = '-' + value;
                }
                return { 'margin': marginTop + " " + marginRight + " " + marginBottom + " " + marginLeft };
            }
            /**
             * @param {?} directionality
             * @param {?} layout
             * @return {?}
             */
            function getMarginType(directionality, layout) {
                switch (layout) {
                    case 'column':
                        return 'margin-bottom';
                    case 'column-reverse':
                        return 'margin-top';
                    case 'row':
                        return directionality === 'rtl' ? 'margin-left' : 'margin-right';
                    case 'row-reverse':
                        return directionality === 'rtl' ? 'margin-right' : 'margin-left';
                    default:
                        return directionality === 'rtl' ? 'margin-left' : 'margin-right';
                }
            }
            /**
             * @param {?} gapValue
             * @param {?} parent
             * @return {?}
             */
            function buildGapCSS(gapValue, parent) {
                /** @type {?} */
                var key = getMarginType(parent.directionality, parent.layout);
                /** @type {?} */
                var margins = Object.assign({}, CLEAR_MARGIN_CSS);
                margins[key] = gapValue;
                return margins;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Extends an object with the *enumerable* and *own* properties of one or more source objects,
             * similar to Object.assign.
             *
             * @param {?} dest The object which will have properties copied to it.
             * @param {...?} sources The source objects from which properties will be copied.
             * @return {?}
             */
            function extendObject(dest) {
                var sources = [];
                for (var _b = 1; _b < arguments.length; _b++) {
                    sources[_b - 1] = arguments[_b];
                }
                if (dest == null) {
                    throw TypeError('Cannot convert undefined or null to object');
                }
                for (var _c = 0, sources_2 = sources; _c < sources_2.length; _c++) {
                    var source = sources_2[_c];
                    if (source != null) {
                        for (var key in source) {
                            if (source.hasOwnProperty(key)) {
                                dest[key] = source[key];
                            }
                        }
                    }
                }
                return dest;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var FlexStyleBuilder = /** @class */ (function (_super) {
                __extends(FlexStyleBuilder, _super);
                /**
                 * @param {?} layoutConfig
                 */
                function FlexStyleBuilder(layoutConfig) {
                    var _this = _super.call(this) || this;
                    _this.layoutConfig = layoutConfig;
                    return _this;
                }
                /**
                 * @param {?} input
                 * @param {?} parent
                 * @return {?}
                 */
                FlexStyleBuilder.prototype.buildStyles = function (input, parent) {
                    var _b = input.split(' '), grow = _b[0], shrink = _b[1], basisParts = _b.slice(2);
                    /** @type {?} */
                    var basis = basisParts.join(' ');
                    // The flex-direction of this element's flex container. Defaults to 'row'.
                    /** @type {?} */
                    var direction = (parent.direction.indexOf('column') > -1) ? 'column' : 'row';
                    /** @type {?} */
                    var max = isFlowHorizontal(direction) ? 'max-width' : 'max-height';
                    /** @type {?} */
                    var min = isFlowHorizontal(direction) ? 'min-width' : 'min-height';
                    /** @type {?} */
                    var hasCalc = String(basis).indexOf('calc') > -1;
                    /** @type {?} */
                    var usingCalc = hasCalc || (basis === 'auto');
                    /** @type {?} */
                    var isPercent = String(basis).indexOf('%') > -1 && !hasCalc;
                    /** @type {?} */
                    var hasUnits = String(basis).indexOf('px') > -1 || String(basis).indexOf('rem') > -1 ||
                        String(basis).indexOf('em') > -1 || String(basis).indexOf('vw') > -1 ||
                        String(basis).indexOf('vh') > -1;
                    /** @type {?} */
                    var isValue = (hasCalc || hasUnits);
                    grow = (grow == '0') ? 0 : grow;
                    shrink = (shrink == '0') ? 0 : shrink;
                    // make box inflexible when shrink and grow are both zero
                    // should not set a min when the grow is zero
                    // should not set a max when the shrink is zero
                    /** @type {?} */
                    var isFixed = !grow && !shrink;
                    /** @type {?} */
                    var css = {};
                    // flex-basis allows you to specify the initial/starting main-axis size of the element,
                    // before anything else is computed. It can either be a percentage or an absolute value.
                    // It is, however, not the breaking point for flex-grow/shrink properties
                    //
                    // flex-grow can be seen as this:
                    //   0: Do not stretch. Either size to element's content width, or obey 'flex-basis'.
                    //   1: (Default value). Stretch; will be the same size to all other flex items on
                    //       the same row since they have a default value of 1.
                    //   ≥2 (integer n): Stretch. Will be n times the size of other elements
                    //      with 'flex-grow: 1' on the same row.
                    // Use `null` to clear existing styles.
                    /** @type {?} */
                    var clearStyles = {
                        'max-width': null,
                        'max-height': null,
                        'min-width': null,
                        'min-height': null
                    };
                    switch (basis || '') {
                        case '':
                            /** @type {?} */
                            var useColumnBasisZero = this.layoutConfig.useColumnBasisZero !== false;
                            basis = direction === 'row' ? '0%' : (useColumnBasisZero ? '0.000000001px' : 'auto');
                            break;
                        case 'initial': // default
                        case 'nogrow':
                            grow = 0;
                            basis = 'auto';
                            break;
                        case 'grow':
                            basis = '100%';
                            break;
                        case 'noshrink':
                            shrink = 0;
                            basis = 'auto';
                            break;
                        case 'auto':
                            break;
                        case 'none':
                            grow = 0;
                            shrink = 0;
                            basis = 'auto';
                            break;
                        default:
                            // Defaults to percentage sizing unless `px` is explicitly set
                            if (!isValue && !isPercent && !isNaN(( /** @type {?} */(basis)))) {
                                basis = basis + '%';
                            }
                            // Fix for issue 280
                            if (basis === '0%') {
                                isValue = true;
                            }
                            if (basis === '0px') {
                                basis = '0%';
                            }
                            // fix issue #5345
                            if (hasCalc) {
                                css = extendObject(clearStyles, {
                                    'flex-grow': grow,
                                    'flex-shrink': shrink,
                                    'flex-basis': isValue ? basis : '100%'
                                });
                            }
                            else {
                                css = extendObject(clearStyles, {
                                    'flex': grow + " " + shrink + " " + (isValue ? basis : '100%')
                                });
                            }
                            break;
                    }
                    if (!(css['flex'] || css['flex-grow'])) {
                        if (hasCalc) {
                            css = extendObject(clearStyles, {
                                'flex-grow': grow,
                                'flex-shrink': shrink,
                                'flex-basis': basis
                            });
                        }
                        else {
                            css = extendObject(clearStyles, {
                                'flex': grow + " " + shrink + " " + basis
                            });
                        }
                    }
                    // Fix for issues 277, 534, and 728
                    if (basis !== '0%' && basis !== '0px' && basis !== '0.000000001px' && basis !== 'auto') {
                        css[min] = isFixed || (isValue && grow) ? basis : null;
                        css[max] = isFixed || (!usingCalc && shrink) ? basis : null;
                    }
                    // Fix for issue 528
                    if (!css[min] && !css[max]) {
                        if (hasCalc) {
                            css = extendObject(clearStyles, {
                                'flex-grow': grow,
                                'flex-shrink': shrink,
                                'flex-basis': basis
                            });
                        }
                        else {
                            css = extendObject(clearStyles, {
                                'flex': grow + " " + shrink + " " + basis
                            });
                        }
                    }
                    else {
                        // Fix for issue 660
                        if (parent.hasWrap) {
                            css[hasCalc ? 'flex-basis' : 'flex'] = css[max] ?
                                (hasCalc ? css[max] : grow + " " + shrink + " " + css[max]) :
                                (hasCalc ? css[min] : grow + " " + shrink + " " + css[min]);
                        }
                    }
                    return ( /** @type {?} */(extendObject(css, { 'box-sizing': 'border-box' })));
                };
                return FlexStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            FlexStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            FlexStyleBuilder.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["LAYOUT_CONFIG"],] }] }
            ]; };
            /** @nocollapse */ FlexStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function FlexStyleBuilder_Factory() { return new FlexStyleBuilder(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["LAYOUT_CONFIG"])); }, token: FlexStyleBuilder, providedIn: "root" });
            /** @type {?} */
            var inputs$2 = [
                'fxFlex', 'fxFlex.xs', 'fxFlex.sm', 'fxFlex.md',
                'fxFlex.lg', 'fxFlex.xl', 'fxFlex.lt-sm', 'fxFlex.lt-md',
                'fxFlex.lt-lg', 'fxFlex.lt-xl', 'fxFlex.gt-xs', 'fxFlex.gt-sm',
                'fxFlex.gt-md', 'fxFlex.gt-lg'
            ];
            /** @type {?} */
            var selector$2 = "\n  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],\n  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],\n  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],\n  [fxFlex.gt-md], [fxFlex.gt-lg]\n";
            /**
             * Directive to control the size of a flex item using flex-basis, flex-grow, and flex-shrink.
             * Corresponds to the css `flex` shorthand property.
             *
             * @see https://css-tricks.com/snippets/css/a-guide-to-flexbox/
             */
            var FlexDirective = /** @class */ (function (_super) {
                __extends(FlexDirective, _super);
                /**
                 * @param {?} elRef
                 * @param {?} styleUtils
                 * @param {?} layoutConfig
                 * @param {?} styleBuilder
                 * @param {?} marshal
                 */
                function FlexDirective(elRef, styleUtils, layoutConfig, styleBuilder, marshal) {
                    var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;
                    _this.elRef = elRef;
                    _this.styleUtils = styleUtils;
                    _this.layoutConfig = layoutConfig;
                    _this.styleBuilder = styleBuilder;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'flex';
                    _this.direction = '';
                    _this.wrap = false;
                    _this.flexGrow = '1';
                    _this.flexShrink = '1';
                    _this.init();
                    if (_this.parentElement) {
                        _this.marshal.trackValue(_this.parentElement, 'layout')
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(_this.destroySubject))
                            .subscribe(_this.onLayoutChange.bind(_this));
                        _this.marshal.trackValue(_this.nativeElement, 'layout-align')
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(_this.destroySubject))
                            .subscribe(_this.triggerReflow.bind(_this));
                    }
                    return _this;
                }
                Object.defineProperty(FlexDirective.prototype, "shrink", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this.flexShrink; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this.flexShrink = value || '1';
                        this.triggerReflow();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FlexDirective.prototype, "grow", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this.flexGrow; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this.flexGrow = value || '1';
                        this.triggerReflow();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Caches the parent container's 'flex-direction' and updates the element's style.
                 * Used as a handler for layout change events from the parent flex container.
                 * @protected
                 * @param {?} matcher
                 * @return {?}
                 */
                FlexDirective.prototype.onLayoutChange = function (matcher) {
                    /** @type {?} */
                    var layout = matcher.value;
                    /** @type {?} */
                    var layoutParts = layout.split(' ');
                    this.direction = layoutParts[0];
                    this.wrap = layoutParts[1] !== undefined && layoutParts[1] === 'wrap';
                    this.triggerUpdate();
                };
                /**
                 * Input to this is exclusively the basis input value
                 * @protected
                 * @param {?} value
                 * @return {?}
                 */
                FlexDirective.prototype.updateWithValue = function (value) {
                    /** @type {?} */
                    var addFlexToParent = this.layoutConfig.addFlexToParent !== false;
                    if (!this.direction) {
                        this.direction = this.getFlexFlowDirection(( /** @type {?} */(this.parentElement)), addFlexToParent);
                    }
                    /** @type {?} */
                    var direction = this.direction;
                    /** @type {?} */
                    var isHorizontal = direction.startsWith('row');
                    /** @type {?} */
                    var hasWrap = this.wrap;
                    if (isHorizontal && hasWrap) {
                        this.styleCache = flexRowWrapCache;
                    }
                    else if (isHorizontal && !hasWrap) {
                        this.styleCache = flexRowCache;
                    }
                    else if (!isHorizontal && hasWrap) {
                        this.styleCache = flexColumnWrapCache;
                    }
                    else if (!isHorizontal && !hasWrap) {
                        this.styleCache = flexColumnCache;
                    }
                    /** @type {?} */
                    var basis = String(value).replace(';', '');
                    /** @type {?} */
                    var parts = Object(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["validateBasis"])(basis, this.flexGrow, this.flexShrink);
                    this.addStyles(parts.join(' '), { direction: direction, hasWrap: hasWrap });
                };
                /**
                 * Trigger a style reflow, usually based on a shrink/grow input event
                 * @protected
                 * @return {?}
                 */
                FlexDirective.prototype.triggerReflow = function () {
                    /** @type {?} */
                    var activatedValue = this.activatedValue;
                    if (activatedValue !== undefined) {
                        /** @type {?} */
                        var parts = Object(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["validateBasis"])(activatedValue + '', this.flexGrow, this.flexShrink);
                        this.marshal.updateElement(this.nativeElement, this.DIRECTIVE_KEY, parts.join(' '));
                    }
                };
                return FlexDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            FlexDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'flex-directive' },] },
            ];
            /** @nocollapse */
            FlexDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["LAYOUT_CONFIG"],] }] },
                { type: FlexStyleBuilder },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            FlexDirective.propDecorators = {
                shrink: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['fxShrink',] }],
                grow: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['fxGrow',] }]
            };
            var DefaultFlexDirective = /** @class */ (function (_super) {
                __extends(DefaultFlexDirective, _super);
                function DefaultFlexDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$2;
                    return _this;
                }
                return DefaultFlexDirective;
            }(FlexDirective));
            DefaultFlexDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ inputs: inputs$2, selector: selector$2 },] },
            ];
            /** @type {?} */
            var flexRowCache = new Map();
            /** @type {?} */
            var flexColumnCache = new Map();
            /** @type {?} */
            var flexRowWrapCache = new Map();
            /** @type {?} */
            var flexColumnWrapCache = new Map();
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var FlexOrderStyleBuilder = /** @class */ (function (_super) {
                __extends(FlexOrderStyleBuilder, _super);
                function FlexOrderStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} value
                 * @return {?}
                 */
                FlexOrderStyleBuilder.prototype.buildStyles = function (value) {
                    return { order: (value && parseInt(value, 10)) || '' };
                };
                return FlexOrderStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            FlexOrderStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ FlexOrderStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function FlexOrderStyleBuilder_Factory() { return new FlexOrderStyleBuilder(); }, token: FlexOrderStyleBuilder, providedIn: "root" });
            /** @type {?} */
            var inputs$3 = [
                'fxFlexOrder', 'fxFlexOrder.xs', 'fxFlexOrder.sm', 'fxFlexOrder.md',
                'fxFlexOrder.lg', 'fxFlexOrder.xl', 'fxFlexOrder.lt-sm', 'fxFlexOrder.lt-md',
                'fxFlexOrder.lt-lg', 'fxFlexOrder.lt-xl', 'fxFlexOrder.gt-xs', 'fxFlexOrder.gt-sm',
                'fxFlexOrder.gt-md', 'fxFlexOrder.gt-lg'
            ];
            /** @type {?} */
            var selector$3 = "\n  [fxFlexOrder], [fxFlexOrder.xs], [fxFlexOrder.sm], [fxFlexOrder.md],\n  [fxFlexOrder.lg], [fxFlexOrder.xl], [fxFlexOrder.lt-sm], [fxFlexOrder.lt-md],\n  [fxFlexOrder.lt-lg], [fxFlexOrder.lt-xl], [fxFlexOrder.gt-xs], [fxFlexOrder.gt-sm],\n  [fxFlexOrder.gt-md], [fxFlexOrder.gt-lg]\n";
            /**
             * 'flex-order' flexbox styling directive
             * Configures the positional ordering of the element in a sorted layout container
             * @see https://css-tricks.com/almanac/properties/o/order/
             */
            var FlexOrderDirective = /** @class */ (function (_super) {
                __extends(FlexOrderDirective, _super);
                /**
                 * @param {?} elRef
                 * @param {?} styleUtils
                 * @param {?} styleBuilder
                 * @param {?} marshal
                 */
                function FlexOrderDirective(elRef, styleUtils, styleBuilder, marshal) {
                    var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;
                    _this.elRef = elRef;
                    _this.styleUtils = styleUtils;
                    _this.styleBuilder = styleBuilder;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'flex-order';
                    _this.styleCache = flexOrderCache;
                    _this.init();
                    return _this;
                }
                return FlexOrderDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            FlexOrderDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'flex-order-directive' },] },
            ];
            /** @nocollapse */
            FlexOrderDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: FlexOrderStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            /** @type {?} */
            var flexOrderCache = new Map();
            var DefaultFlexOrderDirective = /** @class */ (function (_super) {
                __extends(DefaultFlexOrderDirective, _super);
                function DefaultFlexOrderDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$3;
                    return _this;
                }
                return DefaultFlexOrderDirective;
            }(FlexOrderDirective));
            DefaultFlexOrderDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$3, inputs: inputs$3 },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var FlexOffsetStyleBuilder = /** @class */ (function (_super) {
                __extends(FlexOffsetStyleBuilder, _super);
                function FlexOffsetStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} offset
                 * @param {?} parent
                 * @return {?}
                 */
                FlexOffsetStyleBuilder.prototype.buildStyles = function (offset, parent) {
                    var _b;
                    if (offset === '') {
                        offset = '0';
                    }
                    /** @type {?} */
                    var isPercent = String(offset).indexOf('%') > -1;
                    /** @type {?} */
                    var isPx = String(offset).indexOf('px') > -1;
                    if (!isPx && !isPercent && !isNaN(+offset)) {
                        offset = offset + '%';
                    }
                    /** @type {?} */
                    var horizontalLayoutKey = parent.isRtl ? 'margin-right' : 'margin-left';
                    /** @type {?} */
                    var styles = isFlowHorizontal(parent.layout) ? (_b = {}, _b[horizontalLayoutKey] = "" + offset, _b) : { 'margin-top': "" + offset };
                    return styles;
                };
                return FlexOffsetStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            FlexOffsetStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ FlexOffsetStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function FlexOffsetStyleBuilder_Factory() { return new FlexOffsetStyleBuilder(); }, token: FlexOffsetStyleBuilder, providedIn: "root" });
            /** @type {?} */
            var inputs$4 = [
                'fxFlexOffset', 'fxFlexOffset.xs', 'fxFlexOffset.sm', 'fxFlexOffset.md',
                'fxFlexOffset.lg', 'fxFlexOffset.xl', 'fxFlexOffset.lt-sm', 'fxFlexOffset.lt-md',
                'fxFlexOffset.lt-lg', 'fxFlexOffset.lt-xl', 'fxFlexOffset.gt-xs', 'fxFlexOffset.gt-sm',
                'fxFlexOffset.gt-md', 'fxFlexOffset.gt-lg'
            ];
            /** @type {?} */
            var selector$4 = "\n  [fxFlexOffset], [fxFlexOffset.xs], [fxFlexOffset.sm], [fxFlexOffset.md],\n  [fxFlexOffset.lg], [fxFlexOffset.xl], [fxFlexOffset.lt-sm], [fxFlexOffset.lt-md],\n  [fxFlexOffset.lt-lg], [fxFlexOffset.lt-xl], [fxFlexOffset.gt-xs], [fxFlexOffset.gt-sm],\n  [fxFlexOffset.gt-md], [fxFlexOffset.gt-lg]\n";
            /**
             * 'flex-offset' flexbox styling directive
             * Configures the 'margin-left' of the element in a layout container
             */
            var FlexOffsetDirective = /** @class */ (function (_super) {
                __extends(FlexOffsetDirective, _super);
                /**
                 * @param {?} elRef
                 * @param {?} directionality
                 * @param {?} styleBuilder
                 * @param {?} marshal
                 * @param {?} styler
                 */
                function FlexOffsetDirective(elRef, directionality, styleBuilder, marshal, styler) {
                    var _this = _super.call(this, elRef, styleBuilder, styler, marshal) || this;
                    _this.elRef = elRef;
                    _this.directionality = directionality;
                    _this.styleBuilder = styleBuilder;
                    _this.marshal = marshal;
                    _this.styler = styler;
                    _this.DIRECTIVE_KEY = 'flex-offset';
                    _this.init([_this.directionality.change]);
                    // Parent DOM `layout-gap` with affect the nested child with `flex-offset`
                    if (_this.parentElement) {
                        _this.marshal
                            .trackValue(_this.parentElement, 'layout-gap')
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(_this.destroySubject))
                            .subscribe(_this.triggerUpdate.bind(_this));
                    }
                    return _this;
                }
                // *********************************************
                // Protected methods
                // *********************************************
                /**
                 * Using the current fxFlexOffset value, update the inline CSS
                 * NOTE: this will assign `margin-left` if the parent flex-direction == 'row',
                 *       otherwise `margin-top` is used for the offset.
                 * @protected
                 * @param {?=} value
                 * @return {?}
                 */
                FlexOffsetDirective.prototype.updateWithValue = function (value) {
                    if (value === void 0) { value = ''; }
                    // The flex-direction of this element's flex container. Defaults to 'row'.
                    /** @type {?} */
                    var layout = this.getFlexFlowDirection(( /** @type {?} */(this.parentElement)), true);
                    /** @type {?} */
                    var isRtl = this.directionality.value === 'rtl';
                    if (layout === 'row' && isRtl) {
                        this.styleCache = flexOffsetCacheRowRtl;
                    }
                    else if (layout === 'row' && !isRtl) {
                        this.styleCache = flexOffsetCacheRowLtr;
                    }
                    else if (layout === 'column' && isRtl) {
                        this.styleCache = flexOffsetCacheColumnRtl;
                    }
                    else if (layout === 'column' && !isRtl) {
                        this.styleCache = flexOffsetCacheColumnLtr;
                    }
                    this.addStyles(value + '', { layout: layout, isRtl: isRtl });
                };
                return FlexOffsetDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            FlexOffsetDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'flex-offset-directive' },] },
            ];
            /** @nocollapse */
            FlexOffsetDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"] },
                { type: FlexOffsetStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] }
            ]; };
            var DefaultFlexOffsetDirective = /** @class */ (function (_super) {
                __extends(DefaultFlexOffsetDirective, _super);
                function DefaultFlexOffsetDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$4;
                    return _this;
                }
                return DefaultFlexOffsetDirective;
            }(FlexOffsetDirective));
            DefaultFlexOffsetDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$4, inputs: inputs$4 },] },
            ];
            /** @type {?} */
            var flexOffsetCacheRowRtl = new Map();
            /** @type {?} */
            var flexOffsetCacheColumnRtl = new Map();
            /** @type {?} */
            var flexOffsetCacheRowLtr = new Map();
            /** @type {?} */
            var flexOffsetCacheColumnLtr = new Map();
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var FlexAlignStyleBuilder = /** @class */ (function (_super) {
                __extends(FlexAlignStyleBuilder, _super);
                function FlexAlignStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @return {?}
                 */
                FlexAlignStyleBuilder.prototype.buildStyles = function (input) {
                    input = input || 'stretch';
                    /** @type {?} */
                    var styles = {};
                    // Cross-axis
                    switch (input) {
                        case 'start':
                            styles['align-self'] = 'flex-start';
                            break;
                        case 'end':
                            styles['align-self'] = 'flex-end';
                            break;
                        default:
                            styles['align-self'] = input;
                            break;
                    }
                    return styles;
                };
                return FlexAlignStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            FlexAlignStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ FlexAlignStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function FlexAlignStyleBuilder_Factory() { return new FlexAlignStyleBuilder(); }, token: FlexAlignStyleBuilder, providedIn: "root" });
            /** @type {?} */
            var inputs$5 = [
                'fxFlexAlign', 'fxFlexAlign.xs', 'fxFlexAlign.sm', 'fxFlexAlign.md',
                'fxFlexAlign.lg', 'fxFlexAlign.xl', 'fxFlexAlign.lt-sm', 'fxFlexAlign.lt-md',
                'fxFlexAlign.lt-lg', 'fxFlexAlign.lt-xl', 'fxFlexAlign.gt-xs', 'fxFlexAlign.gt-sm',
                'fxFlexAlign.gt-md', 'fxFlexAlign.gt-lg'
            ];
            /** @type {?} */
            var selector$5 = "\n  [fxFlexAlign], [fxFlexAlign.xs], [fxFlexAlign.sm], [fxFlexAlign.md],\n  [fxFlexAlign.lg], [fxFlexAlign.xl], [fxFlexAlign.lt-sm], [fxFlexAlign.lt-md],\n  [fxFlexAlign.lt-lg], [fxFlexAlign.lt-xl], [fxFlexAlign.gt-xs], [fxFlexAlign.gt-sm],\n  [fxFlexAlign.gt-md], [fxFlexAlign.gt-lg]\n";
            /**
             * 'flex-align' flexbox styling directive
             * Allows element-specific overrides for cross-axis alignments in a layout container
             * @see https://css-tricks.com/almanac/properties/a/align-self/
             */
            var FlexAlignDirective = /** @class */ (function (_super) {
                __extends(FlexAlignDirective, _super);
                /**
                 * @param {?} elRef
                 * @param {?} styleUtils
                 * @param {?} styleBuilder
                 * @param {?} marshal
                 */
                function FlexAlignDirective(elRef, styleUtils, styleBuilder, marshal) {
                    var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;
                    _this.elRef = elRef;
                    _this.styleUtils = styleUtils;
                    _this.styleBuilder = styleBuilder;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'flex-align';
                    _this.styleCache = flexAlignCache;
                    _this.init();
                    return _this;
                }
                return FlexAlignDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            FlexAlignDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'flex-align-directive' },] },
            ];
            /** @nocollapse */
            FlexAlignDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: FlexAlignStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            /** @type {?} */
            var flexAlignCache = new Map();
            var DefaultFlexAlignDirective = /** @class */ (function (_super) {
                __extends(DefaultFlexAlignDirective, _super);
                function DefaultFlexAlignDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$5;
                    return _this;
                }
                return DefaultFlexAlignDirective;
            }(FlexAlignDirective));
            DefaultFlexAlignDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$5, inputs: inputs$5 },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var FLEX_FILL_CSS = {
                'margin': 0,
                'width': '100%',
                'height': '100%',
                'min-width': '100%',
                'min-height': '100%'
            };
            var FlexFillStyleBuilder = /** @class */ (function (_super) {
                __extends(FlexFillStyleBuilder, _super);
                function FlexFillStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} _input
                 * @return {?}
                 */
                FlexFillStyleBuilder.prototype.buildStyles = function (_input) {
                    return FLEX_FILL_CSS;
                };
                return FlexFillStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            FlexFillStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ FlexFillStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function FlexFillStyleBuilder_Factory() { return new FlexFillStyleBuilder(); }, token: FlexFillStyleBuilder, providedIn: "root" });
            /**
             * 'fxFill' flexbox styling directive
             *  Maximizes width and height of element in a layout container
             *
             *  NOTE: fxFill is NOT responsive API!!
             */
            var FlexFillDirective = /** @class */ (function (_super) {
                __extends(FlexFillDirective, _super);
                /**
                 * @param {?} elRef
                 * @param {?} styleUtils
                 * @param {?} styleBuilder
                 * @param {?} marshal
                 */
                function FlexFillDirective(elRef, styleUtils, styleBuilder, marshal) {
                    var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;
                    _this.elRef = elRef;
                    _this.styleUtils = styleUtils;
                    _this.styleBuilder = styleBuilder;
                    _this.marshal = marshal;
                    _this.styleCache = flexFillCache;
                    _this.addStyles('');
                    return _this;
                }
                return FlexFillDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            FlexFillDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: "[fxFill], [fxFlexFill]" },] },
            ];
            /** @nocollapse */
            FlexFillDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: FlexFillStyleBuilder },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            /** @type {?} */
            var flexFillCache = new Map();
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var LayoutAlignStyleBuilder = /** @class */ (function (_super) {
                __extends(LayoutAlignStyleBuilder, _super);
                function LayoutAlignStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} align
                 * @param {?} parent
                 * @return {?}
                 */
                LayoutAlignStyleBuilder.prototype.buildStyles = function (align, parent) {
                    /** @type {?} */
                    var css = {};
                    var _b = align.split(' '), mainAxis = _b[0], crossAxis = _b[1];
                    // Main axis
                    switch (mainAxis) {
                        case 'center':
                            css['justify-content'] = 'center';
                            break;
                        case 'space-around':
                            css['justify-content'] = 'space-around';
                            break;
                        case 'space-between':
                            css['justify-content'] = 'space-between';
                            break;
                        case 'space-evenly':
                            css['justify-content'] = 'space-evenly';
                            break;
                        case 'end':
                        case 'flex-end':
                            css['justify-content'] = 'flex-end';
                            break;
                        case 'start':
                        case 'flex-start':
                        default:
                            css['justify-content'] = 'flex-start'; // default main axis
                            break;
                    }
                    // Cross-axis
                    switch (crossAxis) {
                        case 'start':
                        case 'flex-start':
                            css['align-items'] = css['align-content'] = 'flex-start';
                            break;
                        case 'center':
                            css['align-items'] = css['align-content'] = 'center';
                            break;
                        case 'end':
                        case 'flex-end':
                            css['align-items'] = css['align-content'] = 'flex-end';
                            break;
                        case 'space-between':
                            css['align-content'] = 'space-between';
                            css['align-items'] = 'stretch';
                            break;
                        case 'space-around':
                            css['align-content'] = 'space-around';
                            css['align-items'] = 'stretch';
                            break;
                        case 'baseline':
                            css['align-content'] = 'stretch';
                            css['align-items'] = 'baseline';
                            break;
                        case 'stretch':
                        default: // 'stretch'
                            css['align-items'] = css['align-content'] = 'stretch'; // default cross axis
                            break;
                    }
                    return ( /** @type {?} */(extendObject(css, {
                        'display': parent.inline ? 'inline-flex' : 'flex',
                        'flex-direction': parent.layout,
                        'box-sizing': 'border-box',
                        'max-width': crossAxis === 'stretch' ?
                            !isFlowHorizontal(parent.layout) ? '100%' : null : null,
                        'max-height': crossAxis === 'stretch' ?
                            isFlowHorizontal(parent.layout) ? '100%' : null : null,
                    })));
                };
                return LayoutAlignStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            LayoutAlignStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ LayoutAlignStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function LayoutAlignStyleBuilder_Factory() { return new LayoutAlignStyleBuilder(); }, token: LayoutAlignStyleBuilder, providedIn: "root" });
            /** @type {?} */
            var inputs$6 = [
                'fxLayoutAlign', 'fxLayoutAlign.xs', 'fxLayoutAlign.sm', 'fxLayoutAlign.md',
                'fxLayoutAlign.lg', 'fxLayoutAlign.xl', 'fxLayoutAlign.lt-sm', 'fxLayoutAlign.lt-md',
                'fxLayoutAlign.lt-lg', 'fxLayoutAlign.lt-xl', 'fxLayoutAlign.gt-xs', 'fxLayoutAlign.gt-sm',
                'fxLayoutAlign.gt-md', 'fxLayoutAlign.gt-lg'
            ];
            /** @type {?} */
            var selector$6 = "\n  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],\n  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],\n  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],\n  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]\n";
            /**
             * 'layout-align' flexbox styling directive
             *  Defines positioning of child elements along main and cross axis in a layout container
             *  Optional values: {main-axis} values or {main-axis cross-axis} value pairs
             *
             * @see https://css-tricks.com/almanac/properties/j/justify-content/
             * @see https://css-tricks.com/almanac/properties/a/align-items/
             * @see https://css-tricks.com/almanac/properties/a/align-content/
             */
            var LayoutAlignDirective = /** @class */ (function (_super) {
                __extends(LayoutAlignDirective, _super);
                // default inline value
                /**
                 * @param {?} elRef
                 * @param {?} styleUtils
                 * @param {?} styleBuilder
                 * @param {?} marshal
                 */
                function LayoutAlignDirective(elRef, styleUtils, styleBuilder, marshal) {
                    var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;
                    _this.elRef = elRef;
                    _this.styleUtils = styleUtils;
                    _this.styleBuilder = styleBuilder;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'layout-align';
                    _this.layout = 'row'; // default flex-direction
                    // default flex-direction
                    _this.inline = false; // default inline value
                    _this.init();
                    _this.marshal.trackValue(_this.nativeElement, 'layout')
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(_this.destroySubject))
                        .subscribe(_this.onLayoutChange.bind(_this));
                    return _this;
                }
                // *********************************************
                // Protected methods
                // *********************************************
                /**
                 *
                 * @protected
                 * @param {?} value
                 * @return {?}
                 */
                LayoutAlignDirective.prototype.updateWithValue = function (value) {
                    /** @type {?} */
                    var layout = this.layout || 'row';
                    /** @type {?} */
                    var inline = this.inline;
                    if (layout === 'row' && inline) {
                        this.styleCache = layoutAlignHorizontalInlineCache;
                    }
                    else if (layout === 'row' && !inline) {
                        this.styleCache = layoutAlignHorizontalCache;
                    }
                    else if (layout === 'row-reverse' && inline) {
                        this.styleCache = layoutAlignHorizontalRevInlineCache;
                    }
                    else if (layout === 'row-reverse' && !inline) {
                        this.styleCache = layoutAlignHorizontalRevCache;
                    }
                    else if (layout === 'column' && inline) {
                        this.styleCache = layoutAlignVerticalInlineCache;
                    }
                    else if (layout === 'column' && !inline) {
                        this.styleCache = layoutAlignVerticalCache;
                    }
                    else if (layout === 'column-reverse' && inline) {
                        this.styleCache = layoutAlignVerticalRevInlineCache;
                    }
                    else if (layout === 'column-reverse' && !inline) {
                        this.styleCache = layoutAlignVerticalRevCache;
                    }
                    this.addStyles(value, { layout: layout, inline: inline });
                };
                /**
                 * Cache the parent container 'flex-direction' and update the 'flex' styles
                 * @protected
                 * @param {?} matcher
                 * @return {?}
                 */
                LayoutAlignDirective.prototype.onLayoutChange = function (matcher) {
                    var _this = this;
                    /** @type {?} */
                    var layoutKeys = matcher.value.split(' ');
                    this.layout = layoutKeys[0];
                    this.inline = matcher.value.includes('inline');
                    if (!LAYOUT_VALUES.find(( /**
                     * @param {?} x
                     * @return {?}
                     */function (/**
                     * @param {?} x
                     * @return {?}
                     */ x) { return x === _this.layout; }))) {
                        this.layout = 'row';
                    }
                    this.triggerUpdate();
                };
                return LayoutAlignDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            LayoutAlignDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'layout-align-directive' },] },
            ];
            /** @nocollapse */
            LayoutAlignDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: LayoutAlignStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            var DefaultLayoutAlignDirective = /** @class */ (function (_super) {
                __extends(DefaultLayoutAlignDirective, _super);
                function DefaultLayoutAlignDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$6;
                    return _this;
                }
                return DefaultLayoutAlignDirective;
            }(LayoutAlignDirective));
            DefaultLayoutAlignDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$6, inputs: inputs$6 },] },
            ];
            /** @type {?} */
            var layoutAlignHorizontalCache = new Map();
            /** @type {?} */
            var layoutAlignVerticalCache = new Map();
            /** @type {?} */
            var layoutAlignHorizontalRevCache = new Map();
            /** @type {?} */
            var layoutAlignVerticalRevCache = new Map();
            /** @type {?} */
            var layoutAlignHorizontalInlineCache = new Map();
            /** @type {?} */
            var layoutAlignVerticalInlineCache = new Map();
            /** @type {?} */
            var layoutAlignHorizontalRevInlineCache = new Map();
            /** @type {?} */
            var layoutAlignVerticalRevInlineCache = new Map();
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var ALL_DIRECTIVES = [
                DefaultLayoutDirective,
                DefaultLayoutGapDirective,
                DefaultLayoutAlignDirective,
                DefaultFlexOrderDirective,
                DefaultFlexOffsetDirective,
                FlexFillDirective,
                DefaultFlexAlignDirective,
                DefaultFlexDirective,
                FlexDirective,
                FlexAlignDirective,
                FlexOffsetDirective,
                FlexOrderDirective,
                LayoutDirective,
                LayoutAlignDirective,
                LayoutGapDirective,
            ];
            /**
             * *****************************************************************
             * Define module for the Flex API
             * *****************************************************************
             */
            var FlexModule = /** @class */ (function () {
                function FlexModule() {
                }
                return FlexModule;
            }());
            FlexModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["CoreModule"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"]],
                            declarations: ALL_DIRECTIVES.slice(),
                            exports: ALL_DIRECTIVES.slice()
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=flex.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/flex-layout/esm2015/grid.js": 
        /*!***********************************************************!*\
          !*** ./node_modules/@angular/flex-layout/esm2015/grid.js ***!
          \***********************************************************/
        /*! exports provided: GridModule, ɵf2, ɵe2, ɵd2, ɵi2, ɵh2, ɵg2, ɵl2, ɵk2, ɵj2, ɵo2, ɵn2, ɵm2, ɵr2, ɵq2, ɵp2, ɵu2, ɵt2, ɵs2, ɵx2, ɵw2, ɵv2, ɵba2, ɵz2, ɵy2, ɵc2, ɵb2, ɵa2, ɵbd2, ɵbc2, ɵbb2, ɵbg2, ɵbf2, ɵbe2 */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GridModule", function () { return GridModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf2", function () { return DefaultGridAlignColumnsDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe2", function () { return GridAlignColumnsDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd2", function () { return GridAlignColumnsStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵi2", function () { return DefaultGridAlignRowsDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh2", function () { return GridAlignRowsDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg2", function () { return GridAlignRowsStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵl2", function () { return DefaultGridAreaDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵk2", function () { return GridAreaDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵj2", function () { return GridAreaStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵo2", function () { return DefaultGridAreasDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵn2", function () { return GridAreasDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵm2", function () { return GridAreasStyleBuiler; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵr2", function () { return DefaultGridAutoDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵq2", function () { return GridAutoDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵp2", function () { return GridAutoStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵu2", function () { return DefaultGridColumnDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵt2", function () { return GridColumnDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵs2", function () { return GridColumnStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵx2", function () { return DefaultGridColumnsDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵw2", function () { return GridColumnsDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵv2", function () { return GridColumnsStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵba2", function () { return DefaultGridGapDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵz2", function () { return GridGapDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵy2", function () { return GridGapStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc2", function () { return DefaultGridAlignDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb2", function () { return GridAlignDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa2", function () { return GridAlignStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbd2", function () { return DefaultGridRowDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbc2", function () { return GridRowDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbb2", function () { return GridRowStyleBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbg2", function () { return DefaultGridRowsDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbf2", function () { return GridRowsDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbe2", function () { return GridRowsStyleBuilder; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/flex-layout/core */ "./node_modules/@angular/flex-layout/esm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var ROW_DEFAULT = 'stretch';
            /** @type {?} */
            var COL_DEFAULT = 'stretch';
            var GridAlignStyleBuilder = /** @class */ (function (_super) {
                __extends(GridAlignStyleBuilder, _super);
                function GridAlignStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @return {?}
                 */
                GridAlignStyleBuilder.prototype.buildStyles = function (input) {
                    return buildCss(input || ROW_DEFAULT);
                };
                return GridAlignStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            GridAlignStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ GridAlignStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function GridAlignStyleBuilder_Factory() { return new GridAlignStyleBuilder(); }, token: GridAlignStyleBuilder, providedIn: "root" });
            var GridAlignDirective = /** @class */ (function (_super) {
                __extends(GridAlignDirective, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} styleBuilder
                 * @param {?} styler
                 * @param {?} marshal
                 */
                function GridAlignDirective(elementRef, styleBuilder, styler, marshal) {
                    var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;
                    _this.elementRef = elementRef;
                    _this.styleBuilder = styleBuilder;
                    _this.styler = styler;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'grid-align';
                    _this.styleCache = alignCache;
                    _this.init();
                    return _this;
                }
                return GridAlignDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            GridAlignDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'grid-align-directive' },] },
            ];
            /** @nocollapse */
            GridAlignDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: GridAlignStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            /** @type {?} */
            var alignCache = new Map();
            /** @type {?} */
            var inputs = [
                'gdGridAlign',
                'gdGridAlign.xs', 'gdGridAlign.sm', 'gdGridAlign.md', 'gdGridAlign.lg', 'gdGridAlign.xl',
                'gdGridAlign.lt-sm', 'gdGridAlign.lt-md', 'gdGridAlign.lt-lg', 'gdGridAlign.lt-xl',
                'gdGridAlign.gt-xs', 'gdGridAlign.gt-sm', 'gdGridAlign.gt-md', 'gdGridAlign.gt-lg'
            ];
            /** @type {?} */
            var selector = "\n  [gdGridAlign],\n  [gdGridAlign.xs], [gdGridAlign.sm], [gdGridAlign.md], [gdGridAlign.lg],[gdGridAlign.xl],\n  [gdGridAlign.lt-sm], [gdGridAlign.lt-md], [gdGridAlign.lt-lg], [gdGridAlign.lt-xl],\n  [gdGridAlign.gt-xs], [gdGridAlign.gt-sm], [gdGridAlign.gt-md], [gdGridAlign.gt-lg]\n";
            /**
             * 'align' CSS Grid styling directive for grid children
             *  Defines positioning of child elements along row and column axis in a grid container
             *  Optional values: {row-axis} values or {row-axis column-axis} value pairs
             *
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-self
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-self
             */
            var DefaultGridAlignDirective = /** @class */ (function (_super) {
                __extends(DefaultGridAlignDirective, _super);
                function DefaultGridAlignDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs;
                    return _this;
                }
                return DefaultGridAlignDirective;
            }(GridAlignDirective));
            DefaultGridAlignDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector, inputs: inputs },] },
            ];
            /**
             * @param {?=} align
             * @return {?}
             */
            function buildCss(align) {
                if (align === void 0) { align = ''; }
                /** @type {?} */
                var css = {};
                var _b = align.split(' '), rowAxis = _b[0], columnAxis = _b[1];
                // Row axis
                switch (rowAxis) {
                    case 'end':
                        css['justify-self'] = 'end';
                        break;
                    case 'center':
                        css['justify-self'] = 'center';
                        break;
                    case 'stretch':
                        css['justify-self'] = 'stretch';
                        break;
                    case 'start':
                        css['justify-self'] = 'start';
                        break;
                    default:
                        css['justify-self'] = ROW_DEFAULT; // default row axis
                        break;
                }
                // Column axis
                switch (columnAxis) {
                    case 'end':
                        css['align-self'] = 'end';
                        break;
                    case 'center':
                        css['align-self'] = 'center';
                        break;
                    case 'stretch':
                        css['align-self'] = 'stretch';
                        break;
                    case 'start':
                        css['align-self'] = 'start';
                        break;
                    default:
                        css['align-self'] = COL_DEFAULT; // default column axis
                        break;
                }
                return css;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_MAIN = 'start';
            /** @type {?} */
            var DEFAULT_CROSS = 'stretch';
            var GridAlignColumnsStyleBuilder = /** @class */ (function (_super) {
                __extends(GridAlignColumnsStyleBuilder, _super);
                function GridAlignColumnsStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @param {?} parent
                 * @return {?}
                 */
                GridAlignColumnsStyleBuilder.prototype.buildStyles = function (input, parent) {
                    return buildCss$1(input || DEFAULT_MAIN + " " + DEFAULT_CROSS, parent.inline);
                };
                return GridAlignColumnsStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            GridAlignColumnsStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ GridAlignColumnsStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function GridAlignColumnsStyleBuilder_Factory() { return new GridAlignColumnsStyleBuilder(); }, token: GridAlignColumnsStyleBuilder, providedIn: "root" });
            var GridAlignColumnsDirective = /** @class */ (function (_super) {
                __extends(GridAlignColumnsDirective, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} styleBuilder
                 * @param {?} styler
                 * @param {?} marshal
                 */
                function GridAlignColumnsDirective(elementRef, styleBuilder, styler, marshal) {
                    var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;
                    _this.elementRef = elementRef;
                    _this.styleBuilder = styleBuilder;
                    _this.styler = styler;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'grid-align-columns';
                    _this._inline = false;
                    _this.init();
                    return _this;
                }
                Object.defineProperty(GridAlignColumnsDirective.prototype, "inline", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._inline; },
                    /**
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) { this._inline = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(val); },
                    enumerable: true,
                    configurable: true
                });
                // *********************************************
                // Protected methods
                // *********************************************
                /**
                 * @protected
                 * @param {?} value
                 * @return {?}
                 */
                GridAlignColumnsDirective.prototype.updateWithValue = function (value) {
                    this.styleCache = this.inline ? alignColumnsInlineCache : alignColumnsCache;
                    this.addStyles(value, { inline: this.inline });
                };
                return GridAlignColumnsDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            GridAlignColumnsDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'grid-align-columns-directive' },] },
            ];
            /** @nocollapse */
            GridAlignColumnsDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: GridAlignColumnsStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            GridAlignColumnsDirective.propDecorators = {
                inline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['gdInline',] }]
            };
            /** @type {?} */
            var alignColumnsCache = new Map();
            /** @type {?} */
            var alignColumnsInlineCache = new Map();
            /** @type {?} */
            var inputs$1 = [
                'gdAlignColumns',
                'gdAlignColumns.xs', 'gdAlignColumns.sm', 'gdAlignColumns.md',
                'gdAlignColumns.lg', 'gdAlignColumns.xl', 'gdAlignColumns.lt-sm',
                'gdAlignColumns.lt-md', 'gdAlignColumns.lt-lg', 'gdAlignColumns.lt-xl',
                'gdAlignColumns.gt-xs', 'gdAlignColumns.gt-sm', 'gdAlignColumns.gt-md',
                'gdAlignColumns.gt-lg'
            ];
            /** @type {?} */
            var selector$1 = "\n  [gdAlignColumns],\n  [gdAlignColumns.xs], [gdAlignColumns.sm], [gdAlignColumns.md],\n  [gdAlignColumns.lg], [gdAlignColumns.xl], [gdAlignColumns.lt-sm],\n  [gdAlignColumns.lt-md], [gdAlignColumns.lt-lg], [gdAlignColumns.lt-xl],\n  [gdAlignColumns.gt-xs], [gdAlignColumns.gt-sm], [gdAlignColumns.gt-md],\n  [gdAlignColumns.gt-lg]\n";
            /**
             * 'column alignment' CSS Grid styling directive
             * Configures the alignment in the column direction
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-19
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-21
             */
            var DefaultGridAlignColumnsDirective = /** @class */ (function (_super) {
                __extends(DefaultGridAlignColumnsDirective, _super);
                function DefaultGridAlignColumnsDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$1;
                    return _this;
                }
                return DefaultGridAlignColumnsDirective;
            }(GridAlignColumnsDirective));
            DefaultGridAlignColumnsDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$1, inputs: inputs$1 },] },
            ];
            /**
             * @param {?} align
             * @param {?} inline
             * @return {?}
             */
            function buildCss$1(align, inline) {
                /** @type {?} */
                var css = {};
                var _b = align.split(' '), mainAxis = _b[0], crossAxis = _b[1];
                // Main axis
                switch (mainAxis) {
                    case 'center':
                        css['align-content'] = 'center';
                        break;
                    case 'space-around':
                        css['align-content'] = 'space-around';
                        break;
                    case 'space-between':
                        css['align-content'] = 'space-between';
                        break;
                    case 'space-evenly':
                        css['align-content'] = 'space-evenly';
                        break;
                    case 'end':
                        css['align-content'] = 'end';
                        break;
                    case 'start':
                        css['align-content'] = 'start';
                        break;
                    case 'stretch':
                        css['align-content'] = 'stretch';
                        break;
                    default:
                        css['align-content'] = DEFAULT_MAIN; // default main axis
                        break;
                }
                // Cross-axis
                switch (crossAxis) {
                    case 'start':
                        css['align-items'] = 'start';
                        break;
                    case 'center':
                        css['align-items'] = 'center';
                        break;
                    case 'end':
                        css['align-items'] = 'end';
                        break;
                    case 'stretch':
                        css['align-items'] = 'stretch';
                        break;
                    default: // 'stretch'
                        css['align-items'] = DEFAULT_CROSS; // default cross axis
                        break;
                }
                css['display'] = inline ? 'inline-grid' : 'grid';
                return css;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_MAIN$1 = 'start';
            /** @type {?} */
            var DEFAULT_CROSS$1 = 'stretch';
            var GridAlignRowsStyleBuilder = /** @class */ (function (_super) {
                __extends(GridAlignRowsStyleBuilder, _super);
                function GridAlignRowsStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @param {?} parent
                 * @return {?}
                 */
                GridAlignRowsStyleBuilder.prototype.buildStyles = function (input, parent) {
                    return buildCss$2(input || DEFAULT_MAIN$1 + " " + DEFAULT_CROSS$1, parent.inline);
                };
                return GridAlignRowsStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            GridAlignRowsStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ GridAlignRowsStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function GridAlignRowsStyleBuilder_Factory() { return new GridAlignRowsStyleBuilder(); }, token: GridAlignRowsStyleBuilder, providedIn: "root" });
            var GridAlignRowsDirective = /** @class */ (function (_super) {
                __extends(GridAlignRowsDirective, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} styleBuilder
                 * @param {?} styler
                 * @param {?} marshal
                 */
                function GridAlignRowsDirective(elementRef, styleBuilder, styler, marshal) {
                    var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;
                    _this.elementRef = elementRef;
                    _this.styleBuilder = styleBuilder;
                    _this.styler = styler;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'grid-align-rows';
                    _this._inline = false;
                    _this.init();
                    return _this;
                }
                Object.defineProperty(GridAlignRowsDirective.prototype, "inline", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._inline; },
                    /**
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) { this._inline = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(val); },
                    enumerable: true,
                    configurable: true
                });
                // *********************************************
                // Protected methods
                // *********************************************
                /**
                 * @protected
                 * @param {?} value
                 * @return {?}
                 */
                GridAlignRowsDirective.prototype.updateWithValue = function (value) {
                    this.styleCache = this.inline ? alignRowsInlineCache : alignRowsCache;
                    this.addStyles(value, { inline: this.inline });
                };
                return GridAlignRowsDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            GridAlignRowsDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'grid-align-rows-directive' },] },
            ];
            /** @nocollapse */
            GridAlignRowsDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: GridAlignRowsStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            GridAlignRowsDirective.propDecorators = {
                inline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['gdInline',] }]
            };
            /** @type {?} */
            var alignRowsCache = new Map();
            /** @type {?} */
            var alignRowsInlineCache = new Map();
            /** @type {?} */
            var inputs$2 = [
                'gdAlignRows',
                'gdAlignRows.xs', 'gdAlignRows.sm', 'gdAlignRows.md',
                'gdAlignRows.lg', 'gdAlignRows.xl', 'gdAlignRows.lt-sm',
                'gdAlignRows.lt-md', 'gdAlignRows.lt-lg', 'gdAlignRows.lt-xl',
                'gdAlignRows.gt-xs', 'gdAlignRows.gt-sm', 'gdAlignRows.gt-md',
                'gdAlignRows.gt-lg'
            ];
            /** @type {?} */
            var selector$2 = "\n  [gdAlignRows],\n  [gdAlignRows.xs], [gdAlignRows.sm], [gdAlignRows.md],\n  [gdAlignRows.lg], [gdAlignRows.xl], [gdAlignRows.lt-sm],\n  [gdAlignRows.lt-md], [gdAlignRows.lt-lg], [gdAlignRows.lt-xl],\n  [gdAlignRows.gt-xs], [gdAlignRows.gt-sm], [gdAlignRows.gt-md],\n  [gdAlignRows.gt-lg]\n";
            /**
             * 'row alignment' CSS Grid styling directive
             * Configures the alignment in the row direction
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-18
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-20
             */
            var DefaultGridAlignRowsDirective = /** @class */ (function (_super) {
                __extends(DefaultGridAlignRowsDirective, _super);
                function DefaultGridAlignRowsDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$2;
                    return _this;
                }
                return DefaultGridAlignRowsDirective;
            }(GridAlignRowsDirective));
            DefaultGridAlignRowsDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$2, inputs: inputs$2 },] },
            ];
            /**
             * @param {?} align
             * @param {?} inline
             * @return {?}
             */
            function buildCss$2(align, inline) {
                /** @type {?} */
                var css = {};
                var _b = align.split(' '), mainAxis = _b[0], crossAxis = _b[1];
                // Main axis
                switch (mainAxis) {
                    case 'center':
                    case 'space-around':
                    case 'space-between':
                    case 'space-evenly':
                    case 'end':
                    case 'start':
                    case 'stretch':
                        css['justify-content'] = mainAxis;
                        break;
                    default:
                        css['justify-content'] = DEFAULT_MAIN$1; // default main axis
                        break;
                }
                // Cross-axis
                switch (crossAxis) {
                    case 'start':
                    case 'center':
                    case 'end':
                    case 'stretch':
                        css['justify-items'] = crossAxis;
                        break;
                    default: // 'stretch'
                        css['justify-items'] = DEFAULT_CROSS$1; // default cross axis
                        break;
                }
                css['display'] = inline ? 'inline-grid' : 'grid';
                return css;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_VALUE = 'auto';
            var GridAreaStyleBuilder = /** @class */ (function (_super) {
                __extends(GridAreaStyleBuilder, _super);
                function GridAreaStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @return {?}
                 */
                GridAreaStyleBuilder.prototype.buildStyles = function (input) {
                    return { 'grid-area': input || DEFAULT_VALUE };
                };
                return GridAreaStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            GridAreaStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ GridAreaStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function GridAreaStyleBuilder_Factory() { return new GridAreaStyleBuilder(); }, token: GridAreaStyleBuilder, providedIn: "root" });
            var GridAreaDirective = /** @class */ (function (_super) {
                __extends(GridAreaDirective, _super);
                /**
                 * @param {?} elRef
                 * @param {?} styleUtils
                 * @param {?} styleBuilder
                 * @param {?} marshal
                 */
                function GridAreaDirective(elRef, styleUtils, styleBuilder, marshal) {
                    var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;
                    _this.elRef = elRef;
                    _this.styleUtils = styleUtils;
                    _this.styleBuilder = styleBuilder;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'grid-area';
                    _this.styleCache = gridAreaCache;
                    _this.init();
                    return _this;
                }
                return GridAreaDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            GridAreaDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'grid-area-directive' },] },
            ];
            /** @nocollapse */
            GridAreaDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: GridAreaStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            /** @type {?} */
            var gridAreaCache = new Map();
            /** @type {?} */
            var inputs$3 = [
                'gdArea',
                'gdArea.xs', 'gdArea.sm', 'gdArea.md', 'gdArea.lg', 'gdArea.xl',
                'gdArea.lt-sm', 'gdArea.lt-md', 'gdArea.lt-lg', 'gdArea.lt-xl',
                'gdArea.gt-xs', 'gdArea.gt-sm', 'gdArea.gt-md', 'gdArea.gt-lg'
            ];
            /** @type {?} */
            var selector$3 = "\n  [gdArea],\n  [gdArea.xs], [gdArea.sm], [gdArea.md], [gdArea.lg], [gdArea.xl],\n  [gdArea.lt-sm], [gdArea.lt-md], [gdArea.lt-lg], [gdArea.lt-xl],\n  [gdArea.gt-xs], [gdArea.gt-sm], [gdArea.gt-md], [gdArea.gt-lg]\n";
            /**
             * 'grid-area' CSS Grid styling directive
             * Configures the name or position of an element within the grid
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-27
             */
            var DefaultGridAreaDirective = /** @class */ (function (_super) {
                __extends(DefaultGridAreaDirective, _super);
                function DefaultGridAreaDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$3;
                    return _this;
                }
                return DefaultGridAreaDirective;
            }(GridAreaDirective));
            DefaultGridAreaDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$3, inputs: inputs$3 },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_VALUE$1 = 'none';
            /** @type {?} */
            var DELIMETER = '|';
            var GridAreasStyleBuiler = /** @class */ (function (_super) {
                __extends(GridAreasStyleBuiler, _super);
                function GridAreasStyleBuiler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @param {?} parent
                 * @return {?}
                 */
                GridAreasStyleBuiler.prototype.buildStyles = function (input, parent) {
                    /** @type {?} */
                    var areas = (input || DEFAULT_VALUE$1).split(DELIMETER).map(( /**
                     * @param {?} v
                     * @return {?}
                     */function (/**
                     * @param {?} v
                     * @return {?}
                     */ v) { return "\"" + v.trim() + "\""; }));
                    return {
                        'display': parent.inline ? 'inline-grid' : 'grid',
                        'grid-template-areas': areas.join(' ')
                    };
                };
                return GridAreasStyleBuiler;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            GridAreasStyleBuiler.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ GridAreasStyleBuiler.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function GridAreasStyleBuiler_Factory() { return new GridAreasStyleBuiler(); }, token: GridAreasStyleBuiler, providedIn: "root" });
            var GridAreasDirective = /** @class */ (function (_super) {
                __extends(GridAreasDirective, _super);
                /**
                 * @param {?} elRef
                 * @param {?} styleUtils
                 * @param {?} styleBuilder
                 * @param {?} marshal
                 */
                function GridAreasDirective(elRef, styleUtils, styleBuilder, marshal) {
                    var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;
                    _this.elRef = elRef;
                    _this.styleUtils = styleUtils;
                    _this.styleBuilder = styleBuilder;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'grid-areas';
                    _this._inline = false;
                    _this.init();
                    return _this;
                }
                Object.defineProperty(GridAreasDirective.prototype, "inline", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._inline; },
                    /**
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) { this._inline = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(val); },
                    enumerable: true,
                    configurable: true
                });
                // *********************************************
                // Protected methods
                // *********************************************
                /**
                 * @protected
                 * @param {?} value
                 * @return {?}
                 */
                GridAreasDirective.prototype.updateWithValue = function (value) {
                    this.styleCache = this.inline ? areasInlineCache : areasCache;
                    this.addStyles(value, { inline: this.inline });
                };
                return GridAreasDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            GridAreasDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'grid-areas-directive' },] },
            ];
            /** @nocollapse */
            GridAreasDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: GridAreasStyleBuiler, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            GridAreasDirective.propDecorators = {
                inline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['gdInline',] }]
            };
            /** @type {?} */
            var areasCache = new Map();
            /** @type {?} */
            var areasInlineCache = new Map();
            /** @type {?} */
            var inputs$4 = [
                'gdAreas',
                'gdAreas.xs', 'gdAreas.sm', 'gdAreas.md', 'gdAreas.lg', 'gdAreas.xl',
                'gdAreas.lt-sm', 'gdAreas.lt-md', 'gdAreas.lt-lg', 'gdAreas.lt-xl',
                'gdAreas.gt-xs', 'gdAreas.gt-sm', 'gdAreas.gt-md', 'gdAreas.gt-lg'
            ];
            /** @type {?} */
            var selector$4 = "\n  [gdAreas],\n  [gdAreas.xs], [gdAreas.sm], [gdAreas.md], [gdAreas.lg], [gdAreas.xl],\n  [gdAreas.lt-sm], [gdAreas.lt-md], [gdAreas.lt-lg], [gdAreas.lt-xl],\n  [gdAreas.gt-xs], [gdAreas.gt-sm], [gdAreas.gt-md], [gdAreas.gt-lg]\n";
            /**
             * 'grid-template-areas' CSS Grid styling directive
             * Configures the names of elements within the grid
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-14
             */
            var DefaultGridAreasDirective = /** @class */ (function (_super) {
                __extends(DefaultGridAreasDirective, _super);
                function DefaultGridAreasDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$4;
                    return _this;
                }
                return DefaultGridAreasDirective;
            }(GridAreasDirective));
            DefaultGridAreasDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$4, inputs: inputs$4 },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_VALUE$2 = 'initial';
            var GridAutoStyleBuilder = /** @class */ (function (_super) {
                __extends(GridAutoStyleBuilder, _super);
                function GridAutoStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @param {?} parent
                 * @return {?}
                 */
                GridAutoStyleBuilder.prototype.buildStyles = function (input, parent) {
                    var _b = (input || DEFAULT_VALUE$2).split(' '), direction = _b[0], dense = _b[1];
                    if (direction !== 'column' && direction !== 'row' && direction !== 'dense') {
                        direction = 'row';
                    }
                    dense = (dense === 'dense' && direction !== 'dense') ? ' dense' : '';
                    return {
                        'display': parent.inline ? 'inline-grid' : 'grid',
                        'grid-auto-flow': direction + dense
                    };
                };
                return GridAutoStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            GridAutoStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ GridAutoStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function GridAutoStyleBuilder_Factory() { return new GridAutoStyleBuilder(); }, token: GridAutoStyleBuilder, providedIn: "root" });
            var GridAutoDirective = /** @class */ (function (_super) {
                __extends(GridAutoDirective, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} styleBuilder
                 * @param {?} styler
                 * @param {?} marshal
                 */
                function GridAutoDirective(elementRef, styleBuilder, styler, marshal) {
                    var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;
                    _this.elementRef = elementRef;
                    _this.styleBuilder = styleBuilder;
                    _this.styler = styler;
                    _this.marshal = marshal;
                    _this._inline = false;
                    _this.DIRECTIVE_KEY = 'grid-auto';
                    _this.init();
                    return _this;
                }
                Object.defineProperty(GridAutoDirective.prototype, "inline", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._inline; },
                    /**
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) { this._inline = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(val); },
                    enumerable: true,
                    configurable: true
                });
                // *********************************************
                // Protected methods
                // *********************************************
                /**
                 * @protected
                 * @param {?} value
                 * @return {?}
                 */
                GridAutoDirective.prototype.updateWithValue = function (value) {
                    this.styleCache = this.inline ? autoInlineCache : autoCache;
                    this.addStyles(value, { inline: this.inline });
                };
                return GridAutoDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            GridAutoDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: "grid-auto-directive" },] },
            ];
            /** @nocollapse */
            GridAutoDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: GridAutoStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            GridAutoDirective.propDecorators = {
                inline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['gdInline',] }]
            };
            /** @type {?} */
            var autoCache = new Map();
            /** @type {?} */
            var autoInlineCache = new Map();
            /** @type {?} */
            var inputs$5 = [
                'gdAuto',
                'gdAuto.xs', 'gdAuto.sm', 'gdAuto.md', 'gdAuto.lg', 'gdAuto.xl',
                'gdAuto.lt-sm', 'gdAuto.lt-md', 'gdAuto.lt-lg', 'gdAuto.lt-xl',
                'gdAuto.gt-xs', 'gdAuto.gt-sm', 'gdAuto.gt-md', 'gdAuto.gt-lg'
            ];
            /** @type {?} */
            var selector$5 = "\n  [gdAuto],\n  [gdAuto.xs], [gdAuto.sm], [gdAuto.md], [gdAuto.lg], [gdAuto.xl],\n  [gdAuto.lt-sm], [gdAuto.lt-md], [gdAuto.lt-lg], [gdAuto.lt-xl],\n  [gdAuto.gt-xs], [gdAuto.gt-sm], [gdAuto.gt-md], [gdAuto.gt-lg]\n";
            /**
             * 'grid-auto-flow' CSS Grid styling directive
             * Configures the auto placement algorithm for the grid
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-23
             */
            var DefaultGridAutoDirective = /** @class */ (function (_super) {
                __extends(DefaultGridAutoDirective, _super);
                function DefaultGridAutoDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$5;
                    return _this;
                }
                return DefaultGridAutoDirective;
            }(GridAutoDirective));
            DefaultGridAutoDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$5, inputs: inputs$5 },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_VALUE$3 = 'auto';
            var GridColumnStyleBuilder = /** @class */ (function (_super) {
                __extends(GridColumnStyleBuilder, _super);
                function GridColumnStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @return {?}
                 */
                GridColumnStyleBuilder.prototype.buildStyles = function (input) {
                    return { 'grid-column': input || DEFAULT_VALUE$3 };
                };
                return GridColumnStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            GridColumnStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ GridColumnStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function GridColumnStyleBuilder_Factory() { return new GridColumnStyleBuilder(); }, token: GridColumnStyleBuilder, providedIn: "root" });
            var GridColumnDirective = /** @class */ (function (_super) {
                __extends(GridColumnDirective, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} styleBuilder
                 * @param {?} styler
                 * @param {?} marshal
                 */
                function GridColumnDirective(elementRef, styleBuilder, styler, marshal) {
                    var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;
                    _this.elementRef = elementRef;
                    _this.styleBuilder = styleBuilder;
                    _this.styler = styler;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'grid-column';
                    _this.styleCache = columnCache;
                    _this.init();
                    return _this;
                }
                return GridColumnDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            GridColumnDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'grid-column-directive' },] },
            ];
            /** @nocollapse */
            GridColumnDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: GridColumnStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            /** @type {?} */
            var columnCache = new Map();
            /** @type {?} */
            var inputs$6 = [
                'gdColumn',
                'gdColumn.xs', 'gdColumn.sm', 'gdColumn.md', 'gdColumn.lg', 'gdColumn.xl',
                'gdColumn.lt-sm', 'gdColumn.lt-md', 'gdColumn.lt-lg', 'gdColumn.lt-xl',
                'gdColumn.gt-xs', 'gdColumn.gt-sm', 'gdColumn.gt-md', 'gdColumn.gt-lg'
            ];
            /** @type {?} */
            var selector$6 = "\n  [gdColumn],\n  [gdColumn.xs], [gdColumn.sm], [gdColumn.md], [gdColumn.lg], [gdColumn.xl],\n  [gdColumn.lt-sm], [gdColumn.lt-md], [gdColumn.lt-lg], [gdColumn.lt-xl],\n  [gdColumn.gt-xs], [gdColumn.gt-sm], [gdColumn.gt-md], [gdColumn.gt-lg]\n";
            /**
             * 'grid-column' CSS Grid styling directive
             * Configures the name or position of an element within the grid
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26
             */
            var DefaultGridColumnDirective = /** @class */ (function (_super) {
                __extends(DefaultGridColumnDirective, _super);
                function DefaultGridColumnDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$6;
                    return _this;
                }
                return DefaultGridColumnDirective;
            }(GridColumnDirective));
            DefaultGridColumnDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$6, inputs: inputs$6 },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_VALUE$4 = 'none';
            /** @type {?} */
            var AUTO_SPECIFIER = '!';
            var GridColumnsStyleBuilder = /** @class */ (function (_super) {
                __extends(GridColumnsStyleBuilder, _super);
                function GridColumnsStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @param {?} parent
                 * @return {?}
                 */
                GridColumnsStyleBuilder.prototype.buildStyles = function (input, parent) {
                    input = input || DEFAULT_VALUE$4;
                    /** @type {?} */
                    var auto = false;
                    if (input.endsWith(AUTO_SPECIFIER)) {
                        input = input.substring(0, input.indexOf(AUTO_SPECIFIER));
                        auto = true;
                    }
                    /** @type {?} */
                    var css = {
                        'display': parent.inline ? 'inline-grid' : 'grid',
                        'grid-auto-columns': '',
                        'grid-template-columns': '',
                    };
                    /** @type {?} */
                    var key = (auto ? 'grid-auto-columns' : 'grid-template-columns');
                    css[key] = input;
                    return css;
                };
                return GridColumnsStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            GridColumnsStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ GridColumnsStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function GridColumnsStyleBuilder_Factory() { return new GridColumnsStyleBuilder(); }, token: GridColumnsStyleBuilder, providedIn: "root" });
            var GridColumnsDirective = /** @class */ (function (_super) {
                __extends(GridColumnsDirective, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} styleBuilder
                 * @param {?} styler
                 * @param {?} marshal
                 */
                function GridColumnsDirective(elementRef, styleBuilder, styler, marshal) {
                    var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;
                    _this.elementRef = elementRef;
                    _this.styleBuilder = styleBuilder;
                    _this.styler = styler;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'grid-columns';
                    _this._inline = false;
                    _this.init();
                    return _this;
                }
                Object.defineProperty(GridColumnsDirective.prototype, "inline", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._inline; },
                    /**
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) { this._inline = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(val); },
                    enumerable: true,
                    configurable: true
                });
                // *********************************************
                // Protected methods
                // *********************************************
                /**
                 * @protected
                 * @param {?} value
                 * @return {?}
                 */
                GridColumnsDirective.prototype.updateWithValue = function (value) {
                    this.styleCache = this.inline ? columnsInlineCache : columnsCache;
                    this.addStyles(value, { inline: this.inline });
                };
                return GridColumnsDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            GridColumnsDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'grid-columns-directive' },] },
            ];
            /** @nocollapse */
            GridColumnsDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: GridColumnsStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            GridColumnsDirective.propDecorators = {
                inline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['gdInline',] }]
            };
            /** @type {?} */
            var columnsCache = new Map();
            /** @type {?} */
            var columnsInlineCache = new Map();
            /** @type {?} */
            var inputs$7 = [
                'gdColumns',
                'gdColumns.xs', 'gdColumns.sm', 'gdColumns.md', 'gdColumns.lg', 'gdColumns.xl',
                'gdColumns.lt-sm', 'gdColumns.lt-md', 'gdColumns.lt-lg', 'gdColumns.lt-xl',
                'gdColumns.gt-xs', 'gdColumns.gt-sm', 'gdColumns.gt-md', 'gdColumns.gt-lg'
            ];
            /** @type {?} */
            var selector$7 = "\n  [gdColumns],\n  [gdColumns.xs], [gdColumns.sm], [gdColumns.md], [gdColumns.lg], [gdColumns.xl],\n  [gdColumns.lt-sm], [gdColumns.lt-md], [gdColumns.lt-lg], [gdColumns.lt-xl],\n  [gdColumns.gt-xs], [gdColumns.gt-sm], [gdColumns.gt-md], [gdColumns.gt-lg]\n";
            /**
             * 'grid-template-columns' CSS Grid styling directive
             * Configures the sizing for the columns in the grid
             * Syntax: <column value> [auto]
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13
             */
            var DefaultGridColumnsDirective = /** @class */ (function (_super) {
                __extends(DefaultGridColumnsDirective, _super);
                function DefaultGridColumnsDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$7;
                    return _this;
                }
                return DefaultGridColumnsDirective;
            }(GridColumnsDirective));
            DefaultGridColumnsDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$7, inputs: inputs$7 },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_VALUE$5 = '0';
            var GridGapStyleBuilder = /** @class */ (function (_super) {
                __extends(GridGapStyleBuilder, _super);
                function GridGapStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @param {?} parent
                 * @return {?}
                 */
                GridGapStyleBuilder.prototype.buildStyles = function (input, parent) {
                    return {
                        'display': parent.inline ? 'inline-grid' : 'grid',
                        'grid-gap': input || DEFAULT_VALUE$5
                    };
                };
                return GridGapStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            GridGapStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ GridGapStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function GridGapStyleBuilder_Factory() { return new GridGapStyleBuilder(); }, token: GridGapStyleBuilder, providedIn: "root" });
            var GridGapDirective = /** @class */ (function (_super) {
                __extends(GridGapDirective, _super);
                /**
                 * @param {?} elRef
                 * @param {?} styleUtils
                 * @param {?} styleBuilder
                 * @param {?} marshal
                 */
                function GridGapDirective(elRef, styleUtils, styleBuilder, marshal) {
                    var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;
                    _this.elRef = elRef;
                    _this.styleUtils = styleUtils;
                    _this.styleBuilder = styleBuilder;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'grid-gap';
                    _this._inline = false;
                    _this.init();
                    return _this;
                }
                Object.defineProperty(GridGapDirective.prototype, "inline", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._inline; },
                    /**
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) { this._inline = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(val); },
                    enumerable: true,
                    configurable: true
                });
                // *********************************************
                // Protected methods
                // *********************************************
                /**
                 * @protected
                 * @param {?} value
                 * @return {?}
                 */
                GridGapDirective.prototype.updateWithValue = function (value) {
                    this.styleCache = this.inline ? gapInlineCache : gapCache;
                    this.addStyles(value, { inline: this.inline });
                };
                return GridGapDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            GridGapDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'grid-gap-directive' },] },
            ];
            /** @nocollapse */
            GridGapDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: GridGapStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            GridGapDirective.propDecorators = {
                inline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['gdInline',] }]
            };
            /** @type {?} */
            var gapCache = new Map();
            /** @type {?} */
            var gapInlineCache = new Map();
            /** @type {?} */
            var inputs$8 = [
                'gdGap',
                'gdGap.xs', 'gdGap.sm', 'gdGap.md', 'gdGap.lg', 'gdGap.xl',
                'gdGap.lt-sm', 'gdGap.lt-md', 'gdGap.lt-lg', 'gdGap.lt-xl',
                'gdGap.gt-xs', 'gdGap.gt-sm', 'gdGap.gt-md', 'gdGap.gt-lg'
            ];
            /** @type {?} */
            var selector$8 = "\n  [gdGap],\n  [gdGap.xs], [gdGap.sm], [gdGap.md], [gdGap.lg], [gdGap.xl],\n  [gdGap.lt-sm], [gdGap.lt-md], [gdGap.lt-lg], [gdGap.lt-xl],\n  [gdGap.gt-xs], [gdGap.gt-sm], [gdGap.gt-md], [gdGap.gt-lg]\n";
            /**
             * 'grid-gap' CSS Grid styling directive
             * Configures the gap between items in the grid
             * Syntax: <row gap> [<column-gap>]
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-17
             */
            var DefaultGridGapDirective = /** @class */ (function (_super) {
                __extends(DefaultGridGapDirective, _super);
                function DefaultGridGapDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$8;
                    return _this;
                }
                return DefaultGridGapDirective;
            }(GridGapDirective));
            DefaultGridGapDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$8, inputs: inputs$8 },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_VALUE$6 = 'auto';
            var GridRowStyleBuilder = /** @class */ (function (_super) {
                __extends(GridRowStyleBuilder, _super);
                function GridRowStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @return {?}
                 */
                GridRowStyleBuilder.prototype.buildStyles = function (input) {
                    return { 'grid-row': input || DEFAULT_VALUE$6 };
                };
                return GridRowStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            GridRowStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ GridRowStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function GridRowStyleBuilder_Factory() { return new GridRowStyleBuilder(); }, token: GridRowStyleBuilder, providedIn: "root" });
            var GridRowDirective = /** @class */ (function (_super) {
                __extends(GridRowDirective, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} styleBuilder
                 * @param {?} styler
                 * @param {?} marshal
                 */
                function GridRowDirective(elementRef, styleBuilder, styler, marshal) {
                    var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;
                    _this.elementRef = elementRef;
                    _this.styleBuilder = styleBuilder;
                    _this.styler = styler;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'grid-row';
                    _this.styleCache = rowCache;
                    _this.init();
                    return _this;
                }
                return GridRowDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            GridRowDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'grid-row-directive' },] },
            ];
            /** @nocollapse */
            GridRowDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: GridRowStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            /** @type {?} */
            var rowCache = new Map();
            /** @type {?} */
            var inputs$9 = [
                'gdRow',
                'gdRow.xs', 'gdRow.sm', 'gdRow.md', 'gdRow.lg', 'gdRow.xl',
                'gdRow.lt-sm', 'gdRow.lt-md', 'gdRow.lt-lg', 'gdRow.lt-xl',
                'gdRow.gt-xs', 'gdRow.gt-sm', 'gdRow.gt-md', 'gdRow.gt-lg'
            ];
            /** @type {?} */
            var selector$9 = "\n  [gdRow],\n  [gdRow.xs], [gdRow.sm], [gdRow.md], [gdRow.lg], [gdRow.xl],\n  [gdRow.lt-sm], [gdRow.lt-md], [gdRow.lt-lg], [gdRow.lt-xl],\n  [gdRow.gt-xs], [gdRow.gt-sm], [gdRow.gt-md], [gdRow.gt-lg]\n";
            /**
             * 'grid-row' CSS Grid styling directive
             * Configures the name or position of an element within the grid
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26
             */
            var DefaultGridRowDirective = /** @class */ (function (_super) {
                __extends(DefaultGridRowDirective, _super);
                function DefaultGridRowDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$9;
                    return _this;
                }
                return DefaultGridRowDirective;
            }(GridRowDirective));
            DefaultGridRowDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$9, inputs: inputs$9 },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_VALUE$7 = 'none';
            /** @type {?} */
            var AUTO_SPECIFIER$1 = '!';
            var GridRowsStyleBuilder = /** @class */ (function (_super) {
                __extends(GridRowsStyleBuilder, _super);
                function GridRowsStyleBuilder() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} input
                 * @param {?} parent
                 * @return {?}
                 */
                GridRowsStyleBuilder.prototype.buildStyles = function (input, parent) {
                    input = input || DEFAULT_VALUE$7;
                    /** @type {?} */
                    var auto = false;
                    if (input.endsWith(AUTO_SPECIFIER$1)) {
                        input = input.substring(0, input.indexOf(AUTO_SPECIFIER$1));
                        auto = true;
                    }
                    /** @type {?} */
                    var css = {
                        'display': parent.inline ? 'inline-grid' : 'grid',
                        'grid-auto-rows': '',
                        'grid-template-rows': '',
                    };
                    /** @type {?} */
                    var key = (auto ? 'grid-auto-rows' : 'grid-template-rows');
                    css[key] = input;
                    return css;
                };
                return GridRowsStyleBuilder;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleBuilder"]));
            GridRowsStyleBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ GridRowsStyleBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function GridRowsStyleBuilder_Factory() { return new GridRowsStyleBuilder(); }, token: GridRowsStyleBuilder, providedIn: "root" });
            var GridRowsDirective = /** @class */ (function (_super) {
                __extends(GridRowsDirective, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} styleBuilder
                 * @param {?} styler
                 * @param {?} marshal
                 */
                function GridRowsDirective(elementRef, styleBuilder, styler, marshal) {
                    var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;
                    _this.elementRef = elementRef;
                    _this.styleBuilder = styleBuilder;
                    _this.styler = styler;
                    _this.marshal = marshal;
                    _this.DIRECTIVE_KEY = 'grid-rows';
                    _this._inline = false;
                    _this.init();
                    return _this;
                }
                Object.defineProperty(GridRowsDirective.prototype, "inline", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._inline; },
                    /**
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) { this._inline = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(val); },
                    enumerable: true,
                    configurable: true
                });
                // *********************************************
                // Protected methods
                // *********************************************
                /**
                 * @protected
                 * @param {?} value
                 * @return {?}
                 */
                GridRowsDirective.prototype.updateWithValue = function (value) {
                    this.styleCache = this.inline ? rowsInlineCache : rowsCache;
                    this.addStyles(value, { inline: this.inline });
                };
                return GridRowsDirective;
            }(_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["BaseDirective2"]));
            GridRowsDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'grid-rows-directive' },] },
            ];
            /** @nocollapse */
            GridRowsDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: GridRowsStyleBuilder, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["StyleUtils"] },
                { type: _angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["MediaMarshaller"] }
            ]; };
            GridRowsDirective.propDecorators = {
                inline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['gdInline',] }]
            };
            /** @type {?} */
            var rowsCache = new Map();
            /** @type {?} */
            var rowsInlineCache = new Map();
            /** @type {?} */
            var inputs$10 = [
                'gdRows',
                'gdRows.xs', 'gdRows.sm', 'gdRows.md', 'gdRows.lg', 'gdRows.xl',
                'gdRows.lt-sm', 'gdRows.lt-md', 'gdRows.lt-lg', 'gdRows.lt-xl',
                'gdRows.gt-xs', 'gdRows.gt-sm', 'gdRows.gt-md', 'gdRows.gt-lg'
            ];
            /** @type {?} */
            var selector$10 = "\n  [gdRows],\n  [gdRows.xs], [gdRows.sm], [gdRows.md], [gdRows.lg], [gdRows.xl],\n  [gdRows.lt-sm], [gdRows.lt-md], [gdRows.lt-lg], [gdRows.lt-xl],\n  [gdRows.gt-xs], [gdRows.gt-sm], [gdRows.gt-md], [gdRows.gt-lg]\n";
            /**
             * 'grid-template-rows' CSS Grid styling directive
             * Configures the sizing for the rows in the grid
             * Syntax: <column value> [auto]
             * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13
             */
            var DefaultGridRowsDirective = /** @class */ (function (_super) {
                __extends(DefaultGridRowsDirective, _super);
                function DefaultGridRowsDirective() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.inputs = inputs$10;
                    return _this;
                }
                return DefaultGridRowsDirective;
            }(GridRowsDirective));
            DefaultGridRowsDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: selector$10, inputs: inputs$10 },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var ALL_DIRECTIVES = [
                DefaultGridAlignDirective,
                DefaultGridAlignColumnsDirective,
                DefaultGridAlignRowsDirective,
                DefaultGridAreaDirective,
                DefaultGridAreasDirective,
                DefaultGridAutoDirective,
                DefaultGridColumnDirective,
                DefaultGridColumnsDirective,
                DefaultGridGapDirective,
                DefaultGridRowDirective,
                DefaultGridRowsDirective,
                GridAlignColumnsDirective,
                GridAlignRowsDirective,
                GridAreaDirective,
                GridAreasDirective,
                GridAutoDirective,
                GridColumnDirective,
                GridColumnsDirective,
                GridGapDirective,
                GridAlignDirective,
                GridRowDirective,
                GridRowsDirective,
            ];
            /**
             * *****************************************************************
             * Define module for the CSS Grid API
             * *****************************************************************
             */
            var GridModule = /** @class */ (function () {
                function GridModule() {
                }
                return GridModule;
            }());
            GridModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_flex_layout_core__WEBPACK_IMPORTED_MODULE_1__["CoreModule"]],
                            declarations: ALL_DIRECTIVES.slice(),
                            exports: ALL_DIRECTIVES.slice()
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=grid.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/forms/fesm2015/forms.js": 
        /*!*******************************************************!*\
          !*** ./node_modules/@angular/forms/fesm2015/forms.js ***!
          \*******************************************************/
        /*! exports provided: ɵangular_packages_forms_forms_d, ɵInternalFormsSharedModule, ɵangular_packages_forms_forms_c, ɵangular_packages_forms_forms_a, ɵangular_packages_forms_forms_b, ɵangular_packages_forms_forms_e, ɵangular_packages_forms_forms_f, ɵangular_packages_forms_forms_g, ɵangular_packages_forms_forms_h, ɵangular_packages_forms_forms_i, ɵangular_packages_forms_forms_j, ɵangular_packages_forms_forms_k, ɵangular_packages_forms_forms_l, ɵangular_packages_forms_forms_z, ɵNgNoValidate, ɵangular_packages_forms_forms_m, ɵangular_packages_forms_forms_n, ɵangular_packages_forms_forms_o, ɵangular_packages_forms_forms_p, ɵangular_packages_forms_forms_q, ɵangular_packages_forms_forms_r, ɵangular_packages_forms_forms_s, ɵangular_packages_forms_forms_t, ɵangular_packages_forms_forms_v, ɵangular_packages_forms_forms_u, ɵangular_packages_forms_forms_w, ɵangular_packages_forms_forms_y, ɵNgSelectMultipleOption, ɵangular_packages_forms_forms_x, ɵangular_packages_forms_forms_bb, ɵangular_packages_forms_forms_bc, ɵangular_packages_forms_forms_be, ɵangular_packages_forms_forms_bd, ɵangular_packages_forms_forms_bf, ɵangular_packages_forms_forms_ba, AbstractControlDirective, AbstractFormGroupDirective, CheckboxControlValueAccessor, ControlContainer, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE, DefaultValueAccessor, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgFormSelectorWarning, NgModel, NgModelGroup, NumberValueAccessor, RadioControlValueAccessor, RangeValueAccessor, FormControlDirective, FormControlName, FormGroupDirective, FormArrayName, FormGroupName, NgSelectOption, SelectControlValueAccessor, SelectMultipleControlValueAccessor, CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator, FormBuilder, AbstractControl, FormArray, FormControl, FormGroup, NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators, VERSION, FormsModule, ReactiveFormsModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_d", function () { return ɵInternalFormsSharedModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵInternalFormsSharedModule", function () { return ɵInternalFormsSharedModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_c", function () { return REACTIVE_DRIVEN_DIRECTIVES; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_a", function () { return SHARED_FORM_DIRECTIVES; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_b", function () { return TEMPLATE_DRIVEN_DIRECTIVES; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_e", function () { return CHECKBOX_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_f", function () { return DEFAULT_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_g", function () { return AbstractControlStatus; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_h", function () { return ngControlStatusHost; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_i", function () { return formDirectiveProvider; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_j", function () { return NG_FORM_SELECTOR_WARNING; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_k", function () { return formControlBinding; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_l", function () { return modelGroupProvider; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_z", function () { return ɵNgNoValidate; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNgNoValidate", function () { return ɵNgNoValidate; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_m", function () { return NUMBER_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_n", function () { return RADIO_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_o", function () { return RadioControlRegistry; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_p", function () { return RANGE_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_q", function () { return NG_MODEL_WITH_FORM_CONTROL_WARNING; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_r", function () { return formControlBinding$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_s", function () { return controlNameBinding; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_t", function () { return formDirectiveProvider$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_v", function () { return formArrayNameProvider; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_u", function () { return formGroupNameProvider; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_w", function () { return SELECT_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_y", function () { return ɵNgSelectMultipleOption; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNgSelectMultipleOption", function () { return ɵNgSelectMultipleOption; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_x", function () { return SELECT_MULTIPLE_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bb", function () { return CHECKBOX_REQUIRED_VALIDATOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bc", function () { return EMAIL_VALIDATOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_be", function () { return MAX_LENGTH_VALIDATOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bd", function () { return MIN_LENGTH_VALIDATOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_bf", function () { return PATTERN_VALIDATOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_forms_forms_ba", function () { return REQUIRED_VALIDATOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractControlDirective", function () { return AbstractControlDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractFormGroupDirective", function () { return AbstractFormGroupDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckboxControlValueAccessor", function () { return CheckboxControlValueAccessor; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ControlContainer", function () { return ControlContainer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NG_VALUE_ACCESSOR", function () { return NG_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMPOSITION_BUFFER_MODE", function () { return COMPOSITION_BUFFER_MODE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultValueAccessor", function () { return DefaultValueAccessor; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgControl", function () { return NgControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgControlStatus", function () { return NgControlStatus; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgControlStatusGroup", function () { return NgControlStatusGroup; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgForm", function () { return NgForm; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgFormSelectorWarning", function () { return NgFormSelectorWarning; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModel", function () { return NgModel; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModelGroup", function () { return NgModelGroup; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberValueAccessor", function () { return NumberValueAccessor; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RadioControlValueAccessor", function () { return RadioControlValueAccessor; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RangeValueAccessor", function () { return RangeValueAccessor; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormControlDirective", function () { return FormControlDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormControlName", function () { return FormControlName; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormGroupDirective", function () { return FormGroupDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormArrayName", function () { return FormArrayName; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormGroupName", function () { return FormGroupName; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgSelectOption", function () { return NgSelectOption; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectControlValueAccessor", function () { return SelectControlValueAccessor; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectMultipleControlValueAccessor", function () { return SelectMultipleControlValueAccessor; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckboxRequiredValidator", function () { return CheckboxRequiredValidator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmailValidator", function () { return EmailValidator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxLengthValidator", function () { return MaxLengthValidator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinLengthValidator", function () { return MinLengthValidator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PatternValidator", function () { return PatternValidator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RequiredValidator", function () { return RequiredValidator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormBuilder", function () { return FormBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractControl", function () { return AbstractControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormArray", function () { return FormArray; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormControl", function () { return FormControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormGroup", function () { return FormGroup; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NG_ASYNC_VALIDATORS", function () { return NG_ASYNC_VALIDATORS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NG_VALIDATORS", function () { return NG_VALIDATORS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Validators", function () { return Validators; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function () { return VERSION; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormsModule", function () { return FormsModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReactiveFormsModule", function () { return ReactiveFormsModule; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @license Angular v8.2.13
             * (c) 2010-2019 Google LLC. https://angular.io/
             * License: MIT
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@description
             * Defines an interface that acts as a bridge between the Angular forms API and a
             * native element in the DOM.
             *
             * Implement this interface to create a custom form control directive
             * that integrates with Angular forms.
             *
             * @see DefaultValueAccessor
             *
             * \@publicApi
             * @record
             */
            function ControlValueAccessor() { }
            if (false) { }
            /**
             * Used to provide a `ControlValueAccessor` for form controls.
             *
             * See `DefaultValueAccessor` for how to implement one.
             *
             * \@publicApi
             * @type {?}
             */
            var NG_VALUE_ACCESSOR = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgValueAccessor');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var CHECKBOX_VALUE_ACCESSOR = {
                provide: NG_VALUE_ACCESSOR,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return CheckboxControlValueAccessor; })),
                multi: true,
            };
            /**
             * \@description
             * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input
             * element.
             *
             * \@usageNotes
             *
             * ### Using a checkbox with a reactive form.
             *
             * The following example shows how to use a checkbox with a reactive form.
             *
             * ```ts
             * const rememberLoginControl = new FormControl();
             * ```
             *
             * ```
             * <input type="checkbox" [formControl]="rememberLoginControl">
             * ```
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var CheckboxControlValueAccessor = /** @class */ (function () {
                /**
                 * @param {?} _renderer
                 * @param {?} _elementRef
                 */
                function CheckboxControlValueAccessor(_renderer, _elementRef) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    /**
                     * \@description
                     * The registered callback function called when a change event occurs on the input element.
                     */
                    this.onChange = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    /**
                     * \@description
                     * The registered callback function called when a blur event occurs on the input element.
                     */
                    this.onTouched = ( /**
                     * @return {?}
                     */function () { });
                }
                /**
                 * Sets the "checked" property on the input element.
                 *
                 * @param {?} value The checked value
                 * @return {?}
                 */
                CheckboxControlValueAccessor.prototype.writeValue = function (value) {
                    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);
                };
                /**
                 * \@description
                 * Registers a function called when the control value changes.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
                /**
                 * \@description
                 * Registers a function called when the control is touched.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
                /**
                 * Sets the "disabled" property on the input element.
                 *
                 * @param {?} isDisabled The disabled value
                 * @return {?}
                 */
                CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
                    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
                };
                return CheckboxControlValueAccessor;
            }());
            CheckboxControlValueAccessor.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
                            host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
                            providers: [CHECKBOX_VALUE_ACCESSOR]
                        },] }
            ];
            /** @nocollapse */
            CheckboxControlValueAccessor.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_VALUE_ACCESSOR = {
                provide: NG_VALUE_ACCESSOR,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return DefaultValueAccessor; })),
                multi: true
            };
            /**
             * We must check whether the agent is Android because composition events
             * behave differently between iOS and Android.
             * @return {?}
             */
            function _isAndroid() {
                /** @type {?} */
                var userAgent = Object(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["ɵgetDOM"])() ? Object(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["ɵgetDOM"])().getUserAgent() : '';
                return /android (\d+)/.test(userAgent.toLowerCase());
            }
            /**
             * \@description
             * Provide this token to control if form directives buffer IME input until
             * the "compositionend" event occurs.
             * \@publicApi
             * @type {?}
             */
            var COMPOSITION_BUFFER_MODE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('CompositionEventMode');
            /**
             * \@description
             * The default `ControlValueAccessor` for writing a value and listening to changes on input
             * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and
             * `NgModel` directives.
             *
             * \@usageNotes
             *
             * ### Using the default value accessor
             *
             * The following example shows how to use an input element that activates the default value accessor
             * (in this case, a text field).
             *
             * ```ts
             * const firstNameControl = new FormControl();
             * ```
             *
             * ```
             * <input type="text" [formControl]="firstNameControl">
             * ```
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var DefaultValueAccessor = /** @class */ (function () {
                /**
                 * @param {?} _renderer
                 * @param {?} _elementRef
                 * @param {?} _compositionMode
                 */
                function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this._compositionMode = _compositionMode;
                    /**
                     * \@description
                     * The registered callback function called when an input event occurs on the input element.
                     */
                    this.onChange = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    /**
                     * \@description
                     * The registered callback function called when a blur event occurs on the input element.
                     */
                    this.onTouched = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * Whether the user is creating a composition string (IME events).
                     */
                    this._composing = false;
                    if (this._compositionMode == null) {
                        this._compositionMode = !_isAndroid();
                    }
                }
                /**
                 * Sets the "value" property on the input element.
                 *
                 * @param {?} value The checked value
                 * @return {?}
                 */
                DefaultValueAccessor.prototype.writeValue = function (value) {
                    /** @type {?} */
                    var normalizedValue = value == null ? '' : value;
                    this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
                };
                /**
                 * \@description
                 * Registers a function called when the control value changes.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
                /**
                 * \@description
                 * Registers a function called when the control is touched.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
                /**
                 * Sets the "disabled" property on the input element.
                 *
                 * @param {?} isDisabled The disabled value
                 * @return {?}
                 */
                DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {
                    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
                };
                /**
                 * \@internal
                 * @param {?} value
                 * @return {?}
                 */
                DefaultValueAccessor.prototype._handleInput = function (value) {
                    if (!this._compositionMode || (this._compositionMode && !this._composing)) {
                        this.onChange(value);
                    }
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                DefaultValueAccessor.prototype._compositionStart = function () { this._composing = true; };
                /**
                 * \@internal
                 * @param {?} value
                 * @return {?}
                 */
                DefaultValueAccessor.prototype._compositionEnd = function (value) {
                    this._composing = false;
                    this._compositionMode && this.onChange(value);
                };
                return DefaultValueAccessor;
            }());
            DefaultValueAccessor.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
                            // TODO: vsavkin replace the above selector with the one below it once
                            // https://github.com/angular/angular/issues/3011 is implemented
                            // selector: '[ngModel],[formControl],[formControlName]',
                            host: {
                                '(input)': '$any(this)._handleInput($event.target.value)',
                                '(blur)': 'onTouched()',
                                '(compositionstart)': '$any(this)._compositionStart()',
                                '(compositionend)': '$any(this)._compositionEnd($event.target.value)'
                            },
                            providers: [DEFAULT_VALUE_ACCESSOR]
                        },] }
            ];
            /** @nocollapse */
            DefaultValueAccessor.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: Boolean, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [COMPOSITION_BUFFER_MODE,] }] }
            ]; };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google Inc. All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * \@description
             * Base class for control directives.
             *
             * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.
             *
             * \@publicApi
             * @abstract
             */
            var AbstractControlDirective = /** @class */ (function () {
                function AbstractControlDirective() {
                }
                Object.defineProperty(AbstractControlDirective.prototype, "value", {
                    /**
                     * \@description
                     * Reports the value of the control if it is present, otherwise null.
                     * @return {?}
                     */
                    get: function () { return this.control ? this.control.value : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "valid", {
                    /**
                     * \@description
                     * Reports whether the control is valid. A control is considered valid if no
                     * validation errors exist with the current value.
                     * If the control is not present, null is returned.
                     * @return {?}
                     */
                    get: function () { return this.control ? this.control.valid : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
                    /**
                     * \@description
                     * Reports whether the control is invalid, meaning that an error exists in the input value.
                     * If the control is not present, null is returned.
                     * @return {?}
                     */
                    get: function () { return this.control ? this.control.invalid : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "pending", {
                    /**
                     * \@description
                     * Reports whether a control is pending, meaning that that async validation is occurring and
                     * errors are not yet available for the input value. If the control is not present, null is
                     * returned.
                     * @return {?}
                     */
                    get: function () { return this.control ? this.control.pending : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
                    /**
                     * \@description
                     * Reports whether the control is disabled, meaning that the control is disabled
                     * in the UI and is exempt from validation checks and excluded from aggregate
                     * values of ancestor controls. If the control is not present, null is returned.
                     * @return {?}
                     */
                    get: function () { return this.control ? this.control.disabled : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
                    /**
                     * \@description
                     * Reports whether the control is enabled, meaning that the control is included in ancestor
                     * calculations of validity or value. If the control is not present, null is returned.
                     * @return {?}
                     */
                    get: function () { return this.control ? this.control.enabled : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "errors", {
                    /**
                     * \@description
                     * Reports the control's validation errors. If the control is not present, null is returned.
                     * @return {?}
                     */
                    get: function () { return this.control ? this.control.errors : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
                    /**
                     * \@description
                     * Reports whether the control is pristine, meaning that the user has not yet changed
                     * the value in the UI. If the control is not present, null is returned.
                     * @return {?}
                     */
                    get: function () { return this.control ? this.control.pristine : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
                    /**
                     * \@description
                     * Reports whether the control is dirty, meaning that the user has changed
                     * the value in the UI. If the control is not present, null is returned.
                     * @return {?}
                     */
                    get: function () { return this.control ? this.control.dirty : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "touched", {
                    /**
                     * \@description
                     * Reports whether the control is touched, meaning that the user has triggered
                     * a `blur` event on it. If the control is not present, null is returned.
                     * @return {?}
                     */
                    get: function () { return this.control ? this.control.touched : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "status", {
                    /**
                     * \@description
                     * Reports the validation status of the control. Possible values include:
                     * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.
                     * If the control is not present, null is returned.
                     * @return {?}
                     */
                    get: function () { return this.control ? this.control.status : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
                    /**
                     * \@description
                     * Reports whether the control is untouched, meaning that the user has not yet triggered
                     * a `blur` event on it. If the control is not present, null is returned.
                     * @return {?}
                     */
                    get: function () { return this.control ? this.control.untouched : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
                    /**
                     * \@description
                     * Returns a multicasting observable that emits a validation status whenever it is
                     * calculated for the control. If the control is not present, null is returned.
                     * @return {?}
                     */
                    get: function () {
                        return this.control ? this.control.statusChanges : null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
                    /**
                     * \@description
                     * Returns a multicasting observable of value changes for the control that emits every time the
                     * value of the control changes in the UI or programmatically.
                     * If the control is not present, null is returned.
                     * @return {?}
                     */
                    get: function () {
                        return this.control ? this.control.valueChanges : null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "path", {
                    /**
                     * \@description
                     * Returns an array that represents the path from the top-level form to this control.
                     * Each index is the string name of the control on that level.
                     * @return {?}
                     */
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@description
                 * Resets the control with the provided value if the control is present.
                 * @param {?=} value
                 * @return {?}
                 */
                AbstractControlDirective.prototype.reset = function (value) {
                    if (value === void 0) { value = undefined; }
                    if (this.control)
                        this.control.reset(value);
                };
                /**
                 * \@description
                 * Reports whether the control with the given path has the error specified.
                 *
                 * \@usageNotes
                 * For example, for the following `FormGroup`:
                 *
                 * ```
                 * form = new FormGroup({
                 *   address: new FormGroup({ street: new FormControl() })
                 * });
                 * ```
                 *
                 * The path to the 'street' control from the root form would be 'address' -> 'street'.
                 *
                 * It can be provided to this method in one of two formats:
                 *
                 * 1. An array of string control names, e.g. `['address', 'street']`
                 * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
                 *
                 * If no path is given, this method checks for the error on the current control.
                 *
                 * @param {?} errorCode The code of the error to check
                 * @param {?=} path A list of control names that designates how to move from the current control
                 * to the control that should be queried for errors.
                 *
                 * @return {?} whether the given error is present in the control at the given path.
                 *
                 * If the control is not present, false is returned.
                 */
                AbstractControlDirective.prototype.hasError = function (errorCode, path) {
                    return this.control ? this.control.hasError(errorCode, path) : false;
                };
                /**
                 * \@description
                 * Reports error data for the control with the given path.
                 *
                 * \@usageNotes
                 * For example, for the following `FormGroup`:
                 *
                 * ```
                 * form = new FormGroup({
                 *   address: new FormGroup({ street: new FormControl() })
                 * });
                 * ```
                 *
                 * The path to the 'street' control from the root form would be 'address' -> 'street'.
                 *
                 * It can be provided to this method in one of two formats:
                 *
                 * 1. An array of string control names, e.g. `['address', 'street']`
                 * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
                 *
                 * @param {?} errorCode The code of the error to check
                 * @param {?=} path A list of control names that designates how to move from the current control
                 * to the control that should be queried for errors.
                 *
                 * @return {?} error data for that particular error. If the control or error is not present,
                 * null is returned.
                 */
                AbstractControlDirective.prototype.getError = function (errorCode, path) {
                    return this.control ? this.control.getError(errorCode, path) : null;
                };
                return AbstractControlDirective;
            }());
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@description
             * A base class for directives that contain multiple registered instances of `NgControl`.
             * Only used by the forms module.
             *
             * \@publicApi
             * @abstract
             */
            var ControlContainer = /** @class */ (function (_super) {
                __extends(ControlContainer, _super);
                function ControlContainer() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ControlContainer.prototype, "formDirective", {
                    /**
                     * \@description
                     * The top-level form directive for the control.
                     * @return {?}
                     */
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ControlContainer.prototype, "path", {
                    /**
                     * \@description
                     * The path to this group.
                     * @return {?}
                     */
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                return ControlContainer;
            }(AbstractControlDirective));
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @return {?}
             */
            function unimplemented() {
                throw new Error('unimplemented');
            }
            /**
             * \@description
             * A base class that all control `FormControl`-based directives extend. It binds a `FormControl`
             * object to a DOM element.
             *
             * \@publicApi
             * @abstract
             */
            var NgControl = /** @class */ (function (_super) {
                __extends(NgControl, _super);
                function NgControl() {
                    var _this = _super.apply(this, arguments) || this;
                    /**
                     * \@description
                     * The parent form for the control.
                     *
                     * \@internal
                     */
                    _this._parent = null;
                    /**
                     * \@description
                     * The name for the control
                     */
                    _this.name = null;
                    /**
                     * \@description
                     * The value accessor for the control
                     */
                    _this.valueAccessor = null;
                    /**
                     * \@description
                     * The uncomposed array of synchronous validators for the control
                     *
                     * \@internal
                     */
                    _this._rawValidators = [];
                    /**
                     * \@description
                     * The uncomposed array of async validators for the control
                     *
                     * \@internal
                     */
                    _this._rawAsyncValidators = [];
                    return _this;
                }
                Object.defineProperty(NgControl.prototype, "validator", {
                    /**
                     * \@description
                     * The registered synchronous validator function for the control
                     *
                     * @throws An exception that this method is not implemented
                     * @return {?}
                     */
                    get: function () { return ( /** @type {?} */(unimplemented())); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControl.prototype, "asyncValidator", {
                    /**
                     * \@description
                     * The registered async validator function for the control
                     *
                     * @throws An exception that this method is not implemented
                     * @return {?}
                     */
                    get: function () { return ( /** @type {?} */(unimplemented())); },
                    enumerable: true,
                    configurable: true
                });
                return NgControl;
            }(AbstractControlDirective));
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var AbstractControlStatus = /** @class */ (function () {
                /**
                 * @param {?} cd
                 */
                function AbstractControlStatus(cd) {
                    this._cd = cd;
                }
                Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._cd.control ? this._cd.control.untouched : false; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._cd.control ? this._cd.control.touched : false; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._cd.control ? this._cd.control.pristine : false; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._cd.control ? this._cd.control.dirty : false; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._cd.control ? this._cd.control.valid : false; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._cd.control ? this._cd.control.invalid : false; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._cd.control ? this._cd.control.pending : false; },
                    enumerable: true,
                    configurable: true
                });
                return AbstractControlStatus;
            }());
            if (false) { }
            /** @type {?} */
            var ngControlStatusHost = {
                '[class.ng-untouched]': 'ngClassUntouched',
                '[class.ng-touched]': 'ngClassTouched',
                '[class.ng-pristine]': 'ngClassPristine',
                '[class.ng-dirty]': 'ngClassDirty',
                '[class.ng-valid]': 'ngClassValid',
                '[class.ng-invalid]': 'ngClassInvalid',
                '[class.ng-pending]': 'ngClassPending',
            };
            /**
             * \@description
             * Directive automatically applied to Angular form controls that sets CSS classes
             * based on control status.
             *
             * \@usageNotes
             *
             * ### CSS classes applied
             *
             * The following classes are applied as the properties become true:
             *
             * * ng-valid
             * * ng-invalid
             * * ng-pending
             * * ng-pristine
             * * ng-dirty
             * * ng-untouched
             * * ng-touched
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var NgControlStatus = /** @class */ (function (_super) {
                __extends(NgControlStatus, _super);
                /**
                 * @param {?} cd
                 */
                function NgControlStatus(cd) {
                    return _super.call(this, cd) || this;
                }
                return NgControlStatus;
            }(AbstractControlStatus));
            NgControlStatus.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] }
            ];
            /** @nocollapse */
            NgControlStatus.ctorParameters = function () { return [
                { type: NgControl, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }] }
            ]; };
            /**
             * \@description
             * Directive automatically applied to Angular form groups that sets CSS classes
             * based on control status (valid/invalid/dirty/etc).
             *
             * @see `NgControlStatus`
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var NgControlStatusGroup = /** @class */ (function (_super) {
                __extends(NgControlStatusGroup, _super);
                /**
                 * @param {?} cd
                 */
                function NgControlStatusGroup(cd) {
                    return _super.call(this, cd) || this;
                }
                return NgControlStatusGroup;
            }(AbstractControlStatus));
            NgControlStatusGroup.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
                            host: ngControlStatusHost
                        },] }
            ];
            /** @nocollapse */
            NgControlStatusGroup.ctorParameters = function () { return [
                { type: ControlContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @param {?} value
             * @return {?}
             */
            function isEmptyInputValue(value) {
                // we don't check for string here so it also works with arrays
                return value == null || value.length === 0;
            }
            /**
             * \@description
             * An `InjectionToken` for registering additional synchronous validators used with `AbstractControl`s.
             *
             * @see `NG_ASYNC_VALIDATORS`
             *
             * \@usageNotes
             *
             * ### Providing a custom validator
             *
             * The following example registers a custom validator directive. Adding the validator to the
             * existing collection of validators requires the `multi: true` option.
             *
             * ```typescript
             * \@Directive({
             *   selector: '[customValidator]',
             *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]
             * })
             * class CustomValidatorDirective implements Validator {
             *   validate(control: AbstractControl): ValidationErrors | null {
             *     return { 'custom': true };
             *   }
             * }
             * ```
             *
             * \@publicApi
             * @type {?}
             */
            var NG_VALIDATORS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgValidators');
            /**
             * \@description
             * An `InjectionToken` for registering additional asynchronous validators used with `AbstractControl`s.
             *
             * @see `NG_VALIDATORS`
             *
             * \@publicApi
             * @type {?}
             */
            var NG_ASYNC_VALIDATORS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgAsyncValidators');
            /**
             * A regular expression that matches valid e-mail addresses.
             *
             * At a high level, this regexp matches e-mail addresses of the format `local-part\@tld`, where:
             * - `local-part` consists of one or more of the allowed characters (alphanumeric and some
             *   punctuation symbols).
             * - `local-part` cannot begin or end with a period (`.`).
             * - `local-part` cannot be longer than 64 characters.
             * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or
             *   `foo.com`.
             * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and
             *   periods (`.`)).
             * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).
             * - A `label` cannot be longer than 63 characters.
             * - The whole address cannot be longer than 254 characters.
             *
             * ## Implementation background
             *
             * This regexp was ported over from AngularJS (see there for git history):
             * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27
             * It is based on the
             * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with
             * some enhancements to incorporate more RFC rules (such as rules related to domain names and the
             * lengths of different parts of the address). The main differences from the WHATWG version are:
             *   - Disallow `local-part` to begin or end with a period (`.`).
             *   - Disallow `local-part` length to exceed 64 characters.
             *   - Disallow total address length to exceed 254 characters.
             *
             * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.
             * @type {?}
             */
            var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
            /**
             * \@description
             * Provides a set of built-in validators that can be used by form controls.
             *
             * A validator is a function that processes a `FormControl` or collection of
             * controls and returns an error map or null. A null map means that validation has passed.
             *
             * @see [Form Validation](/guide/form-validation)
             *
             * \@publicApi
             */
            var Validators = /** @class */ (function () {
                function Validators() {
                }
                /**
                 * \@description
                 * Validator that requires the control's value to be greater than or equal to the provided number.
                 * The validator exists only as a function and not as a directive.
                 *
                 * \@usageNotes
                 *
                 * ### Validate against a minimum of 3
                 *
                 * ```typescript
                 * const control = new FormControl(2, Validators.min(3));
                 *
                 * console.log(control.errors); // {min: {min: 3, actual: 2}}
                 * ```
                 *
                 * @see `updateValueAndValidity()`
                 *
                 * @param {?} min
                 * @return {?} A validator function that returns an error map with the
                 * `min` property if the validation check fails, otherwise `null`.
                 *
                 */
                Validators.min = function (min) {
                    return ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {
                            return null; // don't validate empty values to allow optional controls
                        }
                        /** @type {?} */
                        var value = parseFloat(control.value);
                        // Controls with NaN values after parsing should be treated as not having a
                        // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min
                        return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;
                    });
                };
                /**
                 * \@description
                 * Validator that requires the control's value to be less than or equal to the provided number.
                 * The validator exists only as a function and not as a directive.
                 *
                 * \@usageNotes
                 *
                 * ### Validate against a maximum of 15
                 *
                 * ```typescript
                 * const control = new FormControl(16, Validators.max(15));
                 *
                 * console.log(control.errors); // {max: {max: 15, actual: 16}}
                 * ```
                 *
                 * @see `updateValueAndValidity()`
                 *
                 * @param {?} max
                 * @return {?} A validator function that returns an error map with the
                 * `max` property if the validation check fails, otherwise `null`.
                 *
                 */
                Validators.max = function (max) {
                    return ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {
                            return null; // don't validate empty values to allow optional controls
                        }
                        /** @type {?} */
                        var value = parseFloat(control.value);
                        // Controls with NaN values after parsing should be treated as not having a
                        // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max
                        return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;
                    });
                };
                /**
                 * \@description
                 * Validator that requires the control have a non-empty value.
                 *
                 * \@usageNotes
                 *
                 * ### Validate that the field is non-empty
                 *
                 * ```typescript
                 * const control = new FormControl('', Validators.required);
                 *
                 * console.log(control.errors); // {required: true}
                 * ```
                 *
                 * @see `updateValueAndValidity()`
                 *
                 * @param {?} control
                 * @return {?} An error map with the `required` property
                 * if the validation check fails, otherwise `null`.
                 *
                 */
                Validators.required = function (control) {
                    return isEmptyInputValue(control.value) ? { 'required': true } : null;
                };
                /**
                 * \@description
                 * Validator that requires the control's value be true. This validator is commonly
                 * used for required checkboxes.
                 *
                 * \@usageNotes
                 *
                 * ### Validate that the field value is true
                 *
                 * ```typescript
                 * const control = new FormControl('', Validators.requiredTrue);
                 *
                 * console.log(control.errors); // {required: true}
                 * ```
                 *
                 * @see `updateValueAndValidity()`
                 *
                 * @param {?} control
                 * @return {?} An error map that contains the `required` property
                 * set to `true` if the validation check fails, otherwise `null`.
                 *
                 */
                Validators.requiredTrue = function (control) {
                    return control.value === true ? null : { 'required': true };
                };
                /**
                 * \@description
                 * Validator that requires the control's value pass an email validation test.
                 *
                 * Tests the value using a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)
                 * pattern suitable for common usecases. The pattern is based on the definition of a valid email
                 * address in the [WHATWG HTML specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address)
                 * with some enhancements to incorporate more RFC rules (such as rules related to domain names and
                 * the lengths of different parts of the address).
                 *
                 * The differences from the WHATWG version include:
                 * - Disallow `local-part` (the part before the `\@` symbol) to begin or end with a period (`.`).
                 * - Disallow `local-part` to be longer than 64 characters.
                 * - Disallow the whole address to be longer than 254 characters.
                 *
                 * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to
                 * validate the value against a different pattern.
                 *
                 * \@usageNotes
                 *
                 * ### Validate that the field matches a valid email pattern
                 *
                 * ```typescript
                 * const control = new FormControl('bad\@', Validators.email);
                 *
                 * console.log(control.errors); // {email: true}
                 * ```
                 *
                 * @see `updateValueAndValidity()`
                 *
                 * @param {?} control
                 * @return {?} An error map with the `email` property
                 * if the validation check fails, otherwise `null`.
                 *
                 */
                Validators.email = function (control) {
                    if (isEmptyInputValue(control.value)) {
                        return null; // don't validate empty values to allow optional controls
                    }
                    return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };
                };
                /**
                 * \@description
                 * Validator that requires the length of the control's value to be greater than or equal
                 * to the provided minimum length. This validator is also provided by default if you use the
                 * the HTML5 `minlength` attribute.
                 *
                 * \@usageNotes
                 *
                 * ### Validate that the field has a minimum of 3 characters
                 *
                 * ```typescript
                 * const control = new FormControl('ng', Validators.minLength(3));
                 *
                 * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}
                 * ```
                 *
                 * ```html
                 * <input minlength="5">
                 * ```
                 *
                 * @see `updateValueAndValidity()`
                 *
                 * @param {?} minLength
                 * @return {?} A validator function that returns an error map with the
                 * `minlength` if the validation check fails, otherwise `null`.
                 *
                 */
                Validators.minLength = function (minLength) {
                    return ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        if (isEmptyInputValue(control.value)) {
                            return null; // don't validate empty values to allow optional controls
                        }
                        /** @type {?} */
                        var length = control.value ? control.value.length : 0;
                        return length < minLength ?
                            { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :
                            null;
                    });
                };
                /**
                 * \@description
                 * Validator that requires the length of the control's value to be less than or equal
                 * to the provided maximum length. This validator is also provided by default if you use the
                 * the HTML5 `maxlength` attribute.
                 *
                 * \@usageNotes
                 *
                 * ### Validate that the field has maximum of 5 characters
                 *
                 * ```typescript
                 * const control = new FormControl('Angular', Validators.maxLength(5));
                 *
                 * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}
                 * ```
                 *
                 * ```html
                 * <input maxlength="5">
                 * ```
                 *
                 * @see `updateValueAndValidity()`
                 *
                 * @param {?} maxLength
                 * @return {?} A validator function that returns an error map with the
                 * `maxlength` property if the validation check fails, otherwise `null`.
                 *
                 */
                Validators.maxLength = function (maxLength) {
                    return ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        /** @type {?} */
                        var length = control.value ? control.value.length : 0;
                        return length > maxLength ?
                            { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :
                            null;
                    });
                };
                /**
                 * \@description
                 * Validator that requires the control's value to match a regex pattern. This validator is also
                 * provided by default if you use the HTML5 `pattern` attribute.
                 *
                 * \@usageNotes
                 *
                 * ### Validate that the field only contains letters or spaces
                 *
                 * ```typescript
                 * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));
                 *
                 * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}
                 * ```
                 *
                 * ```html
                 * <input pattern="[a-zA-Z ]*">
                 * ```
                 *
                 * @see `updateValueAndValidity()`
                 *
                 * @param {?} pattern A regular expression to be used as is to test the values, or a string.
                 * If a string is passed, the `^` character is prepended and the `$` character is
                 * appended to the provided string (if not already present), and the resulting regular
                 * expression is used to test the values.
                 *
                 * @return {?} A validator function that returns an error map with the
                 * `pattern` property if the validation check fails, otherwise `null`.
                 *
                 */
                Validators.pattern = function (pattern) {
                    if (!pattern)
                        return Validators.nullValidator;
                    /** @type {?} */
                    var regex;
                    /** @type {?} */
                    var regexStr;
                    if (typeof pattern === 'string') {
                        regexStr = '';
                        if (pattern.charAt(0) !== '^')
                            regexStr += '^';
                        regexStr += pattern;
                        if (pattern.charAt(pattern.length - 1) !== '$')
                            regexStr += '$';
                        regex = new RegExp(regexStr);
                    }
                    else {
                        regexStr = pattern.toString();
                        regex = pattern;
                    }
                    return ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        if (isEmptyInputValue(control.value)) {
                            return null; // don't validate empty values to allow optional controls
                        }
                        /** @type {?} */
                        var value = control.value;
                        return regex.test(value) ? null :
                            { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };
                    });
                };
                /**
                 * \@description
                 * Validator that performs no operation.
                 *
                 * @see `updateValueAndValidity()`
                 *
                 * @param {?} control
                 * @return {?}
                 */
                Validators.nullValidator = function (control) { return null; };
                /**
                 * @param {?} validators
                 * @return {?}
                 */
                Validators.compose = function (validators) {
                    if (!validators)
                        return null;
                    /** @type {?} */
                    var presentValidators = ( /** @type {?} */(validators.filter(isPresent)));
                    if (presentValidators.length == 0)
                        return null;
                    return ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        return _mergeErrors(_executeValidators(control, presentValidators));
                    });
                };
                /**
                 * \@description
                 * Compose multiple async validators into a single function that returns the union
                 * of the individual error objects for the provided control.
                 *
                 * @see `updateValueAndValidity()`
                 *
                 * @param {?} validators
                 * @return {?} A validator function that returns an error map with the
                 * merged error objects of the async validators if the validation check fails, otherwise `null`.
                 *
                 */
                Validators.composeAsync = function (validators) {
                    if (!validators)
                        return null;
                    /** @type {?} */
                    var presentValidators = ( /** @type {?} */(validators.filter(isPresent)));
                    if (presentValidators.length == 0)
                        return null;
                    return ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        /** @type {?} */
                        var observables = _executeAsyncValidators(control, presentValidators).map(toObservable);
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["forkJoin"])(observables).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(_mergeErrors));
                    });
                };
                return Validators;
            }());
            /**
             * @param {?} o
             * @return {?}
             */
            function isPresent(o) {
                return o != null;
            }
            /**
             * @param {?} r
             * @return {?}
             */
            function toObservable(r) {
                /** @type {?} */
                var obs = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisPromise"])(r) ? Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(r) : r;
                if (!(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisObservable"])(obs))) {
                    throw new Error("Expected validator to return Promise or Observable.");
                }
                return obs;
            }
            /**
             * @param {?} control
             * @param {?} validators
             * @return {?}
             */
            function _executeValidators(control, validators) {
                return validators.map(( /**
                 * @param {?} v
                 * @return {?}
                 */function (/**
                 * @param {?} v
                 * @return {?}
                 */ v) { return v(control); }));
            }
            /**
             * @param {?} control
             * @param {?} validators
             * @return {?}
             */
            function _executeAsyncValidators(control, validators) {
                return validators.map(( /**
                 * @param {?} v
                 * @return {?}
                 */function (/**
                 * @param {?} v
                 * @return {?}
                 */ v) { return v(control); }));
            }
            /**
             * @param {?} arrayOfErrors
             * @return {?}
             */
            function _mergeErrors(arrayOfErrors) {
                /** @type {?} */
                var res = arrayOfErrors.reduce(( /**
                 * @param {?} res
                 * @param {?} errors
                 * @return {?}
                 */function (res, errors) {
                    return errors != null ? Object.assign({}, ( /** @type {?} */(res)), errors) : ( /** @type {?} */(res));
                }), {});
                return Object.keys(res).length === 0 ? null : res;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google Inc. All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @param {?} validator
             * @return {?}
             */
            function normalizeValidator(validator) {
                if ((( /** @type {?} */(validator))).validate) {
                    return ( /**
                     * @param {?} c
                     * @return {?}
                     */function (c) { return (( /** @type {?} */(validator))).validate(c); });
                }
                else {
                    return ( /** @type {?} */(validator));
                }
            }
            /**
             * @param {?} validator
             * @return {?}
             */
            function normalizeAsyncValidator(validator) {
                if ((( /** @type {?} */(validator))).validate) {
                    return ( /**
                     * @param {?} c
                     * @return {?}
                     */function (c) { return (( /** @type {?} */(validator))).validate(c); });
                }
                else {
                    return ( /** @type {?} */(validator));
                }
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var NUMBER_VALUE_ACCESSOR = {
                provide: NG_VALUE_ACCESSOR,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return NumberValueAccessor; })),
                multi: true
            };
            /**
             * \@description
             * The `ControlValueAccessor` for writing a number value and listening to number input changes.
             * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`
             * directives.
             *
             * \@usageNotes
             *
             * ### Using a number input with a reactive form.
             *
             * The following example shows how to use a number input with a reactive form.
             *
             * ```ts
             * const totalCountControl = new FormControl();
             * ```
             *
             * ```
             * <input type="number" [formControl]="totalCountControl">
             * ```
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var NumberValueAccessor = /** @class */ (function () {
                /**
                 * @param {?} _renderer
                 * @param {?} _elementRef
                 */
                function NumberValueAccessor(_renderer, _elementRef) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    /**
                     * \@description
                     * The registered callback function called when a change or input event occurs on the input
                     * element.
                     */
                    this.onChange = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    /**
                     * \@description
                     * The registered callback function called when a blur event occurs on the input element.
                     */
                    this.onTouched = ( /**
                     * @return {?}
                     */function () { });
                }
                /**
                 * Sets the "value" property on the input element.
                 *
                 * @param {?} value The checked value
                 * @return {?}
                 */
                NumberValueAccessor.prototype.writeValue = function (value) {
                    // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
                    /** @type {?} */
                    var normalizedValue = value == null ? '' : value;
                    this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
                };
                /**
                 * \@description
                 * Registers a function called when the control value changes.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                NumberValueAccessor.prototype.registerOnChange = function (fn) {
                    this.onChange = ( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) { fn(value == '' ? null : parseFloat(value)); });
                };
                /**
                 * \@description
                 * Registers a function called when the control is touched.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
                /**
                 * Sets the "disabled" property on the input element.
                 *
                 * @param {?} isDisabled The disabled value
                 * @return {?}
                 */
                NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {
                    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
                };
                return NumberValueAccessor;
            }());
            NumberValueAccessor.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
                            host: {
                                '(change)': 'onChange($event.target.value)',
                                '(input)': 'onChange($event.target.value)',
                                '(blur)': 'onTouched()'
                            },
                            providers: [NUMBER_VALUE_ACCESSOR]
                        },] }
            ];
            /** @nocollapse */
            NumberValueAccessor.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var RADIO_VALUE_ACCESSOR = {
                provide: NG_VALUE_ACCESSOR,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return RadioControlValueAccessor; })),
                multi: true
            };
            /**
             * \@description
             * Class used by Angular to track radio buttons. For internal use only.
             */
            var RadioControlRegistry = /** @class */ (function () {
                function RadioControlRegistry() {
                    this._accessors = [];
                }
                /**
                 * \@description
                 * Adds a control to the internal registry. For internal use only.
                 * @param {?} control
                 * @param {?} accessor
                 * @return {?}
                 */
                RadioControlRegistry.prototype.add = function (control, accessor) {
                    this._accessors.push([control, accessor]);
                };
                /**
                 * \@description
                 * Removes a control from the internal registry. For internal use only.
                 * @param {?} accessor
                 * @return {?}
                 */
                RadioControlRegistry.prototype.remove = function (accessor) {
                    for (var i = this._accessors.length - 1; i >= 0; --i) {
                        if (this._accessors[i][1] === accessor) {
                            this._accessors.splice(i, 1);
                            return;
                        }
                    }
                };
                /**
                 * \@description
                 * Selects a radio button. For internal use only.
                 * @param {?} accessor
                 * @return {?}
                 */
                RadioControlRegistry.prototype.select = function (accessor) {
                    var _this = this;
                    this._accessors.forEach(( /**
                     * @param {?} c
                     * @return {?}
                     */function (c) {
                        if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
                            c[1].fireUncheck(accessor.value);
                        }
                    }));
                };
                /**
                 * @private
                 * @param {?} controlPair
                 * @param {?} accessor
                 * @return {?}
                 */
                RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
                    if (!controlPair[0].control)
                        return false;
                    return controlPair[0]._parent === accessor._control._parent &&
                        controlPair[1].name === accessor.name;
                };
                return RadioControlRegistry;
            }());
            RadioControlRegistry.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
            ];
            if (false) { }
            /**
             * \@description
             * The `ControlValueAccessor` for writing radio control values and listening to radio control
             * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
             * `NgModel` directives.
             *
             * \@usageNotes
             *
             * ### Using radio buttons with reactive form directives
             *
             * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in
             * a reactive form, radio buttons in the same group should have the same `formControlName`.
             * Providing a `name` attribute is optional.
             *
             * {\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var RadioControlValueAccessor = /** @class */ (function () {
                /**
                 * @param {?} _renderer
                 * @param {?} _elementRef
                 * @param {?} _registry
                 * @param {?} _injector
                 */
                function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this._registry = _registry;
                    this._injector = _injector;
                    /**
                     * \@description
                     * The registered callback function called when a change event occurs on the input element.
                     */
                    this.onChange = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * \@description
                     * The registered callback function called when a blur event occurs on the input element.
                     */
                    this.onTouched = ( /**
                     * @return {?}
                     */function () { });
                }
                /**
                 * \@description
                 * A lifecycle method called when the directive is initialized. For internal use only.
                 * @return {?}
                 */
                RadioControlValueAccessor.prototype.ngOnInit = function () {
                    this._control = this._injector.get(NgControl);
                    this._checkName();
                    this._registry.add(this._control, this);
                };
                /**
                 * \@description
                 * Lifecycle method called before the directive's instance is destroyed. For internal use only.
                 * @return {?}
                 */
                RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };
                /**
                 * \@description
                 * Sets the "checked" property value on the radio input element.
                 *
                 * @param {?} value The checked value
                 * @return {?}
                 */
                RadioControlValueAccessor.prototype.writeValue = function (value) {
                    this._state = value === this.value;
                    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);
                };
                /**
                 * \@description
                 * Registers a function called when the control value changes.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
                    var _this = this;
                    this._fn = fn;
                    this.onChange = ( /**
                     * @return {?}
                     */function () {
                        fn(_this.value);
                        _this._registry.select(_this);
                    });
                };
                /**
                 * Sets the "value" on the radio input element and unchecks it.
                 *
                 * @param {?} value
                 * @return {?}
                 */
                RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };
                /**
                 * \@description
                 * Registers a function called when the control is touched.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
                /**
                 * Sets the "disabled" property on the input element.
                 *
                 * @param {?} isDisabled The disabled value
                 * @return {?}
                 */
                RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
                    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
                };
                /**
                 * @private
                 * @return {?}
                 */
                RadioControlValueAccessor.prototype._checkName = function () {
                    if (this.name && this.formControlName && this.name !== this.formControlName) {
                        this._throwNameError();
                    }
                    if (!this.name && this.formControlName)
                        this.name = this.formControlName;
                };
                /**
                 * @private
                 * @return {?}
                 */
                RadioControlValueAccessor.prototype._throwNameError = function () {
                    throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
                };
                return RadioControlValueAccessor;
            }());
            RadioControlValueAccessor.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
                            host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
                            providers: [RADIO_VALUE_ACCESSOR]
                        },] }
            ];
            /** @nocollapse */
            RadioControlValueAccessor.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: RadioControlRegistry },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"] }
            ]; };
            RadioControlValueAccessor.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                formControlName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var RANGE_VALUE_ACCESSOR = {
                provide: NG_VALUE_ACCESSOR,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return RangeValueAccessor; })),
                multi: true
            };
            /**
             * \@description
             * The `ControlValueAccessor` for writing a range value and listening to range input changes.
             * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`
             * directives.
             *
             * \@usageNotes
             *
             * ### Using a range input with a reactive form
             *
             * The following example shows how to use a range input with a reactive form.
             *
             * ```ts
             * const ageControl = new FormControl();
             * ```
             *
             * ```
             * <input type="range" [formControl]="ageControl">
             * ```
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var RangeValueAccessor = /** @class */ (function () {
                /**
                 * @param {?} _renderer
                 * @param {?} _elementRef
                 */
                function RangeValueAccessor(_renderer, _elementRef) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    /**
                     * \@description
                     * The registered callback function called when a change or input event occurs on the input
                     * element.
                     */
                    this.onChange = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    /**
                     * \@description
                     * The registered callback function called when a blur event occurs on the input element.
                     */
                    this.onTouched = ( /**
                     * @return {?}
                     */function () { });
                }
                /**
                 * Sets the "value" property on the input element.
                 *
                 * @param {?} value The checked value
                 * @return {?}
                 */
                RangeValueAccessor.prototype.writeValue = function (value) {
                    this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
                };
                /**
                 * \@description
                 * Registers a function called when the control value changes.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                RangeValueAccessor.prototype.registerOnChange = function (fn) {
                    this.onChange = ( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) { fn(value == '' ? null : parseFloat(value)); });
                };
                /**
                 * \@description
                 * Registers a function called when the control is touched.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
                /**
                 * Sets the "disabled" property on the range input element.
                 *
                 * @param {?} isDisabled The disabled value
                 * @return {?}
                 */
                RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {
                    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
                };
                return RangeValueAccessor;
            }());
            RangeValueAccessor.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
                            host: {
                                '(change)': 'onChange($event.target.value)',
                                '(input)': 'onChange($event.target.value)',
                                '(blur)': 'onTouched()'
                            },
                            providers: [RANGE_VALUE_ACCESSOR]
                        },] }
            ];
            /** @nocollapse */
            RangeValueAccessor.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google Inc. All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /** @type {?} */
            var FormErrorExamples = {
                formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
                formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
                formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
                ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
                ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var ReactiveErrors = /** @class */ (function () {
                function ReactiveErrors() {
                }
                /**
                 * @return {?}
                 */
                ReactiveErrors.controlParentException = function () {
                    throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formControlName);
                };
                /**
                 * @return {?}
                 */
                ReactiveErrors.ngModelGroupException = function () {
                    throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + FormErrorExamples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + FormErrorExamples.ngModelGroup);
                };
                /**
                 * @return {?}
                 */
                ReactiveErrors.missingFormException = function () {
                    throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + FormErrorExamples.formControlName);
                };
                /**
                 * @return {?}
                 */
                ReactiveErrors.groupParentException = function () {
                    throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formGroupName);
                };
                /**
                 * @return {?}
                 */
                ReactiveErrors.arrayParentException = function () {
                    throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + FormErrorExamples.formArrayName);
                };
                /**
                 * @return {?}
                 */
                ReactiveErrors.disabledAttrWarning = function () {
                    console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
                };
                /**
                 * @param {?} directiveName
                 * @return {?}
                 */
                ReactiveErrors.ngModelWarning = function (directiveName) {
                    console.warn("\n    It looks like you're using ngModel on the same form field as " + directiveName + ". \n    Support for using the ngModel input property and ngModelChange event with \n    reactive form directives has been deprecated in Angular v6 and will be removed \n    in Angular v7.\n    \n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/" + (directiveName === 'formControl' ? 'FormControlDirective'
                        : 'FormControlName') + "#use-with-ngmodel\n    ");
                };
                return ReactiveErrors;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var SELECT_VALUE_ACCESSOR = {
                provide: NG_VALUE_ACCESSOR,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return SelectControlValueAccessor; })),
                multi: true
            };
            /**
             * @param {?} id
             * @param {?} value
             * @return {?}
             */
            function _buildValueString(id, value) {
                if (id == null)
                    return "" + value;
                if (value && typeof value === 'object')
                    value = 'Object';
                return (id + ": " + value).slice(0, 50);
            }
            /**
             * @param {?} valueString
             * @return {?}
             */
            function _extractId(valueString) {
                return valueString.split(':')[0];
            }
            /**
             * \@description
             * The `ControlValueAccessor` for writing select control values and listening to select control
             * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
             * `NgModel` directives.
             *
             * \@usageNotes
             *
             * ### Using select controls in a reactive form
             *
             * The following examples show how to use a select control in a reactive form.
             *
             * {\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
             *
             * ### Using select controls in a template-driven form
             *
             * To use a select in a template-driven form, simply add an `ngModel` and a `name`
             * attribute to the main `<select>` tag.
             *
             * {\@example forms/ts/selectControl/select_control_example.ts region='Component'}
             *
             * ### Customizing option selection
             *
             * Angular uses object identity to select option. It's possible for the identities of items
             * to change while the data does not. This can happen, for example, if the items are produced
             * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
             * second response will produce objects with different identities.
             *
             * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
             * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
             * If `compareWith` is given, Angular selects option by the return value of the function.
             *
             * ```ts
             * const selectedCountriesControl = new FormControl();
             * ```
             *
             * ```
             * <select [compareWith]="compareFn"  [formControl]="selectedCountriesControl">
             *     <option *ngFor="let country of countries" [ngValue]="country">
             *         {{country.name}}
             *     </option>
             * </select>
             *
             * compareFn(c1: Country, c2: Country): boolean {
             *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
             * }
             * ```
             *
             * **Note:** We listen to the 'change' event because 'input' events aren't fired
             * for selects in Firefox and IE:
             * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350
             * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var SelectControlValueAccessor = /** @class */ (function () {
                /**
                 * @param {?} _renderer
                 * @param {?} _elementRef
                 */
                function SelectControlValueAccessor(_renderer, _elementRef) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    /**
                     * \@internal
                     */
                    this._optionMap = new Map();
                    /**
                     * \@internal
                     */
                    this._idCounter = 0;
                    /**
                     * \@description
                     * The registered callback function called when a change event occurs on the input element.
                     */
                    this.onChange = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    /**
                     * \@description
                     * The registered callback function called when a blur event occurs on the input element.
                     */
                    this.onTouched = ( /**
                     * @return {?}
                     */function () { });
                    this._compareWith = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵlooseIdentical"];
                }
                Object.defineProperty(SelectControlValueAccessor.prototype, "compareWith", {
                    /**
                     * \@description
                     * Tracks the option comparison algorithm for tracking identities when
                     * checking for changes.
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        if (typeof fn !== 'function') {
                            throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
                        }
                        this._compareWith = fn;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Sets the "value" property on the input element. The "selectedIndex"
                 * property is also set if an ID is provided on the option element.
                 *
                 * @param {?} value The checked value
                 * @return {?}
                 */
                SelectControlValueAccessor.prototype.writeValue = function (value) {
                    this.value = value;
                    /** @type {?} */
                    var id = this._getOptionId(value);
                    if (id == null) {
                        this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);
                    }
                    /** @type {?} */
                    var valueString = _buildValueString(id, value);
                    this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);
                };
                /**
                 * \@description
                 * Registers a function called when the control value changes.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
                    var _this = this;
                    this.onChange = ( /**
                     * @param {?} valueString
                     * @return {?}
                     */function (valueString) {
                        _this.value = _this._getOptionValue(valueString);
                        fn(_this.value);
                    });
                };
                /**
                 * \@description
                 * Registers a function called when the control is touched.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
                /**
                 * Sets the "disabled" property on the select input element.
                 *
                 * @param {?} isDisabled The disabled value
                 * @return {?}
                 */
                SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
                    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };
                /**
                 * \@internal
                 * @param {?} value
                 * @return {?}
                 */
                SelectControlValueAccessor.prototype._getOptionId = function (value) {
                    for (var _b = 0, _c = Array.from(this._optionMap.keys()); _b < _c.length; _b++) {
                        var id = _c[_b];
                        if (this._compareWith(this._optionMap.get(id), value))
                            return id;
                    }
                    return null;
                };
                /**
                 * \@internal
                 * @param {?} valueString
                 * @return {?}
                 */
                SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
                    /** @type {?} */
                    var id = _extractId(valueString);
                    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
                };
                return SelectControlValueAccessor;
            }());
            SelectControlValueAccessor.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
                            host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
                            providers: [SELECT_VALUE_ACCESSOR]
                        },] }
            ];
            /** @nocollapse */
            SelectControlValueAccessor.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            SelectControlValueAccessor.propDecorators = {
                compareWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            if (false) { }
            /**
             * \@description
             * Marks `<option>` as dynamic, so Angular can be notified when options change.
             *
             * @see `SelectControlValueAccessor`
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var NgSelectOption = /** @class */ (function () {
                /**
                 * @param {?} _element
                 * @param {?} _renderer
                 * @param {?} _select
                 */
                function NgSelectOption(_element, _renderer, _select) {
                    this._element = _element;
                    this._renderer = _renderer;
                    this._select = _select;
                    if (this._select)
                        this.id = this._select._registerOption();
                }
                Object.defineProperty(NgSelectOption.prototype, "ngValue", {
                    /**
                     * \@description
                     * Tracks the value bound to the option element. Unlike the value binding,
                     * ngValue supports binding to objects.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._select == null)
                            return;
                        this._select._optionMap.set(this.id, value);
                        this._setElementValue(_buildValueString(this.id, value));
                        this._select.writeValue(this._select.value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgSelectOption.prototype, "value", {
                    /**
                     * \@description
                     * Tracks simple string values bound to the option element.
                     * For objects, use the `ngValue` input binding.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._setElementValue(value);
                        if (this._select)
                            this._select.writeValue(this._select.value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@internal
                 * @param {?} value
                 * @return {?}
                 */
                NgSelectOption.prototype._setElementValue = function (value) {
                    this._renderer.setProperty(this._element.nativeElement, 'value', value);
                };
                /**
                 * \@description
                 * Lifecycle method called before the directive's instance is destroyed. For internal use only.
                 * @return {?}
                 */
                NgSelectOption.prototype.ngOnDestroy = function () {
                    if (this._select) {
                        this._select._optionMap.delete(this.id);
                        this._select.writeValue(this._select.value);
                    }
                };
                return NgSelectOption;
            }());
            NgSelectOption.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'option' },] }
            ];
            /** @nocollapse */
            NgSelectOption.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
                { type: SelectControlValueAccessor, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }] }
            ]; };
            NgSelectOption.propDecorators = {
                ngValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['ngValue',] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['value',] }]
            };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var SELECT_MULTIPLE_VALUE_ACCESSOR = {
                provide: NG_VALUE_ACCESSOR,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return SelectMultipleControlValueAccessor; })),
                multi: true
            };
            /**
             * @param {?} id
             * @param {?} value
             * @return {?}
             */
            function _buildValueString$1(id, value) {
                if (id == null)
                    return "" + value;
                if (typeof value === 'string')
                    value = "'" + value + "'";
                if (value && typeof value === 'object')
                    value = 'Object';
                return (id + ": " + value).slice(0, 50);
            }
            /**
             * @param {?} valueString
             * @return {?}
             */
            function _extractId$1(valueString) {
                return valueString.split(':')[0];
            }
            /**
             * Mock interface for HTML Options
             * @record
             */
            function HTMLOption() { }
            if (false) { }
            /**
             * Mock interface for HTMLCollection
             * @abstract
             */
            var HTMLCollection = /** @class */ (function () {
                function HTMLCollection() {
                }
                return HTMLCollection;
            }());
            if (false) { }
            /**
             * \@description
             * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select control
             * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`
             * directives.
             *
             * @see `SelectControlValueAccessor`
             *
             * \@usageNotes
             *
             * ### Using a multi-select control
             *
             * The follow example shows you how to use a multi-select control with a reactive form.
             *
             * ```ts
             * const countryControl = new FormControl();
             * ```
             *
             * ```
             * <select multiple name="countries" [formControl]="countryControl">
             *   <option *ngFor="let country of countries" [ngValue]="country">
             *     {{ country.name }}
             *   </option>
             * </select>
             * ```
             *
             * ### Customizing option selection
             *
             * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
             * See the `SelectControlValueAccessor` for usage.
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var SelectMultipleControlValueAccessor = /** @class */ (function () {
                /**
                 * @param {?} _renderer
                 * @param {?} _elementRef
                 */
                function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    /**
                     * \@internal
                     */
                    this._optionMap = new Map();
                    /**
                     * \@internal
                     */
                    this._idCounter = 0;
                    /**
                     * \@description
                     * The registered callback function called when a change event occurs on the input element.
                     */
                    this.onChange = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    /**
                     * \@description
                     * The registered callback function called when a blur event occurs on the input element.
                     */
                    this.onTouched = ( /**
                     * @return {?}
                     */function () { });
                    this._compareWith = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵlooseIdentical"];
                }
                Object.defineProperty(SelectMultipleControlValueAccessor.prototype, "compareWith", {
                    /**
                     * \@description
                     * Tracks the option comparison algorithm for tracking identities when
                     * checking for changes.
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        if (typeof fn !== 'function') {
                            throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
                        }
                        this._compareWith = fn;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@description
                 * Sets the "value" property on one or of more
                 * of the select's options.
                 *
                 * @param {?} value The value
                 * @return {?}
                 */
                SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {
                    var _this = this;
                    this.value = value;
                    /** @type {?} */
                    var optionSelectedStateSetter;
                    if (Array.isArray(value)) {
                        // convert values to ids
                        /** @type {?} */
                        var ids_1 = value.map(( /**
                         * @param {?} v
                         * @return {?}
                         */function (v) { return _this._getOptionId(v); }));
                        optionSelectedStateSetter = ( /**
                         * @param {?} opt
                         * @param {?} o
                         * @return {?}
                         */function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); });
                    }
                    else {
                        optionSelectedStateSetter = ( /**
                         * @param {?} opt
                         * @param {?} o
                         * @return {?}
                         */function (opt, o) { opt._setSelected(false); });
                    }
                    this._optionMap.forEach(optionSelectedStateSetter);
                };
                /**
                 * \@description
                 * Registers a function called when the control value changes
                 * and writes an array of the selected options.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {
                    var _this = this;
                    this.onChange = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) {
                        /** @type {?} */
                        var selected = [];
                        if (_.hasOwnProperty('selectedOptions')) {
                            /** @type {?} */
                            var options = _.selectedOptions;
                            for (var i = 0; i < options.length; i++) {
                                /** @type {?} */
                                var opt = options.item(i);
                                /** @type {?} */
                                var val = _this._getOptionValue(opt.value);
                                selected.push(val);
                            }
                        }
                        // Degrade on IE
                        else {
                            /** @type {?} */
                            var options = ( /** @type {?} */(_.options));
                            for (var i = 0; i < options.length; i++) {
                                /** @type {?} */
                                var opt = options.item(i);
                                if (opt.selected) {
                                    /** @type {?} */
                                    var val = _this._getOptionValue(opt.value);
                                    selected.push(val);
                                }
                            }
                        }
                        _this.value = selected;
                        fn(selected);
                    });
                };
                /**
                 * \@description
                 * Registers a function called when the control is touched.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
                /**
                 * Sets the "disabled" property on the select input element.
                 *
                 * @param {?} isDisabled The disabled value
                 * @return {?}
                 */
                SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
                    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
                };
                /**
                 * \@internal
                 * @param {?} value
                 * @return {?}
                 */
                SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {
                    /** @type {?} */
                    var id = (this._idCounter++).toString();
                    this._optionMap.set(id, value);
                    return id;
                };
                /**
                 * \@internal
                 * @param {?} value
                 * @return {?}
                 */
                SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {
                    for (var _b = 0, _c = Array.from(this._optionMap.keys()); _b < _c.length; _b++) {
                        var id = _c[_b];
                        if (this._compareWith(( /** @type {?} */(this._optionMap.get(id)))._value, value))
                            return id;
                    }
                    return null;
                };
                /**
                 * \@internal
                 * @param {?} valueString
                 * @return {?}
                 */
                SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {
                    /** @type {?} */
                    var id = _extractId$1(valueString);
                    return this._optionMap.has(id) ? ( /** @type {?} */(this._optionMap.get(id)))._value : valueString;
                };
                return SelectMultipleControlValueAccessor;
            }());
            SelectMultipleControlValueAccessor.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
                            host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },
                            providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
                        },] }
            ];
            /** @nocollapse */
            SelectMultipleControlValueAccessor.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            SelectMultipleControlValueAccessor.propDecorators = {
                compareWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            if (false) { }
            /**
             * \@description
             * Marks `<option>` as dynamic, so Angular can be notified when options change.
             *
             * @see `SelectMultipleControlValueAccessor`
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var ɵNgSelectMultipleOption = /** @class */ (function () {
                /**
                 * @param {?} _element
                 * @param {?} _renderer
                 * @param {?} _select
                 */
                function ɵNgSelectMultipleOption(_element, _renderer, _select) {
                    this._element = _element;
                    this._renderer = _renderer;
                    this._select = _select;
                    if (this._select) {
                        this.id = this._select._registerOption(this);
                    }
                }
                Object.defineProperty(ɵNgSelectMultipleOption.prototype, "ngValue", {
                    /**
                     * \@description
                     * Tracks the value bound to the option element. Unlike the value binding,
                     * ngValue supports binding to objects.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._select == null)
                            return;
                        this._value = value;
                        this._setElementValue(_buildValueString$1(this.id, value));
                        this._select.writeValue(this._select.value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ɵNgSelectMultipleOption.prototype, "value", {
                    /**
                     * \@description
                     * Tracks simple string values bound to the option element.
                     * For objects, use the `ngValue` input binding.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._select) {
                            this._value = value;
                            this._setElementValue(_buildValueString$1(this.id, value));
                            this._select.writeValue(this._select.value);
                        }
                        else {
                            this._setElementValue(value);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@internal
                 * @param {?} value
                 * @return {?}
                 */
                ɵNgSelectMultipleOption.prototype._setElementValue = function (value) {
                    this._renderer.setProperty(this._element.nativeElement, 'value', value);
                };
                /**
                 * \@internal
                 * @param {?} selected
                 * @return {?}
                 */
                ɵNgSelectMultipleOption.prototype._setSelected = function (selected) {
                    this._renderer.setProperty(this._element.nativeElement, 'selected', selected);
                };
                /**
                 * \@description
                 * Lifecycle method called before the directive's instance is destroyed. For internal use only.
                 * @return {?}
                 */
                ɵNgSelectMultipleOption.prototype.ngOnDestroy = function () {
                    if (this._select) {
                        this._select._optionMap.delete(this.id);
                        this._select.writeValue(this._select.value);
                    }
                };
                return ɵNgSelectMultipleOption;
            }());
            ɵNgSelectMultipleOption.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'option' },] }
            ];
            /** @nocollapse */
            ɵNgSelectMultipleOption.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
                { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }] }
            ]; };
            ɵNgSelectMultipleOption.propDecorators = {
                ngValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['ngValue',] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['value',] }]
            };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @param {?} name
             * @param {?} parent
             * @return {?}
             */
            function controlPath(name, parent) {
                return ( /** @type {?} */(parent.path)).concat([name]);
            }
            /**
             * @param {?} control
             * @param {?} dir
             * @return {?}
             */
            function setUpControl(control, dir) {
                if (!control)
                    _throwError(dir, 'Cannot find control with');
                if (!dir.valueAccessor)
                    _throwError(dir, 'No value accessor for form control with');
                control.validator = Validators.compose([( /** @type {?} */(control.validator)), dir.validator]);
                control.asyncValidator = Validators.composeAsync([( /** @type {?} */(control.asyncValidator)), dir.asyncValidator]);
                ( /** @type {?} */(dir.valueAccessor)).writeValue(control.value);
                setUpViewChangePipeline(control, dir);
                setUpModelChangePipeline(control, dir);
                setUpBlurPipeline(control, dir);
                if (( /** @type {?} */(dir.valueAccessor)).setDisabledState) {
                    control.registerOnDisabledChange(( /**
                     * @param {?} isDisabled
                     * @return {?}
                     */function (isDisabled) { ( /** @type {?} */(( /** @type {?} */(dir.valueAccessor)).setDisabledState))(isDisabled); }));
                }
                // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4
                dir._rawValidators.forEach(( /**
                 * @param {?} validator
                 * @return {?}
                 */function (validator) {
                    if ((( /** @type {?} */(validator))).registerOnValidatorChange)
                        ( /** @type {?} */((( /** @type {?} */(validator))).registerOnValidatorChange))(( /**
                         * @return {?}
                         */function () { return control.updateValueAndValidity(); }));
                }));
                dir._rawAsyncValidators.forEach(( /**
                 * @param {?} validator
                 * @return {?}
                 */function (validator) {
                    if ((( /** @type {?} */(validator))).registerOnValidatorChange)
                        ( /** @type {?} */((( /** @type {?} */(validator))).registerOnValidatorChange))(( /**
                         * @return {?}
                         */function () { return control.updateValueAndValidity(); }));
                }));
            }
            /**
             * @param {?} control
             * @param {?} dir
             * @return {?}
             */
            function cleanUpControl(control, dir) {
                ( /** @type {?} */(dir.valueAccessor)).registerOnChange(( /**
                 * @return {?}
                 */function () { return _noControlError(dir); }));
                ( /** @type {?} */(dir.valueAccessor)).registerOnTouched(( /**
                 * @return {?}
                 */function () { return _noControlError(dir); }));
                dir._rawValidators.forEach(( /**
                 * @param {?} validator
                 * @return {?}
                 */function (validator) {
                    if (validator.registerOnValidatorChange) {
                        validator.registerOnValidatorChange(null);
                    }
                }));
                dir._rawAsyncValidators.forEach(( /**
                 * @param {?} validator
                 * @return {?}
                 */function (validator) {
                    if (validator.registerOnValidatorChange) {
                        validator.registerOnValidatorChange(null);
                    }
                }));
                if (control)
                    control._clearChangeFns();
            }
            /**
             * @param {?} control
             * @param {?} dir
             * @return {?}
             */
            function setUpViewChangePipeline(control, dir) {
                ( /** @type {?} */(dir.valueAccessor)).registerOnChange(( /**
                 * @param {?} newValue
                 * @return {?}
                 */function (newValue) {
                    control._pendingValue = newValue;
                    control._pendingChange = true;
                    control._pendingDirty = true;
                    if (control.updateOn === 'change')
                        updateControl(control, dir);
                }));
            }
            /**
             * @param {?} control
             * @param {?} dir
             * @return {?}
             */
            function setUpBlurPipeline(control, dir) {
                ( /** @type {?} */(dir.valueAccessor)).registerOnTouched(( /**
                 * @return {?}
                 */function () {
                    control._pendingTouched = true;
                    if (control.updateOn === 'blur' && control._pendingChange)
                        updateControl(control, dir);
                    if (control.updateOn !== 'submit')
                        control.markAsTouched();
                }));
            }
            /**
             * @param {?} control
             * @param {?} dir
             * @return {?}
             */
            function updateControl(control, dir) {
                if (control._pendingDirty)
                    control.markAsDirty();
                control.setValue(control._pendingValue, { emitModelToViewChange: false });
                dir.viewToModelUpdate(control._pendingValue);
                control._pendingChange = false;
            }
            /**
             * @param {?} control
             * @param {?} dir
             * @return {?}
             */
            function setUpModelChangePipeline(control, dir) {
                control.registerOnChange(( /**
                 * @param {?} newValue
                 * @param {?} emitModelEvent
                 * @return {?}
                 */function (newValue, emitModelEvent) {
                    // control -> view
                    ( /** @type {?} */(dir.valueAccessor)).writeValue(newValue);
                    // control -> ngModel
                    if (emitModelEvent)
                        dir.viewToModelUpdate(newValue);
                }));
            }
            /**
             * @param {?} control
             * @param {?} dir
             * @return {?}
             */
            function setUpFormContainer(control, dir) {
                if (control == null)
                    _throwError(dir, 'Cannot find control with');
                control.validator = Validators.compose([control.validator, dir.validator]);
                control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
            }
            /**
             * @param {?} dir
             * @return {?}
             */
            function _noControlError(dir) {
                return _throwError(dir, 'There is no FormControl instance attached to form control element with');
            }
            /**
             * @param {?} dir
             * @param {?} message
             * @return {?}
             */
            function _throwError(dir, message) {
                /** @type {?} */
                var messageEnd;
                if (( /** @type {?} */(dir.path)).length > 1) {
                    messageEnd = "path: '" + ( /** @type {?} */(dir.path)).join(' -> ') + "'";
                }
                else if (( /** @type {?} */(dir.path))[0]) {
                    messageEnd = "name: '" + dir.path + "'";
                }
                else {
                    messageEnd = 'unspecified name attribute';
                }
                throw new Error(message + " " + messageEnd);
            }
            /**
             * @param {?} validators
             * @return {?}
             */
            function composeValidators(validators) {
                return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;
            }
            /**
             * @param {?} validators
             * @return {?}
             */
            function composeAsyncValidators(validators) {
                return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :
                    null;
            }
            /**
             * @param {?} changes
             * @param {?} viewModel
             * @return {?}
             */
            function isPropertyUpdated(changes, viewModel) {
                if (!changes.hasOwnProperty('model'))
                    return false;
                /** @type {?} */
                var change = changes['model'];
                if (change.isFirstChange())
                    return true;
                return !Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵlooseIdentical"])(viewModel, change.currentValue);
            }
            /** @type {?} */
            var BUILTIN_ACCESSORS = [
                CheckboxControlValueAccessor,
                RangeValueAccessor,
                NumberValueAccessor,
                SelectControlValueAccessor,
                SelectMultipleControlValueAccessor,
                RadioControlValueAccessor,
            ];
            /**
             * @param {?} valueAccessor
             * @return {?}
             */
            function isBuiltInAccessor(valueAccessor) {
                return BUILTIN_ACCESSORS.some(( /**
                 * @param {?} a
                 * @return {?}
                 */function (/**
                 * @param {?} a
                 * @return {?}
                 */ a) { return valueAccessor.constructor === a; }));
            }
            /**
             * @param {?} form
             * @param {?} directives
             * @return {?}
             */
            function syncPendingControls(form, directives) {
                form._syncPendingControls();
                directives.forEach(( /**
                 * @param {?} dir
                 * @return {?}
                 */function (/**
                 * @param {?} dir
                 * @return {?}
                 */ dir) {
                    /** @type {?} */
                    var control = ( /** @type {?} */(dir.control));
                    if (control.updateOn === 'submit' && control._pendingChange) {
                        dir.viewToModelUpdate(control._pendingValue);
                        control._pendingChange = false;
                    }
                }));
            }
            // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented
            /**
             * @param {?} dir
             * @param {?} valueAccessors
             * @return {?}
             */
            function selectValueAccessor(dir, valueAccessors) {
                if (!valueAccessors)
                    return null;
                if (!Array.isArray(valueAccessors))
                    _throwError(dir, 'Value accessor was not provided as an array for form control with');
                /** @type {?} */
                var defaultAccessor = undefined;
                /** @type {?} */
                var builtinAccessor = undefined;
                /** @type {?} */
                var customAccessor = undefined;
                valueAccessors.forEach(( /**
                 * @param {?} v
                 * @return {?}
                 */function (v) {
                    if (v.constructor === DefaultValueAccessor) {
                        defaultAccessor = v;
                    }
                    else if (isBuiltInAccessor(v)) {
                        if (builtinAccessor)
                            _throwError(dir, 'More than one built-in value accessor matches form control with');
                        builtinAccessor = v;
                    }
                    else {
                        if (customAccessor)
                            _throwError(dir, 'More than one custom value accessor matches form control with');
                        customAccessor = v;
                    }
                }));
                if (customAccessor)
                    return customAccessor;
                if (builtinAccessor)
                    return builtinAccessor;
                if (defaultAccessor)
                    return defaultAccessor;
                _throwError(dir, 'No valid value accessor for form control with');
                return null;
            }
            /**
             * @template T
             * @param {?} list
             * @param {?} el
             * @return {?}
             */
            function removeDir(list, el) {
                /** @type {?} */
                var index = list.indexOf(el);
                if (index > -1)
                    list.splice(index, 1);
            }
            // TODO(kara): remove after deprecation period
            /**
             * @param {?} name
             * @param {?} type
             * @param {?} instance
             * @param {?} warningConfig
             * @return {?}
             */
            function _ngModelWarning(name, type, instance, warningConfig) {
                if (!Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["isDevMode"])() || warningConfig === 'never')
                    return;
                if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||
                    (warningConfig === 'always' && !instance._ngModelWarningSent)) {
                    ReactiveErrors.ngModelWarning(name);
                    type._ngModelWarningSentOnce = true;
                    instance._ngModelWarningSent = true;
                }
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Reports that a FormControl is valid, meaning that no errors exist in the input value.
             *
             * @see `status`
             * @type {?}
             */
            var VALID = 'VALID';
            /**
             * Reports that a FormControl is invalid, meaning that an error exists in the input value.
             *
             * @see `status`
             * @type {?}
             */
            var INVALID = 'INVALID';
            /**
             * Reports that a FormControl is pending, meaning that that async validation is occurring and
             * errors are not yet available for the input value.
             *
             * @see `markAsPending`
             * @see `status`
             * @type {?}
             */
            var PENDING = 'PENDING';
            /**
             * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor
             * calculations of validity or value.
             *
             * @see `markAsDisabled`
             * @see `status`
             * @type {?}
             */
            var DISABLED = 'DISABLED';
            /**
             * @param {?} control
             * @param {?} path
             * @param {?} delimiter
             * @return {?}
             */
            function _find(control, path, delimiter) {
                if (path == null)
                    return null;
                if (!(path instanceof Array)) {
                    path = (( /** @type {?} */(path))).split(delimiter);
                }
                if (path instanceof Array && (path.length === 0))
                    return null;
                return (( /** @type {?} */(path))).reduce(( /**
                 * @param {?} v
                 * @param {?} name
                 * @return {?}
                 */function (v, name) {
                    if (v instanceof FormGroup) {
                        return v.controls.hasOwnProperty(( /** @type {?} */(name))) ? v.controls[name] : null;
                    }
                    if (v instanceof FormArray) {
                        return v.at(( /** @type {?} */(name))) || null;
                    }
                    return null;
                }), control);
            }
            /**
             * @param {?=} validatorOrOpts
             * @return {?}
             */
            function coerceToValidator(validatorOrOpts) {
                /** @type {?} */
                var validator = ( /** @type {?} */((isOptionsObj(validatorOrOpts) ? (( /** @type {?} */(validatorOrOpts))).validators :
                    validatorOrOpts)));
                return Array.isArray(validator) ? composeValidators(validator) : validator || null;
            }
            /**
             * @param {?=} asyncValidator
             * @param {?=} validatorOrOpts
             * @return {?}
             */
            function coerceToAsyncValidator(asyncValidator, validatorOrOpts) {
                /** @type {?} */
                var origAsyncValidator = ( /** @type {?} */((isOptionsObj(validatorOrOpts) ? (( /** @type {?} */(validatorOrOpts))).asyncValidators :
                    asyncValidator)));
                return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :
                    origAsyncValidator || null;
            }
            /**
             * Interface for options provided to an `AbstractControl`.
             *
             * \@publicApi
             * @record
             */
            function AbstractControlOptions() { }
            if (false) { }
            /**
             * @param {?=} validatorOrOpts
             * @return {?}
             */
            function isOptionsObj(validatorOrOpts) {
                return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&
                    typeof validatorOrOpts === 'object';
            }
            /**
             * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.
             *
             * It provides some of the shared behavior that all controls and groups of controls have, like
             * running validators, calculating status, and resetting state. It also defines the properties
             * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
             * instantiated directly.
             *
             * @see [Forms Guide](/guide/forms)
             * @see [Reactive Forms Guide](/guide/reactive-forms)
             * @see [Dynamic Forms Guide](/guide/dynamic-form)
             *
             * \@publicApi
             * @abstract
             */
            var AbstractControl = /** @class */ (function () {
                /**
                 * Initialize the AbstractControl instance.
                 *
                 * @param {?} validator The function that determines the synchronous validity of this control.
                 * @param {?} asyncValidator The function that determines the asynchronous validity of this
                 * control.
                 */
                function AbstractControl(validator, asyncValidator) {
                    this.validator = validator;
                    this.asyncValidator = asyncValidator;
                    /**
                     * \@internal
                     */
                    this._onCollectionChange = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * A control is `pristine` if the user has not yet changed
                     * the value in the UI.
                     *
                     * @return True if the user has not yet changed the value in the UI; compare `dirty`.
                     * Programmatic changes to a control's value do not mark it dirty.
                     */
                    this.pristine = true;
                    /**
                     * True if the control is marked as `touched`.
                     *
                     * A control is marked `touched` once the user has triggered
                     * a `blur` event on it.
                     */
                    this.touched = false;
                    /**
                     * \@internal
                     */
                    this._onDisabledChange = [];
                }
                Object.defineProperty(AbstractControl.prototype, "parent", {
                    /**
                     * The parent control.
                     * @return {?}
                     */
                    get: function () { return this._parent; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "valid", {
                    /**
                     * A control is `valid` when its `status` is `VALID`.
                     *
                     * @see {\@link AbstractControl.status}
                     *
                     * @return {?} True if the control has passed all of its validation tests,
                     * false otherwise.
                     */
                    get: function () { return this.status === VALID; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "invalid", {
                    /**
                     * A control is `invalid` when its `status` is `INVALID`.
                     *
                     * @see {\@link AbstractControl.status}
                     *
                     * @return {?} True if this control has failed one or more of its validation checks,
                     * false otherwise.
                     */
                    get: function () { return this.status === INVALID; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "pending", {
                    /**
                     * A control is `pending` when its `status` is `PENDING`.
                     *
                     * @see {\@link AbstractControl.status}
                     *
                     * @return {?} True if this control is in the process of conducting a validation check,
                     * false otherwise.
                     */
                    get: function () { return this.status == PENDING; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "disabled", {
                    /**
                     * A control is `disabled` when its `status` is `DISABLED`.
                     *
                     * Disabled controls are exempt from validation checks and
                     * are not included in the aggregate value of their ancestor
                     * controls.
                     *
                     * @see {\@link AbstractControl.status}
                     *
                     * @return {?} True if the control is disabled, false otherwise.
                     */
                    get: function () { return this.status === DISABLED; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "enabled", {
                    /**
                     * A control is `enabled` as long as its `status` is not `DISABLED`.
                     *
                     * @see {\@link AbstractControl.status}
                     *
                     * @return {?} True if the control has any status other than 'DISABLED',
                     * false if the status is 'DISABLED'.
                     *
                     */
                    get: function () { return this.status !== DISABLED; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "dirty", {
                    /**
                     * A control is `dirty` if the user has changed the value
                     * in the UI.
                     *
                     * @return {?} True if the user has changed the value of this control in the UI; compare `pristine`.
                     * Programmatic changes to a control's value do not mark it dirty.
                     */
                    get: function () { return !this.pristine; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "untouched", {
                    /**
                     * True if the control has not been marked as touched
                     *
                     * A control is `untouched` if the user has not yet triggered
                     * a `blur` event on it.
                     * @return {?}
                     */
                    get: function () { return !this.touched; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "updateOn", {
                    /**
                     * Reports the update strategy of the `AbstractControl` (meaning
                     * the event on which the control updates itself).
                     * Possible values: `'change'` | `'blur'` | `'submit'`
                     * Default value: `'change'`
                     * @return {?}
                     */
                    get: function () {
                        return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Sets the synchronous validators that are active on this control.  Calling
                 * this overwrites any existing sync validators.
                 *
                 * When you add or remove a validator at run time, you must call
                 * `updateValueAndValidity()` for the new validation to take effect.
                 *
                 * @param {?} newValidator
                 * @return {?}
                 */
                AbstractControl.prototype.setValidators = function (newValidator) {
                    this.validator = coerceToValidator(newValidator);
                };
                /**
                 * Sets the async validators that are active on this control. Calling this
                 * overwrites any existing async validators.
                 *
                 * When you add or remove a validator at run time, you must call
                 * `updateValueAndValidity()` for the new validation to take effect.
                 *
                 * @param {?} newValidator
                 * @return {?}
                 */
                AbstractControl.prototype.setAsyncValidators = function (newValidator) {
                    this.asyncValidator = coerceToAsyncValidator(newValidator);
                };
                /**
                 * Empties out the sync validator list.
                 *
                 * When you add or remove a validator at run time, you must call
                 * `updateValueAndValidity()` for the new validation to take effect.
                 *
                 * @return {?}
                 */
                AbstractControl.prototype.clearValidators = function () { this.validator = null; };
                /**
                 * Empties out the async validator list.
                 *
                 * When you add or remove a validator at run time, you must call
                 * `updateValueAndValidity()` for the new validation to take effect.
                 *
                 * @return {?}
                 */
                AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };
                /**
                 * Marks the control as `touched`. A control is touched by focus and
                 * blur events that do not change the value.
                 *
                 * @see `markAsUntouched()` / `markAsDirty()` / `markAsPristine()`
                 *
                 * @param {?=} opts Configuration options that determine how the control propagates changes
                 * and emits events events after marking is applied.
                 * * `onlySelf`: When true, mark only this control. When false or not supplied,
                 * marks all direct ancestors. Default is false.
                 * @return {?}
                 */
                AbstractControl.prototype.markAsTouched = function (opts) {
                    if (opts === void 0) { opts = {}; }
                    (( /** @type {?} */(this))).touched = true;
                    if (this._parent && !opts.onlySelf) {
                        this._parent.markAsTouched(opts);
                    }
                };
                /**
                 * Marks the control and all its descendant controls as `touched`.
                 * @see `markAsTouched()`
                 * @return {?}
                 */
                AbstractControl.prototype.markAllAsTouched = function () {
                    this.markAsTouched({ onlySelf: true });
                    this._forEachChild(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) { return control.markAllAsTouched(); }));
                };
                /**
                 * Marks the control as `untouched`.
                 *
                 * If the control has any children, also marks all children as `untouched`
                 * and recalculates the `touched` status of all parent controls.
                 *
                 * @see `markAsTouched()` / `markAsDirty()` / `markAsPristine()`
                 *
                 * @param {?=} opts Configuration options that determine how the control propagates changes
                 * and emits events after the marking is applied.
                 * * `onlySelf`: When true, mark only this control. When false or not supplied,
                 * marks all direct ancestors. Default is false.
                 * @return {?}
                 */
                AbstractControl.prototype.markAsUntouched = function (opts) {
                    if (opts === void 0) { opts = {}; }
                    (( /** @type {?} */(this))).touched = false;
                    this._pendingTouched = false;
                    this._forEachChild(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) { control.markAsUntouched({ onlySelf: true }); }));
                    if (this._parent && !opts.onlySelf) {
                        this._parent._updateTouched(opts);
                    }
                };
                /**
                 * Marks the control as `dirty`. A control becomes dirty when
                 * the control's value is changed through the UI; compare `markAsTouched`.
                 *
                 * @see `markAsTouched()` / `markAsUntouched()` / `markAsPristine()`
                 *
                 * @param {?=} opts Configuration options that determine how the control propagates changes
                 * and emits events after marking is applied.
                 * * `onlySelf`: When true, mark only this control. When false or not supplied,
                 * marks all direct ancestors. Default is false.
                 * @return {?}
                 */
                AbstractControl.prototype.markAsDirty = function (opts) {
                    if (opts === void 0) { opts = {}; }
                    (( /** @type {?} */(this))).pristine = false;
                    if (this._parent && !opts.onlySelf) {
                        this._parent.markAsDirty(opts);
                    }
                };
                /**
                 * Marks the control as `pristine`.
                 *
                 * If the control has any children, marks all children as `pristine`,
                 * and recalculates the `pristine` status of all parent
                 * controls.
                 *
                 * @see `markAsTouched()` / `markAsUntouched()` / `markAsDirty()`
                 *
                 * @param {?=} opts Configuration options that determine how the control emits events after
                 * marking is applied.
                 * * `onlySelf`: When true, mark only this control. When false or not supplied,
                 * marks all direct ancestors. Default is false..
                 * @return {?}
                 */
                AbstractControl.prototype.markAsPristine = function (opts) {
                    if (opts === void 0) { opts = {}; }
                    (( /** @type {?} */(this))).pristine = true;
                    this._pendingDirty = false;
                    this._forEachChild(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) { control.markAsPristine({ onlySelf: true }); }));
                    if (this._parent && !opts.onlySelf) {
                        this._parent._updatePristine(opts);
                    }
                };
                /**
                 * Marks the control as `pending`.
                 *
                 * A control is pending while the control performs async validation.
                 *
                 * @see {\@link AbstractControl.status}
                 *
                 * @param {?=} opts Configuration options that determine how the control propagates changes and
                 * emits events after marking is applied.
                 * * `onlySelf`: When true, mark only this control. When false or not supplied,
                 * marks all direct ancestors. Default is false..
                 * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
                 * observable emits an event with the latest status the control is marked pending.
                 * When false, no events are emitted.
                 *
                 * @return {?}
                 */
                AbstractControl.prototype.markAsPending = function (opts) {
                    if (opts === void 0) { opts = {}; }
                    (( /** @type {?} */(this))).status = PENDING;
                    if (opts.emitEvent !== false) {
                        (( /** @type {?} */(this.statusChanges))).emit(this.status);
                    }
                    if (this._parent && !opts.onlySelf) {
                        this._parent.markAsPending(opts);
                    }
                };
                /**
                 * Disables the control. This means the control is exempt from validation checks and
                 * excluded from the aggregate value of any parent. Its status is `DISABLED`.
                 *
                 * If the control has children, all children are also disabled.
                 *
                 * @see {\@link AbstractControl.status}
                 *
                 * @param {?=} opts Configuration options that determine how the control propagates
                 * changes and emits events after the control is disabled.
                 * * `onlySelf`: When true, mark only this control. When false or not supplied,
                 * marks all direct ancestors. Default is false..
                 * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
                 * `valueChanges`
                 * observables emit events with the latest status and value when the control is disabled.
                 * When false, no events are emitted.
                 * @return {?}
                 */
                AbstractControl.prototype.disable = function (opts) {
                    if (opts === void 0) { opts = {}; }
                    // If parent has been marked artificially dirty we don't want to re-calculate the
                    // parent's dirtiness based on the children.
                    /** @type {?} */
                    var skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
                    (( /** @type {?} */(this))).status = DISABLED;
                    (( /** @type {?} */(this))).errors = null;
                    this._forEachChild(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) { control.disable(Object.assign({}, opts, { onlySelf: true })); }));
                    this._updateValue();
                    if (opts.emitEvent !== false) {
                        (( /** @type {?} */(this.valueChanges))).emit(this.value);
                        (( /** @type {?} */(this.statusChanges))).emit(this.status);
                    }
                    this._updateAncestors(Object.assign({}, opts, { skipPristineCheck: skipPristineCheck }));
                    this._onDisabledChange.forEach(( /**
                     * @param {?} changeFn
                     * @return {?}
                     */function (changeFn) { return changeFn(true); }));
                };
                /**
                 * Enables the control. This means the control is included in validation checks and
                 * the aggregate value of its parent. Its status recalculates based on its value and
                 * its validators.
                 *
                 * By default, if the control has children, all children are enabled.
                 *
                 * @see {\@link AbstractControl.status}
                 *
                 * @param {?=} opts Configure options that control how the control propagates changes and
                 * emits events when marked as untouched
                 * * `onlySelf`: When true, mark only this control. When false or not supplied,
                 * marks all direct ancestors. Default is false..
                 * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
                 * `valueChanges`
                 * observables emit events with the latest status and value when the control is enabled.
                 * When false, no events are emitted.
                 * @return {?}
                 */
                AbstractControl.prototype.enable = function (opts) {
                    if (opts === void 0) { opts = {}; }
                    // If parent has been marked artificially dirty we don't want to re-calculate the
                    // parent's dirtiness based on the children.
                    /** @type {?} */
                    var skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
                    (( /** @type {?} */(this))).status = VALID;
                    this._forEachChild(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) { control.enable(Object.assign({}, opts, { onlySelf: true })); }));
                    this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });
                    this._updateAncestors(Object.assign({}, opts, { skipPristineCheck: skipPristineCheck }));
                    this._onDisabledChange.forEach(( /**
                     * @param {?} changeFn
                     * @return {?}
                     */function (changeFn) { return changeFn(false); }));
                };
                /**
                 * @private
                 * @param {?} opts
                 * @return {?}
                 */
                AbstractControl.prototype._updateAncestors = function (opts) {
                    if (this._parent && !opts.onlySelf) {
                        this._parent.updateValueAndValidity(opts);
                        if (!opts.skipPristineCheck) {
                            this._parent._updatePristine();
                        }
                        this._parent._updateTouched();
                    }
                };
                /**
                 * @param {?} parent Sets the parent of the control
                 * @return {?}
                 */
                AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
                /**
                 * Recalculates the value and validation status of the control.
                 *
                 * By default, it also updates the value and validity of its ancestors.
                 *
                 * @param {?=} opts Configuration options determine how the control propagates changes and emits events
                 * after updates and validity checks are applied.
                 * * `onlySelf`: When true, only update this control. When false or not supplied,
                 * update all direct ancestors. Default is false..
                 * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
                 * `valueChanges`
                 * observables emit events with the latest status and value when the control is updated.
                 * When false, no events are emitted.
                 * @return {?}
                 */
                AbstractControl.prototype.updateValueAndValidity = function (opts) {
                    if (opts === void 0) { opts = {}; }
                    this._setInitialStatus();
                    this._updateValue();
                    if (this.enabled) {
                        this._cancelExistingSubscription();
                        (( /** @type {?} */(this))).errors = this._runValidator();
                        (( /** @type {?} */(this))).status = this._calculateStatus();
                        if (this.status === VALID || this.status === PENDING) {
                            this._runAsyncValidator(opts.emitEvent);
                        }
                    }
                    if (opts.emitEvent !== false) {
                        (( /** @type {?} */(this.valueChanges))).emit(this.value);
                        (( /** @type {?} */(this.statusChanges))).emit(this.status);
                    }
                    if (this._parent && !opts.onlySelf) {
                        this._parent.updateValueAndValidity(opts);
                    }
                };
                /**
                 * \@internal
                 * @param {?=} opts
                 * @return {?}
                 */
                AbstractControl.prototype._updateTreeValidity = function (opts) {
                    if (opts === void 0) { opts = { emitEvent: true }; }
                    this._forEachChild(( /**
                     * @param {?} ctrl
                     * @return {?}
                     */function (ctrl) { return ctrl._updateTreeValidity(opts); }));
                    this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });
                };
                /**
                 * @private
                 * @return {?}
                 */
                AbstractControl.prototype._setInitialStatus = function () {
                    (( /** @type {?} */(this))).status = this._allControlsDisabled() ? DISABLED : VALID;
                };
                /**
                 * @private
                 * @return {?}
                 */
                AbstractControl.prototype._runValidator = function () {
                    return this.validator ? this.validator(this) : null;
                };
                /**
                 * @private
                 * @param {?=} emitEvent
                 * @return {?}
                 */
                AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
                    var _this = this;
                    if (this.asyncValidator) {
                        (( /** @type {?} */(this))).status = PENDING;
                        /** @type {?} */
                        var obs = toObservable(this.asyncValidator(this));
                        this._asyncValidationSubscription =
                            obs.subscribe(( /**
                             * @param {?} errors
                             * @return {?}
                             */function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); }));
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                AbstractControl.prototype._cancelExistingSubscription = function () {
                    if (this._asyncValidationSubscription) {
                        this._asyncValidationSubscription.unsubscribe();
                    }
                };
                /**
                 * Sets errors on a form control when running validations manually, rather than automatically.
                 *
                 * Calling `setErrors` also updates the validity of the parent control.
                 *
                 * \@usageNotes
                 * ### Manually set the errors for a control
                 *
                 * ```
                 * const login = new FormControl('someLogin');
                 * login.setErrors({
                 *   notUnique: true
                 * });
                 *
                 * expect(login.valid).toEqual(false);
                 * expect(login.errors).toEqual({ notUnique: true });
                 *
                 * login.setValue('someOtherLogin');
                 *
                 * expect(login.valid).toEqual(true);
                 * ```
                 * @param {?} errors
                 * @param {?=} opts
                 * @return {?}
                 */
                AbstractControl.prototype.setErrors = function (errors, opts) {
                    if (opts === void 0) { opts = {}; }
                    (( /** @type {?} */(this))).errors = errors;
                    this._updateControlsErrors(opts.emitEvent !== false);
                };
                /**
                 * Retrieves a child control given the control's name or path.
                 *
                 * \@usageNotes
                 * ### Retrieve a nested control
                 *
                 * For example, to get a `name` control nested within a `person` sub-group:
                 *
                 * * `this.form.get('person.name');`
                 *
                 * -OR-
                 *
                 * * `this.form.get(['person', 'name']);`
                 * @param {?} path A dot-delimited string or array of string/number values that define the path to the
                 * control.
                 *
                 * @return {?}
                 */
                AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };
                /**
                 * \@description
                 * Reports error data for the control with the given path.
                 *
                 * \@usageNotes
                 * For example, for the following `FormGroup`:
                 *
                 * ```
                 * form = new FormGroup({
                 *   address: new FormGroup({ street: new FormControl() })
                 * });
                 * ```
                 *
                 * The path to the 'street' control from the root form would be 'address' -> 'street'.
                 *
                 * It can be provided to this method in one of two formats:
                 *
                 * 1. An array of string control names, e.g. `['address', 'street']`
                 * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
                 *
                 * @param {?} errorCode The code of the error to check
                 * @param {?=} path A list of control names that designates how to move from the current control
                 * to the control that should be queried for errors.
                 *
                 * @return {?} error data for that particular error. If the control or error is not present,
                 * null is returned.
                 */
                AbstractControl.prototype.getError = function (errorCode, path) {
                    /** @type {?} */
                    var control = path ? this.get(path) : this;
                    return control && control.errors ? control.errors[errorCode] : null;
                };
                /**
                 * \@description
                 * Reports whether the control with the given path has the error specified.
                 *
                 * \@usageNotes
                 * For example, for the following `FormGroup`:
                 *
                 * ```
                 * form = new FormGroup({
                 *   address: new FormGroup({ street: new FormControl() })
                 * });
                 * ```
                 *
                 * The path to the 'street' control from the root form would be 'address' -> 'street'.
                 *
                 * It can be provided to this method in one of two formats:
                 *
                 * 1. An array of string control names, e.g. `['address', 'street']`
                 * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
                 *
                 * If no path is given, this method checks for the error on the current control.
                 *
                 * @param {?} errorCode The code of the error to check
                 * @param {?=} path A list of control names that designates how to move from the current control
                 * to the control that should be queried for errors.
                 *
                 * @return {?} whether the given error is present in the control at the given path.
                 *
                 * If the control is not present, false is returned.
                 */
                AbstractControl.prototype.hasError = function (errorCode, path) {
                    return !!this.getError(errorCode, path);
                };
                Object.defineProperty(AbstractControl.prototype, "root", {
                    /**
                     * Retrieves the top-level ancestor of this control.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var x = this;
                        while (x._parent) {
                            x = x._parent;
                        }
                        return x;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@internal
                 * @param {?} emitEvent
                 * @return {?}
                 */
                AbstractControl.prototype._updateControlsErrors = function (emitEvent) {
                    (( /** @type {?} */(this))).status = this._calculateStatus();
                    if (emitEvent) {
                        (( /** @type {?} */(this.statusChanges))).emit(this.status);
                    }
                    if (this._parent) {
                        this._parent._updateControlsErrors(emitEvent);
                    }
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                AbstractControl.prototype._initObservables = function () {
                    (( /** @type {?} */(this))).valueChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    (( /** @type {?} */(this))).statusChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                };
                /**
                 * @private
                 * @return {?}
                 */
                AbstractControl.prototype._calculateStatus = function () {
                    if (this._allControlsDisabled())
                        return DISABLED;
                    if (this.errors)
                        return INVALID;
                    if (this._anyControlsHaveStatus(PENDING))
                        return PENDING;
                    if (this._anyControlsHaveStatus(INVALID))
                        return INVALID;
                    return VALID;
                };
                /**
                 * \@internal
                 * @param {?} status
                 * @return {?}
                 */
                AbstractControl.prototype._anyControlsHaveStatus = function (status) {
                    return this._anyControls(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) { return control.status === status; }));
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                AbstractControl.prototype._anyControlsDirty = function () {
                    return this._anyControls(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) { return control.dirty; }));
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                AbstractControl.prototype._anyControlsTouched = function () {
                    return this._anyControls(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) { return control.touched; }));
                };
                /**
                 * \@internal
                 * @param {?=} opts
                 * @return {?}
                 */
                AbstractControl.prototype._updatePristine = function (opts) {
                    if (opts === void 0) { opts = {}; }
                    (( /** @type {?} */(this))).pristine = !this._anyControlsDirty();
                    if (this._parent && !opts.onlySelf) {
                        this._parent._updatePristine(opts);
                    }
                };
                /**
                 * \@internal
                 * @param {?=} opts
                 * @return {?}
                 */
                AbstractControl.prototype._updateTouched = function (opts) {
                    if (opts === void 0) { opts = {}; }
                    (( /** @type {?} */(this))).touched = this._anyControlsTouched();
                    if (this._parent && !opts.onlySelf) {
                        this._parent._updateTouched(opts);
                    }
                };
                /**
                 * \@internal
                 * @param {?} formState
                 * @return {?}
                 */
                AbstractControl.prototype._isBoxedValue = function (formState) {
                    return typeof formState === 'object' && formState !== null &&
                        Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
                };
                /**
                 * \@internal
                 * @param {?} fn
                 * @return {?}
                 */
                AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };
                /**
                 * \@internal
                 * @param {?=} opts
                 * @return {?}
                 */
                AbstractControl.prototype._setUpdateStrategy = function (opts) {
                    if (isOptionsObj(opts) && (( /** @type {?} */(opts))).updateOn != null) {
                        this._updateOn = ( /** @type {?} */((( /** @type {?} */(opts))).updateOn));
                    }
                };
                /**
                 * Check to see if parent has been marked artificially dirty.
                 *
                 * \@internal
                 * @private
                 * @param {?=} onlySelf
                 * @return {?}
                 */
                AbstractControl.prototype._parentMarkedDirty = function (onlySelf) {
                    /** @type {?} */
                    var parentDirty = this._parent && this._parent.dirty;
                    return !onlySelf && parentDirty && !this._parent._anyControlsDirty();
                };
                return AbstractControl;
            }());
            if (false) { }
            /**
             * Tracks the value and validation status of an individual form control.
             *
             * This is one of the three fundamental building blocks of Angular forms, along with
             * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that
             * implements most of the base functionality for accessing the value, validation status,
             * user interactions and events.
             *
             * @see `AbstractControl`
             * @see [Reactive Forms Guide](guide/reactive-forms)
             * @see [Usage Notes](#usage-notes)
             *
             * \@usageNotes
             *
             * ### Initializing Form Controls
             *
             * Instantiate a `FormControl`, with an initial value.
             *
             * ```ts
             * const control = new FormControl('some value');
             * console.log(control.value);     // 'some value'
             * ```
             *
             * The following example initializes the control with a form state object. The `value`
             * and `disabled` keys are required in this case.
             *
             * ```ts
             * const control = new FormControl({ value: 'n/a', disabled: true });
             * console.log(control.value);     // 'n/a'
             * console.log(control.status);    // 'DISABLED'
             * ```
             *
             * The following example initializes the control with a sync validator.
             *
             * ```ts
             * const control = new FormControl('', Validators.required);
             * console.log(control.value);      // ''
             * console.log(control.status);     // 'INVALID'
             * ```
             *
             * The following example initializes the control using an options object.
             *
             * ```ts
             * const control = new FormControl('', {
             *    validators: Validators.required,
             *    asyncValidators: myAsyncValidator
             * });
             * ```
             *
             * ### Configure the control to update on a blur event
             *
             * Set the `updateOn` option to `'blur'` to update on the blur `event`.
             *
             * ```ts
             * const control = new FormControl('', { updateOn: 'blur' });
             * ```
             *
             * ### Configure the control to update on a submit event
             *
             * Set the `updateOn` option to `'submit'` to update on a submit `event`.
             *
             * ```ts
             * const control = new FormControl('', { updateOn: 'submit' });
             * ```
             *
             * ### Reset the control back to an initial value
             *
             * You reset to a specific form state by passing through a standalone
             * value or a form state object that contains both a value and a disabled state
             * (these are the only two properties that cannot be calculated).
             *
             * ```ts
             * const control = new FormControl('Nancy');
             *
             * console.log(control.value); // 'Nancy'
             *
             * control.reset('Drew');
             *
             * console.log(control.value); // 'Drew'
             * ```
             *
             * ### Reset the control back to an initial value and disabled
             *
             * ```
             * const control = new FormControl('Nancy');
             *
             * console.log(control.value); // 'Nancy'
             * console.log(control.status); // 'VALID'
             *
             * control.reset({ value: 'Drew', disabled: true });
             *
             * console.log(control.value); // 'Drew'
             * console.log(control.status); // 'DISABLED'
             * ```
             *
             * \@publicApi
             */
            var FormControl = /** @class */ (function (_super) {
                __extends(FormControl, _super);
                /**
                 * Creates a new `FormControl` instance.
                 *
                 * @param {?=} formState Initializes the control with an initial value,
                 * or an object that defines the initial value and disabled state.
                 *
                 * @param {?=} validatorOrOpts A synchronous validator function, or an array of
                 * such functions, or an `AbstractControlOptions` object that contains validation functions
                 * and a validation trigger.
                 *
                 * @param {?=} asyncValidator A single async validator or array of async validator functions
                 *
                 */
                function FormControl(formState, validatorOrOpts, asyncValidator) {
                    if (formState === void 0) { formState = null; }
                    var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;
                    /**
                     * \@internal
                     */
                    _this._onChange = [];
                    _this._applyFormState(formState);
                    _this._setUpdateStrategy(validatorOrOpts);
                    _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
                    _this._initObservables();
                    return _this;
                }
                /**
                 * Sets a new value for the form control.
                 *
                 * @param {?} value The new value for the control.
                 * @param {?=} options Configuration options that determine how the control propagates changes
                 * and emits events when the value changes.
                 * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
                 * updateValueAndValidity} method.
                 *
                 * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
                 * false.
                 * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
                 * `valueChanges`
                 * observables emit events with the latest status and value when the control value is updated.
                 * When false, no events are emitted.
                 * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an
                 * `onChange` event to
                 * update the view.
                 * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an
                 * `ngModelChange`
                 * event to update the model.
                 *
                 * @return {?}
                 */
                FormControl.prototype.setValue = function (value, options) {
                    var _this = this;
                    if (options === void 0) { options = {}; }
                    (( /** @type {?} */(this))).value = this._pendingValue = value;
                    if (this._onChange.length && options.emitModelToViewChange !== false) {
                        this._onChange.forEach(( /**
                         * @param {?} changeFn
                         * @return {?}
                         */function (changeFn) { return changeFn(_this.value, options.emitViewToModelChange !== false); }));
                    }
                    this.updateValueAndValidity(options);
                };
                /**
                 * Patches the value of a control.
                 *
                 * This function is functionally the same as {\@link FormControl#setValue setValue} at this level.
                 * It exists for symmetry with {\@link FormGroup#patchValue patchValue} on `FormGroups` and
                 * `FormArrays`, where it does behave differently.
                 *
                 * @see `setValue` for options
                 * @param {?} value
                 * @param {?=} options
                 * @return {?}
                 */
                FormControl.prototype.patchValue = function (value, options) {
                    if (options === void 0) { options = {}; }
                    this.setValue(value, options);
                };
                /**
                 * Resets the form control, marking it `pristine` and `untouched`, and setting
                 * the value to null.
                 *
                 * @param {?=} formState Resets the control with an initial value,
                 * or an object that defines the initial value and disabled state.
                 *
                 * @param {?=} options Configuration options that determine how the control propagates changes
                 * and emits events after the value changes.
                 *
                 * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
                 * false.
                 * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
                 * `valueChanges`
                 * observables emit events with the latest status and value when the control is reset.
                 * When false, no events are emitted.
                 *
                 * @return {?}
                 */
                FormControl.prototype.reset = function (formState, options) {
                    if (formState === void 0) { formState = null; }
                    if (options === void 0) { options = {}; }
                    this._applyFormState(formState);
                    this.markAsPristine(options);
                    this.markAsUntouched(options);
                    this.setValue(this.value, options);
                    this._pendingChange = false;
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormControl.prototype._updateValue = function () { };
                /**
                 * \@internal
                 * @param {?} condition
                 * @return {?}
                 */
                FormControl.prototype._anyControls = function (condition) { return false; };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormControl.prototype._allControlsDisabled = function () { return this.disabled; };
                /**
                 * Register a listener for change events.
                 *
                 * @param {?} fn The method that is called when the value changes
                 * @return {?}
                 */
                FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormControl.prototype._clearChangeFns = function () {
                    this._onChange = [];
                    this._onDisabledChange = [];
                    this._onCollectionChange = ( /**
                     * @return {?}
                     */function () { });
                };
                /**
                 * Register a listener for disabled events.
                 *
                 * @param {?} fn The method that is called when the disabled status changes.
                 * @return {?}
                 */
                FormControl.prototype.registerOnDisabledChange = function (fn) {
                    this._onDisabledChange.push(fn);
                };
                /**
                 * \@internal
                 * @param {?} cb
                 * @return {?}
                 */
                FormControl.prototype._forEachChild = function (cb) { };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormControl.prototype._syncPendingControls = function () {
                    if (this.updateOn === 'submit') {
                        if (this._pendingDirty)
                            this.markAsDirty();
                        if (this._pendingTouched)
                            this.markAsTouched();
                        if (this._pendingChange) {
                            this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });
                            return true;
                        }
                    }
                    return false;
                };
                /**
                 * @private
                 * @param {?} formState
                 * @return {?}
                 */
                FormControl.prototype._applyFormState = function (formState) {
                    if (this._isBoxedValue(formState)) {
                        (( /** @type {?} */(this))).value = this._pendingValue = formState.value;
                        formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :
                            this.enable({ onlySelf: true, emitEvent: false });
                    }
                    else {
                        (( /** @type {?} */(this))).value = this._pendingValue = formState;
                    }
                };
                return FormControl;
            }(AbstractControl));
            if (false) { }
            /**
             * Tracks the value and validity state of a group of `FormControl` instances.
             *
             * A `FormGroup` aggregates the values of each child `FormControl` into one object,
             * with each control name as the key.  It calculates its status by reducing the status values
             * of its children. For example, if one of the controls in a group is invalid, the entire
             * group becomes invalid.
             *
             * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,
             * along with `FormControl` and `FormArray`.
             *
             * When instantiating a `FormGroup`, pass in a collection of child controls as the first
             * argument. The key for each child registers the name for the control.
             *
             * \@usageNotes
             *
             * ### Create a form group with 2 controls
             *
             * ```
             * const form = new FormGroup({
             *   first: new FormControl('Nancy', Validators.minLength(2)),
             *   last: new FormControl('Drew'),
             * });
             *
             * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
             * console.log(form.status);  // 'VALID'
             * ```
             *
             * ### Create a form group with a group-level validator
             *
             * You include group-level validators as the second arg, or group-level async
             * validators as the third arg. These come in handy when you want to perform validation
             * that considers the value of more than one child control.
             *
             * ```
             * const form = new FormGroup({
             *   password: new FormControl('', Validators.minLength(2)),
             *   passwordConfirm: new FormControl('', Validators.minLength(2)),
             * }, passwordMatchValidator);
             *
             *
             * function passwordMatchValidator(g: FormGroup) {
             *    return g.get('password').value === g.get('passwordConfirm').value
             *       ? null : {'mismatch': true};
             * }
             * ```
             *
             * Like `FormControl` instances, you choose to pass in
             * validators and async validators as part of an options object.
             *
             * ```
             * const form = new FormGroup({
             *   password: new FormControl('')
             *   passwordConfirm: new FormControl('')
             * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });
             * ```
             *
             * ### Set the updateOn property for all controls in a form group
             *
             * The options object is used to set a default value for each child
             * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
             * group level, all child controls default to 'blur', unless the child
             * has explicitly specified a different `updateOn` value.
             *
             * ```ts
             * const c = new FormGroup({
             *   one: new FormControl()
             * }, { updateOn: 'blur' });
             * ```
             *
             * \@publicApi
             */
            var FormGroup = /** @class */ (function (_super) {
                __extends(FormGroup, _super);
                /**
                 * Creates a new `FormGroup` instance.
                 *
                 * @param {?} controls A collection of child controls. The key for each child is the name
                 * under which it is registered.
                 *
                 * @param {?=} validatorOrOpts A synchronous validator function, or an array of
                 * such functions, or an `AbstractControlOptions` object that contains validation functions
                 * and a validation trigger.
                 *
                 * @param {?=} asyncValidator A single async validator or array of async validator functions
                 *
                 */
                function FormGroup(controls, validatorOrOpts, asyncValidator) {
                    var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;
                    _this.controls = controls;
                    _this._initObservables();
                    _this._setUpdateStrategy(validatorOrOpts);
                    _this._setUpControls();
                    _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
                    return _this;
                }
                /**
                 * Registers a control with the group's list of controls.
                 *
                 * This method does not update the value or validity of the control.
                 * Use {\@link FormGroup#addControl addControl} instead.
                 *
                 * @param {?} name The control name to register in the collection
                 * @param {?} control Provides the control for the given name
                 * @return {?}
                 */
                FormGroup.prototype.registerControl = function (name, control) {
                    if (this.controls[name])
                        return this.controls[name];
                    this.controls[name] = control;
                    control.setParent(this);
                    control._registerOnCollectionChange(this._onCollectionChange);
                    return control;
                };
                /**
                 * Add a control to this group.
                 *
                 * This method also updates the value and validity of the control.
                 *
                 * @param {?} name The control name to add to the collection
                 * @param {?} control Provides the control for the given name
                 * @return {?}
                 */
                FormGroup.prototype.addControl = function (name, control) {
                    this.registerControl(name, control);
                    this.updateValueAndValidity();
                    this._onCollectionChange();
                };
                /**
                 * Remove a control from this group.
                 *
                 * @param {?} name The control name to remove from the collection
                 * @return {?}
                 */
                FormGroup.prototype.removeControl = function (name) {
                    if (this.controls[name])
                        this.controls[name]._registerOnCollectionChange(( /**
                         * @return {?}
                         */function () { }));
                    delete (this.controls[name]);
                    this.updateValueAndValidity();
                    this._onCollectionChange();
                };
                /**
                 * Replace an existing control.
                 *
                 * @param {?} name The control name to replace in the collection
                 * @param {?} control Provides the control for the given name
                 * @return {?}
                 */
                FormGroup.prototype.setControl = function (name, control) {
                    if (this.controls[name])
                        this.controls[name]._registerOnCollectionChange(( /**
                         * @return {?}
                         */function () { }));
                    delete (this.controls[name]);
                    if (control)
                        this.registerControl(name, control);
                    this.updateValueAndValidity();
                    this._onCollectionChange();
                };
                /**
                 * Check whether there is an enabled control with the given name in the group.
                 *
                 * Reports false for disabled controls. If you'd like to check for existence in the group
                 * only, use {\@link AbstractControl#get get} instead.
                 *
                 * @param {?} controlName The control name to check for existence in the collection
                 *
                 * @return {?} false for disabled controls, true otherwise.
                 */
                FormGroup.prototype.contains = function (controlName) {
                    return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
                };
                /**
                 * Sets the value of the `FormGroup`. It accepts an object that matches
                 * the structure of the group, with control names as keys.
                 *
                 * \@usageNotes
                 * ### Set the complete value for the form group
                 *
                 * ```
                 * const form = new FormGroup({
                 *   first: new FormControl(),
                 *   last: new FormControl()
                 * });
                 *
                 * console.log(form.value);   // {first: null, last: null}
                 *
                 * form.setValue({first: 'Nancy', last: 'Drew'});
                 * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
                 * ```
                 *
                 * @throws When strict checks fail, such as setting the value of a control
                 * that doesn't exist or if you exclude a value of a control that does exist.
                 *
                 * @param {?} value The new value for the control that matches the structure of the group.
                 * @param {?=} options Configuration options that determine how the control propagates changes
                 * and emits events after the value changes.
                 * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
                 * updateValueAndValidity} method.
                 *
                 * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
                 * false.
                 * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
                 * `valueChanges`
                 * observables emit events with the latest status and value when the control value is updated.
                 * When false, no events are emitted.
                 * @return {?}
                 */
                FormGroup.prototype.setValue = function (value, options) {
                    var _this = this;
                    if (options === void 0) { options = {}; }
                    this._checkAllValuesPresent(value);
                    Object.keys(value).forEach(( /**
                     * @param {?} name
                     * @return {?}
                     */function (/**
                     * @param {?} name
                     * @return {?}
                     */ name) {
                        _this._throwIfControlMissing(name);
                        _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });
                    }));
                    this.updateValueAndValidity(options);
                };
                /**
                 * Patches the value of the `FormGroup`. It accepts an object with control
                 * names as keys, and does its best to match the values to the correct controls
                 * in the group.
                 *
                 * It accepts both super-sets and sub-sets of the group without throwing an error.
                 *
                 * \@usageNotes
                 * ### Patch the value for a form group
                 *
                 * ```
                 * const form = new FormGroup({
                 *    first: new FormControl(),
                 *    last: new FormControl()
                 * });
                 * console.log(form.value);   // {first: null, last: null}
                 *
                 * form.patchValue({first: 'Nancy'});
                 * console.log(form.value);   // {first: 'Nancy', last: null}
                 * ```
                 *
                 * @param {?} value The object that matches the structure of the group.
                 * @param {?=} options Configuration options that determine how the control propagates changes and
                 * emits events after the value is patched.
                 * * `onlySelf`: When true, each change only affects this control and not its parent. Default is
                 * true.
                 * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
                 * `valueChanges`
                 * observables emit events with the latest status and value when the control value is updated.
                 * When false, no events are emitted.
                 * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
                 * updateValueAndValidity} method.
                 * @return {?}
                 */
                FormGroup.prototype.patchValue = function (value, options) {
                    var _this = this;
                    if (options === void 0) { options = {}; }
                    Object.keys(value).forEach(( /**
                     * @param {?} name
                     * @return {?}
                     */function (/**
                     * @param {?} name
                     * @return {?}
                     */ name) {
                        if (_this.controls[name]) {
                            _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });
                        }
                    }));
                    this.updateValueAndValidity(options);
                };
                /**
                 * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and
                 * the value of all descendants to null.
                 *
                 * You reset to a specific form state by passing in a map of states
                 * that matches the structure of your form, with control names as keys. The state
                 * is a standalone value or a form state object with both a value and a disabled
                 * status.
                 *
                 * \@usageNotes
                 *
                 * ### Reset the form group values
                 *
                 * ```ts
                 * const form = new FormGroup({
                 *   first: new FormControl('first name'),
                 *   last: new FormControl('last name')
                 * });
                 *
                 * console.log(form.value);  // {first: 'first name', last: 'last name'}
                 *
                 * form.reset({ first: 'name', last: 'last name' });
                 *
                 * console.log(form.value);  // {first: 'name', last: 'last name'}
                 * ```
                 *
                 * ### Reset the form group values and disabled status
                 *
                 * ```
                 * const form = new FormGroup({
                 *   first: new FormControl('first name'),
                 *   last: new FormControl('last name')
                 * });
                 *
                 * form.reset({
                 *   first: {value: 'name', disabled: true},
                 *   last: 'last'
                 * });
                 *
                 * console.log(this.form.value);  // {first: 'name', last: 'last name'}
                 * console.log(this.form.get('first').status);  // 'DISABLED'
                 * ```
                 * @param {?=} value Resets the control with an initial value,
                 * or an object that defines the initial value and disabled state.
                 *
                 * @param {?=} options Configuration options that determine how the control propagates changes
                 * and emits events when the group is reset.
                 * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
                 * false.
                 * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
                 * `valueChanges`
                 * observables emit events with the latest status and value when the control is reset.
                 * When false, no events are emitted.
                 * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
                 * updateValueAndValidity} method.
                 *
                 * @return {?}
                 */
                FormGroup.prototype.reset = function (value, options) {
                    if (value === void 0) { value = {}; }
                    if (options === void 0) { options = {}; }
                    this._forEachChild(( /**
                     * @param {?} control
                     * @param {?} name
                     * @return {?}
                     */function (control, name) {
                        control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });
                    }));
                    this._updatePristine(options);
                    this._updateTouched(options);
                    this.updateValueAndValidity(options);
                };
                /**
                 * The aggregate value of the `FormGroup`, including any disabled controls.
                 *
                 * Retrieves all values regardless of disabled status.
                 * The `value` property is the best way to get the value of the group, because
                 * it excludes disabled controls in the `FormGroup`.
                 * @return {?}
                 */
                FormGroup.prototype.getRawValue = function () {
                    return this._reduceChildren({}, ( /**
                     * @param {?} acc
                     * @param {?} control
                     * @param {?} name
                     * @return {?}
                     */function (acc, control, name) {
                        acc[name] = control instanceof FormControl ? control.value : (( /** @type {?} */(control))).getRawValue();
                        return acc;
                    }));
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormGroup.prototype._syncPendingControls = function () {
                    /** @type {?} */
                    var subtreeUpdated = this._reduceChildren(false, ( /**
                     * @param {?} updated
                     * @param {?} child
                     * @return {?}
                     */function (updated, child) {
                        return child._syncPendingControls() ? true : updated;
                    }));
                    if (subtreeUpdated)
                        this.updateValueAndValidity({ onlySelf: true });
                    return subtreeUpdated;
                };
                /**
                 * \@internal
                 * @param {?} name
                 * @return {?}
                 */
                FormGroup.prototype._throwIfControlMissing = function (name) {
                    if (!Object.keys(this.controls).length) {
                        throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
                    }
                    if (!this.controls[name]) {
                        throw new Error("Cannot find form control with name: " + name + ".");
                    }
                };
                /**
                 * \@internal
                 * @param {?} cb
                 * @return {?}
                 */
                FormGroup.prototype._forEachChild = function (cb) {
                    var _this = this;
                    Object.keys(this.controls).forEach(( /**
                     * @param {?} k
                     * @return {?}
                     */function (/**
                     * @param {?} k
                     * @return {?}
                     */ k) { return cb(_this.controls[k], k); }));
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormGroup.prototype._setUpControls = function () {
                    var _this = this;
                    this._forEachChild(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        control.setParent(_this);
                        control._registerOnCollectionChange(_this._onCollectionChange);
                    }));
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormGroup.prototype._updateValue = function () { (( /** @type {?} */(this))).value = this._reduceValue(); };
                /**
                 * \@internal
                 * @param {?} condition
                 * @return {?}
                 */
                FormGroup.prototype._anyControls = function (condition) {
                    var _this = this;
                    /** @type {?} */
                    var res = false;
                    this._forEachChild(( /**
                     * @param {?} control
                     * @param {?} name
                     * @return {?}
                     */function (control, name) {
                        res = res || (_this.contains(name) && condition(control));
                    }));
                    return res;
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormGroup.prototype._reduceValue = function () {
                    var _this = this;
                    return this._reduceChildren({}, ( /**
                     * @param {?} acc
                     * @param {?} control
                     * @param {?} name
                     * @return {?}
                     */function (acc, control, name) {
                        if (control.enabled || _this.disabled) {
                            acc[name] = control.value;
                        }
                        return acc;
                    }));
                };
                /**
                 * \@internal
                 * @param {?} initValue
                 * @param {?} fn
                 * @return {?}
                 */
                FormGroup.prototype._reduceChildren = function (initValue, fn) {
                    /** @type {?} */
                    var res = initValue;
                    this._forEachChild(( /**
                     * @param {?} control
                     * @param {?} name
                     * @return {?}
                     */function (control, name) { res = fn(res, control, name); }));
                    return res;
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormGroup.prototype._allControlsDisabled = function () {
                    for (var _b = 0, _c = Object.keys(this.controls); _b < _c.length; _b++) {
                        var controlName = _c[_b];
                        if (this.controls[controlName].enabled) {
                            return false;
                        }
                    }
                    return Object.keys(this.controls).length > 0 || this.disabled;
                };
                /**
                 * \@internal
                 * @param {?} value
                 * @return {?}
                 */
                FormGroup.prototype._checkAllValuesPresent = function (value) {
                    this._forEachChild(( /**
                     * @param {?} control
                     * @param {?} name
                     * @return {?}
                     */function (control, name) {
                        if (value[name] === undefined) {
                            throw new Error("Must supply a value for form control with name: '" + name + "'.");
                        }
                    }));
                };
                return FormGroup;
            }(AbstractControl));
            if (false) { }
            /**
             * Tracks the value and validity state of an array of `FormControl`,
             * `FormGroup` or `FormArray` instances.
             *
             * A `FormArray` aggregates the values of each child `FormControl` into an array.
             * It calculates its status by reducing the status values of its children. For example, if one of
             * the controls in a `FormArray` is invalid, the entire array becomes invalid.
             *
             * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,
             * along with `FormControl` and `FormGroup`.
             *
             * \@usageNotes
             *
             * ### Create an array of form controls
             *
             * ```
             * const arr = new FormArray([
             *   new FormControl('Nancy', Validators.minLength(2)),
             *   new FormControl('Drew'),
             * ]);
             *
             * console.log(arr.value);   // ['Nancy', 'Drew']
             * console.log(arr.status);  // 'VALID'
             * ```
             *
             * ### Create a form array with array-level validators
             *
             * You include array-level validators and async validators. These come in handy
             * when you want to perform validation that considers the value of more than one child
             * control.
             *
             * The two types of validators are passed in separately as the second and third arg
             * respectively, or together as part of an options object.
             *
             * ```
             * const arr = new FormArray([
             *   new FormControl('Nancy'),
             *   new FormControl('Drew')
             * ], {validators: myValidator, asyncValidators: myAsyncValidator});
             * ```
             *
             * ### Set the updateOn property for all controls in a form array
             *
             * The options object is used to set a default value for each child
             * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
             * array level, all child controls default to 'blur', unless the child
             * has explicitly specified a different `updateOn` value.
             *
             * ```ts
             * const arr = new FormArray([
             *    new FormControl()
             * ], {updateOn: 'blur'});
             * ```
             *
             * ### Adding or removing controls from a form array
             *
             * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods
             * in `FormArray` itself. These methods ensure the controls are properly tracked in the
             * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
             * the `FormArray` directly, as that result in strange and unexpected behavior such
             * as broken change detection.
             *
             * \@publicApi
             */
            var FormArray = /** @class */ (function (_super) {
                __extends(FormArray, _super);
                /**
                 * Creates a new `FormArray` instance.
                 *
                 * @param {?} controls An array of child controls. Each child control is given an index
                 * where it is registered.
                 *
                 * @param {?=} validatorOrOpts A synchronous validator function, or an array of
                 * such functions, or an `AbstractControlOptions` object that contains validation functions
                 * and a validation trigger.
                 *
                 * @param {?=} asyncValidator A single async validator or array of async validator functions
                 *
                 */
                function FormArray(controls, validatorOrOpts, asyncValidator) {
                    var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;
                    _this.controls = controls;
                    _this._initObservables();
                    _this._setUpdateStrategy(validatorOrOpts);
                    _this._setUpControls();
                    _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
                    return _this;
                }
                /**
                 * Get the `AbstractControl` at the given `index` in the array.
                 *
                 * @param {?} index Index in the array to retrieve the control
                 * @return {?}
                 */
                FormArray.prototype.at = function (index) { return this.controls[index]; };
                /**
                 * Insert a new `AbstractControl` at the end of the array.
                 *
                 * @param {?} control Form control to be inserted
                 * @return {?}
                 */
                FormArray.prototype.push = function (control) {
                    this.controls.push(control);
                    this._registerControl(control);
                    this.updateValueAndValidity();
                    this._onCollectionChange();
                };
                /**
                 * Insert a new `AbstractControl` at the given `index` in the array.
                 *
                 * @param {?} index Index in the array to insert the control
                 * @param {?} control Form control to be inserted
                 * @return {?}
                 */
                FormArray.prototype.insert = function (index, control) {
                    this.controls.splice(index, 0, control);
                    this._registerControl(control);
                    this.updateValueAndValidity();
                };
                /**
                 * Remove the control at the given `index` in the array.
                 *
                 * @param {?} index Index in the array to remove the control
                 * @return {?}
                 */
                FormArray.prototype.removeAt = function (index) {
                    if (this.controls[index])
                        this.controls[index]._registerOnCollectionChange(( /**
                         * @return {?}
                         */function () { }));
                    this.controls.splice(index, 1);
                    this.updateValueAndValidity();
                };
                /**
                 * Replace an existing control.
                 *
                 * @param {?} index Index in the array to replace the control
                 * @param {?} control The `AbstractControl` control to replace the existing control
                 * @return {?}
                 */
                FormArray.prototype.setControl = function (index, control) {
                    if (this.controls[index])
                        this.controls[index]._registerOnCollectionChange(( /**
                         * @return {?}
                         */function () { }));
                    this.controls.splice(index, 1);
                    if (control) {
                        this.controls.splice(index, 0, control);
                        this._registerControl(control);
                    }
                    this.updateValueAndValidity();
                    this._onCollectionChange();
                };
                Object.defineProperty(FormArray.prototype, "length", {
                    /**
                     * Length of the control array.
                     * @return {?}
                     */
                    get: function () { return this.controls.length; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Sets the value of the `FormArray`. It accepts an array that matches
                 * the structure of the control.
                 *
                 * This method performs strict checks, and throws an error if you try
                 * to set the value of a control that doesn't exist or if you exclude the
                 * value of a control.
                 *
                 * \@usageNotes
                 * ### Set the values for the controls in the form array
                 *
                 * ```
                 * const arr = new FormArray([
                 *   new FormControl(),
                 *   new FormControl()
                 * ]);
                 * console.log(arr.value);   // [null, null]
                 *
                 * arr.setValue(['Nancy', 'Drew']);
                 * console.log(arr.value);   // ['Nancy', 'Drew']
                 * ```
                 *
                 * @param {?} value Array of values for the controls
                 * @param {?=} options Configure options that determine how the control propagates changes and
                 * emits events after the value changes
                 *
                 * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
                 * is false.
                 * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
                 * `valueChanges`
                 * observables emit events with the latest status and value when the control value is updated.
                 * When false, no events are emitted.
                 * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
                 * updateValueAndValidity} method.
                 * @return {?}
                 */
                FormArray.prototype.setValue = function (value, options) {
                    var _this = this;
                    if (options === void 0) { options = {}; }
                    this._checkAllValuesPresent(value);
                    value.forEach(( /**
                     * @param {?} newValue
                     * @param {?} index
                     * @return {?}
                     */function (newValue, index) {
                        _this._throwIfControlMissing(index);
                        _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });
                    }));
                    this.updateValueAndValidity(options);
                };
                /**
                 * Patches the value of the `FormArray`. It accepts an array that matches the
                 * structure of the control, and does its best to match the values to the correct
                 * controls in the group.
                 *
                 * It accepts both super-sets and sub-sets of the array without throwing an error.
                 *
                 * \@usageNotes
                 * ### Patch the values for controls in a form array
                 *
                 * ```
                 * const arr = new FormArray([
                 *    new FormControl(),
                 *    new FormControl()
                 * ]);
                 * console.log(arr.value);   // [null, null]
                 *
                 * arr.patchValue(['Nancy']);
                 * console.log(arr.value);   // ['Nancy', null]
                 * ```
                 *
                 * @param {?} value Array of latest values for the controls
                 * @param {?=} options Configure options that determine how the control propagates changes and
                 * emits events after the value changes
                 *
                 * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
                 * is false.
                 * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
                 * `valueChanges`
                 * observables emit events with the latest status and value when the control value is updated.
                 * When false, no events are emitted.
                 * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
                 * updateValueAndValidity} method.
                 * @return {?}
                 */
                FormArray.prototype.patchValue = function (value, options) {
                    var _this = this;
                    if (options === void 0) { options = {}; }
                    value.forEach(( /**
                     * @param {?} newValue
                     * @param {?} index
                     * @return {?}
                     */function (newValue, index) {
                        if (_this.at(index)) {
                            _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });
                        }
                    }));
                    this.updateValueAndValidity(options);
                };
                /**
                 * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the
                 * value of all descendants to null or null maps.
                 *
                 * You reset to a specific form state by passing in an array of states
                 * that matches the structure of the control. The state is a standalone value
                 * or a form state object with both a value and a disabled status.
                 *
                 * \@usageNotes
                 * ### Reset the values in a form array
                 *
                 * ```ts
                 * const arr = new FormArray([
                 *    new FormControl(),
                 *    new FormControl()
                 * ]);
                 * arr.reset(['name', 'last name']);
                 *
                 * console.log(this.arr.value);  // ['name', 'last name']
                 * ```
                 *
                 * ### Reset the values in a form array and the disabled status for the first control
                 *
                 * ```
                 * this.arr.reset([
                 *   {value: 'name', disabled: true},
                 *   'last'
                 * ]);
                 *
                 * console.log(this.arr.value);  // ['name', 'last name']
                 * console.log(this.arr.get(0).status);  // 'DISABLED'
                 * ```
                 *
                 * @param {?=} value Array of values for the controls
                 * @param {?=} options Configure options that determine how the control propagates changes and
                 * emits events after the value changes
                 *
                 * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
                 * is false.
                 * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
                 * `valueChanges`
                 * observables emit events with the latest status and value when the control is reset.
                 * When false, no events are emitted.
                 * The configuration options are passed to the {\@link AbstractControl#updateValueAndValidity
                 * updateValueAndValidity} method.
                 * @return {?}
                 */
                FormArray.prototype.reset = function (value, options) {
                    if (value === void 0) { value = []; }
                    if (options === void 0) { options = {}; }
                    this._forEachChild(( /**
                     * @param {?} control
                     * @param {?} index
                     * @return {?}
                     */function (control, index) {
                        control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });
                    }));
                    this._updatePristine(options);
                    this._updateTouched(options);
                    this.updateValueAndValidity(options);
                };
                /**
                 * The aggregate value of the array, including any disabled controls.
                 *
                 * Reports all values regardless of disabled status.
                 * For enabled controls only, the `value` property is the best way to get the value of the array.
                 * @return {?}
                 */
                FormArray.prototype.getRawValue = function () {
                    return this.controls.map(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        return control instanceof FormControl ? control.value : (( /** @type {?} */(control))).getRawValue();
                    }));
                };
                /**
                 * Remove all controls in the `FormArray`.
                 *
                 * \@usageNotes
                 * ### Remove all elements from a FormArray
                 *
                 * ```ts
                 * const arr = new FormArray([
                 *    new FormControl(),
                 *    new FormControl()
                 * ]);
                 * console.log(arr.length);  // 2
                 *
                 * arr.clear();
                 * console.log(arr.length);  // 0
                 * ```
                 *
                 * It's a simpler and more efficient alternative to removing all elements one by one:
                 *
                 * ```ts
                 * const arr = new FormArray([
                 *    new FormControl(),
                 *    new FormControl()
                 * ]);
                 *
                 * while (arr.length) {
                 *    arr.removeAt(0);
                 * }
                 * ```
                 * @return {?}
                 */
                FormArray.prototype.clear = function () {
                    if (this.controls.length < 1)
                        return;
                    this._forEachChild(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) { return control._registerOnCollectionChange(( /**
                     * @return {?}
                     */function () { })); }));
                    this.controls.splice(0);
                    this.updateValueAndValidity();
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormArray.prototype._syncPendingControls = function () {
                    /** @type {?} */
                    var subtreeUpdated = this.controls.reduce(( /**
                     * @param {?} updated
                     * @param {?} child
                     * @return {?}
                     */function (updated, child) {
                        return child._syncPendingControls() ? true : updated;
                    }), false);
                    if (subtreeUpdated)
                        this.updateValueAndValidity({ onlySelf: true });
                    return subtreeUpdated;
                };
                /**
                 * \@internal
                 * @param {?} index
                 * @return {?}
                 */
                FormArray.prototype._throwIfControlMissing = function (index) {
                    if (!this.controls.length) {
                        throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
                    }
                    if (!this.at(index)) {
                        throw new Error("Cannot find form control at index " + index);
                    }
                };
                /**
                 * \@internal
                 * @param {?} cb
                 * @return {?}
                 */
                FormArray.prototype._forEachChild = function (cb) {
                    this.controls.forEach(( /**
                     * @param {?} control
                     * @param {?} index
                     * @return {?}
                     */function (control, index) { cb(control, index); }));
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormArray.prototype._updateValue = function () {
                    var _this = this;
                    (( /** @type {?} */(this))).value =
                        this.controls.filter(( /**
                         * @param {?} control
                         * @return {?}
                         */function (control) { return control.enabled || _this.disabled; }))
                            .map(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) { return control.value; }));
                };
                /**
                 * \@internal
                 * @param {?} condition
                 * @return {?}
                 */
                FormArray.prototype._anyControls = function (condition) {
                    return this.controls.some(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) { return control.enabled && condition(control); }));
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormArray.prototype._setUpControls = function () {
                    var _this = this;
                    this._forEachChild(( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) { return _this._registerControl(control); }));
                };
                /**
                 * \@internal
                 * @param {?} value
                 * @return {?}
                 */
                FormArray.prototype._checkAllValuesPresent = function (value) {
                    this._forEachChild(( /**
                     * @param {?} control
                     * @param {?} i
                     * @return {?}
                     */function (control, i) {
                        if (value[i] === undefined) {
                            throw new Error("Must supply a value for form control at index: " + i + ".");
                        }
                    }));
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormArray.prototype._allControlsDisabled = function () {
                    for (var _b = 0, _c = this.controls; _b < _c.length; _b++) {
                        var control = _c[_b];
                        if (control.enabled)
                            return false;
                    }
                    return this.controls.length > 0 || this.disabled;
                };
                /**
                 * @private
                 * @param {?} control
                 * @return {?}
                 */
                FormArray.prototype._registerControl = function (control) {
                    control.setParent(this);
                    control._registerOnCollectionChange(this._onCollectionChange);
                };
                return FormArray;
            }(AbstractControl));
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var formDirectiveProvider = {
                provide: ControlContainer,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return NgForm; }))
            };
            var ɵ0 = /**
             * @return {?}
             */ function () { return Promise.resolve(null); };
            /** @type {?} */
            var resolvedPromise = ((ɵ0))();
            /**
             * \@description
             * Creates a top-level `FormGroup` instance and binds it to a form
             * to track aggregate form value and validation status.
             *
             * As soon as you import the `FormsModule`, this directive becomes active by default on
             * all `<form>` tags.  You don't need to add a special selector.
             *
             * You optionally export the directive into a local template variable using `ngForm` as the key
             * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
             * `FormGroup` instance are duplicated on the directive itself, so a reference to it
             * gives you access to the aggregate value and validity status of the form, as well as
             * user interaction properties like `dirty` and `touched`.
             *
             * To register child controls with the form, use `NgModel` with a `name`
             * attribute. You may use `NgModelGroup` to create sub-groups within the form.
             *
             * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has
             * triggered a form submission. The `ngSubmit` event emits the original form
             * submission event.
             *
             * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.
             * To import the `FormsModule` but skip its usage in some forms,
             * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`
             * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is
             * unnecessary because the `<form>` tags are inert. In that case, you would
             * refrain from using the `formGroup` directive.
             *
             * \@usageNotes
             *
             * ### Migrating from deprecated ngForm selector
             *
             * Support for using `ngForm` element selector has been deprecated in Angular v6 and will be removed
             * in Angular v9.
             *
             * This has been deprecated to keep selectors consistent with other core Angular selectors,
             * as element selectors are typically written in kebab-case.
             *
             * Now deprecated:
             * ```html
             * <ngForm #myForm="ngForm">
             * ```
             *
             * After:
             * ```html
             * <ng-form #myForm="ngForm">
             * ```
             *
             * ### Listening for form submission
             *
             * The following example shows how to capture the form values from the "ngSubmit" event.
             *
             * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
             *
             * ### Setting the update options
             *
             * The following example shows you how to change the "updateOn" option from its default using
             * ngFormOptions.
             *
             * ```html
             * <form [ngFormOptions]="{updateOn: 'blur'}">
             *    <input name="one" ngModel>  <!-- this ngModel will update on blur -->
             * </form>
             * ```
             *
             * \@ngModule FormsModule
             * \@publicApi
             */
            var NgForm = /** @class */ (function (_super) {
                __extends(NgForm, _super);
                /**
                 * @param {?} validators
                 * @param {?} asyncValidators
                 */
                function NgForm(validators, asyncValidators) {
                    var _this = _super.call(this) || this;
                    /**
                     * \@description
                     * Returns whether the form submission has been triggered.
                     */
                    _this.submitted = false;
                    _this._directives = [];
                    /**
                     * \@description
                     * Event emitter for the "ngSubmit" event
                     */
                    _this.ngSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    _this.form =
                        new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
                    return _this;
                }
                /**
                 * \@description
                 * Lifecycle method called after the view is initialized. For internal use only.
                 * @return {?}
                 */
                NgForm.prototype.ngAfterViewInit = function () { this._setUpdateStrategy(); };
                Object.defineProperty(NgForm.prototype, "formDirective", {
                    /**
                     * \@description
                     * The directive instance.
                     * @return {?}
                     */
                    get: function () { return this; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgForm.prototype, "control", {
                    /**
                     * \@description
                     * The internal `FormGroup` instance.
                     * @return {?}
                     */
                    get: function () { return this.form; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgForm.prototype, "path", {
                    /**
                     * \@description
                     * Returns an array representing the path to this group. Because this directive
                     * always lives at the top level of a form, it is always an empty array.
                     * @return {?}
                     */
                    get: function () { return []; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgForm.prototype, "controls", {
                    /**
                     * \@description
                     * Returns a map of the controls in this group.
                     * @return {?}
                     */
                    get: function () { return this.form.controls; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@description
                 * Method that sets up the control directive in this group, re-calculates its value
                 * and validity, and adds the instance to the internal list of directives.
                 *
                 * @param {?} dir The `NgModel` directive instance.
                 * @return {?}
                 */
                NgForm.prototype.addControl = function (dir) {
                    var _this = this;
                    resolvedPromise.then(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var container = _this._findContainer(dir.path);
                        (( /** @type {?} */(dir))).control =
                            ( /** @type {?} */(container.registerControl(dir.name, dir.control)));
                        setUpControl(dir.control, dir);
                        dir.control.updateValueAndValidity({ emitEvent: false });
                        _this._directives.push(dir);
                    }));
                };
                /**
                 * \@description
                 * Retrieves the `FormControl` instance from the provided `NgModel` directive.
                 *
                 * @param {?} dir The `NgModel` directive instance.
                 * @return {?}
                 */
                NgForm.prototype.getControl = function (dir) { return ( /** @type {?} */(this.form.get(dir.path))); };
                /**
                 * \@description
                 * Removes the `NgModel` instance from the internal list of directives
                 *
                 * @param {?} dir The `NgModel` directive instance.
                 * @return {?}
                 */
                NgForm.prototype.removeControl = function (dir) {
                    var _this = this;
                    resolvedPromise.then(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var container = _this._findContainer(dir.path);
                        if (container) {
                            container.removeControl(dir.name);
                        }
                        removeDir(_this._directives, dir);
                    }));
                };
                /**
                 * \@description
                 * Adds a new `NgModelGroup` directive instance to the form.
                 *
                 * @param {?} dir The `NgModelGroup` directive instance.
                 * @return {?}
                 */
                NgForm.prototype.addFormGroup = function (dir) {
                    var _this = this;
                    resolvedPromise.then(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var container = _this._findContainer(dir.path);
                        /** @type {?} */
                        var group = new FormGroup({});
                        setUpFormContainer(group, dir);
                        container.registerControl(dir.name, group);
                        group.updateValueAndValidity({ emitEvent: false });
                    }));
                };
                /**
                 * \@description
                 * Removes the `NgModelGroup` directive instance from the form.
                 *
                 * @param {?} dir The `NgModelGroup` directive instance.
                 * @return {?}
                 */
                NgForm.prototype.removeFormGroup = function (dir) {
                    var _this = this;
                    resolvedPromise.then(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var container = _this._findContainer(dir.path);
                        if (container) {
                            container.removeControl(dir.name);
                        }
                    }));
                };
                /**
                 * \@description
                 * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance
                 *
                 * @param {?} dir The `NgModelGroup` directive instance.
                 * @return {?}
                 */
                NgForm.prototype.getFormGroup = function (dir) { return ( /** @type {?} */(this.form.get(dir.path))); };
                /**
                 * Sets the new value for the provided `NgControl` directive.
                 *
                 * @param {?} dir The `NgControl` directive instance.
                 * @param {?} value The new value for the directive's control.
                 * @return {?}
                 */
                NgForm.prototype.updateModel = function (dir, value) {
                    var _this = this;
                    resolvedPromise.then(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var ctrl = ( /** @type {?} */(_this.form.get(( /** @type {?} */(dir.path)))));
                        ctrl.setValue(value);
                    }));
                };
                /**
                 * \@description
                 * Sets the value for this `FormGroup`.
                 *
                 * @param {?} value The new value
                 * @return {?}
                 */
                NgForm.prototype.setValue = function (value) { this.control.setValue(value); };
                /**
                 * \@description
                 * Method called when the "submit" event is triggered on the form.
                 * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
                 *
                 * @param {?} $event The "submit" event object
                 * @return {?}
                 */
                NgForm.prototype.onSubmit = function ($event) {
                    (( /** @type {?} */(this))).submitted = true;
                    syncPendingControls(this.form, this._directives);
                    this.ngSubmit.emit($event);
                    return false;
                };
                /**
                 * \@description
                 * Method called when the "reset" event is triggered on the form.
                 * @return {?}
                 */
                NgForm.prototype.onReset = function () { this.resetForm(); };
                /**
                 * \@description
                 * Resets the form to an initial value and resets its submitted status.
                 *
                 * @param {?=} value The new value for the form.
                 * @return {?}
                 */
                NgForm.prototype.resetForm = function (value) {
                    if (value === void 0) { value = undefined; }
                    this.form.reset(value);
                    (( /** @type {?} */(this))).submitted = false;
                };
                /**
                 * @private
                 * @return {?}
                 */
                NgForm.prototype._setUpdateStrategy = function () {
                    if (this.options && this.options.updateOn != null) {
                        this.form._updateOn = this.options.updateOn;
                    }
                };
                /**
                 * \@internal
                 * @param {?} path
                 * @return {?}
                 */
                NgForm.prototype._findContainer = function (path) {
                    path.pop();
                    return path.length ? ( /** @type {?} */(this.form.get(path))) : this.form;
                };
                return NgForm;
            }(ControlContainer));
            NgForm.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,ng-form,[ngForm]',
                            providers: [formDirectiveProvider],
                            host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
                            outputs: ['ngSubmit'],
                            exportAs: 'ngForm'
                        },] }
            ];
            /** @nocollapse */
            NgForm.ctorParameters = function () { return [
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_VALIDATORS,] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_ASYNC_VALIDATORS,] }] }
            ]; };
            NgForm.propDecorators = {
                options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['ngFormOptions',] }]
            };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var TemplateDrivenErrors = /** @class */ (function () {
                function TemplateDrivenErrors() {
                }
                /**
                 * @return {?}
                 */
                TemplateDrivenErrors.modelParentException = function () {
                    throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + FormErrorExamples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + FormErrorExamples.ngModelWithFormGroup);
                };
                /**
                 * @return {?}
                 */
                TemplateDrivenErrors.formGroupNameException = function () {
                    throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
                };
                /**
                 * @return {?}
                 */
                TemplateDrivenErrors.missingNameException = function () {
                    throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
                };
                /**
                 * @return {?}
                 */
                TemplateDrivenErrors.modelGroupParentException = function () {
                    throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
                };
                /**
                 * @return {?}
                 */
                TemplateDrivenErrors.ngFormWarning = function () {
                    console.warn("\n    It looks like you're using 'ngForm'.\n\n    Support for using the 'ngForm' element selector has been deprecated in Angular v6 and will be removed\n    in Angular v9.\n\n    Use 'ng-form' instead.\n\n    Before:\n    <ngForm #myForm=\"ngForm\">\n\n    After:\n    <ng-form #myForm=\"ngForm\">\n    ");
                };
                return TemplateDrivenErrors;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@description
             * `InjectionToken` to provide to turn off the warning when using 'ngForm' deprecated selector.
             * @type {?}
             */
            var NG_FORM_SELECTOR_WARNING = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgFormSelectorWarning');
            /**
             * This directive is solely used to display warnings when the deprecated `ngForm` selector is used.
             *
             * @deprecated in Angular v6 and will be removed in Angular v9.
             * \@ngModule FormsModule
             * \@publicApi
             */
            var NgFormSelectorWarning = /** @class */ (function () {
                /**
                 * @param {?} ngFormWarning
                 */
                function NgFormSelectorWarning(ngFormWarning) {
                    if (((!ngFormWarning || ngFormWarning === 'once') && !NgFormSelectorWarning._ngFormWarning) ||
                        ngFormWarning === 'always') {
                        TemplateDrivenErrors.ngFormWarning();
                        NgFormSelectorWarning._ngFormWarning = true;
                    }
                }
                return NgFormSelectorWarning;
            }());
            /**
             * Static property used to track whether the deprecation warning for this selector has been sent.
             * Used to support warning config of "once".
             *
             * \@internal
             */
            NgFormSelectorWarning._ngFormWarning = false;
            NgFormSelectorWarning.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: 'ngForm' },] }
            ];
            /** @nocollapse */
            NgFormSelectorWarning.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_FORM_SELECTOR_WARNING,] }] }
            ]; };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@description
             * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.
             *
             * \@publicApi
             */
            var AbstractFormGroupDirective = /** @class */ (function (_super) {
                __extends(AbstractFormGroupDirective, _super);
                function AbstractFormGroupDirective() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * \@description
                 * An internal callback method triggered on the instance after the inputs are set.
                 * Registers the group with its parent group.
                 * @return {?}
                 */
                AbstractFormGroupDirective.prototype.ngOnInit = function () {
                    this._checkParentType();
                    ( /** @type {?} */(this.formDirective)).addFormGroup(this);
                };
                /**
                 * \@description
                 * An internal callback method triggered before the instance is destroyed.
                 * Removes the group from its parent group.
                 * @return {?}
                 */
                AbstractFormGroupDirective.prototype.ngOnDestroy = function () {
                    if (this.formDirective) {
                        this.formDirective.removeFormGroup(this);
                    }
                };
                Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
                    /**
                     * \@description
                     * The `FormGroup` bound to this directive.
                     * @return {?}
                     */
                    get: function () { return ( /** @type {?} */(this.formDirective)).getFormGroup(this); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
                    /**
                     * \@description
                     * The path to this group from the top-level directive.
                     * @return {?}
                     */
                    get: function () { return controlPath(this.name, this._parent); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
                    /**
                     * \@description
                     * The top-level directive for this group if present, otherwise null.
                     * @return {?}
                     */
                    get: function () { return this._parent ? this._parent.formDirective : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
                    /**
                     * \@description
                     * The synchronous validators registered with this group.
                     * @return {?}
                     */
                    get: function () { return composeValidators(this._validators); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
                    /**
                     * \@description
                     * The async validators registered with this group.
                     * @return {?}
                     */
                    get: function () {
                        return composeAsyncValidators(this._asyncValidators);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@internal
                 * @return {?}
                 */
                AbstractFormGroupDirective.prototype._checkParentType = function () { };
                return AbstractFormGroupDirective;
            }(ControlContainer));
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var modelGroupProvider = {
                provide: ControlContainer,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return NgModelGroup; }))
            };
            /**
             * \@description
             * Creates and binds a `FormGroup` instance to a DOM element.
             *
             * This directive can only be used as a child of `NgForm` (within `<form>` tags).
             *
             * Use this directive to validate a sub-group of your form separately from the
             * rest of your form, or if some values in your domain model make more sense
             * to consume together in a nested object.
             *
             * Provide a name for the sub-group and it will become the key
             * for the sub-group in the form's full value. If you need direct access, export the directive into
             * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
             *
             * \@usageNotes
             *
             * ### Consuming controls in a grouping
             *
             * The following example shows you how to combine controls together in a sub-group
             * of the form.
             *
             * {\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
             *
             * \@ngModule FormsModule
             * \@publicApi
             */
            var NgModelGroup = /** @class */ (function (_super) {
                __extends(NgModelGroup, _super);
                /**
                 * @param {?} parent
                 * @param {?} validators
                 * @param {?} asyncValidators
                 */
                function NgModelGroup(parent, validators, asyncValidators) {
                    var _this = _super.call(this) || this;
                    _this._parent = parent;
                    _this._validators = validators;
                    _this._asyncValidators = asyncValidators;
                    return _this;
                }
                /**
                 * \@internal
                 * @return {?}
                 */
                NgModelGroup.prototype._checkParentType = function () {
                    if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
                        TemplateDrivenErrors.modelGroupParentException();
                    }
                };
                return NgModelGroup;
            }(AbstractFormGroupDirective));
            NgModelGroup.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] }
            ];
            /** @nocollapse */
            NgModelGroup.ctorParameters = function () { return [
                { type: ControlContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_VALIDATORS,] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_ASYNC_VALIDATORS,] }] }
            ]; };
            NgModelGroup.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['ngModelGroup',] }]
            };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var formControlBinding = {
                provide: NgControl,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return NgModel; }))
            };
            var ɵ0$1 = /**
             * @return {?}
             */ function () { return Promise.resolve(null); };
            /**
             * `ngModel` forces an additional change detection run when its inputs change:
             * E.g.:
             * ```
             * <div>{{myModel.valid}}</div>
             * <input [(ngModel)]="myValue" #myModel="ngModel">
             * ```
             * I.e. `ngModel` can export itself on the element and then be used in the template.
             * Normally, this would result in expressions before the `input` that use the exported directive
             * to have and old value as they have been
             * dirty checked before. As this is a very common case for `ngModel`, we added this second change
             * detection run.
             *
             * Notes:
             * - this is just one extra run no matter how many `ngModel` have been changed.
             * - this is a general problem when using `exportAs` for directives!
             * @type {?}
             */
            var resolvedPromise$1 = ((ɵ0$1))();
            /**
             * \@description
             * Creates a `FormControl` instance from a domain model and binds it
             * to a form control element.
             *
             * The `FormControl` instance tracks the value, user interaction, and
             * validation status of the control and keeps the view synced with the model. If used
             * within a parent form, the directive also registers itself with the form as a child
             * control.
             *
             * This directive is used by itself or as part of a larger form. Use the
             * `ngModel` selector to activate it.
             *
             * It accepts a domain model as an optional `Input`. If you have a one-way binding
             * to `ngModel` with `[]` syntax, changing the value of the domain model in the component
             * class sets the value in the view. If you have a two-way binding with `[()]` syntax
             * (also known as 'banana-box syntax'), the value in the UI always syncs back to
             * the domain model in your class.
             *
             * To inspect the properties of the associated `FormControl` (like validity state),
             * export the directive into a local template variable using `ngModel` as the key (ex: `#myVar="ngModel"`).
             * You then access the control using the directive's `control` property,
             * but most properties used (like `valid` and `dirty`) fall through to the control anyway for direct access.
             * See a full list of properties directly available in `AbstractControlDirective`.
             *
             * @see `RadioControlValueAccessor`
             * @see `SelectControlValueAccessor`
             *
             * \@usageNotes
             *
             * ### Using ngModel on a standalone control
             *
             * The following examples show a simple standalone control using `ngModel`:
             *
             * {\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
             *
             * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
             * so that the control can be registered with the parent form under that name.
             *
             * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,
             * as the parent form syncs the value for you. You access its properties by exporting it into a
             * local template variable using `ngForm` such as (`#f="ngForm"`). Use the variable where
             * needed on form submission.
             *
             * If you do need to populate initial values into your form, using a one-way binding for
             * `ngModel` tends to be sufficient as long as you use the exported form's value rather
             * than the domain model's value on submit.
             *
             * ### Using ngModel within a form
             *
             * The following example shows controls using `ngModel` within a form:
             *
             * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
             *
             * ### Using a standalone ngModel within a group
             *
             * The following example shows you how to use a standalone ngModel control
             * within a form. This controls the display of the form, but doesn't contain form data.
             *
             * ```html
             * <form>
             *   <input name="login" ngModel placeholder="Login">
             *   <input type="checkbox" ngModel [ngModelOptions]="{standalone: true}"> Show more options?
             * </form>
             * <!-- form value: {login: ''} -->
             * ```
             *
             * ### Setting the ngModel name attribute through options
             *
             * The following example shows you an alternate way to set the name attribute. The name attribute is used
             * within a custom form component, and the name `\@Input` property serves a different purpose.
             *
             * ```html
             * <form>
             *   <my-person-control name="Nancy" ngModel [ngModelOptions]="{name: 'user'}">
             *   </my-person-control>
             * </form>
             * <!-- form value: {user: ''} -->
             * ```
             *
             * \@ngModule FormsModule
             * \@publicApi
             */
            var NgModel = /** @class */ (function (_super) {
                __extends(NgModel, _super);
                /**
                 * @param {?} parent
                 * @param {?} validators
                 * @param {?} asyncValidators
                 * @param {?} valueAccessors
                 */
                function NgModel(parent, validators, asyncValidators, valueAccessors) {
                    var _this = _super.call(this) || this;
                    _this.control = new FormControl();
                    /**
                     * \@internal
                     */
                    _this._registered = false;
                    /**
                     * \@description
                     * Event emitter for producing the `ngModelChange` event after
                     * the view model updates.
                     */
                    _this.update = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    _this._parent = parent;
                    _this._rawValidators = validators || [];
                    _this._rawAsyncValidators = asyncValidators || [];
                    _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
                    return _this;
                }
                /**
                 * \@description
                 * A lifecycle method called when the directive's inputs change. For internal use
                 * only.
                 *
                 * @param {?} changes A object of key/value pairs for the set of changed inputs.
                 * @return {?}
                 */
                NgModel.prototype.ngOnChanges = function (changes) {
                    this._checkForErrors();
                    if (!this._registered)
                        this._setUpControl();
                    if ('isDisabled' in changes) {
                        this._updateDisabled(changes);
                    }
                    if (isPropertyUpdated(changes, this.viewModel)) {
                        this._updateValue(this.model);
                        this.viewModel = this.model;
                    }
                };
                /**
                 * \@description
                 * Lifecycle method called before the directive's instance is destroyed. For internal
                 * use only.
                 * @return {?}
                 */
                NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };
                Object.defineProperty(NgModel.prototype, "path", {
                    /**
                     * \@description
                     * Returns an array that represents the path from the top-level form to this control.
                     * Each index is the string name of the control on that level.
                     * @return {?}
                     */
                    get: function () {
                        return this._parent ? controlPath(this.name, this._parent) : [this.name];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgModel.prototype, "formDirective", {
                    /**
                     * \@description
                     * The top-level directive for this control if present, otherwise null.
                     * @return {?}
                     */
                    get: function () { return this._parent ? this._parent.formDirective : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgModel.prototype, "validator", {
                    /**
                     * \@description
                     * Synchronous validator function composed of all the synchronous validators
                     * registered with this directive.
                     * @return {?}
                     */
                    get: function () { return composeValidators(this._rawValidators); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgModel.prototype, "asyncValidator", {
                    /**
                     * \@description
                     * Async validator function composed of all the async validators registered with this
                     * directive.
                     * @return {?}
                     */
                    get: function () {
                        return composeAsyncValidators(this._rawAsyncValidators);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@description
                 * Sets the new value for the view model and emits an `ngModelChange` event.
                 *
                 * @param {?} newValue The new value emitted by `ngModelChange`.
                 * @return {?}
                 */
                NgModel.prototype.viewToModelUpdate = function (newValue) {
                    this.viewModel = newValue;
                    this.update.emit(newValue);
                };
                /**
                 * @private
                 * @return {?}
                 */
                NgModel.prototype._setUpControl = function () {
                    this._setUpdateStrategy();
                    this._isStandalone() ? this._setUpStandalone() :
                        this.formDirective.addControl(this);
                    this._registered = true;
                };
                /**
                 * @private
                 * @return {?}
                 */
                NgModel.prototype._setUpdateStrategy = function () {
                    if (this.options && this.options.updateOn != null) {
                        this.control._updateOn = this.options.updateOn;
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                NgModel.prototype._isStandalone = function () {
                    return !this._parent || !!(this.options && this.options.standalone);
                };
                /**
                 * @private
                 * @return {?}
                 */
                NgModel.prototype._setUpStandalone = function () {
                    setUpControl(this.control, this);
                    this.control.updateValueAndValidity({ emitEvent: false });
                };
                /**
                 * @private
                 * @return {?}
                 */
                NgModel.prototype._checkForErrors = function () {
                    if (!this._isStandalone()) {
                        this._checkParentType();
                    }
                    this._checkName();
                };
                /**
                 * @private
                 * @return {?}
                 */
                NgModel.prototype._checkParentType = function () {
                    if (!(this._parent instanceof NgModelGroup) &&
                        this._parent instanceof AbstractFormGroupDirective) {
                        TemplateDrivenErrors.formGroupNameException();
                    }
                    else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
                        TemplateDrivenErrors.modelParentException();
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                NgModel.prototype._checkName = function () {
                    if (this.options && this.options.name)
                        this.name = this.options.name;
                    if (!this._isStandalone() && !this.name) {
                        TemplateDrivenErrors.missingNameException();
                    }
                };
                /**
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                NgModel.prototype._updateValue = function (value) {
                    var _this = this;
                    resolvedPromise$1.then(( /**
                     * @return {?}
                     */function () { _this.control.setValue(value, { emitViewToModelChange: false }); }));
                };
                /**
                 * @private
                 * @param {?} changes
                 * @return {?}
                 */
                NgModel.prototype._updateDisabled = function (changes) {
                    var _this = this;
                    /** @type {?} */
                    var disabledValue = changes['isDisabled'].currentValue;
                    /** @type {?} */
                    var isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');
                    resolvedPromise$1.then(( /**
                     * @return {?}
                     */function () {
                        if (isDisabled && !_this.control.disabled) {
                            _this.control.disable();
                        }
                        else if (!isDisabled && _this.control.disabled) {
                            _this.control.enable();
                        }
                    }));
                };
                return NgModel;
            }(NgControl));
            NgModel.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[ngModel]:not([formControlName]):not([formControl])',
                            providers: [formControlBinding],
                            exportAs: 'ngModel'
                        },] }
            ];
            /** @nocollapse */
            NgModel.ctorParameters = function () { return [
                { type: ControlContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_VALIDATORS,] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_ASYNC_VALIDATORS,] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_VALUE_ACCESSOR,] }] }
            ]; };
            NgModel.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                isDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['disabled',] }],
                model: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['ngModel',] }],
                options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['ngModelOptions',] }],
                update: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"], args: ['ngModelChange',] }]
            };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@description
             *
             * Adds `novalidate` attribute to all forms by default.
             *
             * `novalidate` is used to disable browser's native form validation.
             *
             * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:
             *
             * ```
             * <form ngNativeValidate></form>
             * ```
             *
             * \@publicApi
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             */
            var ɵNgNoValidate = /** @class */ (function () {
                function ɵNgNoValidate() {
                }
                return ɵNgNoValidate;
            }());
            ɵNgNoValidate.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'form:not([ngNoForm]):not([ngNativeValidate])',
                            host: { 'novalidate': '' },
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Token to provide to turn off the ngModel warning on formControl and formControlName.
             * @type {?}
             */
            var NG_MODEL_WITH_FORM_CONTROL_WARNING = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('NgModelWithFormControlWarning');
            /** @type {?} */
            var formControlBinding$1 = {
                provide: NgControl,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return FormControlDirective; }))
            };
            /**
             * \@description
             * * Syncs a standalone `FormControl` instance to a form control element.
             *
             * @see [Reactive Forms Guide](guide/reactive-forms)
             * @see `FormControl`
             * @see `AbstractControl`
             *
             * \@usageNotes
             *
             * ### Registering a single form control
             *
             * The following examples shows how to register a standalone control and set its value.
             *
             * {\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
             *
             * ### Use with ngModel
             *
             * Support for using the `ngModel` input property and `ngModelChange` event with reactive
             * form directives has been deprecated in Angular v6 and will be removed in Angular v7.
             *
             * Now deprecated:
             *
             * ```html
             * <input [formControl]="control" [(ngModel)]="value">
             * ```
             *
             * ```ts
             * this.value = 'some value';
             * ```
             *
             * This has been deprecated for a few reasons. First, developers have found this pattern
             * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's
             * an input/output property named `ngModel` on the reactive form directive that simply
             * approximates (some of) its behavior. Specifically, it allows getting/setting the value
             * and intercepting value events. However, some of `ngModel`'s other features - like
             * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,
             * which has understandably caused some confusion.
             *
             * In addition, this pattern mixes template-driven and reactive forms strategies, which
             * we generally don't recommend because it doesn't take advantage of the full benefits of
             * either strategy. Setting the value in the template violates the template-agnostic
             * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in
             * the class removes the convenience of defining forms in the template.
             *
             * To update your code before v7, you'll want to decide whether to stick with reactive form
             * directives (and get/set values using reactive forms patterns) or switch over to
             * template-driven directives.
             *
             * After (choice 1 - use reactive forms):
             *
             * ```html
             * <input [formControl]="control">
             * ```
             *
             * ```ts
             * this.control.setValue('some value');
             * ```
             *
             * After (choice 2 - use template-driven forms):
             *
             * ```html
             * <input [(ngModel)]="value">
             * ```
             *
             * ```ts
             * this.value = 'some value';
             * ```
             *
             * By default, when you use this pattern, you will see a deprecation warning once in dev
             * mode. You can choose to silence this warning by providing a config for
             * `ReactiveFormsModule` at import time:
             *
             * ```ts
             * imports: [
             *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});
             * ]
             * ```
             *
             * Alternatively, you can choose to surface a separate warning for each instance of this
             * pattern with a config value of `"always"`. This may help to track down where in the code
             * the pattern is being used as the code is being updated.
             *
             * \@ngModule ReactiveFormsModule
             * \@publicApi
             */
            var FormControlDirective = /** @class */ (function (_super) {
                __extends(FormControlDirective, _super);
                /**
                 * @param {?} validators
                 * @param {?} asyncValidators
                 * @param {?} valueAccessors
                 * @param {?} _ngModelWarningConfig
                 */
                function FormControlDirective(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
                    var _this = _super.call(this) || this;
                    _this._ngModelWarningConfig = _ngModelWarningConfig;
                    /**
                     * @deprecated as of v6
                     */
                    _this.update = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * \@description
                     * Instance property used to track whether an ngModel warning has been sent out for this
                     * particular `FormControlDirective` instance. Used to support warning config of "always".
                     *
                     * \@internal
                     */
                    _this._ngModelWarningSent = false;
                    _this._rawValidators = validators || [];
                    _this._rawAsyncValidators = asyncValidators || [];
                    _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
                    return _this;
                }
                Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
                    /**
                     * \@description
                     * Triggers a warning that this input should not be used with reactive forms.
                     * @param {?} isDisabled
                     * @return {?}
                     */
                    set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@description
                 * A lifecycle method called when the directive's inputs change. For internal use
                 * only.
                 *
                 * @param {?} changes A object of key/value pairs for the set of changed inputs.
                 * @return {?}
                 */
                FormControlDirective.prototype.ngOnChanges = function (changes) {
                    if (this._isControlChanged(changes)) {
                        setUpControl(this.form, this);
                        if (this.control.disabled && ( /** @type {?} */(this.valueAccessor)).setDisabledState) {
                            ( /** @type {?} */(( /** @type {?} */(this.valueAccessor)).setDisabledState))(true);
                        }
                        this.form.updateValueAndValidity({ emitEvent: false });
                    }
                    if (isPropertyUpdated(changes, this.viewModel)) {
                        _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);
                        this.form.setValue(this.model);
                        this.viewModel = this.model;
                    }
                };
                Object.defineProperty(FormControlDirective.prototype, "path", {
                    /**
                     * \@description
                     * Returns an array that represents the path from the top-level form to this control.
                     * Each index is the string name of the control on that level.
                     * @return {?}
                     */
                    get: function () { return []; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FormControlDirective.prototype, "validator", {
                    /**
                     * \@description
                     * Synchronous validator function composed of all the synchronous validators
                     * registered with this directive.
                     * @return {?}
                     */
                    get: function () { return composeValidators(this._rawValidators); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
                    /**
                     * \@description
                     * Async validator function composed of all the async validators registered with this
                     * directive.
                     * @return {?}
                     */
                    get: function () {
                        return composeAsyncValidators(this._rawAsyncValidators);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FormControlDirective.prototype, "control", {
                    /**
                     * \@description
                     * The `FormControl` bound to this directive.
                     * @return {?}
                     */
                    get: function () { return this.form; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@description
                 * Sets the new value for the view model and emits an `ngModelChange` event.
                 *
                 * @param {?} newValue The new value for the view model.
                 * @return {?}
                 */
                FormControlDirective.prototype.viewToModelUpdate = function (newValue) {
                    this.viewModel = newValue;
                    this.update.emit(newValue);
                };
                /**
                 * @private
                 * @param {?} changes
                 * @return {?}
                 */
                FormControlDirective.prototype._isControlChanged = function (changes) {
                    return changes.hasOwnProperty('form');
                };
                return FormControlDirective;
            }(NgControl));
            /**
             * \@description
             * Static property used to track whether any ngModel warnings have been sent across
             * all instances of FormControlDirective. Used to support warning config of "once".
             *
             * \@internal
             */
            FormControlDirective._ngModelWarningSentOnce = false;
            FormControlDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] }
            ];
            /** @nocollapse */
            FormControlDirective.ctorParameters = function () { return [
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_VALIDATORS,] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_ASYNC_VALIDATORS,] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_VALUE_ACCESSOR,] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }
            ]; };
            FormControlDirective.propDecorators = {
                form: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['formControl',] }],
                isDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['disabled',] }],
                model: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['ngModel',] }],
                update: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"], args: ['ngModelChange',] }]
            };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var formDirectiveProvider$1 = {
                provide: ControlContainer,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return FormGroupDirective; }))
            };
            /**
             * \@description
             *
             * Binds an existing `FormGroup` to a DOM element.
             *
             * This directive accepts an existing `FormGroup` instance. It will then use this
             * `FormGroup` instance to match any child `FormControl`, `FormGroup`,
             * and `FormArray` instances to child `FormControlName`, `FormGroupName`,
             * and `FormArrayName` directives.
             *
             * @see [Reactive Forms Guide](guide/reactive-forms)
             * @see `AbstractControl`
             *
             * ### Register Form Group
             *
             * The following example registers a `FormGroup` with first name and last name controls,
             * and listens for the *ngSubmit* event when the button is clicked.
             *
             * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
             *
             * \@ngModule ReactiveFormsModule
             * \@publicApi
             */
            var FormGroupDirective = /** @class */ (function (_super) {
                __extends(FormGroupDirective, _super);
                /**
                 * @param {?} _validators
                 * @param {?} _asyncValidators
                 */
                function FormGroupDirective(_validators, _asyncValidators) {
                    var _this = _super.call(this) || this;
                    _this._validators = _validators;
                    _this._asyncValidators = _asyncValidators;
                    /**
                     * \@description
                     * Reports whether the form submission has been triggered.
                     */
                    _this.submitted = false;
                    /**
                     * \@description
                     * Tracks the list of added `FormControlName` instances
                     */
                    _this.directives = [];
                    /**
                     * \@description
                     * Tracks the `FormGroup` bound to this directive.
                     */
                    _this.form = ( /** @type {?} */(null));
                    /**
                     * \@description
                     * Emits an event when the form submission has been triggered.
                     */
                    _this.ngSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    return _this;
                }
                /**
                 * \@description
                 * A lifecycle method called when the directive's inputs change. For internal use only.
                 *
                 * @param {?} changes A object of key/value pairs for the set of changed inputs.
                 * @return {?}
                 */
                FormGroupDirective.prototype.ngOnChanges = function (changes) {
                    this._checkFormPresent();
                    if (changes.hasOwnProperty('form')) {
                        this._updateValidators();
                        this._updateDomValue();
                        this._updateRegistrations();
                    }
                };
                Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
                    /**
                     * \@description
                     * Returns this directive's instance.
                     * @return {?}
                     */
                    get: function () { return this; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FormGroupDirective.prototype, "control", {
                    /**
                     * \@description
                     * Returns the `FormGroup` bound to this directive.
                     * @return {?}
                     */
                    get: function () { return this.form; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FormGroupDirective.prototype, "path", {
                    /**
                     * \@description
                     * Returns an array representing the path to this group. Because this directive
                     * always lives at the top level of a form, it always an empty array.
                     * @return {?}
                     */
                    get: function () { return []; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@description
                 * Method that sets up the control directive in this group, re-calculates its value
                 * and validity, and adds the instance to the internal list of directives.
                 *
                 * @param {?} dir The `FormControlName` directive instance.
                 * @return {?}
                 */
                FormGroupDirective.prototype.addControl = function (dir) {
                    /** @type {?} */
                    var ctrl = this.form.get(dir.path);
                    setUpControl(ctrl, dir);
                    ctrl.updateValueAndValidity({ emitEvent: false });
                    this.directives.push(dir);
                    return ctrl;
                };
                /**
                 * \@description
                 * Retrieves the `FormControl` instance from the provided `FormControlName` directive
                 *
                 * @param {?} dir The `FormControlName` directive instance.
                 * @return {?}
                 */
                FormGroupDirective.prototype.getControl = function (dir) { return ( /** @type {?} */(this.form.get(dir.path))); };
                /**
                 * \@description
                 * Removes the `FormControlName` instance from the internal list of directives
                 *
                 * @param {?} dir The `FormControlName` directive instance.
                 * @return {?}
                 */
                FormGroupDirective.prototype.removeControl = function (dir) { removeDir(this.directives, dir); };
                /**
                 * Adds a new `FormGroupName` directive instance to the form.
                 *
                 * @param {?} dir The `FormGroupName` directive instance.
                 * @return {?}
                 */
                FormGroupDirective.prototype.addFormGroup = function (dir) {
                    /** @type {?} */
                    var ctrl = this.form.get(dir.path);
                    setUpFormContainer(ctrl, dir);
                    ctrl.updateValueAndValidity({ emitEvent: false });
                };
                /**
                 * No-op method to remove the form group.
                 *
                 * @param {?} dir The `FormGroupName` directive instance.
                 * @return {?}
                 */
                FormGroupDirective.prototype.removeFormGroup = function (dir) { };
                /**
                 * \@description
                 * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance
                 *
                 * @param {?} dir The `FormGroupName` directive instance.
                 * @return {?}
                 */
                FormGroupDirective.prototype.getFormGroup = function (dir) { return ( /** @type {?} */(this.form.get(dir.path))); };
                /**
                 * Adds a new `FormArrayName` directive instance to the form.
                 *
                 * @param {?} dir The `FormArrayName` directive instance.
                 * @return {?}
                 */
                FormGroupDirective.prototype.addFormArray = function (dir) {
                    /** @type {?} */
                    var ctrl = this.form.get(dir.path);
                    setUpFormContainer(ctrl, dir);
                    ctrl.updateValueAndValidity({ emitEvent: false });
                };
                /**
                 * No-op method to remove the form array.
                 *
                 * @param {?} dir The `FormArrayName` directive instance.
                 * @return {?}
                 */
                FormGroupDirective.prototype.removeFormArray = function (dir) { };
                /**
                 * \@description
                 * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.
                 *
                 * @param {?} dir The `FormArrayName` directive instance.
                 * @return {?}
                 */
                FormGroupDirective.prototype.getFormArray = function (dir) { return ( /** @type {?} */(this.form.get(dir.path))); };
                /**
                 * Sets the new value for the provided `FormControlName` directive.
                 *
                 * @param {?} dir The `FormControlName` directive instance.
                 * @param {?} value The new value for the directive's control.
                 * @return {?}
                 */
                FormGroupDirective.prototype.updateModel = function (dir, value) {
                    /** @type {?} */
                    var ctrl = ( /** @type {?} */(this.form.get(dir.path)));
                    ctrl.setValue(value);
                };
                /**
                 * \@description
                 * Method called with the "submit" event is triggered on the form.
                 * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
                 *
                 * @param {?} $event The "submit" event object
                 * @return {?}
                 */
                FormGroupDirective.prototype.onSubmit = function ($event) {
                    (( /** @type {?} */(this))).submitted = true;
                    syncPendingControls(this.form, this.directives);
                    this.ngSubmit.emit($event);
                    return false;
                };
                /**
                 * \@description
                 * Method called when the "reset" event is triggered on the form.
                 * @return {?}
                 */
                FormGroupDirective.prototype.onReset = function () { this.resetForm(); };
                /**
                 * \@description
                 * Resets the form to an initial value and resets its submitted status.
                 *
                 * @param {?=} value The new value for the form.
                 * @return {?}
                 */
                FormGroupDirective.prototype.resetForm = function (value) {
                    if (value === void 0) { value = undefined; }
                    this.form.reset(value);
                    (( /** @type {?} */(this))).submitted = false;
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                FormGroupDirective.prototype._updateDomValue = function () {
                    var _this = this;
                    this.directives.forEach(( /**
                     * @param {?} dir
                     * @return {?}
                     */function (/**
                     * @param {?} dir
                     * @return {?}
                     */ dir) {
                        /** @type {?} */
                        var newCtrl = _this.form.get(dir.path);
                        if (dir.control !== newCtrl) {
                            cleanUpControl(dir.control, dir);
                            if (newCtrl)
                                setUpControl(newCtrl, dir);
                            (( /** @type {?} */(dir))).control = newCtrl;
                        }
                    }));
                    this.form._updateTreeValidity({ emitEvent: false });
                };
                /**
                 * @private
                 * @return {?}
                 */
                FormGroupDirective.prototype._updateRegistrations = function () {
                    var _this = this;
                    this.form._registerOnCollectionChange(( /**
                     * @return {?}
                     */function () { return _this._updateDomValue(); }));
                    if (this._oldForm)
                        this._oldForm._registerOnCollectionChange(( /**
                         * @return {?}
                         */function () { }));
                    this._oldForm = this.form;
                };
                /**
                 * @private
                 * @return {?}
                 */
                FormGroupDirective.prototype._updateValidators = function () {
                    /** @type {?} */
                    var sync = composeValidators(this._validators);
                    this.form.validator = Validators.compose([( /** @type {?} */(this.form.validator)), ( /** @type {?} */(sync))]);
                    /** @type {?} */
                    var async = composeAsyncValidators(this._asyncValidators);
                    this.form.asyncValidator = Validators.composeAsync([( /** @type {?} */(this.form.asyncValidator)), ( /** @type {?} */(async))]);
                };
                /**
                 * @private
                 * @return {?}
                 */
                FormGroupDirective.prototype._checkFormPresent = function () {
                    if (!this.form) {
                        ReactiveErrors.missingFormException();
                    }
                };
                return FormGroupDirective;
            }(ControlContainer));
            FormGroupDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[formGroup]',
                            providers: [formDirectiveProvider$1],
                            host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
                            exportAs: 'ngForm'
                        },] }
            ];
            /** @nocollapse */
            FormGroupDirective.ctorParameters = function () { return [
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_VALIDATORS,] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_ASYNC_VALIDATORS,] }] }
            ]; };
            FormGroupDirective.propDecorators = {
                form: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['formGroup',] }],
                ngSubmit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
            };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var formGroupNameProvider = {
                provide: ControlContainer,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return FormGroupName; }))
            };
            /**
             * \@description
             *
             * Syncs a nested `FormGroup` to a DOM element.
             *
             * This directive can only be used with a parent `FormGroupDirective`.
             *
             * It accepts the string name of the nested `FormGroup` to link, and
             * looks for a `FormGroup` registered with that name in the parent
             * `FormGroup` instance you passed into `FormGroupDirective`.
             *
             * Use nested form groups to validate a sub-group of a
             * form separately from the rest or to group the values of certain
             * controls into their own nested object.
             *
             * @see [Reactive Forms Guide](guide/reactive-forms)
             *
             * \@usageNotes
             *
             * ### Access the group by name
             *
             * The following example uses the {\@link AbstractControl#get get} method to access the
             * associated `FormGroup`
             *
             * ```ts
             *   this.form.get('name');
             * ```
             *
             * ### Access individual controls in the group
             *
             * The following example uses the {\@link AbstractControl#get get} method to access
             * individual controls within the group using dot syntax.
             *
             * ```ts
             *   this.form.get('name.first');
             * ```
             *
             * ### Register a nested `FormGroup`.
             *
             * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,
             * and provides methods to retrieve the nested `FormGroup` and individual controls.
             *
             * {\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
             *
             * \@ngModule ReactiveFormsModule
             * \@publicApi
             */
            var FormGroupName = /** @class */ (function (_super) {
                __extends(FormGroupName, _super);
                /**
                 * @param {?} parent
                 * @param {?} validators
                 * @param {?} asyncValidators
                 */
                function FormGroupName(parent, validators, asyncValidators) {
                    var _this = _super.call(this) || this;
                    _this._parent = parent;
                    _this._validators = validators;
                    _this._asyncValidators = asyncValidators;
                    return _this;
                }
                /**
                 * \@internal
                 * @return {?}
                 */
                FormGroupName.prototype._checkParentType = function () {
                    if (_hasInvalidParent(this._parent)) {
                        ReactiveErrors.groupParentException();
                    }
                };
                return FormGroupName;
            }(AbstractFormGroupDirective));
            FormGroupName.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] }
            ];
            /** @nocollapse */
            FormGroupName.ctorParameters = function () { return [
                { type: ControlContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_VALIDATORS,] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_ASYNC_VALIDATORS,] }] }
            ]; };
            FormGroupName.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['formGroupName',] }]
            };
            if (false) { }
            /** @type {?} */
            var formArrayNameProvider = {
                provide: ControlContainer,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return FormArrayName; }))
            };
            /**
             * \@description
             *
             * Syncs a nested `FormArray` to a DOM element.
             *
             * This directive is designed to be used with a parent `FormGroupDirective` (selector:
             * `[formGroup]`).
             *
             * It accepts the string name of the nested `FormArray` you want to link, and
             * will look for a `FormArray` registered with that name in the parent
             * `FormGroup` instance you passed into `FormGroupDirective`.
             *
             * @see [Reactive Forms Guide](guide/reactive-forms)
             * @see `AbstractControl`
             *
             * \@usageNotes
             *
             * ### Example
             *
             * {\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
             *
             * \@ngModule ReactiveFormsModule
             * \@publicApi
             */
            var FormArrayName = /** @class */ (function (_super) {
                __extends(FormArrayName, _super);
                /**
                 * @param {?} parent
                 * @param {?} validators
                 * @param {?} asyncValidators
                 */
                function FormArrayName(parent, validators, asyncValidators) {
                    var _this = _super.call(this) || this;
                    _this._parent = parent;
                    _this._validators = validators;
                    _this._asyncValidators = asyncValidators;
                    return _this;
                }
                /**
                 * \@description
                 * A lifecycle method called when the directive's inputs are initialized. For internal use only.
                 *
                 * @throws If the directive does not have a valid parent.
                 * @return {?}
                 */
                FormArrayName.prototype.ngOnInit = function () {
                    this._checkParentType();
                    ( /** @type {?} */(this.formDirective)).addFormArray(this);
                };
                /**
                 * \@description
                 * A lifecycle method called before the directive's instance is destroyed. For internal use only.
                 * @return {?}
                 */
                FormArrayName.prototype.ngOnDestroy = function () {
                    if (this.formDirective) {
                        this.formDirective.removeFormArray(this);
                    }
                };
                Object.defineProperty(FormArrayName.prototype, "control", {
                    /**
                     * \@description
                     * The `FormArray` bound to this directive.
                     * @return {?}
                     */
                    get: function () { return ( /** @type {?} */(this.formDirective)).getFormArray(this); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FormArrayName.prototype, "formDirective", {
                    /**
                     * \@description
                     * The top-level directive for this group if present, otherwise null.
                     * @return {?}
                     */
                    get: function () {
                        return this._parent ? ( /** @type {?} */(this._parent.formDirective)) : null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FormArrayName.prototype, "path", {
                    /**
                     * \@description
                     * Returns an array that represents the path from the top-level form to this control.
                     * Each index is the string name of the control on that level.
                     * @return {?}
                     */
                    get: function () { return controlPath(this.name, this._parent); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FormArrayName.prototype, "validator", {
                    /**
                     * \@description
                     * Synchronous validator function composed of all the synchronous validators registered with this
                     * directive.
                     * @return {?}
                     */
                    get: function () { return composeValidators(this._validators); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
                    /**
                     * \@description
                     * Async validator function composed of all the async validators registered with this directive.
                     * @return {?}
                     */
                    get: function () {
                        return composeAsyncValidators(this._asyncValidators);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @private
                 * @return {?}
                 */
                FormArrayName.prototype._checkParentType = function () {
                    if (_hasInvalidParent(this._parent)) {
                        ReactiveErrors.arrayParentException();
                    }
                };
                return FormArrayName;
            }(ControlContainer));
            FormArrayName.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] }
            ];
            /** @nocollapse */
            FormArrayName.ctorParameters = function () { return [
                { type: ControlContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_VALIDATORS,] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_ASYNC_VALIDATORS,] }] }
            ]; };
            FormArrayName.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['formArrayName',] }]
            };
            if (false) { }
            /**
             * @param {?} parent
             * @return {?}
             */
            function _hasInvalidParent(parent) {
                return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&
                    !(parent instanceof FormArrayName);
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var controlNameBinding = {
                provide: NgControl,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return FormControlName; }))
            };
            /**
             * \@description
             * Syncs a `FormControl` in an existing `FormGroup` to a form control
             * element by name.
             *
             * @see [Reactive Forms Guide](guide/reactive-forms)
             * @see `FormControl`
             * @see `AbstractControl`
             *
             * \@usageNotes
             *
             * ### Register `FormControl` within a group
             *
             * The following example shows how to register multiple form controls within a form group
             * and set their value.
             *
             * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
             *
             * To see `formControlName` examples with different form control types, see:
             *
             * * Radio buttons: `RadioControlValueAccessor`
             * * Selects: `SelectControlValueAccessor`
             *
             * ### Use with ngModel
             *
             * Support for using the `ngModel` input property and `ngModelChange` event with reactive
             * form directives has been deprecated in Angular v6 and will be removed in Angular v7.
             *
             * Now deprecated:
             *
             * ```html
             * <form [formGroup]="form">
             *   <input formControlName="first" [(ngModel)]="value">
             * </form>
             * ```
             *
             * ```ts
             * this.value = 'some value';
             * ```
             *
             * This has been deprecated for a few reasons. First, developers have found this pattern
             * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's
             * an input/output property named `ngModel` on the reactive form directive that simply
             * approximates (some of) its behavior. Specifically, it allows getting/setting the value
             * and intercepting value events. However, some of `ngModel`'s other features - like
             * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,
             * which has understandably caused some confusion.
             *
             * In addition, this pattern mixes template-driven and reactive forms strategies, which
             * we generally don't recommend because it doesn't take advantage of the full benefits of
             * either strategy. Setting the value in the template violates the template-agnostic
             * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in
             * the class removes the convenience of defining forms in the template.
             *
             * To update your code before v7, you'll want to decide whether to stick with reactive form
             * directives (and get/set values using reactive forms patterns) or switch over to
             * template-driven directives.
             *
             * After (choice 1 - use reactive forms):
             *
             * ```html
             * <form [formGroup]="form">
             *   <input formControlName="first">
             * </form>
             * ```
             *
             * ```ts
             * this.form.get('first').setValue('some value');
             * ```
             *
             * After (choice 2 - use template-driven forms):
             *
             * ```html
             * <input [(ngModel)]="value">
             * ```
             *
             * ```ts
             * this.value = 'some value';
             * ```
             *
             * By default, when you use this pattern, you will see a deprecation warning once in dev
             * mode. You can choose to silence this warning by providing a config for
             * `ReactiveFormsModule` at import time:
             *
             * ```ts
             * imports: [
             *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'})
             * ]
             * ```
             *
             * Alternatively, you can choose to surface a separate warning for each instance of this
             * pattern with a config value of `"always"`. This may help to track down where in the code
             * the pattern is being used as the code is being updated.
             *
             * \@ngModule ReactiveFormsModule
             * \@publicApi
             */
            var FormControlName = /** @class */ (function (_super) {
                __extends(FormControlName, _super);
                /**
                 * @param {?} parent
                 * @param {?} validators
                 * @param {?} asyncValidators
                 * @param {?} valueAccessors
                 * @param {?} _ngModelWarningConfig
                 */
                function FormControlName(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
                    var _this = _super.call(this) || this;
                    _this._ngModelWarningConfig = _ngModelWarningConfig;
                    _this._added = false;
                    /**
                     * @deprecated as of v6
                     */
                    _this.update = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * \@description
                     * Instance property used to track whether an ngModel warning has been sent out for this
                     * particular FormControlName instance. Used to support warning config of "always".
                     *
                     * \@internal
                     */
                    _this._ngModelWarningSent = false;
                    _this._parent = parent;
                    _this._rawValidators = validators || [];
                    _this._rawAsyncValidators = asyncValidators || [];
                    _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
                    return _this;
                }
                Object.defineProperty(FormControlName.prototype, "isDisabled", {
                    /**
                     * \@description
                     * Triggers a warning that this input should not be used with reactive forms.
                     * @param {?} isDisabled
                     * @return {?}
                     */
                    set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@description
                 * A lifecycle method called when the directive's inputs change. For internal use only.
                 *
                 * @param {?} changes A object of key/value pairs for the set of changed inputs.
                 * @return {?}
                 */
                FormControlName.prototype.ngOnChanges = function (changes) {
                    if (!this._added)
                        this._setUpControl();
                    if (isPropertyUpdated(changes, this.viewModel)) {
                        _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);
                        this.viewModel = this.model;
                        this.formDirective.updateModel(this, this.model);
                    }
                };
                /**
                 * \@description
                 * Lifecycle method called before the directive's instance is destroyed. For internal use only.
                 * @return {?}
                 */
                FormControlName.prototype.ngOnDestroy = function () {
                    if (this.formDirective) {
                        this.formDirective.removeControl(this);
                    }
                };
                /**
                 * \@description
                 * Sets the new value for the view model and emits an `ngModelChange` event.
                 *
                 * @param {?} newValue The new value for the view model.
                 * @return {?}
                 */
                FormControlName.prototype.viewToModelUpdate = function (newValue) {
                    this.viewModel = newValue;
                    this.update.emit(newValue);
                };
                Object.defineProperty(FormControlName.prototype, "path", {
                    /**
                     * \@description
                     * Returns an array that represents the path from the top-level form to this control.
                     * Each index is the string name of the control on that level.
                     * @return {?}
                     */
                    get: function () { return controlPath(this.name, ( /** @type {?} */(this._parent))); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FormControlName.prototype, "formDirective", {
                    /**
                     * \@description
                     * The top-level directive for this group if present, otherwise null.
                     * @return {?}
                     */
                    get: function () { return this._parent ? this._parent.formDirective : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FormControlName.prototype, "validator", {
                    /**
                     * \@description
                     * Synchronous validator function composed of all the synchronous validators
                     * registered with this directive.
                     * @return {?}
                     */
                    get: function () { return composeValidators(this._rawValidators); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FormControlName.prototype, "asyncValidator", {
                    /**
                     * \@description
                     * Async validator function composed of all the async validators registered with this
                     * directive.
                     * @return {?}
                     */
                    get: function () {
                        return ( /** @type {?} */(composeAsyncValidators(this._rawAsyncValidators)));
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @private
                 * @return {?}
                 */
                FormControlName.prototype._checkParentType = function () {
                    if (!(this._parent instanceof FormGroupName) &&
                        this._parent instanceof AbstractFormGroupDirective) {
                        ReactiveErrors.ngModelGroupException();
                    }
                    else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&
                        !(this._parent instanceof FormArrayName)) {
                        ReactiveErrors.controlParentException();
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                FormControlName.prototype._setUpControl = function () {
                    this._checkParentType();
                    (( /** @type {?} */(this))).control = this.formDirective.addControl(this);
                    if (this.control.disabled && ( /** @type {?} */(this.valueAccessor)).setDisabledState) {
                        ( /** @type {?} */(( /** @type {?} */(this.valueAccessor)).setDisabledState))(true);
                    }
                    this._added = true;
                };
                return FormControlName;
            }(NgControl));
            /**
             * \@description
             * Static property used to track whether any ngModel warnings have been sent across
             * all instances of FormControlName. Used to support warning config of "once".
             *
             * \@internal
             */
            FormControlName._ngModelWarningSentOnce = false;
            FormControlName.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] }
            ];
            /** @nocollapse */
            FormControlName.ctorParameters = function () { return [
                { type: ControlContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_VALIDATORS,] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_ASYNC_VALIDATORS,] }] },
                { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_VALUE_ACCESSOR,] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }
            ]; };
            FormControlName.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['formControlName',] }],
                isDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['disabled',] }],
                model: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['ngModel',] }],
                update: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"], args: ['ngModelChange',] }]
            };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@description
             * An interface implemented by classes that perform synchronous validation.
             *
             * \@usageNotes
             *
             * ### Provide a custom validator
             *
             * The following example implements the `Validator` interface to create a
             * validator directive with a custom error key.
             *
             * ```typescript
             * \@Directive({
             *   selector: '[customValidator]',
             *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]
             * })
             * class CustomValidatorDirective implements Validator {
             *   validate(control: AbstractControl): ValidationErrors|null {
             *     return {'custom': true};
             *   }
             * }
             * ```
             *
             * \@publicApi
             * @record
             */
            function Validator() { }
            if (false) { }
            /**
             * \@description
             * An interface implemented by classes that perform asynchronous validation.
             *
             * \@usageNotes
             *
             * ### Provide a custom async validator directive
             *
             * The following example implements the `AsyncValidator` interface to create an
             * async validator directive with a custom error key.
             *
             * ```typescript
             * import { of as observableOf } from 'rxjs';
             *
             * \@Directive({
             *   selector: '[customAsyncValidator]',
             *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:
             * true}]
             * })
             * class CustomAsyncValidatorDirective implements AsyncValidator {
             *   validate(control: AbstractControl): Observable<ValidationErrors|null> {
             *     return observableOf({'custom': true});
             *   }
             * }
             * ```
             *
             * \@publicApi
             * @record
             */
            function AsyncValidator() { }
            if (false) { }
            /**
             * \@description
             * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.
             * @type {?}
             */
            var REQUIRED_VALIDATOR = {
                provide: NG_VALIDATORS,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return RequiredValidator; })),
                multi: true
            };
            /**
             * \@description
             * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.
             * @type {?}
             */
            var CHECKBOX_REQUIRED_VALIDATOR = {
                provide: NG_VALIDATORS,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return CheckboxRequiredValidator; })),
                multi: true
            };
            /**
             * \@description
             * A directive that adds the `required` validator to any controls marked with the
             * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
             *
             * @see [Form Validation](guide/form-validation)
             *
             * \@usageNotes
             *
             * ### Adding a required validator using template-driven forms
             *
             * ```
             * <input name="fullName" ngModel required>
             * ```
             *
             * \@ngModule FormsModule
             * \@ngModule ReactiveFormsModule
             * \@publicApi
             */
            var RequiredValidator = /** @class */ (function () {
                function RequiredValidator() {
                }
                Object.defineProperty(RequiredValidator.prototype, "required", {
                    /**
                     * \@description
                     * Tracks changes to the required attribute bound to this directive.
                     * @return {?}
                     */
                    get: function () { return this._required; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._required = value != null && value !== false && "" + value !== 'false';
                        if (this._onChange)
                            this._onChange();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@description
                 * Method that validates whether the control is empty.
                 * Returns the validation result if enabled, otherwise null.
                 * @param {?} control
                 * @return {?}
                 */
                RequiredValidator.prototype.validate = function (control) {
                    return this.required ? Validators.required(control) : null;
                };
                /**
                 * \@description
                 * Registers a callback function to call when the validator inputs change.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
                return RequiredValidator;
            }());
            RequiredValidator.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
                            providers: [REQUIRED_VALIDATOR],
                            host: { '[attr.required]': 'required ? "" : null' }
                        },] }
            ];
            RequiredValidator.propDecorators = {
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            if (false) { }
            /**
             * A Directive that adds the `required` validator to checkbox controls marked with the
             * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
             *
             * @see [Form Validation](guide/form-validation)
             *
             * \@usageNotes
             *
             * ### Adding a required checkbox validator using template-driven forms
             *
             * The following example shows how to add a checkbox required validator to an input attached to an ngModel binding.
             *
             * ```
             * <input type="checkbox" name="active" ngModel required>
             * ```
             *
             * \@publicApi
             * \@ngModule FormsModule
             * \@ngModule ReactiveFormsModule
             */
            var CheckboxRequiredValidator = /** @class */ (function (_super) {
                __extends(CheckboxRequiredValidator, _super);
                function CheckboxRequiredValidator() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * \@description
                 * Method that validates whether or not the checkbox has been checked.
                 * Returns the validation result if enabled, otherwise null.
                 * @param {?} control
                 * @return {?}
                 */
                CheckboxRequiredValidator.prototype.validate = function (control) {
                    return this.required ? Validators.requiredTrue(control) : null;
                };
                return CheckboxRequiredValidator;
            }(RequiredValidator));
            CheckboxRequiredValidator.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
                            providers: [CHECKBOX_REQUIRED_VALIDATOR],
                            host: { '[attr.required]': 'required ? "" : null' }
                        },] }
            ];
            /**
             * \@description
             * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.
             * @type {?}
             */
            var EMAIL_VALIDATOR = {
                provide: NG_VALIDATORS,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return EmailValidator; })),
                multi: true
            };
            /**
             * A directive that adds the `email` validator to controls marked with the
             * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
             *
             * @see [Form Validation](guide/form-validation)
             *
             * \@usageNotes
             *
             * ### Adding an email validator
             *
             * The following example shows how to add an email validator to an input attached to an ngModel binding.
             *
             * ```
             * <input type="email" name="email" ngModel email>
             * <input type="email" name="email" ngModel email="true">
             * <input type="email" name="email" ngModel [email]="true">
             * ```
             *
             * \@publicApi
             * \@ngModule FormsModule
             * \@ngModule ReactiveFormsModule
             */
            var EmailValidator = /** @class */ (function () {
                function EmailValidator() {
                }
                Object.defineProperty(EmailValidator.prototype, "email", {
                    /**
                     * \@description
                     * Tracks changes to the email attribute bound to this directive.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._enabled = value === '' || value === true || value === 'true';
                        if (this._onChange)
                            this._onChange();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@description
                 * Method that validates whether an email address is valid.
                 * Returns the validation result if enabled, otherwise null.
                 * @param {?} control
                 * @return {?}
                 */
                EmailValidator.prototype.validate = function (control) {
                    return this._enabled ? Validators.email(control) : null;
                };
                /**
                 * \@description
                 * Registers a callback function to call when the validator inputs change.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                EmailValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
                return EmailValidator;
            }());
            EmailValidator.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[email][formControlName],[email][formControl],[email][ngModel]',
                            providers: [EMAIL_VALIDATOR]
                        },] }
            ];
            EmailValidator.propDecorators = {
                email: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            if (false) { }
            /**
             * \@description
             * A function that receives a control and synchronously returns a map of
             * validation errors if present, otherwise null.
             *
             * \@publicApi
             * @record
             */
            function ValidatorFn() { }
            /**
             * \@description
             * A function that receives a control and returns a Promise or observable
             * that emits validation errors if present, otherwise null.
             *
             * \@publicApi
             * @record
             */
            function AsyncValidatorFn() { }
            /**
             * \@description
             * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.
             * @type {?}
             */
            var MIN_LENGTH_VALIDATOR = {
                provide: NG_VALIDATORS,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MinLengthValidator; })),
                multi: true
            };
            /**
             * A directive that adds minimum length validation to controls marked with the
             * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` mult-provider list.
             *
             * @see [Form Validation](guide/form-validation)
             *
             * \@usageNotes
             *
             * ### Adding a minimum length validator
             *
             * The following example shows how to add a minimum length validator to an input attached to an
             * ngModel binding.
             *
             * ```html
             * <input name="firstName" ngModel minlength="4">
             * ```
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var MinLengthValidator = /** @class */ (function () {
                function MinLengthValidator() {
                }
                /**
                 * \@description
                 * A lifecycle method called when the directive's inputs change. For internal use
                 * only.
                 *
                 * @param {?} changes A object of key/value pairs for the set of changed inputs.
                 * @return {?}
                 */
                MinLengthValidator.prototype.ngOnChanges = function (changes) {
                    if ('minlength' in changes) {
                        this._createValidator();
                        if (this._onChange)
                            this._onChange();
                    }
                };
                /**
                 * \@description
                 * Method that validates whether the value meets a minimum length
                 * requirement. Returns the validation result if enabled, otherwise null.
                 * @param {?} control
                 * @return {?}
                 */
                MinLengthValidator.prototype.validate = function (control) {
                    return this.minlength == null ? null : this._validator(control);
                };
                /**
                 * \@description
                 * Registers a callback function to call when the validator inputs change.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
                /**
                 * @private
                 * @return {?}
                 */
                MinLengthValidator.prototype._createValidator = function () {
                    this._validator = Validators.minLength(parseInt(this.minlength, 10));
                };
                return MinLengthValidator;
            }());
            MinLengthValidator.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
                            providers: [MIN_LENGTH_VALIDATOR],
                            host: { '[attr.minlength]': 'minlength ? minlength : null' }
                        },] }
            ];
            MinLengthValidator.propDecorators = {
                minlength: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            if (false) { }
            /**
             * \@description
             * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.
             * @type {?}
             */
            var MAX_LENGTH_VALIDATOR = {
                provide: NG_VALIDATORS,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MaxLengthValidator; })),
                multi: true
            };
            /**
             * A directive that adds max length validation to controls marked with the
             * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
             *
             * @see [Form Validation](guide/form-validation)
             *
             * \@usageNotes
             *
             * ### Adding a maximum length validator
             *
             * The following example shows how to add a maximum length validator to an input attached to an
             * ngModel binding.
             *
             * ```html
             * <input name="firstName" ngModel maxlength="25">
             * ```
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var MaxLengthValidator = /** @class */ (function () {
                function MaxLengthValidator() {
                }
                /**
                 * \@description
                 * A lifecycle method called when the directive's inputs change. For internal use
                 * only.
                 *
                 * @param {?} changes A object of key/value pairs for the set of changed inputs.
                 * @return {?}
                 */
                MaxLengthValidator.prototype.ngOnChanges = function (changes) {
                    if ('maxlength' in changes) {
                        this._createValidator();
                        if (this._onChange)
                            this._onChange();
                    }
                };
                /**
                 * \@description
                 * Method that validates whether the value exceeds
                 * the maximum length requirement.
                 * @param {?} control
                 * @return {?}
                 */
                MaxLengthValidator.prototype.validate = function (control) {
                    return this.maxlength != null ? this._validator(control) : null;
                };
                /**
                 * \@description
                 * Registers a callback function to call when the validator inputs change.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
                /**
                 * @private
                 * @return {?}
                 */
                MaxLengthValidator.prototype._createValidator = function () {
                    this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
                };
                return MaxLengthValidator;
            }());
            MaxLengthValidator.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
                            providers: [MAX_LENGTH_VALIDATOR],
                            host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }
                        },] }
            ];
            MaxLengthValidator.propDecorators = {
                maxlength: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            if (false) { }
            /**
             * \@description
             * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.
             * @type {?}
             */
            var PATTERN_VALIDATOR = {
                provide: NG_VALIDATORS,
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return PatternValidator; })),
                multi: true
            };
            /**
             * \@description
             * A directive that adds regex pattern validation to controls marked with the
             * `pattern` attribute. The regex must match the entire control value.
             * The directive is provided with the `NG_VALIDATORS` multi-provider list.
             *
             * @see [Form Validation](guide/form-validation)
             *
             * \@usageNotes
             *
             * ### Adding a pattern validator
             *
             * The following example shows how to add a pattern validator to an input attached to an
             * ngModel binding.
             *
             * ```html
             * <input name="firstName" ngModel pattern="[a-zA-Z ]*">
             * ```
             *
             * \@ngModule ReactiveFormsModule
             * \@ngModule FormsModule
             * \@publicApi
             */
            var PatternValidator = /** @class */ (function () {
                function PatternValidator() {
                }
                /**
                 * \@description
                 * A lifecycle method called when the directive's inputs change. For internal use
                 * only.
                 *
                 * @param {?} changes A object of key/value pairs for the set of changed inputs.
                 * @return {?}
                 */
                PatternValidator.prototype.ngOnChanges = function (changes) {
                    if ('pattern' in changes) {
                        this._createValidator();
                        if (this._onChange)
                            this._onChange();
                    }
                };
                /**
                 * \@description
                 * Method that validates whether the value matches the
                 * the pattern requirement.
                 * @param {?} control
                 * @return {?}
                 */
                PatternValidator.prototype.validate = function (control) { return this._validator(control); };
                /**
                 * \@description
                 * Registers a callback function to call when the validator inputs change.
                 *
                 * @param {?} fn The callback function
                 * @return {?}
                 */
                PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
                /**
                 * @private
                 * @return {?}
                 */
                PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };
                return PatternValidator;
            }());
            PatternValidator.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
                            providers: [PATTERN_VALIDATOR],
                            host: { '[attr.pattern]': 'pattern ? pattern : null' }
                        },] }
            ];
            PatternValidator.propDecorators = {
                pattern: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var SHARED_FORM_DIRECTIVES = [
                ɵNgNoValidate,
                NgSelectOption,
                ɵNgSelectMultipleOption,
                DefaultValueAccessor,
                NumberValueAccessor,
                RangeValueAccessor,
                CheckboxControlValueAccessor,
                SelectControlValueAccessor,
                SelectMultipleControlValueAccessor,
                RadioControlValueAccessor,
                NgControlStatus,
                NgControlStatusGroup,
                RequiredValidator,
                MinLengthValidator,
                MaxLengthValidator,
                PatternValidator,
                CheckboxRequiredValidator,
                EmailValidator,
            ];
            /** @type {?} */
            var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm, NgFormSelectorWarning];
            /** @type {?} */
            var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
            /**
             * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
             */
            var ɵInternalFormsSharedModule = /** @class */ (function () {
                function ɵInternalFormsSharedModule() {
                }
                return ɵInternalFormsSharedModule;
            }());
            ɵInternalFormsSharedModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            declarations: SHARED_FORM_DIRECTIVES,
                            exports: SHARED_FORM_DIRECTIVES,
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @param {?} options
             * @return {?}
             */
            function isAbstractControlOptions(options) {
                return (( /** @type {?} */(options))).asyncValidators !== undefined ||
                    (( /** @type {?} */(options))).validators !== undefined ||
                    (( /** @type {?} */(options))).updateOn !== undefined;
            }
            /**
             * \@description
             * Creates an `AbstractControl` from a user-specified configuration.
             *
             * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,
             * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex
             * forms.
             *
             * @see [Reactive Forms Guide](/guide/reactive-forms)
             *
             * \@publicApi
             */
            var FormBuilder = /** @class */ (function () {
                function FormBuilder() {
                }
                /**
                 * \@description
                 * Construct a new `FormGroup` instance.
                 *
                 * @param {?} controlsConfig A collection of child controls. The key for each child is the name
                 * under which it is registered.
                 *
                 * @param {?=} options Configuration options object for the `FormGroup`. The object can
                 * have two shapes:
                 *
                 * 1) `AbstractControlOptions` object (preferred), which consists of:
                 * * `validators`: A synchronous validator function, or an array of validator functions
                 * * `asyncValidators`: A single async validator or array of async validator functions
                 * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur' |
                 * submit')
                 *
                 * 2) Legacy configuration object, which consists of:
                 * * `validator`: A synchronous validator function, or an array of validator functions
                 * * `asyncValidator`: A single async validator or array of async validator functions
                 *
                 * @return {?}
                 */
                FormBuilder.prototype.group = function (controlsConfig, options) {
                    if (options === void 0) { options = null; }
                    /** @type {?} */
                    var controls = this._reduceControls(controlsConfig);
                    /** @type {?} */
                    var validators = null;
                    /** @type {?} */
                    var asyncValidators = null;
                    /** @type {?} */
                    var updateOn = undefined;
                    if (options != null) {
                        if (isAbstractControlOptions(options)) {
                            // `options` are `AbstractControlOptions`
                            validators = options.validators != null ? options.validators : null;
                            asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;
                            updateOn = options.updateOn != null ? options.updateOn : undefined;
                        }
                        else {
                            // `options` are legacy form group options
                            validators = options['validator'] != null ? options['validator'] : null;
                            asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;
                        }
                    }
                    return new FormGroup(controls, { asyncValidators: asyncValidators, updateOn: updateOn, validators: validators });
                };
                /**
                 * \@description
                 * Construct a new `FormControl` with the given state, validators and options.
                 *
                 * \@usageNotes
                 *
                 * ### Initialize a control as disabled
                 *
                 * The following example returns a control with an initial value in a disabled state.
                 *
                 * <code-example path="forms/ts/formBuilder/form_builder_example.ts" region="disabled-control">
                 * </code-example>
                 * @param {?} formState Initializes the control with an initial state value, or
                 * with an object that contains both a value and a disabled status.
                 *
                 * @param {?=} validatorOrOpts A synchronous validator function, or an array of
                 * such functions, or an `AbstractControlOptions` object that contains
                 * validation functions and a validation trigger.
                 *
                 * @param {?=} asyncValidator A single async validator or array of async validator
                 * functions.
                 *
                 * @return {?}
                 */
                FormBuilder.prototype.control = function (formState, validatorOrOpts, asyncValidator) {
                    return new FormControl(formState, validatorOrOpts, asyncValidator);
                };
                /**
                 * Constructs a new `FormArray` from the given array of configurations,
                 * validators and options.
                 *
                 * @param {?} controlsConfig An array of child controls or control configs. Each
                 * child control is given an index when it is registered.
                 *
                 * @param {?=} validatorOrOpts A synchronous validator function, or an array of
                 * such functions, or an `AbstractControlOptions` object that contains
                 * validation functions and a validation trigger.
                 *
                 * @param {?=} asyncValidator A single async validator or array of async validator
                 * functions.
                 * @return {?}
                 */
                FormBuilder.prototype.array = function (controlsConfig, validatorOrOpts, asyncValidator) {
                    var _this = this;
                    /** @type {?} */
                    var controls = controlsConfig.map(( /**
                     * @param {?} c
                     * @return {?}
                     */function (/**
                     * @param {?} c
                     * @return {?}
                     */ c) { return _this._createControl(c); }));
                    return new FormArray(controls, validatorOrOpts, asyncValidator);
                };
                /**
                 * \@internal
                 * @param {?} controlsConfig
                 * @return {?}
                 */
                FormBuilder.prototype._reduceControls = function (controlsConfig) {
                    var _this = this;
                    /** @type {?} */
                    var controls = {};
                    Object.keys(controlsConfig).forEach(( /**
                     * @param {?} controlName
                     * @return {?}
                     */function (/**
                     * @param {?} controlName
                     * @return {?}
                     */ controlName) {
                        controls[controlName] = _this._createControl(controlsConfig[controlName]);
                    }));
                    return controls;
                };
                /**
                 * \@internal
                 * @param {?} controlConfig
                 * @return {?}
                 */
                FormBuilder.prototype._createControl = function (controlConfig) {
                    if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||
                        controlConfig instanceof FormArray) {
                        return controlConfig;
                    }
                    else if (Array.isArray(controlConfig)) {
                        /** @type {?} */
                        var value = controlConfig[0];
                        /** @type {?} */
                        var validator = controlConfig.length > 1 ? controlConfig[1] : null;
                        /** @type {?} */
                        var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
                        return this.control(value, validator, asyncValidator);
                    }
                    else {
                        return this.control(controlConfig);
                    }
                };
                return FormBuilder;
            }());
            FormBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@publicApi
             * @type {?}
             */
            var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('8.2.13');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Exports the required providers and directives for template-driven forms,
             * making them available for import by NgModules that import this module.
             *
             * @see [Forms Guide](/guide/forms)
             *
             * \@publicApi
             */
            var FormsModule = /** @class */ (function () {
                function FormsModule() {
                }
                /**
                 * \@description
                 * Provides options for configuring the template-driven forms module.
                 *
                 * @param {?} opts An object of configuration options
                 * * `warnOnDeprecatedNgFormSelector` Configures when to emit a warning when the deprecated
                 * `ngForm` selector is used.
                 * @return {?}
                 */
                FormsModule.withConfig = function (opts) {
                    return {
                        ngModule: FormsModule,
                        providers: [{ provide: NG_FORM_SELECTOR_WARNING, useValue: opts.warnOnDeprecatedNgFormSelector }]
                    };
                };
                return FormsModule;
            }());
            FormsModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            declarations: TEMPLATE_DRIVEN_DIRECTIVES,
                            providers: [RadioControlRegistry],
                            exports: [ɵInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
                        },] }
            ];
            /**
             * Exports the required infrastructure and directives for reactive forms,
             * making them available for import by NgModules that import this module.
             * @see [Forms](guide/reactive-forms)
             *
             * @see [Reactive Forms Guide](/guide/reactive-forms)
             *
             * \@publicApi
             */
            var ReactiveFormsModule = /** @class */ (function () {
                function ReactiveFormsModule() {
                }
                /**
                 * \@description
                 * Provides options for configuring the reactive forms module.
                 *
                 * @param {?} opts An object of configuration options
                 * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`
                 * binding is used with reactive form directives.
                 * @return {?}
                 */
                ReactiveFormsModule.withConfig = function (opts) {
                    return {
                        ngModule: ReactiveFormsModule,
                        providers: [{
                                provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,
                                useValue: opts.warnOnNgModelWithFormControl
                            }]
                    };
                };
                return ReactiveFormsModule;
            }());
            ReactiveFormsModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            declarations: [REACTIVE_DRIVEN_DIRECTIVES],
                            providers: [FormBuilder, RadioControlRegistry],
                            exports: [ɵInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Generated bundle index. Do not edit.
             */
            //# sourceMappingURL=forms.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/autocomplete.js": 
        /*!****************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/autocomplete.js ***!
          \****************************************************************/
        /*! exports provided: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY", function () { return MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatAutocompleteSelectedEvent", function () { return MatAutocompleteSelectedEvent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_DEFAULT_OPTIONS", function () { return MAT_AUTOCOMPLETE_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatAutocomplete", function () { return MatAutocomplete; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatAutocompleteModule", function () { return MatAutocompleteModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY", function () { return MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatAutocompleteMissingPanelError", function () { return getMatAutocompleteMissingPanelError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTOCOMPLETE_OPTION_HEIGHT", function () { return AUTOCOMPLETE_OPTION_HEIGHT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTOCOMPLETE_PANEL_HEIGHT", function () { return AUTOCOMPLETE_PANEL_HEIGHT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_SCROLL_STRATEGY", function () { return MAT_AUTOCOMPLETE_SCROLL_STRATEGY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER", function () { return MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_VALUE_ACCESSOR", function () { return MAT_AUTOCOMPLETE_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatAutocompleteTrigger", function () { return MatAutocompleteTrigger; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatAutocompleteOrigin", function () { return MatAutocompleteOrigin; });
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm2015/scrolling.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/form-field */ "./node_modules/@angular/material/esm2015/form-field.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Autocomplete IDs need to be unique across components, so this counter exists outside of
             * the component definition.
             * @type {?}
             */
            var _uniqueAutocompleteIdCounter = 0;
            /**
             * Event object that is emitted when an autocomplete option is selected.
             */
            var MatAutocompleteSelectedEvent = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} option
                 */
                function MatAutocompleteSelectedEvent(source, option) {
                    this.source = source;
                    this.option = option;
                }
                return MatAutocompleteSelectedEvent;
            }());
            // Boilerplate for applying mixins to MatAutocomplete.
            /**
             * \@docs-private
             */
            var MatAutocompleteBase = /** @class */ (function () {
                function MatAutocompleteBase() {
                }
                return MatAutocompleteBase;
            }());
            /** @type {?} */
            var _MatAutocompleteMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisableRipple"])(MatAutocompleteBase);
            /**
             * Injection token to be used to override the default options for `mat-autocomplete`.
             * @type {?}
             */
            var MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mat-autocomplete-default-options', {
                providedIn: 'root',
                factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {
                return { autoActiveFirstOption: false };
            }
            var MatAutocomplete = /** @class */ (function (_super) {
                __extends(MatAutocomplete, _super);
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _elementRef
                 * @param {?} defaults
                 */
                function MatAutocomplete(_changeDetectorRef, _elementRef, defaults) {
                    var _this = _super.call(this) || this;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._elementRef = _elementRef;
                    /**
                     * Whether the autocomplete panel should be visible, depending on option length.
                     */
                    _this.showPanel = false;
                    _this._isOpen = false;
                    /**
                     * Function that maps an option's control value to its display value in the trigger.
                     */
                    _this.displayWith = null;
                    /**
                     * Event that is emitted whenever an option from the list is selected.
                     */
                    _this.optionSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
                    /**
                     * Event that is emitted when the autocomplete panel is opened.
                     */
                    _this.opened = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
                    /**
                     * Event that is emitted when the autocomplete panel is closed.
                     */
                    _this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
                    _this._classList = {};
                    /**
                     * Unique ID to be used by autocomplete trigger's "aria-owns" property.
                     */
                    _this.id = "mat-autocomplete-" + _uniqueAutocompleteIdCounter++;
                    _this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;
                    return _this;
                }
                Object.defineProperty(MatAutocomplete.prototype, "isOpen", {
                    /**
                     * Whether the autocomplete panel is open.
                     * @return {?}
                     */
                    get: function () { return this._isOpen && this.showPanel; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatAutocomplete.prototype, "autoActiveFirstOption", {
                    /**
                     * Whether the first option should be highlighted when the autocomplete panel is opened.
                     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.
                     * @return {?}
                     */
                    get: function () { return this._autoActiveFirstOption; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._autoActiveFirstOption = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatAutocomplete.prototype, "classList", {
                    /**
                     * Takes classes set on the host mat-autocomplete element and applies them to the panel
                     * inside the overlay container to allow for easy styling.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value && value.length) {
                            this._classList = value.split(' ').reduce(( /**
                             * @param {?} classList
                             * @param {?} className
                             * @return {?}
                             */function (classList, className) {
                                classList[className.trim()] = true;
                                return classList;
                            }), ( /** @type {?} */({})));
                        }
                        else {
                            this._classList = {};
                        }
                        this._setVisibilityClasses(this._classList);
                        this._elementRef.nativeElement.className = '';
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatAutocomplete.prototype.ngAfterContentInit = function () {
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["ActiveDescendantKeyManager"](this.options).withWrap();
                    // Set the initial visibility state.
                    this._setVisibility();
                };
                /**
                 * Sets the panel scrollTop. This allows us to manually scroll to display options
                 * above or below the fold, as they are not actually being focused when active.
                 * @param {?} scrollTop
                 * @return {?}
                 */
                MatAutocomplete.prototype._setScrollTop = function (scrollTop) {
                    if (this.panel) {
                        this.panel.nativeElement.scrollTop = scrollTop;
                    }
                };
                /**
                 * Returns the panel's scrollTop.
                 * @return {?}
                 */
                MatAutocomplete.prototype._getScrollTop = function () {
                    return this.panel ? this.panel.nativeElement.scrollTop : 0;
                };
                /**
                 * Panel should hide itself when the option list is empty.
                 * @return {?}
                 */
                MatAutocomplete.prototype._setVisibility = function () {
                    this.showPanel = !!this.options.length;
                    this._setVisibilityClasses(this._classList);
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Emits the `select` event.
                 * @param {?} option
                 * @return {?}
                 */
                MatAutocomplete.prototype._emitSelectEvent = function (option) {
                    /** @type {?} */
                    var event = new MatAutocompleteSelectedEvent(this, option);
                    this.optionSelected.emit(event);
                };
                /**
                 * Sets the autocomplete visibility classes on a classlist based on the panel is visible.
                 * @private
                 * @param {?} classList
                 * @return {?}
                 */
                MatAutocomplete.prototype._setVisibilityClasses = function (classList) {
                    classList['mat-autocomplete-visible'] = this.showPanel;
                    classList['mat-autocomplete-hidden'] = !this.showPanel;
                };
                return MatAutocomplete;
            }(_MatAutocompleteMixinBase));
            MatAutocomplete.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{ selector: 'mat-autocomplete',
                            template: "<ng-template><div class=\"mat-autocomplete-panel\" role=\"listbox\" [id]=\"id\" [ngClass]=\"_classList\" #panel><ng-content></ng-content></div></ng-template>",
                            styles: [".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                            exportAs: 'matAutocomplete',
                            inputs: ['disableRipple'],
                            host: {
                                'class': 'mat-autocomplete'
                            },
                            providers: [
                                { provide: _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MAT_OPTION_PARENT_COMPONENT"], useExisting: MatAutocomplete }
                            ]
                        },] },
            ];
            /** @nocollapse */
            MatAutocomplete.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }
            ]; };
            MatAutocomplete.propDecorators = {
                template: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["TemplateRef"], { static: true },] }],
                panel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['panel', { static: false },] }],
                options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOption"], { descendants: true },] }],
                optionGroups: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOptgroup"],] }],
                displayWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                autoActiveFirstOption: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                panelWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                optionSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
                opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
                closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
                classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['class',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Directive applied to an element to make it usable
             * as a connection point for an autocomplete panel.
             */
            var MatAutocompleteOrigin = /** @class */ (function () {
                /**
                 * @param {?} elementRef
                 */
                function MatAutocompleteOrigin(elementRef) {
                    this.elementRef = elementRef;
                }
                return MatAutocompleteOrigin;
            }());
            MatAutocompleteOrigin.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                            selector: '[matAutocompleteOrigin]',
                            exportAs: 'matAutocompleteOrigin',
                        },] },
            ];
            /** @nocollapse */
            MatAutocompleteOrigin.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The height of each autocomplete option.
             * @type {?}
             */
            var AUTOCOMPLETE_OPTION_HEIGHT = 48;
            /**
             * The total height of the autocomplete panel.
             * @type {?}
             */
            var AUTOCOMPLETE_PANEL_HEIGHT = 256;
            /**
             * Injection token that determines the scroll handling while the autocomplete panel is open.
             * @type {?}
             */
            var MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mat-autocomplete-scroll-strategy');
            /**
             * \@docs-private
             * @param {?} overlay
             * @return {?}
             */
            function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {
                return ( /**
                 * @return {?}
                 */function () { return overlay.scrollStrategies.reposition(); });
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {
                provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,
                deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"]],
                useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,
            };
            /**
             * Provider that allows the autocomplete to register as a ControlValueAccessor.
             * \@docs-private
             * @type {?}
             */
            var MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NG_VALUE_ACCESSOR"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MatAutocompleteTrigger; })),
                multi: true
            };
            /**
             * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.
             * \@docs-private
             * @return {?}
             */
            function getMatAutocompleteMissingPanelError() {
                return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +
                    'Make sure that the id passed to the `matAutocomplete` is correct and that ' +
                    'you\'re attempting to open it after the ngAfterContentInit hook.');
            }
            var MatAutocompleteTrigger = /** @class */ (function () {
                /**
                 * @param {?} _element
                 * @param {?} _overlay
                 * @param {?} _viewContainerRef
                 * @param {?} _zone
                 * @param {?} _changeDetectorRef
                 * @param {?} scrollStrategy
                 * @param {?} _dir
                 * @param {?} _formField
                 * @param {?} _document
                 * @param {?=} _viewportRuler
                 */
                function MatAutocompleteTrigger(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {
                    var _this = this;
                    this._element = _element;
                    this._overlay = _overlay;
                    this._viewContainerRef = _viewContainerRef;
                    this._zone = _zone;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._dir = _dir;
                    this._formField = _formField;
                    this._document = _document;
                    this._viewportRuler = _viewportRuler;
                    this._componentDestroyed = false;
                    this._autocompleteDisabled = false;
                    /**
                     * Whether or not the label state is being overridden.
                     */
                    this._manuallyFloatingLabel = false;
                    /**
                     * Subscription to viewport size changes.
                     */
                    this._viewportSubscription = rxjs__WEBPACK_IMPORTED_MODULE_13__["Subscription"].EMPTY;
                    /**
                     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,
                     * closed autocomplete from being reopened if the user switches to another browser tab and then
                     * comes back.
                     */
                    this._canOpenOnNextFocus = true;
                    /**
                     * Stream of keyboard events that can close the panel.
                     */
                    this._closeKeyEventStream = new rxjs__WEBPACK_IMPORTED_MODULE_13__["Subject"]();
                    /**
                     * Event handler for when the window is blurred. Needs to be an
                     * arrow function in order to preserve the context.
                     */
                    this._windowBlurHandler = ( /**
                     * @return {?}
                     */function () {
                        // If the user blurred the window while the autocomplete is focused, it means that it'll be
                        // refocused when they come back. In this case we want to skip the first focus event, if the
                        // pane was closed, in order to avoid reopening it unintentionally.
                        _this._canOpenOnNextFocus =
                            _this._document.activeElement !== _this._element.nativeElement || _this.panelOpen;
                    });
                    /**
                     * `View -> model callback called when value changes`
                     */
                    this._onChange = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * `View -> model callback called when autocomplete has been touched`
                     */
                    this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * Position of the autocomplete panel relative to the trigger element. A position of `auto`
                     * will render the panel underneath the trigger if there is enough space for it to fit in
                     * the viewport, otherwise the panel will be shown above it. If the position is set to
                     * `above` or `below`, the panel will always be shown above or below the trigger. no matter
                     * whether it fits completely in the viewport.
                     */
                    this.position = 'auto';
                    /**
                     * `autocomplete` attribute to be set on the input element.
                     * \@docs-private
                     */
                    this.autocompleteAttribute = 'off';
                    this._overlayAttached = false;
                    /**
                     * Stream of autocomplete option selections.
                     */
                    this.optionSelections = ( /** @type {?} */(Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["defer"])(( /**
                     * @return {?}
                     */function () {
                        if (_this.autocomplete && _this.autocomplete.options) {
                            return Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["merge"]).apply(void 0, _this.autocomplete.options.map(( /**
                             * @param {?} option
                             * @return {?}
                             */function (/**
                             * @param {?} option
                             * @return {?}
                             */ option) { return option.onSelectionChange; })));
                        }
                        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.
                        // Return a stream that we'll replace with the real one once everything is in place.
                        return _this._zone.onStable
                            .asObservable()
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["switchMap"])(( /**
                     * @return {?}
                     */function () { return _this.optionSelections; })));
                    }))));
                    this._scrollStrategy = scrollStrategy;
                }
                Object.defineProperty(MatAutocompleteTrigger.prototype, "autocompleteDisabled", {
                    /**
                     * Whether the autocomplete is disabled. When disabled, the element will
                     * act as a regular input and the user won't be able to open the panel.
                     * @return {?}
                     */
                    get: function () { return this._autocompleteDisabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._autocompleteDisabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    if (typeof window !== 'undefined') {
                        this._zone.runOutsideAngular(( /**
                         * @return {?}
                         */function () {
                            window.addEventListener('blur', _this._windowBlurHandler);
                        }));
                        if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["_supportsShadowDom"])()) {
                            /** @type {?} */
                            var element = this._element.nativeElement;
                            /** @type {?} */
                            var rootNode = element.getRootNode ? element.getRootNode() : null;
                            // We need to take the `ShadowRoot` off of `window`, because the built-in types are
                            // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.
                            this._isInsideShadowRoot = rootNode instanceof (( /** @type {?} */(window))).ShadowRoot;
                        }
                    }
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype.ngOnChanges = function (changes) {
                    if (changes['position'] && this._positionStrategy) {
                        this._setStrategyPositions(this._positionStrategy);
                        if (this.panelOpen) {
                            ( /** @type {?} */(this._overlayRef)).updatePosition();
                        }
                    }
                };
                /**
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype.ngOnDestroy = function () {
                    if (typeof window !== 'undefined') {
                        window.removeEventListener('blur', this._windowBlurHandler);
                    }
                    this._viewportSubscription.unsubscribe();
                    this._componentDestroyed = true;
                    this._destroyPanel();
                    this._closeKeyEventStream.complete();
                };
                Object.defineProperty(MatAutocompleteTrigger.prototype, "panelOpen", {
                    /**
                     * Whether or not the autocomplete panel is open.
                     * @return {?}
                     */
                    get: function () {
                        return this._overlayAttached && this.autocomplete.showPanel;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Opens the autocomplete suggestion panel.
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype.openPanel = function () {
                    this._attachOverlay();
                    this._floatLabel();
                };
                /**
                 * Closes the autocomplete suggestion panel.
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype.closePanel = function () {
                    this._resetLabel();
                    if (!this._overlayAttached) {
                        return;
                    }
                    if (this.panelOpen) {
                        // Only emit if the panel was visible.
                        this.autocomplete.closed.emit();
                    }
                    this.autocomplete._isOpen = this._overlayAttached = false;
                    if (this._overlayRef && this._overlayRef.hasAttached()) {
                        this._overlayRef.detach();
                        this._closingActionsSubscription.unsubscribe();
                    }
                    // Note that in some cases this can end up being called after the component is destroyed.
                    // Add a check to ensure that we don't try to run change detection on a destroyed view.
                    if (!this._componentDestroyed) {
                        // We need to trigger change detection manually, because
                        // `fromEvent` doesn't seem to do it at the proper time.
                        // This ensures that the label is reset when the
                        // user clicks outside.
                        this._changeDetectorRef.detectChanges();
                    }
                };
                /**
                 * Updates the position of the autocomplete suggestion panel to ensure that it fits all options
                 * within the viewport.
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype.updatePosition = function () {
                    if (this._overlayAttached) {
                        ( /** @type {?} */(this._overlayRef)).updatePosition();
                    }
                };
                Object.defineProperty(MatAutocompleteTrigger.prototype, "panelClosingActions", {
                    /**
                     * A stream of actions that should close the autocomplete panel, including
                     * when an option is selected, on blur, and when TAB is pressed.
                     * @return {?}
                     */
                    get: function () {
                        var _this = this;
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["merge"])(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["filter"])(( /**
                         * @return {?}
                         */function () { return _this._overlayAttached; }))), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?
                            this._overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["filter"])(( /**
                             * @return {?}
                             */function () { return _this._overlayAttached; }))) :
                            Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["of"])()).pipe(
                        // Normalize the output so we return a consistent type.
                        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["map"])(( /**
                         * @param {?} event
                         * @return {?}
                         */function (/**
                         * @param {?} event
                         * @return {?}
                         */ event) { return event instanceof _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOptionSelectionChange"] ? event : null; })));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatAutocompleteTrigger.prototype, "activeOption", {
                    /**
                     * The currently active option, coerced to MatOption type.
                     * @return {?}
                     */
                    get: function () {
                        if (this.autocomplete && this.autocomplete._keyManager) {
                            return this.autocomplete._keyManager.activeItem;
                        }
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Stream of clicks outside of the autocomplete panel.
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._getOutsideClickStream = function () {
                    var _this = this;
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["merge"])(( /** @type {?} */(Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["fromEvent"])(this._document, 'click'))), ( /** @type {?} */(Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["fromEvent"])(this._document, 'touchend'))))
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["filter"])(( /**
                 * @param {?} event
                 * @return {?}
                 */function (/**
                 * @param {?} event
                 * @return {?}
                 */ event) {
                        // If we're in the Shadow DOM, the event target will be the shadow root, so we have to
                        // fall back to check the first element in the path of the click event.
                        /** @type {?} */
                        var clickTarget = ( /** @type {?} */((_this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :
                            event.target)));
                        /** @type {?} */
                        var formField = _this._formField ? _this._formField._elementRef.nativeElement : null;
                        return _this._overlayAttached && clickTarget !== _this._element.nativeElement &&
                            (!formField || !formField.contains(clickTarget)) &&
                            (!!_this._overlayRef && !_this._overlayRef.overlayElement.contains(clickTarget));
                    })));
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} value
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype.writeValue = function (value) {
                    var _this = this;
                    Promise.resolve(null).then(( /**
                     * @return {?}
                     */function () { return _this._setTriggerValue(value); }));
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype.setDisabledState = function (isDisabled) {
                    this._element.nativeElement.disabled = isDisabled;
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._handleKeydown = function (event) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    // Prevent the default action on all escape key presses. This is here primarily to bring IE
                    // in line with other browsers. By default, pressing escape on IE will cause it to revert
                    // the input value to the one that it had on focus, however it won't dispatch any events
                    // which means that the model value will be out of sync with the view.
                    if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["ESCAPE"]) {
                        event.preventDefault();
                    }
                    if (this.activeOption && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["ENTER"] && this.panelOpen) {
                        this.activeOption._selectViaInteraction();
                        this._resetActiveItem();
                        event.preventDefault();
                    }
                    else if (this.autocomplete) {
                        /** @type {?} */
                        var prevActiveItem = this.autocomplete._keyManager.activeItem;
                        /** @type {?} */
                        var isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["UP_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["DOWN_ARROW"];
                        if (this.panelOpen || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["TAB"]) {
                            this.autocomplete._keyManager.onKeydown(event);
                        }
                        else if (isArrowKey && this._canOpen()) {
                            this.openPanel();
                        }
                        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {
                            this._scrollToOption();
                        }
                    }
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._handleInput = function (event) {
                    /** @type {?} */
                    var target = ( /** @type {?} */(event.target));
                    /** @type {?} */
                    var value = target.value;
                    // Based on `NumberValueAccessor` from forms.
                    if (target.type === 'number') {
                        value = value == '' ? null : parseFloat(value);
                    }
                    // If the input has a placeholder, IE will fire the `input` event on page load,
                    // focus and blur, in addition to when the user actually changed the value. To
                    // filter out all of the extra events, we save the value on focus and between
                    // `input` events, and we check whether it changed.
                    // See: https://connect.microsoft.com/IE/feedback/details/885747/
                    if (this._previousValue !== value) {
                        this._previousValue = value;
                        this._onChange(value);
                        if (this._canOpen() && this._document.activeElement === event.target) {
                            this.openPanel();
                        }
                    }
                };
                /**
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._handleFocus = function () {
                    if (!this._canOpenOnNextFocus) {
                        this._canOpenOnNextFocus = true;
                    }
                    else if (this._canOpen()) {
                        this._previousValue = this._element.nativeElement.value;
                        this._attachOverlay();
                        this._floatLabel(true);
                    }
                };
                /**
                 * In "auto" mode, the label will animate down as soon as focus is lost.
                 * This causes the value to jump when selecting an option with the mouse.
                 * This method manually floats the label until the panel can be closed.
                 * @private
                 * @param {?=} shouldAnimate Whether the label should be animated when it is floated.
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._floatLabel = function (shouldAnimate) {
                    if (shouldAnimate === void 0) { shouldAnimate = false; }
                    if (this._formField && this._formField.floatLabel === 'auto') {
                        if (shouldAnimate) {
                            this._formField._animateAndLockLabel();
                        }
                        else {
                            this._formField.floatLabel = 'always';
                        }
                        this._manuallyFloatingLabel = true;
                    }
                };
                /**
                 * If the label has been manually elevated, return it to its normal state.
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._resetLabel = function () {
                    if (this._manuallyFloatingLabel) {
                        this._formField.floatLabel = 'auto';
                        this._manuallyFloatingLabel = false;
                    }
                };
                /**
                 * Given that we are not actually focusing active options, we must manually adjust scroll
                 * to reveal options below the fold. First, we find the offset of the option from the top
                 * of the panel. If that offset is below the fold, the new scrollTop will be the offset -
                 * the panel height + the option height, so the active option will be just visible at the
                 * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop
                 * will become the offset. If that offset is visible within the panel already, the scrollTop is
                 * not adjusted.
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._scrollToOption = function () {
                    /** @type {?} */
                    var index = this.autocomplete._keyManager.activeItemIndex || 0;
                    /** @type {?} */
                    var labelCount = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["_countGroupLabelsBeforeOption"])(index, this.autocomplete.options, this.autocomplete.optionGroups);
                    if (index === 0 && labelCount === 1) {
                        // If we've got one group label before the option and we're at the top option,
                        // scroll the list to the top. This is better UX than scrolling the list to the
                        // top of the option, because it allows the user to read the top group's label.
                        this.autocomplete._setScrollTop(0);
                    }
                    else {
                        /** @type {?} */
                        var newScrollPosition = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["_getOptionScrollPosition"])(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);
                        this.autocomplete._setScrollTop(newScrollPosition);
                    }
                };
                /**
                 * This method listens to a stream of panel closing actions and resets the
                 * stream every time the option list changes.
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._subscribeToClosingActions = function () {
                    var _this = this;
                    /** @type {?} */
                    var firstStable = this._zone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["take"])(1));
                    /** @type {?} */
                    var optionChanges = this.autocomplete.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["tap"])(( /**
                     * @return {?}
                     */function () { return _this._positionStrategy.reapplyLastPosition(); })), 
                    // Defer emitting to the stream until the next tick, because changing
                    // bindings in here will cause "changed after checked" errors.
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["delay"])(0));
                    // When the zone is stable initially, and when the option list changes...
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["merge"])(firstStable, optionChanges)
                        .pipe(
                    // create a new stream of panelClosingActions, replacing any previous streams
                    // that were created, and flatten it so our stream only emits closing events...
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["switchMap"])(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var wasOpen = _this.panelOpen;
                        _this._resetActiveItem();
                        _this.autocomplete._setVisibility();
                        if (_this.panelOpen) {
                            ( /** @type {?} */(_this._overlayRef)).updatePosition();
                            // If the `panelOpen` state changed, we need to make sure to emit the `opened`
                            // event, because we may not have emitted it when the panel was attached. This
                            // can happen if the users opens the panel and there are no options, but the
                            // options come in slightly later or as a result of the value changing.
                            if (wasOpen !== _this.panelOpen) {
                                _this.autocomplete.opened.emit();
                            }
                        }
                        return _this.panelClosingActions;
                    })), 
                    // when the first closing event occurs...
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["take"])(1))
                        // set the value, close the panel, and complete.
                        .subscribe(( /**
                 * @param {?} event
                 * @return {?}
                 */function (/**
                 * @param {?} event
                 * @return {?}
                 */ event) { return _this._setValueAndClose(event); }));
                };
                /**
                 * Destroys the autocomplete suggestion panel.
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._destroyPanel = function () {
                    if (this._overlayRef) {
                        this.closePanel();
                        this._overlayRef.dispose();
                        this._overlayRef = null;
                    }
                };
                /**
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._setTriggerValue = function (value) {
                    /** @type {?} */
                    var toDisplay = this.autocomplete && this.autocomplete.displayWith ?
                        this.autocomplete.displayWith(value) :
                        value;
                    // Simply falling back to an empty string if the display value is falsy does not work properly.
                    // The display value can also be the number zero and shouldn't fall back to an empty string.
                    /** @type {?} */
                    var inputValue = toDisplay != null ? toDisplay : '';
                    // If it's used within a `MatFormField`, we should set it through the property so it can go
                    // through change detection.
                    if (this._formField) {
                        this._formField._control.value = inputValue;
                    }
                    else {
                        this._element.nativeElement.value = inputValue;
                    }
                    this._previousValue = inputValue;
                };
                /**
                 * This method closes the panel, and if a value is specified, also sets the associated
                 * control to that value. It will also mark the control as dirty if this interaction
                 * stemmed from the user.
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._setValueAndClose = function (event) {
                    if (event && event.source) {
                        this._clearPreviousSelectedOption(event.source);
                        this._setTriggerValue(event.source.value);
                        this._onChange(event.source.value);
                        this._element.nativeElement.focus();
                        this.autocomplete._emitSelectEvent(event.source);
                    }
                    this.closePanel();
                };
                /**
                 * Clear any previous selected option and emit a selection change event for this option
                 * @private
                 * @param {?} skip
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._clearPreviousSelectedOption = function (skip) {
                    this.autocomplete.options.forEach(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) {
                        if (option != skip && option.selected) {
                            option.deselect();
                        }
                    }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._attachOverlay = function () {
                    var _this = this;
                    if (!this.autocomplete) {
                        throw getMatAutocompleteMissingPanelError();
                    }
                    /** @type {?} */
                    var overlayRef = this._overlayRef;
                    if (!overlayRef) {
                        this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["TemplatePortal"](this.autocomplete.template, this._viewContainerRef);
                        overlayRef = this._overlay.create(this._getOverlayConfig());
                        this._overlayRef = overlayRef;
                        // Use the `keydownEvents` in order to take advantage of
                        // the overlay event targeting provided by the CDK overlay.
                        overlayRef.keydownEvents().subscribe(( /**
                         * @param {?} event
                         * @return {?}
                         */function (/**
                         * @param {?} event
                         * @return {?}
                         */ event) {
                            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.
                            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction
                            if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["ESCAPE"] || (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["UP_ARROW"] && event.altKey)) {
                                _this._resetActiveItem();
                                _this._closeKeyEventStream.next();
                                // We need to stop propagation, otherwise the event will eventually
                                // reach the input itself and cause the overlay to be reopened.
                                event.stopPropagation();
                                event.preventDefault();
                            }
                        }));
                        if (this._viewportRuler) {
                            this._viewportSubscription = this._viewportRuler.change().subscribe(( /**
                             * @return {?}
                             */function () {
                                if (_this.panelOpen && overlayRef) {
                                    overlayRef.updateSize({ width: _this._getPanelWidth() });
                                }
                            }));
                        }
                    }
                    else {
                        // Update the trigger, panel width and direction, in case anything has changed.
                        this._positionStrategy.setOrigin(this._getConnectedElement());
                        overlayRef.updateSize({ width: this._getPanelWidth() });
                    }
                    if (overlayRef && !overlayRef.hasAttached()) {
                        overlayRef.attach(this._portal);
                        this._closingActionsSubscription = this._subscribeToClosingActions();
                    }
                    /** @type {?} */
                    var wasOpen = this.panelOpen;
                    this.autocomplete._setVisibility();
                    this.autocomplete._isOpen = this._overlayAttached = true;
                    // We need to do an extra `panelOpen` check in here, because the
                    // autocomplete won't be shown if there are no options.
                    if (this.panelOpen && wasOpen !== this.panelOpen) {
                        this.autocomplete.opened.emit();
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._getOverlayConfig = function () {
                    return new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayConfig"]({
                        positionStrategy: this._getOverlayPosition(),
                        scrollStrategy: this._scrollStrategy(),
                        width: this._getPanelWidth(),
                        direction: this._dir
                    });
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._getOverlayPosition = function () {
                    /** @type {?} */
                    var strategy = this._overlay.position()
                        .flexibleConnectedTo(this._getConnectedElement())
                        .withFlexibleDimensions(false)
                        .withPush(false);
                    this._setStrategyPositions(strategy);
                    this._positionStrategy = strategy;
                    return strategy;
                };
                /**
                 * Sets the positions on a position strategy based on the directive's input state.
                 * @private
                 * @param {?} positionStrategy
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._setStrategyPositions = function (positionStrategy) {
                    /** @type {?} */
                    var belowPosition = {
                        originX: 'start',
                        originY: 'bottom',
                        overlayX: 'start',
                        overlayY: 'top'
                    };
                    /** @type {?} */
                    var abovePosition = {
                        originX: 'start',
                        originY: 'top',
                        overlayX: 'start',
                        overlayY: 'bottom',
                        // The overlay edge connected to the trigger should have squared corners, while
                        // the opposite end has rounded corners. We apply a CSS class to swap the
                        // border-radius based on the overlay position.
                        panelClass: 'mat-autocomplete-panel-above'
                    };
                    /** @type {?} */
                    var positions;
                    if (this.position === 'above') {
                        positions = [abovePosition];
                    }
                    else if (this.position === 'below') {
                        positions = [belowPosition];
                    }
                    else {
                        positions = [belowPosition, abovePosition];
                    }
                    positionStrategy.withPositions(positions);
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._getConnectedElement = function () {
                    if (this.connectedTo) {
                        return this.connectedTo.elementRef;
                    }
                    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._getPanelWidth = function () {
                    return this.autocomplete.panelWidth || this._getHostWidth();
                };
                /**
                 * Returns the width of the input element, so the panel width can match it.
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._getHostWidth = function () {
                    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;
                };
                /**
                 * Resets the active item to -1 so arrow events will activate the
                 * correct options, or to 0 if the consumer opted into it.
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._resetActiveItem = function () {
                    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);
                };
                /**
                 * Determines whether the panel can be opened.
                 * @private
                 * @return {?}
                 */
                MatAutocompleteTrigger.prototype._canOpen = function () {
                    /** @type {?} */
                    var element = this._element.nativeElement;
                    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;
                };
                return MatAutocompleteTrigger;
            }());
            MatAutocompleteTrigger.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                            selector: "input[matAutocomplete], textarea[matAutocomplete]",
                            host: {
                                'class': 'mat-autocomplete-trigger',
                                '[attr.autocomplete]': 'autocompleteAttribute',
                                '[attr.role]': 'autocompleteDisabled ? null : "combobox"',
                                '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : "list"',
                                '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',
                                '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',
                                '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',
                                '[attr.aria-haspopup]': '!autocompleteDisabled',
                                // Note: we use `focusin`, as opposed to `focus`, in order to open the panel
                                // a little earlier. This avoids issues where IE delays the focusing of the input.
                                '(focusin)': '_handleFocus()',
                                '(blur)': '_onTouched()',
                                '(input)': '_handleInput($event)',
                                '(keydown)': '_handleKeydown($event)',
                            },
                            exportAs: 'matAutocompleteTrigger',
                            providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]
                        },] },
            ];
            /** @nocollapse */
            MatAutocompleteTrigger.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewContainerRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
                { type: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__["MatFormField"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Host"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_10__["DOCUMENT"],] }] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__["ViewportRuler"] }
            ]; };
            MatAutocompleteTrigger.propDecorators = {
                autocomplete: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['matAutocomplete',] }],
                position: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['matAutocompletePosition',] }],
                connectedTo: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['matAutocompleteConnectedTo',] }],
                autocompleteAttribute: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['autocomplete',] }],
                autocompleteDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['matAutocompleteDisabled',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatAutocompleteModule = /** @class */ (function () {
                function MatAutocompleteModule() {
                }
                return MatAutocompleteModule;
            }());
            MatAutocompleteModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOptionModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_10__["CommonModule"]],
                            exports: [
                                MatAutocomplete,
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatOptionModule"],
                                MatAutocompleteTrigger,
                                MatAutocompleteOrigin,
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]
                            ],
                            declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],
                            providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=autocomplete.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/badge.js": 
        /*!*********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/badge.js ***!
          \*********************************************************/
        /*! exports provided: MatBadgeModule, MatBadge */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatBadgeModule", function () { return MatBadgeModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatBadge", function () { return MatBadge; });
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId = 0;
            // Boilerplate for applying mixins to MatBadge.
            /**
             * \@docs-private
             */
            var MatBadgeBase = /** @class */ (function () {
                function MatBadgeBase() {
                }
                return MatBadgeBase;
            }());
            /** @type {?} */
            var _MatBadgeMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(MatBadgeBase);
            /**
             * Directive to display a text badge.
             */
            var MatBadge = /** @class */ (function (_super) {
                __extends(MatBadge, _super);
                /**
                 * @param {?} _ngZone
                 * @param {?} _elementRef
                 * @param {?} _ariaDescriber
                 * @param {?} _renderer
                 * @param {?=} _animationMode
                 */
                function MatBadge(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {
                    var _this = _super.call(this) || this;
                    _this._ngZone = _ngZone;
                    _this._elementRef = _elementRef;
                    _this._ariaDescriber = _ariaDescriber;
                    _this._renderer = _renderer;
                    _this._animationMode = _animationMode;
                    /**
                     * Whether the badge has any content.
                     */
                    _this._hasContent = false;
                    _this._color = 'primary';
                    _this._overlap = true;
                    /**
                     * Position the badge should reside.
                     * Accepts any combination of 'above'|'below' and 'before'|'after'
                     */
                    _this.position = 'above after';
                    /**
                     * Size of the badge. Can be 'small', 'medium', or 'large'.
                     */
                    _this.size = 'medium';
                    /**
                     * Unique id for the badge
                     */
                    _this._id = nextId++;
                    if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["isDevMode"])()) {
                        /** @type {?} */
                        var nativeElement = _elementRef.nativeElement;
                        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {
                            throw Error('matBadge must be attached to an element node.');
                        }
                    }
                    return _this;
                }
                Object.defineProperty(MatBadge.prototype, "color", {
                    /**
                     * The color of the badge. Can be `primary`, `accent`, or `warn`.
                     * @return {?}
                     */
                    get: function () { return this._color; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._setColor(value);
                        this._color = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatBadge.prototype, "overlap", {
                    /**
                     * Whether the badge should overlap its contents or not
                     * @return {?}
                     */
                    get: function () { return this._overlap; },
                    /**
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) {
                        this._overlap = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(val);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatBadge.prototype, "description", {
                    /**
                     * Message used to describe the decorated element via aria-describedby
                     * @return {?}
                     */
                    get: function () { return this._description; },
                    /**
                     * @param {?} newDescription
                     * @return {?}
                     */
                    set: function (newDescription) {
                        if (newDescription !== this._description) {
                            /** @type {?} */
                            var badgeElement = this._badgeElement;
                            this._updateHostAriaDescription(newDescription, this._description);
                            this._description = newDescription;
                            if (badgeElement) {
                                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :
                                    badgeElement.removeAttribute('aria-label');
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatBadge.prototype, "hidden", {
                    /**
                     * Whether the badge is hidden.
                     * @return {?}
                     */
                    get: function () { return this._hidden; },
                    /**
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) {
                        this._hidden = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(val);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Whether the badge is above the host or not
                 * @return {?}
                 */
                MatBadge.prototype.isAbove = function () {
                    return this.position.indexOf('below') === -1;
                };
                /**
                 * Whether the badge is after the host or not
                 * @return {?}
                 */
                MatBadge.prototype.isAfter = function () {
                    return this.position.indexOf('before') === -1;
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                MatBadge.prototype.ngOnChanges = function (changes) {
                    /** @type {?} */
                    var contentChange = changes['content'];
                    if (contentChange) {
                        /** @type {?} */
                        var value = contentChange.currentValue;
                        this._hasContent = value != null && ("" + value).trim().length > 0;
                        this._updateTextContent();
                    }
                };
                /**
                 * @return {?}
                 */
                MatBadge.prototype.ngOnDestroy = function () {
                    /** @type {?} */
                    var badgeElement = this._badgeElement;
                    if (badgeElement) {
                        if (this.description) {
                            this._ariaDescriber.removeDescription(badgeElement, this.description);
                        }
                        // When creating a badge through the Renderer, Angular will keep it in an index.
                        // We have to destroy it ourselves, otherwise it'll be retained in memory.
                        if (this._renderer.destroyNode) {
                            this._renderer.destroyNode(badgeElement);
                        }
                    }
                };
                /**
                 * Gets the element into which the badge's content is being rendered.
                 * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).
                 * @return {?}
                 */
                MatBadge.prototype.getBadgeElement = function () {
                    return this._badgeElement;
                };
                /**
                 * Injects a span element into the DOM with the content.
                 * @private
                 * @return {?}
                 */
                MatBadge.prototype._updateTextContent = function () {
                    if (!this._badgeElement) {
                        this._badgeElement = this._createBadgeElement();
                    }
                    else {
                        this._badgeElement.textContent = this.content;
                    }
                    return this._badgeElement;
                };
                /**
                 * Creates the badge element
                 * @private
                 * @return {?}
                 */
                MatBadge.prototype._createBadgeElement = function () {
                    /** @type {?} */
                    var badgeElement = this._renderer.createElement('span');
                    /** @type {?} */
                    var activeClass = 'mat-badge-active';
                    /** @type {?} */
                    var contentClass = 'mat-badge-content';
                    // Clear any existing badges which may have persisted from a server-side render.
                    this._clearExistingBadges(contentClass);
                    badgeElement.setAttribute('id', "mat-badge-content-" + this._id);
                    badgeElement.classList.add(contentClass);
                    badgeElement.textContent = this.content;
                    if (this._animationMode === 'NoopAnimations') {
                        badgeElement.classList.add('_mat-animation-noopable');
                    }
                    if (this.description) {
                        badgeElement.setAttribute('aria-label', this.description);
                    }
                    this._elementRef.nativeElement.appendChild(badgeElement);
                    // animate in after insertion
                    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () {
                            requestAnimationFrame(( /**
                             * @return {?}
                             */function () {
                                badgeElement.classList.add(activeClass);
                            }));
                        }));
                    }
                    else {
                        badgeElement.classList.add(activeClass);
                    }
                    return badgeElement;
                };
                /**
                 * Sets the aria-label property on the element
                 * @private
                 * @param {?} newDescription
                 * @param {?} oldDescription
                 * @return {?}
                 */
                MatBadge.prototype._updateHostAriaDescription = function (newDescription, oldDescription) {
                    // ensure content available before setting label
                    /** @type {?} */
                    var content = this._updateTextContent();
                    if (oldDescription) {
                        this._ariaDescriber.removeDescription(content, oldDescription);
                    }
                    if (newDescription) {
                        this._ariaDescriber.describe(content, newDescription);
                    }
                };
                /**
                 * Adds css theme class given the color to the component host
                 * @private
                 * @param {?} colorPalette
                 * @return {?}
                 */
                MatBadge.prototype._setColor = function (colorPalette) {
                    if (colorPalette !== this._color) {
                        if (this._color) {
                            this._elementRef.nativeElement.classList.remove("mat-badge-" + this._color);
                        }
                        if (colorPalette) {
                            this._elementRef.nativeElement.classList.add("mat-badge-" + colorPalette);
                        }
                    }
                };
                /**
                 * Clears any existing badges that might be left over from server-side rendering.
                 * @private
                 * @param {?} cssClass
                 * @return {?}
                 */
                MatBadge.prototype._clearExistingBadges = function (cssClass) {
                    /** @type {?} */
                    var element = this._elementRef.nativeElement;
                    /** @type {?} */
                    var childCount = element.children.length;
                    // Use a reverse while, because we'll be removing elements from the list as we're iterating.
                    while (childCount--) {
                        /** @type {?} */
                        var currentChild = element.children[childCount];
                        if (currentChild.classList.contains(cssClass)) {
                            element.removeChild(currentChild);
                        }
                    }
                };
                return MatBadge;
            }(_MatBadgeMixinBase));
            MatBadge.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                            selector: '[matBadge]',
                            inputs: ['disabled: matBadgeDisabled'],
                            host: {
                                'class': 'mat-badge',
                                '[class.mat-badge-overlap]': 'overlap',
                                '[class.mat-badge-above]': 'isAbove()',
                                '[class.mat-badge-below]': '!isAbove()',
                                '[class.mat-badge-before]': '!isAfter()',
                                '[class.mat-badge-after]': 'isAfter()',
                                '[class.mat-badge-small]': 'size === "small"',
                                '[class.mat-badge-medium]': 'size === "medium"',
                                '[class.mat-badge-large]': 'size === "large"',
                                '[class.mat-badge-hidden]': 'hidden || !_hasContent',
                                '[class.mat-badge-disabled]': 'disabled',
                            },
                        },] },
            ];
            /** @nocollapse */
            MatBadge.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["AriaDescriber"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Renderer2"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_4__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            MatBadge.propDecorators = {
                color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['matBadgeColor',] }],
                overlap: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['matBadgeOverlap',] }],
                position: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['matBadgePosition',] }],
                content: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['matBadge',] }],
                description: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['matBadgeDescription',] }],
                size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['matBadgeSize',] }],
                hidden: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['matBadgeHidden',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatBadgeModule = /** @class */ (function () {
                function MatBadgeModule() {
                }
                return MatBadgeModule;
            }());
            MatBadgeModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                            imports: [
                                _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]
                            ],
                            exports: [MatBadge],
                            declarations: [MatBadge],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=badge.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/bottom-sheet.js": 
        /*!****************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/bottom-sheet.js ***!
          \****************************************************************/
        /*! exports provided: MatBottomSheetModule, MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, MatBottomSheet, MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig, MatBottomSheetContainer, matBottomSheetAnimations, MatBottomSheetRef */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatBottomSheetModule", function () { return MatBottomSheetModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_BOTTOM_SHEET_DEFAULT_OPTIONS", function () { return MAT_BOTTOM_SHEET_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatBottomSheet", function () { return MatBottomSheet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_BOTTOM_SHEET_DATA", function () { return MAT_BOTTOM_SHEET_DATA; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatBottomSheetConfig", function () { return MatBottomSheetConfig; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatBottomSheetContainer", function () { return MatBottomSheetContainer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matBottomSheetAnimations", function () { return matBottomSheetAnimations; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatBottomSheetRef", function () { return MatBottomSheetRef; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/layout */ "./node_modules/@angular/cdk/esm2015/layout.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used to access the data that was passed in to a bottom sheet.
             * @type {?}
             */
            var MAT_BOTTOM_SHEET_DATA = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MatBottomSheetData');
            /**
             * Configuration used when opening a bottom sheet.
             * @template D
             */
            var MatBottomSheetConfig = /** @class */ (function () {
                function MatBottomSheetConfig() {
                    /**
                     * Data being injected into the child component.
                     */
                    this.data = null;
                    /**
                     * Whether the bottom sheet has a backdrop.
                     */
                    this.hasBackdrop = true;
                    /**
                     * Whether the user can use escape or clicking outside to close the bottom sheet.
                     */
                    this.disableClose = false;
                    /**
                     * Aria label to assign to the bottom sheet element.
                     */
                    this.ariaLabel = null;
                    /**
                     * Whether the bottom sheet should close when the user goes backwards/forwards in history.
                     * Note that this usually doesn't include clicking on links (unless the user is using
                     * the `HashLocationStrategy`).
                     */
                    this.closeOnNavigation = true;
                    // Note that this is disabled by default, because while the a11y recommendations are to focus
                    // the first focusable element, doing so prevents screen readers from reading out the
                    // rest of the bottom sheet content.
                    /**
                     * Whether the bottom sheet should focus the first focusable element on open.
                     */
                    this.autoFocus = false;
                    /**
                     * Whether the bottom sheet should restore focus to the
                     * previously-focused element, after it's closed.
                     */
                    this.restoreFocus = true;
                }
                return MatBottomSheetConfig;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Animations used by the Material bottom sheet.
             * @type {?}
             */
            var matBottomSheetAnimations = {
                /**
                 * Animation that shows and hides a bottom sheet.
                 */
                bottomSheetState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["trigger"])('state', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('void, hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({ transform: 'translateY(100%)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({ transform: 'translateY(0%)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["transition"])('visible => void, visible => hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["animate"])(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["AnimationDurations"].COMPLEX + " " + _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["AnimationCurves"].ACCELERATION_CURVE)),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["transition"])('void => visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["animate"])(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["AnimationDurations"].EXITING + " " + _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["AnimationCurves"].DECELERATION_CURVE)),
                ])
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar
            /**
             * Internal component that wraps user-provided bottom sheet content.
             * \@docs-private
             */
            var MatBottomSheetContainer = /** @class */ (function (_super) {
                __extends(MatBottomSheetContainer, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} _changeDetectorRef
                 * @param {?} _focusTrapFactory
                 * @param {?} breakpointObserver
                 * @param {?} document
                 * @param {?} bottomSheetConfig
                 */
                function MatBottomSheetContainer(_elementRef, _changeDetectorRef, _focusTrapFactory, breakpointObserver, document, bottomSheetConfig) {
                    var _this = _super.call(this) || this;
                    _this._elementRef = _elementRef;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._focusTrapFactory = _focusTrapFactory;
                    _this.bottomSheetConfig = bottomSheetConfig;
                    /**
                     * The state of the bottom sheet animations.
                     */
                    _this._animationState = 'void';
                    /**
                     * Emits whenever the state of the animation changes.
                     */
                    _this._animationStateChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Element that was focused before the bottom sheet was opened.
                     */
                    _this._elementFocusedBeforeOpened = null;
                    _this._document = document;
                    _this._breakpointSubscription = breakpointObserver
                        .observe([_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_4__["Breakpoints"].Medium, _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_4__["Breakpoints"].Large, _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_4__["Breakpoints"].XLarge])
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this._toggleClass('mat-bottom-sheet-container-medium', breakpointObserver.isMatched(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_4__["Breakpoints"].Medium));
                        _this._toggleClass('mat-bottom-sheet-container-large', breakpointObserver.isMatched(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_4__["Breakpoints"].Large));
                        _this._toggleClass('mat-bottom-sheet-container-xlarge', breakpointObserver.isMatched(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_4__["Breakpoints"].XLarge));
                    }));
                    return _this;
                }
                /**
                 * Attach a component portal as content to this bottom sheet container.
                 * @template T
                 * @param {?} portal
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype.attachComponentPortal = function (portal) {
                    this._validatePortalAttached();
                    this._setPanelClass();
                    this._savePreviouslyFocusedElement();
                    return this._portalOutlet.attachComponentPortal(portal);
                };
                /**
                 * Attach a template portal as content to this bottom sheet container.
                 * @template C
                 * @param {?} portal
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype.attachTemplatePortal = function (portal) {
                    this._validatePortalAttached();
                    this._setPanelClass();
                    this._savePreviouslyFocusedElement();
                    return this._portalOutlet.attachTemplatePortal(portal);
                };
                /**
                 * Begin animation of bottom sheet entrance into view.
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype.enter = function () {
                    if (!this._destroyed) {
                        this._animationState = 'visible';
                        this._changeDetectorRef.detectChanges();
                    }
                };
                /**
                 * Begin animation of the bottom sheet exiting from view.
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype.exit = function () {
                    if (!this._destroyed) {
                        this._animationState = 'hidden';
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype.ngOnDestroy = function () {
                    this._breakpointSubscription.unsubscribe();
                    this._destroyed = true;
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype._onAnimationDone = function (event) {
                    if (event.toState === 'hidden') {
                        this._restoreFocus();
                    }
                    else if (event.toState === 'visible') {
                        this._trapFocus();
                    }
                    this._animationStateChanged.emit(event);
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype._onAnimationStart = function (event) {
                    this._animationStateChanged.emit(event);
                };
                /**
                 * @private
                 * @param {?} cssClass
                 * @param {?} add
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype._toggleClass = function (cssClass, add) {
                    /** @type {?} */
                    var classList = this._elementRef.nativeElement.classList;
                    add ? classList.add(cssClass) : classList.remove(cssClass);
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype._validatePortalAttached = function () {
                    if (this._portalOutlet.hasAttached()) {
                        throw Error('Attempting to attach bottom sheet content after content is already attached');
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype._setPanelClass = function () {
                    /** @type {?} */
                    var element = this._elementRef.nativeElement;
                    /** @type {?} */
                    var panelClass = this.bottomSheetConfig.panelClass;
                    if (Array.isArray(panelClass)) {
                        // Note that we can't use a spread here, because IE doesn't support multiple arguments.
                        panelClass.forEach(( /**
                         * @param {?} cssClass
                         * @return {?}
                         */function (/**
                         * @param {?} cssClass
                         * @return {?}
                         */ cssClass) { return element.classList.add(cssClass); }));
                    }
                    else if (panelClass) {
                        element.classList.add(panelClass);
                    }
                };
                /**
                 * Moves the focus inside the focus trap.
                 * @private
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype._trapFocus = function () {
                    /** @type {?} */
                    var element = this._elementRef.nativeElement;
                    if (!this._focusTrap) {
                        this._focusTrap = this._focusTrapFactory.create(element);
                    }
                    if (this.bottomSheetConfig.autoFocus) {
                        this._focusTrap.focusInitialElementWhenReady();
                    }
                    else {
                        /** @type {?} */
                        var activeElement = this._document.activeElement;
                        // Otherwise ensure that focus is on the container. It's possible that a different
                        // component tried to move focus while the open animation was running. See:
                        // https://github.com/angular/components/issues/16215. Note that we only want to do this
                        // if the focus isn't inside the bottom sheet already, because it's possible that the
                        // consumer turned off `autoFocus` in order to move focus themselves.
                        if (activeElement !== element && !element.contains(activeElement)) {
                            element.focus();
                        }
                    }
                };
                /**
                 * Restores focus to the element that was focused before the bottom sheet was opened.
                 * @private
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype._restoreFocus = function () {
                    /** @type {?} */
                    var toFocus = this._elementFocusedBeforeOpened;
                    // We need the extra check, because IE can set the `activeElement` to null in some cases.
                    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {
                        toFocus.focus();
                    }
                    if (this._focusTrap) {
                        this._focusTrap.destroy();
                    }
                };
                /**
                 * Saves a reference to the element that was focused before the bottom sheet was opened.
                 * @private
                 * @return {?}
                 */
                MatBottomSheetContainer.prototype._savePreviouslyFocusedElement = function () {
                    var _this = this;
                    this._elementFocusedBeforeOpened = ( /** @type {?} */(this._document.activeElement));
                    // The `focus` method isn't available during server-side rendering.
                    if (this._elementRef.nativeElement.focus) {
                        Promise.resolve().then(( /**
                         * @return {?}
                         */function () { return _this._elementRef.nativeElement.focus(); }));
                    }
                };
                return MatBottomSheetContainer;
            }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["BasePortalOutlet"]));
            MatBottomSheetContainer.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-bottom-sheet-container',
                            template: "<ng-template cdkPortalOutlet></ng-template>",
                            styles: [".mat-bottom-sheet-container{padding:8px 16px;min-width:100vw;box-sizing:border-box;display:block;outline:0;max-height:80vh;overflow:auto}@media (-ms-high-contrast:active){.mat-bottom-sheet-container{outline:1px solid}}.mat-bottom-sheet-container-large,.mat-bottom-sheet-container-medium,.mat-bottom-sheet-container-xlarge{border-top-left-radius:4px;border-top-right-radius:4px}.mat-bottom-sheet-container-medium{min-width:384px;max-width:calc(100vw - 128px)}.mat-bottom-sheet-container-large{min-width:512px;max-width:calc(100vw - 256px)}.mat-bottom-sheet-container-xlarge{min-width:576px;max-width:calc(100vw - 384px)}"],
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            animations: [matBottomSheetAnimations.bottomSheetState],
                            host: {
                                'class': 'mat-bottom-sheet-container',
                                'tabindex': '-1',
                                'role': 'dialog',
                                'aria-modal': 'true',
                                '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',
                                '[@state]': '_animationState',
                                '(@state.start)': '_onAnimationStart($event)',
                                '(@state.done)': '_onAnimationDone($event)'
                            },
                        },] },
            ];
            /** @nocollapse */
            MatBottomSheetContainer.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["FocusTrapFactory"] },
                { type: _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_4__["BreakpointObserver"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"],] }] },
                { type: MatBottomSheetConfig }
            ]; };
            MatBottomSheetContainer.propDecorators = {
                _portalOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["CdkPortalOutlet"], { static: true },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatBottomSheetModule = /** @class */ (function () {
                function MatBottomSheetModule() {
                }
                return MatBottomSheetModule;
            }());
            MatBottomSheetModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["OverlayModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"],
                                _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["PortalModule"],
                            ],
                            exports: [MatBottomSheetContainer, _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]],
                            declarations: [MatBottomSheetContainer],
                            entryComponents: [MatBottomSheetContainer],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Reference to a bottom sheet dispatched from the bottom sheet service.
             * @template T, R
             */
            var MatBottomSheetRef = /** @class */ (function () {
                /**
                 * @param {?} containerInstance
                 * @param {?} _overlayRef
                 * @param {?=} _location
                 */
                function MatBottomSheetRef(containerInstance, _overlayRef, 
                // @breaking-change 8.0.0 `_location` parameter to be removed.
                _location) {
                    var _this = this;
                    this._overlayRef = _overlayRef;
                    /**
                     * Subject for notifying the user that the bottom sheet has been dismissed.
                     */
                    this._afterDismissed = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    /**
                     * Subject for notifying the user that the bottom sheet has opened and appeared.
                     */
                    this._afterOpened = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    this.containerInstance = containerInstance;
                    this.disableClose = containerInstance.bottomSheetConfig.disableClose;
                    // Emit when opening animation completes
                    containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) { return event.phaseName === 'done' && event.toState === 'visible'; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this._afterOpened.next();
                        _this._afterOpened.complete();
                    }));
                    // Dispose overlay when closing animation is complete
                    containerInstance._animationStateChanged
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                 * @param {?} event
                 * @return {?}
                 */function (/**
                 * @param {?} event
                 * @return {?}
                 */ event) { return event.phaseName === 'done' && event.toState === 'hidden'; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        clearTimeout(_this._closeFallbackTimeout);
                        _overlayRef.dispose();
                    }));
                    _overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._afterDismissed.next(_this._result);
                        _this._afterDismissed.complete();
                    }));
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"])(_overlayRef.backdropClick(), _overlayRef.keydownEvents().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) { return event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["ESCAPE"]; })))).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        if (!_this.disableClose &&
                            (event.type !== 'keydown' || !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["hasModifierKey"])(( /** @type {?} */(event))))) {
                            event.preventDefault();
                            _this.dismiss();
                        }
                    }));
                }
                /**
                 * Dismisses the bottom sheet.
                 * @param {?=} result Data to be passed back to the bottom sheet opener.
                 * @return {?}
                 */
                MatBottomSheetRef.prototype.dismiss = function (result) {
                    var _this = this;
                    if (!this._afterDismissed.closed) {
                        // Transition the backdrop in parallel to the bottom sheet.
                        this.containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                         * @param {?} event
                         * @return {?}
                         */function (/**
                         * @param {?} event
                         * @return {?}
                         */ event) { return event.phaseName === 'start'; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1)).subscribe(( /**
                         * @param {?} event
                         * @return {?}
                         */function (/**
                         * @param {?} event
                         * @return {?}
                         */ event) {
                            // The logic that disposes of the overlay depends on the exit animation completing, however
                            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback
                            // timeout which will clean everything up if the animation hasn't fired within the specified
                            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the
                            // vast majority of cases the timeout will have been cleared before it has fired.
                            _this._closeFallbackTimeout = setTimeout(( /**
                             * @return {?}
                             */function () {
                                _this._overlayRef.dispose();
                            }), event.totalTime + 100);
                            _this._overlayRef.detachBackdrop();
                        }));
                        this._result = result;
                        this.containerInstance.exit();
                    }
                };
                /**
                 * Gets an observable that is notified when the bottom sheet is finished closing.
                 * @return {?}
                 */
                MatBottomSheetRef.prototype.afterDismissed = function () {
                    return this._afterDismissed.asObservable();
                };
                /**
                 * Gets an observable that is notified when the bottom sheet has opened and appeared.
                 * @return {?}
                 */
                MatBottomSheetRef.prototype.afterOpened = function () {
                    return this._afterOpened.asObservable();
                };
                /**
                 * Gets an observable that emits when the overlay's backdrop has been clicked.
                 * @return {?}
                 */
                MatBottomSheetRef.prototype.backdropClick = function () {
                    return this._overlayRef.backdropClick();
                };
                /**
                 * Gets an observable that emits when keydown events are targeted on the overlay.
                 * @return {?}
                 */
                MatBottomSheetRef.prototype.keydownEvents = function () {
                    return this._overlayRef.keydownEvents();
                };
                return MatBottomSheetRef;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used to specify default bottom sheet options.
             * @type {?}
             */
            var MAT_BOTTOM_SHEET_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-bottom-sheet-default-options');
            /**
             * Service to trigger Material Design bottom sheets.
             */
            var MatBottomSheet = /** @class */ (function () {
                /**
                 * @param {?} _overlay
                 * @param {?} _injector
                 * @param {?} _parentBottomSheet
                 * @param {?=} _location
                 * @param {?=} _defaultOptions
                 */
                function MatBottomSheet(_overlay, _injector, _parentBottomSheet, _location, _defaultOptions) {
                    this._overlay = _overlay;
                    this._injector = _injector;
                    this._parentBottomSheet = _parentBottomSheet;
                    this._location = _location;
                    this._defaultOptions = _defaultOptions;
                    this._bottomSheetRefAtThisLevel = null;
                }
                Object.defineProperty(MatBottomSheet.prototype, "_openedBottomSheetRef", {
                    /**
                     * Reference to the currently opened bottom sheet.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var parent = this._parentBottomSheet;
                        return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._parentBottomSheet) {
                            this._parentBottomSheet._openedBottomSheetRef = value;
                        }
                        else {
                            this._bottomSheetRefAtThisLevel = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @template T, D, R
                 * @param {?} componentOrTemplateRef
                 * @param {?=} config
                 * @return {?}
                 */
                MatBottomSheet.prototype.open = function (componentOrTemplateRef, config) {
                    var _this = this;
                    /** @type {?} */
                    var _config = _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);
                    /** @type {?} */
                    var overlayRef = this._createOverlay(_config);
                    /** @type {?} */
                    var container = this._attachContainer(overlayRef, _config);
                    /** @type {?} */
                    var ref = new MatBottomSheetRef(container, overlayRef, this._location);
                    if (componentOrTemplateRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]) {
                        container.attachTemplatePortal(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["TemplatePortal"](componentOrTemplateRef, ( /** @type {?} */(null)), ( /** @type {?} */({
                            $implicit: _config.data,
                            bottomSheetRef: ref
                        }))));
                    }
                    else {
                        /** @type {?} */
                        var portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["ComponentPortal"](componentOrTemplateRef, undefined, this._createInjector(_config, ref));
                        /** @type {?} */
                        var contentRef = container.attachComponentPortal(portal);
                        ref.instance = contentRef.instance;
                    }
                    // When the bottom sheet is dismissed, clear the reference to it.
                    ref.afterDismissed().subscribe(( /**
                     * @return {?}
                     */function () {
                        // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.
                        if (_this._openedBottomSheetRef == ref) {
                            _this._openedBottomSheetRef = null;
                        }
                    }));
                    if (this._openedBottomSheetRef) {
                        // If a bottom sheet is already in view, dismiss it and enter the
                        // new bottom sheet after exit animation is complete.
                        this._openedBottomSheetRef.afterDismissed().subscribe(( /**
                         * @return {?}
                         */function () { return ref.containerInstance.enter(); }));
                        this._openedBottomSheetRef.dismiss();
                    }
                    else {
                        // If no bottom sheet is in view, enter the new bottom sheet.
                        ref.containerInstance.enter();
                    }
                    this._openedBottomSheetRef = ref;
                    return ref;
                };
                /**
                 * Dismisses the currently-visible bottom sheet.
                 * @return {?}
                 */
                MatBottomSheet.prototype.dismiss = function () {
                    if (this._openedBottomSheetRef) {
                        this._openedBottomSheetRef.dismiss();
                    }
                };
                /**
                 * @return {?}
                 */
                MatBottomSheet.prototype.ngOnDestroy = function () {
                    if (this._bottomSheetRefAtThisLevel) {
                        this._bottomSheetRefAtThisLevel.dismiss();
                    }
                };
                /**
                 * Attaches the bottom sheet container component to the overlay.
                 * @private
                 * @param {?} overlayRef
                 * @param {?} config
                 * @return {?}
                 */
                MatBottomSheet.prototype._attachContainer = function (overlayRef, config) {
                    /** @type {?} */
                    var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
                    /** @type {?} */
                    var injector = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["PortalInjector"](userInjector || this._injector, new WeakMap([
                        [MatBottomSheetConfig, config]
                    ]));
                    /** @type {?} */
                    var containerPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["ComponentPortal"](MatBottomSheetContainer, config.viewContainerRef, injector);
                    /** @type {?} */
                    var containerRef = overlayRef.attach(containerPortal);
                    return containerRef.instance;
                };
                /**
                 * Creates a new overlay and places it in the correct location.
                 * @private
                 * @param {?} config The user-specified bottom sheet config.
                 * @return {?}
                 */
                MatBottomSheet.prototype._createOverlay = function (config) {
                    /** @type {?} */
                    var overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["OverlayConfig"]({
                        direction: config.direction,
                        hasBackdrop: config.hasBackdrop,
                        disposeOnNavigation: config.closeOnNavigation,
                        maxWidth: '100%',
                        scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),
                        positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')
                    });
                    if (config.backdropClass) {
                        overlayConfig.backdropClass = config.backdropClass;
                    }
                    return this._overlay.create(overlayConfig);
                };
                /**
                 * Creates an injector to be used inside of a bottom sheet component.
                 * @private
                 * @template T
                 * @param {?} config Config that was used to create the bottom sheet.
                 * @param {?} bottomSheetRef Reference to the bottom sheet.
                 * @return {?}
                 */
                MatBottomSheet.prototype._createInjector = function (config, bottomSheetRef) {
                    /** @type {?} */
                    var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
                    /** @type {?} */
                    var injectionTokens = new WeakMap([
                        [MatBottomSheetRef, bottomSheetRef],
                        [MAT_BOTTOM_SHEET_DATA, config.data]
                    ]);
                    if (config.direction &&
                        (!userInjector || !userInjector.get(_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__["Directionality"], null))) {
                        injectionTokens.set(_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__["Directionality"], {
                            value: config.direction,
                            change: Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["of"])()
                        });
                    }
                    return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["PortalInjector"](userInjector || this._injector, injectionTokens);
                };
                return MatBottomSheet;
            }());
            MatBottomSheet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: MatBottomSheetModule },] },
            ];
            /** @nocollapse */
            MatBottomSheet.ctorParameters = function () { return [
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["Overlay"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"] },
                { type: MatBottomSheet, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }] },
                { type: _angular_common__WEBPACK_IMPORTED_MODULE_5__["Location"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: MatBottomSheetConfig, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_BOTTOM_SHEET_DEFAULT_OPTIONS,] }] }
            ]; };
            /** @nocollapse */ MatBottomSheet.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function MatBottomSheet_Factory() { return new MatBottomSheet(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["Overlay"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["INJECTOR"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(MatBottomSheet, 12), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_5__["Location"], 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, 8)); }, token: MatBottomSheet, providedIn: MatBottomSheetModule });
            /**
             * Applies default options to the bottom sheet config.
             * @param {?} defaults Object containing the default values to which to fall back.
             * @param {?=} config The configuration to which the defaults will be applied.
             * @return {?} The new configuration object with defaults applied.
             */
            function _applyConfigDefaults(defaults, config) {
                return Object.assign({}, defaults, config);
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=bottom-sheet.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/button-toggle.js": 
        /*!*****************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/button-toggle.js ***!
          \*****************************************************************/
        /*! exports provided: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggle, MatButtonToggleModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS", function () { return MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR", function () { return MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatButtonToggleGroupMultiple", function () { return MatButtonToggleGroupMultiple; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatButtonToggleChange", function () { return MatButtonToggleChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatButtonToggleGroup", function () { return MatButtonToggleGroup; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatButtonToggle", function () { return MatButtonToggle; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatButtonToggleModule", function () { return MatButtonToggleModule; });
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used to configure the
             * default options for all button toggles within an app.
             * @type {?}
             */
            var MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');
            /**
             * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.
             * This allows it to support [(ngModel)].
             * \@docs-private
             * @type {?}
             */
            var MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALUE_ACCESSOR"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MatButtonToggleGroup; })),
                multi: true
            };
            /**
             * @deprecated Use `MatButtonToggleGroup` instead.
             * \@breaking-change 8.0.0
             */
            var MatButtonToggleGroupMultiple = /** @class */ (function () {
                function MatButtonToggleGroupMultiple() {
                }
                return MatButtonToggleGroupMultiple;
            }());
            /** @type {?} */
            var _uniqueIdCounter = 0;
            /**
             * Change event object emitted by MatButtonToggle.
             */
            var MatButtonToggleChange = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} value
                 */
                function MatButtonToggleChange(source, value) {
                    this.source = source;
                    this.value = value;
                }
                return MatButtonToggleChange;
            }());
            /**
             * Exclusive selection button toggle group that behaves like a radio-button group.
             */
            var MatButtonToggleGroup = /** @class */ (function () {
                /**
                 * @param {?} _changeDetector
                 * @param {?=} defaultOptions
                 */
                function MatButtonToggleGroup(_changeDetector, defaultOptions) {
                    this._changeDetector = _changeDetector;
                    this._vertical = false;
                    this._multiple = false;
                    this._disabled = false;
                    /**
                     * The method to be called in order to update ngModel.
                     * Now `ngModel` binding is not supported in multiple selection mode.
                     */
                    this._controlValueAccessorChangeFn = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * onTouch function registered via registerOnTouch (ControlValueAccessor).
                     */
                    this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    this._name = "mat-button-toggle-group-" + _uniqueIdCounter++;
                    /**
                     * Event that emits whenever the value of the group changes.
                     * Used to facilitate two-way data binding.
                     * \@docs-private
                     */
                    this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Event emitted when the group's value changes.
                     */
                    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    this.appearance =
                        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';
                }
                Object.defineProperty(MatButtonToggleGroup.prototype, "name", {
                    /**
                     * `name` attribute for the underlying `input` element.
                     * @return {?}
                     */
                    get: function () { return this._name; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        var _this = this;
                        this._name = value;
                        if (this._buttonToggles) {
                            this._buttonToggles.forEach(( /**
                             * @param {?} toggle
                             * @return {?}
                             */function (/**
                             * @param {?} toggle
                             * @return {?}
                             */ toggle) {
                                toggle.name = _this._name;
                                toggle._markForCheck();
                            }));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatButtonToggleGroup.prototype, "vertical", {
                    /**
                     * Whether the toggle group is vertical.
                     * @return {?}
                     */
                    get: function () { return this._vertical; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._vertical = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatButtonToggleGroup.prototype, "value", {
                    /**
                     * Value of the toggle group.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var selected = this._selectionModel ? this._selectionModel.selected : [];
                        if (this.multiple) {
                            return selected.map(( /**
                             * @param {?} toggle
                             * @return {?}
                             */function (/**
                             * @param {?} toggle
                             * @return {?}
                             */ toggle) { return toggle.value; }));
                        }
                        return selected[0] ? selected[0].value : undefined;
                    },
                    /**
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        this._setSelectionByValue(newValue);
                        this.valueChange.emit(this.value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatButtonToggleGroup.prototype, "selected", {
                    /**
                     * Selected button toggles in the group.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var selected = this._selectionModel ? this._selectionModel.selected : [];
                        return this.multiple ? selected : (selected[0] || null);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatButtonToggleGroup.prototype, "multiple", {
                    /**
                     * Whether multiple button toggles can be selected.
                     * @return {?}
                     */
                    get: function () { return this._multiple; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatButtonToggleGroup.prototype, "disabled", {
                    /**
                     * Whether multiple button toggle group is disabled.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        if (this._buttonToggles) {
                            this._buttonToggles.forEach(( /**
                             * @param {?} toggle
                             * @return {?}
                             */function (/**
                             * @param {?} toggle
                             * @return {?}
                             */ toggle) { return toggle._markForCheck(); }));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype.ngOnInit = function () {
                    this._selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["SelectionModel"](this.multiple, undefined, false);
                };
                /**
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype.ngAfterContentInit = function () {
                    var _b;
                    (_b = this._selectionModel).select.apply(_b, this._buttonToggles.filter(( /**
                     * @param {?} toggle
                     * @return {?}
                     */function (/**
                     * @param {?} toggle
                     * @return {?}
                     */ toggle) { return toggle.checked; })));
                };
                /**
                 * Sets the model value. Implemented as part of ControlValueAccessor.
                 * @param {?} value Value to be set to the model.
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype.writeValue = function (value) {
                    this.value = value;
                    this._changeDetector.markForCheck();
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype.registerOnChange = function (fn) {
                    this._controlValueAccessorChangeFn = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                /**
                 * Dispatch change event with current selection and group value.
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype._emitChangeEvent = function () {
                    /** @type {?} */
                    var selected = this.selected;
                    /** @type {?} */
                    var source = Array.isArray(selected) ? selected[selected.length - 1] : selected;
                    /** @type {?} */
                    var event = new MatButtonToggleChange(( /** @type {?} */(source)), this.value);
                    this._controlValueAccessorChangeFn(event.value);
                    this.change.emit(event);
                };
                /**
                 * Syncs a button toggle's selected state with the model value.
                 * @param {?} toggle Toggle to be synced.
                 * @param {?} select Whether the toggle should be selected.
                 * @param {?=} isUserInput Whether the change was a result of a user interaction.
                 * @param {?=} deferEvents Whether to defer emitting the change events.
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype._syncButtonToggle = function (toggle, select, isUserInput, deferEvents) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    if (deferEvents === void 0) { deferEvents = false; }
                    // Deselect the currently-selected toggle, if we're in single-selection
                    // mode and the button being toggled isn't selected at the moment.
                    if (!this.multiple && this.selected && !toggle.checked) {
                        (( /** @type {?} */(this.selected))).checked = false;
                    }
                    if (this._selectionModel) {
                        if (select) {
                            this._selectionModel.select(toggle);
                        }
                        else {
                            this._selectionModel.deselect(toggle);
                        }
                    }
                    else {
                        deferEvents = true;
                    }
                    // We need to defer in some cases in order to avoid "changed after checked errors", however
                    // the side-effect is that we may end up updating the model value out of sequence in others
                    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.
                    if (deferEvents) {
                    }
                    else {
                        this._updateModelValue(isUserInput);
                    }
                };
                /**
                 * Checks whether a button toggle is selected.
                 * @param {?} toggle
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype._isSelected = function (toggle) {
                    return this._selectionModel && this._selectionModel.isSelected(toggle);
                };
                /**
                 * Determines whether a button toggle should be checked on init.
                 * @param {?} toggle
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype._isPrechecked = function (toggle) {
                    if (typeof this._rawValue === 'undefined') {
                        return false;
                    }
                    if (this.multiple && Array.isArray(this._rawValue)) {
                        return this._rawValue.some(( /**
                         * @param {?} value
                         * @return {?}
                         */function (/**
                         * @param {?} value
                         * @return {?}
                         */ value) { return toggle.value != null && value === toggle.value; }));
                    }
                    return toggle.value === this._rawValue;
                };
                /**
                 * Updates the selection state of the toggles in the group based on a value.
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype._setSelectionByValue = function (value) {
                    var _this = this;
                    this._rawValue = value;
                    if (!this._buttonToggles) {
                        return;
                    }
                    if (this.multiple && value) {
                        if (!Array.isArray(value)) {
                            throw Error('Value must be an array in multiple-selection mode.');
                        }
                        this._clearSelection();
                        value.forEach(( /**
                         * @param {?} currentValue
                         * @return {?}
                         */function (currentValue) { return _this._selectValue(currentValue); }));
                    }
                    else {
                        this._clearSelection();
                        this._selectValue(value);
                    }
                };
                /**
                 * Clears the selected toggles.
                 * @private
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype._clearSelection = function () {
                    this._selectionModel.clear();
                    this._buttonToggles.forEach(( /**
                     * @param {?} toggle
                     * @return {?}
                     */function (/**
                     * @param {?} toggle
                     * @return {?}
                     */ toggle) { return toggle.checked = false; }));
                };
                /**
                 * Selects a value if there's a toggle that corresponds to it.
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype._selectValue = function (value) {
                    /** @type {?} */
                    var correspondingOption = this._buttonToggles.find(( /**
                     * @param {?} toggle
                     * @return {?}
                     */function (/**
                     * @param {?} toggle
                     * @return {?}
                     */ toggle) {
                        return toggle.value != null && toggle.value === value;
                    }));
                    if (correspondingOption) {
                        correspondingOption.checked = true;
                        this._selectionModel.select(correspondingOption);
                    }
                };
                /**
                 * Syncs up the group's value with the model and emits the change event.
                 * @private
                 * @param {?} isUserInput
                 * @return {?}
                 */
                MatButtonToggleGroup.prototype._updateModelValue = function (isUserInput) {
                    // Only emit the change event for user input.
                    if (isUserInput) {
                        this._emitChangeEvent();
                    }
                    // Note: we emit this one no matter whether it was a user interaction, because
                    // it is used by Angular to sync up the two-way data binding.
                    this.valueChange.emit(this.value);
                };
                return MatButtonToggleGroup;
            }());
            MatButtonToggleGroup.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: 'mat-button-toggle-group',
                            providers: [
                                MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,
                                { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },
                            ],
                            host: {
                                'role': 'group',
                                'class': 'mat-button-toggle-group',
                                '[attr.aria-disabled]': 'disabled',
                                '[class.mat-button-toggle-vertical]': 'vertical',
                                '[class.mat-button-toggle-group-appearance-standard]': 'appearance === "standard"',
                            },
                            exportAs: 'matButtonToggleGroup',
                        },] },
            ];
            /** @nocollapse */
            MatButtonToggleGroup.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }
            ]; };
            MatButtonToggleGroup.propDecorators = {
                _buttonToggles: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(( /**
                                         * @return {?}
                                         */function () { return MatButtonToggle; })),] }],
                appearance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                vertical: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                multiple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }]
            };
            // Boilerplate for applying mixins to the MatButtonToggle class.
            /**
             * \@docs-private
             */
            var MatButtonToggleBase = /** @class */ (function () {
                function MatButtonToggleBase() {
                }
                return MatButtonToggleBase;
            }());
            /** @type {?} */
            var _MatButtonToggleMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinDisableRipple"])(MatButtonToggleBase);
            /**
             * Single button inside of a toggle group.
             */
            var MatButtonToggle = /** @class */ (function (_super) {
                __extends(MatButtonToggle, _super);
                /**
                 * @param {?} toggleGroup
                 * @param {?} _changeDetectorRef
                 * @param {?} _elementRef
                 * @param {?} _focusMonitor
                 * @param {?} defaultTabIndex
                 * @param {?=} defaultOptions
                 */
                function MatButtonToggle(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, 
                // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.
                defaultTabIndex, defaultOptions) {
                    var _this = _super.call(this) || this;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._elementRef = _elementRef;
                    _this._focusMonitor = _focusMonitor;
                    _this._isSingleSelector = false;
                    _this._checked = false;
                    /**
                     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
                     */
                    _this.ariaLabelledby = null;
                    _this._disabled = false;
                    /**
                     * Event emitted when the group value changes.
                     */
                    _this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /** @type {?} */
                    var parsedTabIndex = Number(defaultTabIndex);
                    _this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;
                    _this.buttonToggleGroup = toggleGroup;
                    _this.appearance =
                        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';
                    return _this;
                }
                Object.defineProperty(MatButtonToggle.prototype, "buttonId", {
                    /**
                     * Unique ID for the underlying `button` element.
                     * @return {?}
                     */
                    get: function () { return this.id + "-button"; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatButtonToggle.prototype, "appearance", {
                    /**
                     * The appearance style of the button.
                     * @return {?}
                     */
                    get: function () {
                        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._appearance = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatButtonToggle.prototype, "checked", {
                    /**
                     * Whether the button is checked.
                     * @return {?}
                     */
                    get: function () {
                        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        if (newValue !== this._checked) {
                            this._checked = newValue;
                            if (this.buttonToggleGroup) {
                                this.buttonToggleGroup._syncButtonToggle(this, this._checked);
                            }
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatButtonToggle.prototype, "disabled", {
                    /**
                     * Whether the button is disabled.
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatButtonToggle.prototype.ngOnInit = function () {
                    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;
                    this._type = this._isSingleSelector ? 'radio' : 'checkbox';
                    this.id = this.id || "mat-button-toggle-" + _uniqueIdCounter++;
                    if (this._isSingleSelector) {
                        this.name = this.buttonToggleGroup.name;
                    }
                    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {
                        this.checked = true;
                    }
                    this._focusMonitor.monitor(this._elementRef, true);
                };
                /**
                 * @return {?}
                 */
                MatButtonToggle.prototype.ngOnDestroy = function () {
                    /** @type {?} */
                    var group = this.buttonToggleGroup;
                    this._focusMonitor.stopMonitoring(this._elementRef);
                    // Remove the toggle from the selection once it's destroyed. Needs to happen
                    // on the next tick in order to avoid "changed after checked" errors.
                    if (group && group._isSelected(this)) {
                        group._syncButtonToggle(this, false, false, true);
                    }
                };
                /**
                 * Focuses the button.
                 * @param {?=} options
                 * @return {?}
                 */
                MatButtonToggle.prototype.focus = function (options) {
                    this._buttonElement.nativeElement.focus(options);
                };
                /**
                 * Checks the button toggle due to an interaction with the underlying native button.
                 * @return {?}
                 */
                MatButtonToggle.prototype._onButtonClick = function () {
                    /** @type {?} */
                    var newChecked = this._isSingleSelector ? true : !this._checked;
                    if (newChecked !== this._checked) {
                        this._checked = newChecked;
                        if (this.buttonToggleGroup) {
                            this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);
                            this.buttonToggleGroup._onTouched();
                        }
                    }
                    // Emit a change event when it's the single selector
                    this.change.emit(new MatButtonToggleChange(this, this.value));
                };
                /**
                 * Marks the button toggle as needing checking for change detection.
                 * This method is exposed because the parent button toggle group will directly
                 * update bound properties of the radio button.
                 * @return {?}
                 */
                MatButtonToggle.prototype._markForCheck = function () {
                    // When the group value changes, the button will not be notified.
                    // Use `markForCheck` to explicit update button toggle's status.
                    this._changeDetectorRef.markForCheck();
                };
                return MatButtonToggle;
            }(_MatButtonToggleMixinBase));
            MatButtonToggle.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{ selector: 'mat-button-toggle',
                            template: "<button #button class=\"mat-button-toggle-button\" type=\"button\" [id]=\"buttonId\" [attr.tabindex]=\"disabled ? -1 : tabIndex\" [attr.aria-pressed]=\"checked\" [disabled]=\"disabled || null\" [attr.name]=\"name || null\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (click)=\"_onButtonClick()\"><div class=\"mat-button-toggle-label-content\"><ng-content></ng-content></div></button><div class=\"mat-button-toggle-focus-overlay\"></div><div class=\"mat-button-toggle-ripple\" matRipple [matRippleTrigger]=\"button\" [matRippleDisabled]=\"this.disableRipple || this.disabled\"></div>",
                            styles: [".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}@media (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}@media (hover:none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                            exportAs: 'matButtonToggle',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                            inputs: ['disableRipple'],
                            host: {
                                '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',
                                '[class.mat-button-toggle-checked]': 'checked',
                                '[class.mat-button-toggle-disabled]': 'disabled',
                                '[class.mat-button-toggle-appearance-standard]': 'appearance === "standard"',
                                'class': 'mat-button-toggle',
                                // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,
                                // but can still receive focus from things like cdkFocusInitial.
                                '[attr.tabindex]': '-1',
                                '[attr.id]': 'id',
                                '[attr.name]': 'null',
                                '(focus)': 'focus()',
                            }
                        },] },
            ];
            /** @nocollapse */
            MatButtonToggle.ctorParameters = function () { return [
                { type: MatButtonToggleGroup, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Attribute"], args: ['tabindex',] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }
            ]; };
            MatButtonToggle.propDecorators = {
                ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['aria-label',] }],
                ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['aria-labelledby',] }],
                _buttonElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['button', { static: false },] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                appearance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatButtonToggleModule = /** @class */ (function () {
                function MatButtonToggleModule() {
                }
                return MatButtonToggleModule;
            }());
            MatButtonToggleModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatRippleModule"]],
                            exports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"], MatButtonToggleGroup, MatButtonToggle],
                            declarations: [MatButtonToggleGroup, MatButtonToggle],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=button-toggle.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/button.js": 
        /*!**********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/button.js ***!
          \**********************************************************/
        /*! exports provided: MatButtonModule, MatButton, MatAnchor */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatButtonModule", function () { return MatButtonModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatButton", function () { return MatButton; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatAnchor", function () { return MatAnchor; });
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Default color palette for round buttons (mat-fab and mat-mini-fab)
             * @type {?}
             */
            var DEFAULT_ROUND_BUTTON_COLOR = 'accent';
            /**
             * List of classes to add to MatButton instances based on host attributes to
             * style as different variants.
             * @type {?}
             */
            var BUTTON_HOST_ATTRIBUTES = [
                'mat-button',
                'mat-flat-button',
                'mat-icon-button',
                'mat-raised-button',
                'mat-stroked-button',
                'mat-mini-fab',
                'mat-fab',
            ];
            // Boilerplate for applying mixins to MatButton.
            /**
             * \@docs-private
             */
            var MatButtonBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatButtonBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatButtonBase;
            }());
            /** @type {?} */
            var _MatButtonMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinColor"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinDisabled"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinDisableRipple"])(MatButtonBase)));
            /**
             * Material design button.
             */
            var MatButton = /** @class */ (function (_super) {
                __extends(MatButton, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} _focusMonitor
                 * @param {?} _animationMode
                 */
                function MatButton(elementRef, _focusMonitor, _animationMode) {
                    var _this = _super.call(this, elementRef) || this;
                    _this._focusMonitor = _focusMonitor;
                    _this._animationMode = _animationMode;
                    /**
                     * Whether the button is round.
                     */
                    _this.isRoundButton = _this._hasHostAttributes('mat-fab', 'mat-mini-fab');
                    /**
                     * Whether the button is icon button.
                     */
                    _this.isIconButton = _this._hasHostAttributes('mat-icon-button');
                    // For each of the variant selectors that is present in the button's host
                    // attributes, add the correct corresponding class.
                    for (var _b = 0, BUTTON_HOST_ATTRIBUTES_1 = BUTTON_HOST_ATTRIBUTES; _b < BUTTON_HOST_ATTRIBUTES_1.length; _b++) {
                        var attr = BUTTON_HOST_ATTRIBUTES_1[_b];
                        if (_this._hasHostAttributes(attr)) {
                            (( /** @type {?} */(_this._getHostElement()))).classList.add(attr);
                        }
                    }
                    // Add a class that applies to all buttons. This makes it easier to target if somebody
                    // wants to target all Material buttons. We do it here rather than `host` to ensure that
                    // the class is applied to derived classes.
                    elementRef.nativeElement.classList.add('mat-button-base');
                    _this._focusMonitor.monitor(_this._elementRef, true);
                    if (_this.isRoundButton) {
                        _this.color = DEFAULT_ROUND_BUTTON_COLOR;
                    }
                    return _this;
                }
                /**
                 * @return {?}
                 */
                MatButton.prototype.ngOnDestroy = function () {
                    this._focusMonitor.stopMonitoring(this._elementRef);
                };
                /**
                 * Focuses the button.
                 * @param {?=} origin
                 * @param {?=} options
                 * @return {?}
                 */
                MatButton.prototype.focus = function (origin, options) {
                    if (origin === void 0) { origin = 'program'; }
                    this._focusMonitor.focusVia(this._getHostElement(), origin, options);
                };
                /**
                 * @return {?}
                 */
                MatButton.prototype._getHostElement = function () {
                    return this._elementRef.nativeElement;
                };
                /**
                 * @return {?}
                 */
                MatButton.prototype._isRippleDisabled = function () {
                    return this.disableRipple || this.disabled;
                };
                /**
                 * Gets whether the button has one of the given attributes.
                 * @param {...?} attributes
                 * @return {?}
                 */
                MatButton.prototype._hasHostAttributes = function () {
                    var _this = this;
                    var attributes = [];
                    for (var _b = 0; _b < arguments.length; _b++) {
                        attributes[_b] = arguments[_b];
                    }
                    return attributes.some(( /**
                     * @param {?} attribute
                     * @return {?}
                     */function (/**
                     * @param {?} attribute
                     * @return {?}
                     */ attribute) { return _this._getHostElement().hasAttribute(attribute); }));
                };
                return MatButton;
            }(_MatButtonMixinBase));
            MatButton.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]",
                            exportAs: 'matButton',
                            host: {
                                '[attr.disabled]': 'disabled || null',
                                '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
                            },
                            template: "<span class=\"mat-button-wrapper\"><ng-content></ng-content></span><div matRipple class=\"mat-button-ripple\" [class.mat-button-ripple-round]=\"isRoundButton || isIconButton\" [matRippleDisabled]=\"_isRippleDisabled()\" [matRippleCentered]=\"isIconButton\" [matRippleTrigger]=\"_getHostElement()\"></div><div class=\"mat-button-focus-overlay\"></div>",
                            styles: [".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media (hover:none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-focus-overlay,.mat-stroked-button .mat-button-ripple.mat-ripple{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple.mat-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}@media (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:#fff}}@media (-ms-high-contrast:black-on-white){.mat-button-focus-overlay{background-color:#000}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}"],
                            inputs: ['disabled', 'disableRipple', 'color'],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatButton.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            MatButton.propDecorators = {
                ripple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatRipple"], { static: false },] }]
            };
            /**
             * Material design anchor button.
             */
            var MatAnchor = /** @class */ (function (_super) {
                __extends(MatAnchor, _super);
                /**
                 * @param {?} focusMonitor
                 * @param {?} elementRef
                 * @param {?} animationMode
                 */
                function MatAnchor(focusMonitor, elementRef, animationMode) {
                    return _super.call(this, elementRef, focusMonitor, animationMode) || this;
                }
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatAnchor.prototype._haltDisabledEvents = function (event) {
                    // A disabled button shouldn't apply any actions
                    if (this.disabled) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                    }
                };
                return MatAnchor;
            }(MatButton));
            MatAnchor.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: "a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]",
                            exportAs: 'matButton, matAnchor',
                            host: {
                                // Note that we ignore the user-specified tabindex when it's disabled for
                                // consistency with the `mat-button` applied on native buttons where even
                                // though they have an index, they're not tabbable.
                                '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',
                                '[attr.disabled]': 'disabled || null',
                                '[attr.aria-disabled]': 'disabled.toString()',
                                '(click)': '_haltDisabledEvents($event)',
                                '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
                            },
                            inputs: ['disabled', 'disableRipple', 'color'],
                            template: "<span class=\"mat-button-wrapper\"><ng-content></ng-content></span><div matRipple class=\"mat-button-ripple\" [class.mat-button-ripple-round]=\"isRoundButton || isIconButton\" [matRippleDisabled]=\"_isRippleDisabled()\" [matRippleCentered]=\"isIconButton\" [matRippleTrigger]=\"_getHostElement()\"></div><div class=\"mat-button-focus-overlay\"></div>",
                            styles: [".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media (hover:none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-focus-overlay,.mat-stroked-button .mat-button-ripple.mat-ripple{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple.mat-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}@media (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:#fff}}@media (-ms-high-contrast:black-on-white){.mat-button-focus-overlay{background-color:#000}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatAnchor.ctorParameters = function () { return [
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            MatAnchor.propDecorators = {
                tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatButtonModule = /** @class */ (function () {
                function MatButtonModule() {
                }
                return MatButtonModule;
            }());
            MatButtonModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatRippleModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"],
                            ],
                            exports: [
                                MatButton,
                                MatAnchor,
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"],
                            ],
                            declarations: [
                                MatButton,
                                MatAnchor,
                            ],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=button.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/card.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/card.js ***!
          \********************************************************/
        /*! exports provided: MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardImage, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardXlImage, MatCardAvatar, MatCard, MatCardHeader, MatCardTitleGroup, MatCardModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardContent", function () { return MatCardContent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardTitle", function () { return MatCardTitle; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardSubtitle", function () { return MatCardSubtitle; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardActions", function () { return MatCardActions; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardFooter", function () { return MatCardFooter; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardImage", function () { return MatCardImage; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardSmImage", function () { return MatCardSmImage; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardMdImage", function () { return MatCardMdImage; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardLgImage", function () { return MatCardLgImage; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardXlImage", function () { return MatCardXlImage; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardAvatar", function () { return MatCardAvatar; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCard", function () { return MatCard; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardHeader", function () { return MatCardHeader; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardTitleGroup", function () { return MatCardTitleGroup; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCardModule", function () { return MatCardModule; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Content of a card, needed as it's used as a selector in the API.
             * \@docs-private
             */
            var MatCardContent = /** @class */ (function () {
                function MatCardContent() {
                }
                return MatCardContent;
            }());
            MatCardContent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-card-content',
                            host: { 'class': 'mat-card-content' }
                        },] },
            ];
            /**
             * Title of a card, needed as it's used as a selector in the API.
             * \@docs-private
             */
            var MatCardTitle = /** @class */ (function () {
                function MatCardTitle() {
                }
                return MatCardTitle;
            }());
            MatCardTitle.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: "mat-card-title, [mat-card-title], [matCardTitle]",
                            host: {
                                'class': 'mat-card-title'
                            }
                        },] },
            ];
            /**
             * Sub-title of a card, needed as it's used as a selector in the API.
             * \@docs-private
             */
            var MatCardSubtitle = /** @class */ (function () {
                function MatCardSubtitle() {
                }
                return MatCardSubtitle;
            }());
            MatCardSubtitle.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: "mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]",
                            host: {
                                'class': 'mat-card-subtitle'
                            }
                        },] },
            ];
            /**
             * Action section of a card, needed as it's used as a selector in the API.
             * \@docs-private
             */
            var MatCardActions = /** @class */ (function () {
                function MatCardActions() {
                    /**
                     * Position of the actions inside the card.
                     */
                    this.align = 'start';
                }
                return MatCardActions;
            }());
            MatCardActions.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-card-actions',
                            exportAs: 'matCardActions',
                            host: {
                                'class': 'mat-card-actions',
                                '[class.mat-card-actions-align-end]': 'align === "end"',
                            }
                        },] },
            ];
            MatCardActions.propDecorators = {
                align: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * Footer of a card, needed as it's used as a selector in the API.
             * \@docs-private
             */
            var MatCardFooter = /** @class */ (function () {
                function MatCardFooter() {
                }
                return MatCardFooter;
            }());
            MatCardFooter.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-card-footer',
                            host: { 'class': 'mat-card-footer' }
                        },] },
            ];
            /**
             * Image used in a card, needed to add the mat- CSS styling.
             * \@docs-private
             */
            var MatCardImage = /** @class */ (function () {
                function MatCardImage() {
                }
                return MatCardImage;
            }());
            MatCardImage.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-card-image], [matCardImage]',
                            host: { 'class': 'mat-card-image' }
                        },] },
            ];
            /**
             * Image used in a card, needed to add the mat- CSS styling.
             * \@docs-private
             */
            var MatCardSmImage = /** @class */ (function () {
                function MatCardSmImage() {
                }
                return MatCardSmImage;
            }());
            MatCardSmImage.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-card-sm-image], [matCardImageSmall]',
                            host: { 'class': 'mat-card-sm-image' }
                        },] },
            ];
            /**
             * Image used in a card, needed to add the mat- CSS styling.
             * \@docs-private
             */
            var MatCardMdImage = /** @class */ (function () {
                function MatCardMdImage() {
                }
                return MatCardMdImage;
            }());
            MatCardMdImage.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-card-md-image], [matCardImageMedium]',
                            host: { 'class': 'mat-card-md-image' }
                        },] },
            ];
            /**
             * Image used in a card, needed to add the mat- CSS styling.
             * \@docs-private
             */
            var MatCardLgImage = /** @class */ (function () {
                function MatCardLgImage() {
                }
                return MatCardLgImage;
            }());
            MatCardLgImage.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-card-lg-image], [matCardImageLarge]',
                            host: { 'class': 'mat-card-lg-image' }
                        },] },
            ];
            /**
             * Large image used in a card, needed to add the mat- CSS styling.
             * \@docs-private
             */
            var MatCardXlImage = /** @class */ (function () {
                function MatCardXlImage() {
                }
                return MatCardXlImage;
            }());
            MatCardXlImage.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-card-xl-image], [matCardImageXLarge]',
                            host: { 'class': 'mat-card-xl-image' }
                        },] },
            ];
            /**
             * Avatar image used in a card, needed to add the mat- CSS styling.
             * \@docs-private
             */
            var MatCardAvatar = /** @class */ (function () {
                function MatCardAvatar() {
                }
                return MatCardAvatar;
            }());
            MatCardAvatar.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-card-avatar], [matCardAvatar]',
                            host: { 'class': 'mat-card-avatar' }
                        },] },
            ];
            /**
             * A basic content container component that adds the styles of a Material design card.
             *
             * While this component can be used alone, it also provides a number
             * of preset styles for common card sections, including:
             * - mat-card-title
             * - mat-card-subtitle
             * - mat-card-content
             * - mat-card-actions
             * - mat-card-footer
             */
            var MatCard = /** @class */ (function () {
                // @breaking-change 9.0.0 `_animationMode` parameter to be made required.
                /**
                 * @param {?=} _animationMode
                 */
                function MatCard(_animationMode) {
                    this._animationMode = _animationMode;
                }
                return MatCard;
            }());
            MatCard.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-card',
                            exportAs: 'matCard',
                            template: "<ng-content></ng-content><ng-content select=\"mat-card-footer\"></ng-content>",
                            styles: [".mat-card{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}@media (-ms-high-contrast:active){.mat-card{outline:solid 1px}}.mat-card-actions,.mat-card-content,.mat-card-subtitle{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media (max-width:599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card-content>:first-child,.mat-card>:first-child{margin-top:0}.mat-card-content>:last-child:not(.mat-card-footer),.mat-card>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-subtitle:not(:first-child),.mat-card-title:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                'class': 'mat-card',
                                '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
                            }
                        },] },
            ];
            /** @nocollapse */
            MatCard.ctorParameters = function () { return [
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            /**
             * Component intended to be used within the `<mat-card>` component. It adds styles for a
             * preset header section (i.e. a title, subtitle, and avatar layout).
             * \@docs-private
             */
            var MatCardHeader = /** @class */ (function () {
                function MatCardHeader() {
                }
                return MatCardHeader;
            }());
            MatCardHeader.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-card-header',
                            template: "<ng-content select=\"[mat-card-avatar], [matCardAvatar]\"></ng-content><div class=\"mat-card-header-text\"><ng-content select=\"mat-card-title, mat-card-subtitle, [mat-card-title], [mat-card-subtitle], [matCardTitle], [matCardSubtitle]\"></ng-content></div><ng-content></ng-content>",
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            host: { 'class': 'mat-card-header' }
                        },] },
            ];
            /**
             * Component intended to be used within the `<mat-card>` component. It adds styles for a preset
             * layout that groups an image with a title section.
             * \@docs-private
             */
            var MatCardTitleGroup = /** @class */ (function () {
                function MatCardTitleGroup() {
                }
                return MatCardTitleGroup;
            }());
            MatCardTitleGroup.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-card-title-group',
                            template: "<div><ng-content select=\"mat-card-title, mat-card-subtitle, [mat-card-title], [mat-card-subtitle], [matCardTitle], [matCardSubtitle]\"></ng-content></div><ng-content select=\"img\"></ng-content><ng-content></ng-content>",
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            host: { 'class': 'mat-card-title-group' }
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatCardModule = /** @class */ (function () {
                function MatCardModule() {
                }
                return MatCardModule;
            }());
            MatCardModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]],
                            exports: [
                                MatCard,
                                MatCardHeader,
                                MatCardTitleGroup,
                                MatCardContent,
                                MatCardTitle,
                                MatCardSubtitle,
                                MatCardActions,
                                MatCardFooter,
                                MatCardSmImage,
                                MatCardMdImage,
                                MatCardLgImage,
                                MatCardImage,
                                MatCardXlImage,
                                MatCardAvatar,
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"],
                            ],
                            declarations: [
                                MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,
                                MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,
                                MatCardXlImage, MatCardAvatar,
                            ],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=card.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/checkbox.js": 
        /*!************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/checkbox.js ***!
          \************************************************************/
        /*! exports provided: MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, _MatCheckboxRequiredValidatorModule, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR", function () { return MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransitionCheckState", function () { return TransitionCheckState; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCheckboxChange", function () { return MatCheckboxChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCheckbox", function () { return MatCheckbox; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_CHECKBOX_CLICK_ACTION", function () { return MAT_CHECKBOX_CLICK_ACTION; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_MatCheckboxRequiredValidatorModule", function () { return _MatCheckboxRequiredValidatorModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCheckboxModule", function () { return MatCheckboxModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_CHECKBOX_REQUIRED_VALIDATOR", function () { return MAT_CHECKBOX_REQUIRED_VALIDATOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCheckboxRequiredValidator", function () { return MatCheckboxRequiredValidator; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/observers */ "./node_modules/@angular/cdk/esm2015/observers.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used to specify the checkbox click behavior.
             * @type {?}
             */
            var MAT_CHECKBOX_CLICK_ACTION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-checkbox-click-action');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Increasing integer for generating unique ids for checkbox components.
            /** @type {?} */
            var nextUniqueId = 0;
            /**
             * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.
             * This allows it to support [(ngModel)].
             * \@docs-private
             * @type {?}
             */
            var MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MatCheckbox; })),
                multi: true
            };
            /** @enum {number} */
            var TransitionCheckState = {
                /** The initial state of the component before any user interaction. */
                Init: 0,
                /** The state representing the component when it's becoming checked. */
                Checked: 1,
                /** The state representing the component when it's becoming unchecked. */
                Unchecked: 2,
                /** The state representing the component when it's becoming indeterminate. */
                Indeterminate: 3,
            };
            TransitionCheckState[TransitionCheckState.Init] = 'Init';
            TransitionCheckState[TransitionCheckState.Checked] = 'Checked';
            TransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';
            TransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';
            /**
             * Change event object emitted by MatCheckbox.
             */
            var MatCheckboxChange = /** @class */ (function () {
                function MatCheckboxChange() {
                }
                return MatCheckboxChange;
            }());
            // Boilerplate for applying mixins to MatCheckbox.
            /**
             * \@docs-private
             */
            var MatCheckboxBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatCheckboxBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatCheckboxBase;
            }());
            /** @type {?} */
            var _MatCheckboxMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(MatCheckboxBase)), 'accent'));
            /**
             * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,
             * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or
             * disabled. Note that all additional accessibility attributes are taken care of by the component,
             * so there is no need to provide them yourself. However, if you want to omit a label and still
             * have the checkbox be accessible, you may supply an [aria-label] input.
             * See: https://material.io/design/components/selection-controls.html
             */
            var MatCheckbox = /** @class */ (function (_super) {
                __extends(MatCheckbox, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} _changeDetectorRef
                 * @param {?} _focusMonitor
                 * @param {?} _ngZone
                 * @param {?} tabIndex
                 * @param {?} _clickAction
                 * @param {?=} _animationMode
                 */
                function MatCheckbox(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {
                    var _this = _super.call(this, elementRef) || this;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._focusMonitor = _focusMonitor;
                    _this._ngZone = _ngZone;
                    _this._clickAction = _clickAction;
                    _this._animationMode = _animationMode;
                    /**
                     * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will
                     * take precedence so this may be omitted.
                     */
                    _this.ariaLabel = '';
                    /**
                     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
                     */
                    _this.ariaLabelledby = null;
                    _this._uniqueId = "mat-checkbox-" + ++nextUniqueId;
                    /**
                     * A unique id for the checkbox input. If none is supplied, it will be auto-generated.
                     */
                    _this.id = _this._uniqueId;
                    /**
                     * Whether the label should appear after or before the checkbox. Defaults to 'after'
                     */
                    _this.labelPosition = 'after';
                    /**
                     * Name value will be applied to the input element if present
                     */
                    _this.name = null;
                    /**
                     * Event emitted when the checkbox's `checked` value changes.
                     */
                    _this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Event emitted when the checkbox's `indeterminate` value changes.
                     */
                    _this.indeterminateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.
                     * \@docs-private
                     */
                    _this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    _this._currentAnimationClass = '';
                    _this._currentCheckState = TransitionCheckState.Init;
                    _this._controlValueAccessorChangeFn = ( /**
                     * @return {?}
                     */function () { });
                    _this._checked = false;
                    _this._disabled = false;
                    _this._indeterminate = false;
                    _this.tabIndex = parseInt(tabIndex) || 0;
                    _this._focusMonitor.monitor(elementRef, true).subscribe(( /**
                     * @param {?} focusOrigin
                     * @return {?}
                     */function (/**
                     * @param {?} focusOrigin
                     * @return {?}
                     */ focusOrigin) {
                        if (!focusOrigin) {
                            // When a focused element becomes disabled, the browser *immediately* fires a blur event.
                            // Angular does not expect events to be raised during change detection, so any state change
                            // (such as a form control's 'ng-touched') will cause a changed-after-checked error.
                            // See https://github.com/angular/angular/issues/17793. To work around this, we defer
                            // telling the form control it has been touched until the next tick.
                            Promise.resolve().then(( /**
                             * @return {?}
                             */function () {
                                _this._onTouched();
                                _changeDetectorRef.markForCheck();
                            }));
                        }
                    }));
                    return _this;
                }
                Object.defineProperty(MatCheckbox.prototype, "inputId", {
                    /**
                     * Returns the unique id for the visual hidden input.
                     * @return {?}
                     */
                    get: function () { return (this.id || this._uniqueId) + "-input"; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatCheckbox.prototype, "required", {
                    /**
                     * Whether the checkbox is required.
                     * @return {?}
                     */
                    get: function () { return this._required; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                // TODO: Delete next major revision.
                /**
                 * @return {?}
                 */
                MatCheckbox.prototype.ngAfterViewChecked = function () { };
                /**
                 * @return {?}
                 */
                MatCheckbox.prototype.ngOnDestroy = function () {
                    this._focusMonitor.stopMonitoring(this._elementRef);
                };
                Object.defineProperty(MatCheckbox.prototype, "checked", {
                    /**
                     * Whether the checkbox is checked.
                     * @return {?}
                     */
                    get: function () { return this._checked; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value != this.checked) {
                            this._checked = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatCheckbox.prototype, "disabled", {
                    /**
                     * Whether the checkbox is disabled. This fully overrides the implementation provided by
                     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                        if (newValue !== this.disabled) {
                            this._disabled = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatCheckbox.prototype, "indeterminate", {
                    /**
                     * Whether the checkbox is indeterminate. This is also known as "mixed" mode and can be used to
                     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of
                     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately
                     * set to false.
                     * @return {?}
                     */
                    get: function () { return this._indeterminate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var changed = value != this._indeterminate;
                        this._indeterminate = value;
                        if (changed) {
                            if (this._indeterminate) {
                                this._transitionCheckState(TransitionCheckState.Indeterminate);
                            }
                            else {
                                this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);
                            }
                            this.indeterminateChange.emit(this._indeterminate);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatCheckbox.prototype._isRippleDisabled = function () {
                    return this.disableRipple || this.disabled;
                };
                /**
                 * Method being called whenever the label text changes.
                 * @return {?}
                 */
                MatCheckbox.prototype._onLabelTextChange = function () {
                    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox
                    // component will be only marked for check, but no actual change detection runs automatically.
                    // Instead of going back into the zone in order to trigger a change detection which causes
                    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger
                    // an explicit change detection for the checkbox view and its children.
                    this._changeDetectorRef.detectChanges();
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} value
                 * @return {?}
                 */
                MatCheckbox.prototype.writeValue = function (value) {
                    this.checked = !!value;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                MatCheckbox.prototype.registerOnChange = function (fn) {
                    this._controlValueAccessorChangeFn = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                MatCheckbox.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                MatCheckbox.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                /**
                 * @return {?}
                 */
                MatCheckbox.prototype._getAriaChecked = function () {
                    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');
                };
                /**
                 * @private
                 * @param {?} newState
                 * @return {?}
                 */
                MatCheckbox.prototype._transitionCheckState = function (newState) {
                    /** @type {?} */
                    var oldState = this._currentCheckState;
                    /** @type {?} */
                    var element = this._elementRef.nativeElement;
                    if (oldState === newState) {
                        return;
                    }
                    if (this._currentAnimationClass.length > 0) {
                        element.classList.remove(this._currentAnimationClass);
                    }
                    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);
                    this._currentCheckState = newState;
                    if (this._currentAnimationClass.length > 0) {
                        element.classList.add(this._currentAnimationClass);
                        // Remove the animation class to avoid animation when the checkbox is moved between containers
                        /** @type {?} */
                        var animationClass_1 = this._currentAnimationClass;
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () {
                            setTimeout(( /**
                             * @return {?}
                             */function () {
                                element.classList.remove(animationClass_1);
                            }), 1000);
                        }));
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatCheckbox.prototype._emitChangeEvent = function () {
                    /** @type {?} */
                    var event = new MatCheckboxChange();
                    event.source = this;
                    event.checked = this.checked;
                    this._controlValueAccessorChangeFn(this.checked);
                    this.change.emit(event);
                };
                /**
                 * Toggles the `checked` state of the checkbox.
                 * @return {?}
                 */
                MatCheckbox.prototype.toggle = function () {
                    this.checked = !this.checked;
                };
                /**
                 * Event handler for checkbox input element.
                 * Toggles checked state if element is not disabled.
                 * Do not toggle on (change) event since IE doesn't fire change event when
                 *   indeterminate checkbox is clicked.
                 * @param {?} event
                 * @return {?}
                 */
                MatCheckbox.prototype._onInputClick = function (event) {
                    var _this = this;
                    // We have to stop propagation for click events on the visual hidden input element.
                    // By default, when a user clicks on a label element, a generated click event will be
                    // dispatched on the associated input element. Since we are using a label element as our
                    // root container, the click event on the `checkbox` will be executed twice.
                    // The real click event will bubble up, and the generated click event also tries to bubble up.
                    // This will lead to multiple click events.
                    // Preventing bubbling for the second event will solve that issue.
                    event.stopPropagation();
                    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click
                    if (!this.disabled && this._clickAction !== 'noop') {
                        // When user manually click on the checkbox, `indeterminate` is set to false.
                        if (this.indeterminate && this._clickAction !== 'check') {
                            Promise.resolve().then(( /**
                             * @return {?}
                             */function () {
                                _this._indeterminate = false;
                                _this.indeterminateChange.emit(_this._indeterminate);
                            }));
                        }
                        this.toggle();
                        this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);
                        // Emit our custom change event if the native input emitted one.
                        // It is important to only emit it, if the native input triggered one, because
                        // we don't want to trigger a change event, when the `checked` variable changes for example.
                        this._emitChangeEvent();
                    }
                    else if (!this.disabled && this._clickAction === 'noop') {
                        // Reset native input when clicked with noop. The native checkbox becomes checked after
                        // click, reset it to be align with `checked` value of `mat-checkbox`.
                        this._inputElement.nativeElement.checked = this.checked;
                        this._inputElement.nativeElement.indeterminate = this.indeterminate;
                    }
                };
                /**
                 * Focuses the checkbox.
                 * @param {?=} origin
                 * @param {?=} options
                 * @return {?}
                 */
                MatCheckbox.prototype.focus = function (origin, options) {
                    if (origin === void 0) { origin = 'keyboard'; }
                    this._focusMonitor.focusVia(this._inputElement, origin, options);
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatCheckbox.prototype._onInteractionEvent = function (event) {
                    // We always have to stop propagation on the change event.
                    // Otherwise the change event, from the input element, will bubble up and
                    // emit its event object to the `change` output.
                    event.stopPropagation();
                };
                /**
                 * @private
                 * @param {?} oldState
                 * @param {?} newState
                 * @return {?}
                 */
                MatCheckbox.prototype._getAnimationClassForCheckStateTransition = function (oldState, newState) {
                    // Don't transition if animations are disabled.
                    if (this._animationMode === 'NoopAnimations') {
                        return '';
                    }
                    /** @type {?} */
                    var animSuffix = '';
                    switch (oldState) {
                        case TransitionCheckState.Init:
                            // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or
                            // [checked] bound to it.
                            if (newState === TransitionCheckState.Checked) {
                                animSuffix = 'unchecked-checked';
                            }
                            else if (newState == TransitionCheckState.Indeterminate) {
                                animSuffix = 'unchecked-indeterminate';
                            }
                            else {
                                return '';
                            }
                            break;
                        case TransitionCheckState.Unchecked:
                            animSuffix = newState === TransitionCheckState.Checked ?
                                'unchecked-checked' : 'unchecked-indeterminate';
                            break;
                        case TransitionCheckState.Checked:
                            animSuffix = newState === TransitionCheckState.Unchecked ?
                                'checked-unchecked' : 'checked-indeterminate';
                            break;
                        case TransitionCheckState.Indeterminate:
                            animSuffix = newState === TransitionCheckState.Checked ?
                                'indeterminate-checked' : 'indeterminate-unchecked';
                            break;
                    }
                    return "mat-checkbox-anim-" + animSuffix;
                };
                return MatCheckbox;
            }(_MatCheckboxMixinBase));
            MatCheckbox.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-checkbox',
                            template: "<label [attr.for]=\"inputId\" class=\"mat-checkbox-layout\" #label><div class=\"mat-checkbox-inner-container\" [class.mat-checkbox-inner-container-no-side-margin]=\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\"><input #input class=\"mat-checkbox-input cdk-visually-hidden\" type=\"checkbox\" [id]=\"inputId\" [required]=\"required\" [checked]=\"checked\" [attr.value]=\"value\" [disabled]=\"disabled\" [attr.name]=\"name\" [tabIndex]=\"tabIndex\" [indeterminate]=\"indeterminate\" [attr.aria-label]=\"ariaLabel || null\" [attr.aria-labelledby]=\"ariaLabelledby\" [attr.aria-checked]=\"_getAriaChecked()\" (change)=\"_onInteractionEvent($event)\" (click)=\"_onInputClick($event)\"><div matRipple class=\"mat-checkbox-ripple\" [matRippleTrigger]=\"label\" [matRippleDisabled]=\"_isRippleDisabled()\" [matRippleRadius]=\"20\" [matRippleCentered]=\"true\" [matRippleAnimation]=\"{enterDuration: 150}\"><div class=\"mat-ripple-element mat-checkbox-persistent-ripple\"></div></div><div class=\"mat-checkbox-frame\"></div><div class=\"mat-checkbox-background\"><svg version=\"1.1\" focusable=\"false\" class=\"mat-checkbox-checkmark\" viewBox=\"0 0 24 24\" xml:space=\"preserve\"><path class=\"mat-checkbox-checkmark-path\" fill=\"none\" stroke=\"white\" d=\"M4.1,12.7 9,17.6 20.3,6.3\"/></svg><div class=\"mat-checkbox-mixedmark\"></div></div></div><span class=\"mat-checkbox-label\" #checkboxLabel (cdkObserveContent)=\"_onLabelTextChange()\"><span style=\"display:none\">&nbsp;</span><ng-content></ng-content></span></label>",
                            styles: ["@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}@media (-ms-high-contrast:active){.mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media (hover:none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}"],
                            exportAs: 'matCheckbox',
                            host: {
                                'class': 'mat-checkbox',
                                '[id]': 'id',
                                '[attr.tabindex]': 'null',
                                '[class.mat-checkbox-indeterminate]': 'indeterminate',
                                '[class.mat-checkbox-checked]': 'checked',
                                '[class.mat-checkbox-disabled]': 'disabled',
                                '[class.mat-checkbox-label-before]': 'labelPosition == "before"',
                                '[class._mat-animation-noopable]': "_animationMode === 'NoopAnimations'",
                            },
                            providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],
                            inputs: ['disableRipple', 'color', 'tabIndex'],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
                        },] },
            ];
            /** @nocollapse */
            MatCheckbox.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"], args: ['tabindex',] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_CHECKBOX_CLICK_ACTION,] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            MatCheckbox.propDecorators = {
                ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['aria-label',] }],
                ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['aria-labelledby',] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                indeterminateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                _inputElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['input', { static: false },] }],
                ripple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatRipple"], { static: false },] }],
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                indeterminate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAT_CHECKBOX_REQUIRED_VALIDATOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALIDATORS"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MatCheckboxRequiredValidator; })),
                multi: true
            };
            /**
             * Validator for Material checkbox's required attribute in template-driven checkbox.
             * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not
             * work with `mat-checkbox`.
             */
            var MatCheckboxRequiredValidator = /** @class */ (function (_super) {
                __extends(MatCheckboxRequiredValidator, _super);
                function MatCheckboxRequiredValidator() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatCheckboxRequiredValidator;
            }(_angular_forms__WEBPACK_IMPORTED_MODULE_3__["CheckboxRequiredValidator"]));
            MatCheckboxRequiredValidator.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: "mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]",
                            providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * This module is used by both original and MDC-based checkbox implementations.
             */
            // tslint:disable-next-line:class-name
            var _MatCheckboxRequiredValidatorModule = /** @class */ (function () {
                function _MatCheckboxRequiredValidatorModule() {
                }
                return _MatCheckboxRequiredValidatorModule;
            }());
            _MatCheckboxRequiredValidatorModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            exports: [MatCheckboxRequiredValidator],
                            declarations: [MatCheckboxRequiredValidator],
                        },] },
            ];
            var MatCheckboxModule = /** @class */ (function () {
                function MatCheckboxModule() {
                }
                return MatCheckboxModule;
            }());
            MatCheckboxModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatRippleModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"], _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_6__["ObserversModule"],
                                _MatCheckboxRequiredValidatorModule
                            ],
                            exports: [MatCheckbox, _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"], _MatCheckboxRequiredValidatorModule],
                            declarations: [MatCheckbox],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=checkbox.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/chips.js": 
        /*!*********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/chips.js ***!
          \*********************************************************/
        /*! exports provided: MatChipsModule, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatChipsModule", function () { return MatChipsModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatChipListChange", function () { return MatChipListChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatChipList", function () { return MatChipList; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatChipSelectionChange", function () { return MatChipSelectionChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatChipAvatar", function () { return MatChipAvatar; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatChipTrailingIcon", function () { return MatChipTrailingIcon; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatChip", function () { return MatChip; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatChipRemove", function () { return MatChipRemove; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatChipInput", function () { return MatChipInput; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_CHIPS_DEFAULT_OPTIONS", function () { return MAT_CHIPS_DEFAULT_OPTIONS; });
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/form-field */ "./node_modules/@angular/material/esm2015/form-field.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Event object emitted by MatChip when selected or deselected.
             */
            var MatChipSelectionChange = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} selected
                 * @param {?=} isUserInput
                 */
                function MatChipSelectionChange(source, selected, isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this.source = source;
                    this.selected = selected;
                    this.isUserInput = isUserInput;
                }
                return MatChipSelectionChange;
            }());
            // Boilerplate for applying mixins to MatChip.
            /**
             * \@docs-private
             */
            var MatChipBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatChipBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatChipBase;
            }());
            /** @type {?} */
            var _MatChipMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(MatChipBase)), 'primary');
            /**
             * Dummy directive to add CSS class to chip avatar.
             * \@docs-private
             */
            var MatChipAvatar = /** @class */ (function () {
                function MatChipAvatar() {
                }
                return MatChipAvatar;
            }());
            MatChipAvatar.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: 'mat-chip-avatar, [matChipAvatar]',
                            host: { 'class': 'mat-chip-avatar' }
                        },] },
            ];
            /**
             * Dummy directive to add CSS class to chip trailing icon.
             * \@docs-private
             */
            var MatChipTrailingIcon = /** @class */ (function () {
                function MatChipTrailingIcon() {
                }
                return MatChipTrailingIcon;
            }());
            MatChipTrailingIcon.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',
                            host: { 'class': 'mat-chip-trailing-icon' }
                        },] },
            ];
            /**
             * Material design styled Chip component. Used inside the MatChipList component.
             */
            var MatChip = /** @class */ (function (_super) {
                __extends(MatChip, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} _ngZone
                 * @param {?} platform
                 * @param {?} globalRippleOptions
                 * @param {?=} animationMode
                 * @param {?=} _changeDetectorRef
                 */
                function MatChip(_elementRef, _ngZone, platform, globalRippleOptions, 
                // @breaking-change 8.0.0 `animationMode` parameter to become required.
                animationMode, _changeDetectorRef) {
                    var _this = _super.call(this, _elementRef) || this;
                    _this._elementRef = _elementRef;
                    _this._ngZone = _ngZone;
                    _this._changeDetectorRef = _changeDetectorRef;
                    /**
                     * Whether the chip has focus.
                     */
                    _this._hasFocus = false;
                    /**
                     * Whether the chip list is selectable
                     */
                    _this.chipListSelectable = true;
                    /**
                     * Whether the chip list is in multi-selection mode.
                     */
                    _this._chipListMultiple = false;
                    _this._selected = false;
                    _this._selectable = true;
                    _this._removable = true;
                    /**
                     * Emits when the chip is focused.
                     */
                    _this._onFocus = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
                    /**
                     * Emits when the chip is blured.
                     */
                    _this._onBlur = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
                    /**
                     * Emitted when the chip is selected or deselected.
                     */
                    _this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Emitted when the chip is destroyed.
                     */
                    _this.destroyed = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Emitted when a chip is to be removed.
                     */
                    _this.removed = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    _this._addHostClassName();
                    _this._chipRipple = new _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["RippleRenderer"](_this, _ngZone, _elementRef, platform);
                    _this._chipRipple.setupTriggerEvents(_elementRef);
                    _this.rippleConfig = globalRippleOptions || {};
                    _this._animationsDisabled = animationMode === 'NoopAnimations';
                    return _this;
                }
                Object.defineProperty(MatChip.prototype, "rippleDisabled", {
                    /**
                     * Whether ripples are disabled on interaction
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChip.prototype, "selected", {
                    /**
                     * Whether the chip is selected.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var coercedValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                        if (coercedValue !== this._selected) {
                            this._selected = coercedValue;
                            this._dispatchSelectionChange();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChip.prototype, "value", {
                    /**
                     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.
                     * @return {?}
                     */
                    get: function () {
                        return this._value !== undefined
                            ? this._value
                            : this._elementRef.nativeElement.textContent;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._value = value; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChip.prototype, "selectable", {
                    /**
                     * Whether or not the chip is selectable. When a chip is not selectable,
                     * changes to its selected state are always ignored. By default a chip is
                     * selectable, and it becomes non-selectable if its parent chip list is
                     * not selectable.
                     * @return {?}
                     */
                    get: function () { return this._selectable && this.chipListSelectable; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selectable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChip.prototype, "removable", {
                    /**
                     * Determines whether or not the chip displays the remove styling and emits (removed) events.
                     * @return {?}
                     */
                    get: function () { return this._removable; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._removable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChip.prototype, "ariaSelected", {
                    /**
                     * The ARIA selected applied to the chip.
                     * @return {?}
                     */
                    get: function () {
                        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because
                        // it adds noise to NVDA users where "not selected" will be read out for each chip.
                        return this.selectable && (this._chipListMultiple || this.selected) ?
                            this.selected.toString() : null;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatChip.prototype._addHostClassName = function () {
                    /** @type {?} */
                    var basicChipAttrName = 'mat-basic-chip';
                    /** @type {?} */
                    var element = ( /** @type {?} */(this._elementRef.nativeElement));
                    if (element.hasAttribute(basicChipAttrName) ||
                        element.tagName.toLowerCase() === basicChipAttrName) {
                        element.classList.add(basicChipAttrName);
                        return;
                    }
                    else {
                        element.classList.add('mat-standard-chip');
                    }
                };
                /**
                 * @return {?}
                 */
                MatChip.prototype.ngOnDestroy = function () {
                    this.destroyed.emit({ chip: this });
                    this._chipRipple._removeTriggerEvents();
                };
                /**
                 * Selects the chip.
                 * @return {?}
                 */
                MatChip.prototype.select = function () {
                    if (!this._selected) {
                        this._selected = true;
                        this._dispatchSelectionChange();
                        this._markForCheck();
                    }
                };
                /**
                 * Deselects the chip.
                 * @return {?}
                 */
                MatChip.prototype.deselect = function () {
                    if (this._selected) {
                        this._selected = false;
                        this._dispatchSelectionChange();
                        this._markForCheck();
                    }
                };
                /**
                 * Select this chip and emit selected event
                 * @return {?}
                 */
                MatChip.prototype.selectViaInteraction = function () {
                    if (!this._selected) {
                        this._selected = true;
                        this._dispatchSelectionChange(true);
                        this._markForCheck();
                    }
                };
                /**
                 * Toggles the current selected state of this chip.
                 * @param {?=} isUserInput
                 * @return {?}
                 */
                MatChip.prototype.toggleSelected = function (isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this._selected = !this.selected;
                    this._dispatchSelectionChange(isUserInput);
                    this._markForCheck();
                    return this.selected;
                };
                /**
                 * Allows for programmatic focusing of the chip.
                 * @return {?}
                 */
                MatChip.prototype.focus = function () {
                    if (!this._hasFocus) {
                        this._elementRef.nativeElement.focus();
                        this._onFocus.next({ chip: this });
                    }
                    this._hasFocus = true;
                };
                /**
                 * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or
                 * BACKSPACE keys are pressed.
                 *
                 * Informs any listeners of the removal request. Does not remove the chip from the DOM.
                 * @return {?}
                 */
                MatChip.prototype.remove = function () {
                    if (this.removable) {
                        this.removed.emit({ chip: this });
                    }
                };
                /**
                 * Handles click events on the chip.
                 * @param {?} event
                 * @return {?}
                 */
                MatChip.prototype._handleClick = function (event) {
                    if (this.disabled) {
                        event.preventDefault();
                    }
                    else {
                        event.stopPropagation();
                    }
                };
                /**
                 * Handle custom key presses.
                 * @param {?} event
                 * @return {?}
                 */
                MatChip.prototype._handleKeydown = function (event) {
                    if (this.disabled) {
                        return;
                    }
                    switch (event.keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["DELETE"]:
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["BACKSPACE"]:
                            // If we are removable, remove the focused chip
                            this.remove();
                            // Always prevent so page navigation does not occur
                            event.preventDefault();
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["SPACE"]:
                            // If we are selectable, toggle the focused chip
                            if (this.selectable) {
                                this.toggleSelected(true);
                            }
                            // Always prevent space from scrolling the page since the list has focus
                            event.preventDefault();
                            break;
                    }
                };
                /**
                 * @return {?}
                 */
                MatChip.prototype._blur = function () {
                    var _this = this;
                    // When animations are enabled, Angular may end up removing the chip from the DOM a little
                    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list
                    // that moves focus not the next item. To work around the issue, we defer marking the chip
                    // as not focused until the next time the zone stabilizes.
                    this._ngZone.onStable
                        .asObservable()
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["take"])(1))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this._ngZone.run(( /**
                         * @return {?}
                         */function () {
                            _this._hasFocus = false;
                            _this._onBlur.next({ chip: _this });
                        }));
                    }));
                };
                /**
                 * @private
                 * @param {?=} isUserInput
                 * @return {?}
                 */
                MatChip.prototype._dispatchSelectionChange = function (isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this.selectionChange.emit({
                        source: this,
                        isUserInput: isUserInput,
                        selected: this._selected
                    });
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatChip.prototype._markForCheck = function () {
                    // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.
                    if (this._changeDetectorRef) {
                        this._changeDetectorRef.markForCheck();
                    }
                };
                return MatChip;
            }(_MatChipMixinBase));
            MatChip.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]",
                            inputs: ['color', 'disabled', 'disableRipple'],
                            exportAs: 'matChip',
                            host: {
                                'class': 'mat-chip',
                                '[attr.tabindex]': 'disabled ? null : -1',
                                'role': 'option',
                                '[class.mat-chip-selected]': 'selected',
                                '[class.mat-chip-with-avatar]': 'avatar',
                                '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',
                                '[class.mat-chip-disabled]': 'disabled',
                                '[class._mat-animation-noopable]': '_animationsDisabled',
                                '[attr.disabled]': 'disabled || null',
                                '[attr.aria-disabled]': 'disabled.toString()',
                                '[attr.aria-selected]': 'ariaSelected',
                                '(click)': '_handleClick($event)',
                                '(keydown)': '_handleKeydown($event)',
                                '(focus)': 'focus()',
                                '(blur)': '_blur()',
                            },
                        },] },
            ];
            /** @nocollapse */
            MatChip.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__["Platform"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MAT_RIPPLE_GLOBAL_OPTIONS"],] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__["ANIMATION_MODULE_TYPE"],] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] }
            ]; };
            MatChip.propDecorators = {
                avatar: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"], args: [MatChipAvatar, { static: false },] }],
                trailingIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"], args: [MatChipTrailingIcon, { static: false },] }],
                removeIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(( /**
                                         * @return {?}
                                         */function () { return MatChipRemove; })), { static: false },] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                selectable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                removable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                destroyed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                removed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }]
            };
            /**
             * Applies proper (click) support and adds styling for use with the Material Design "cancel" icon
             * available at https://material.io/icons/#ic_cancel.
             *
             * Example:
             *
             *     `<mat-chip>
             *       <mat-icon matChipRemove>cancel</mat-icon>
             *     </mat-chip>`
             *
             * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning
             * styles to properly center the icon within the chip.
             */
            var MatChipRemove = /** @class */ (function () {
                /**
                 * @param {?} _parentChip
                 */
                function MatChipRemove(_parentChip) {
                    this._parentChip = _parentChip;
                }
                /**
                 * Calls the parent chip's public `remove()` method if applicable.
                 * @param {?} event
                 * @return {?}
                 */
                MatChipRemove.prototype._handleClick = function (event) {
                    /** @type {?} */
                    var parentChip = this._parentChip;
                    if (parentChip.removable && !parentChip.disabled) {
                        parentChip.remove();
                    }
                    // We need to stop event propagation because otherwise the event will bubble up to the
                    // form field and cause the `onContainerClick` method to be invoked. This method would then
                    // reset the focused chip that has been focused after chip removal. Usually the parent
                    // the parent click listener of the `MatChip` would prevent propagation, but it can happen
                    // that the chip is being removed before the event bubbles up.
                    event.stopPropagation();
                };
                return MatChipRemove;
            }());
            MatChipRemove.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[matChipRemove]',
                            host: {
                                'class': 'mat-chip-remove mat-chip-trailing-icon',
                                '(click)': '_handleClick($event)',
                            }
                        },] },
            ];
            /** @nocollapse */
            MatChipRemove.ctorParameters = function () { return [
                { type: MatChip }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token to be used to override the default options for the chips module.
             * @type {?}
             */
            var MAT_CHIPS_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mat-chips-default-options');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Boilerplate for applying mixins to MatChipList.
            /**
             * \@docs-private
             */
            var MatChipListBase = /** @class */ (function () {
                /**
                 * @param {?} _defaultErrorStateMatcher
                 * @param {?} _parentForm
                 * @param {?} _parentFormGroup
                 * @param {?} ngControl
                 */
                function MatChipListBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
                    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
                    this._parentForm = _parentForm;
                    this._parentFormGroup = _parentFormGroup;
                    this.ngControl = ngControl;
                }
                return MatChipListBase;
            }());
            /** @type {?} */
            var _MatChipListMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinErrorState"])(MatChipListBase);
            // Increasing integer for generating unique ids for chip-list components.
            /** @type {?} */
            var nextUniqueId = 0;
            /**
             * Change event object that is emitted when the chip list value has changed.
             */
            var MatChipListChange = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} value
                 */
                function MatChipListChange(source, value) {
                    this.source = source;
                    this.value = value;
                }
                return MatChipListChange;
            }());
            /**
             * A material design chips component (named ChipList for its similarity to the List component).
             */
            var MatChipList = /** @class */ (function (_super) {
                __extends(MatChipList, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} _changeDetectorRef
                 * @param {?} _dir
                 * @param {?} _parentForm
                 * @param {?} _parentFormGroup
                 * @param {?} _defaultErrorStateMatcher
                 * @param {?} ngControl
                 */
                function MatChipList(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {
                    var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
                    _this._elementRef = _elementRef;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._dir = _dir;
                    _this.ngControl = ngControl;
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     */
                    _this.controlType = 'mat-chip-list';
                    /**
                     * When a chip is destroyed, we store the index of the destroyed chip until the chips
                     * query list notifies about the update. This is necessary because we cannot determine an
                     * appropriate chip that should receive focus until the array of chips updated completely.
                     */
                    _this._lastDestroyedChipIndex = null;
                    /**
                     * Subject that emits when the component has been destroyed.
                     */
                    _this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
                    /**
                     * Uid of the chip list
                     */
                    _this._uid = "mat-chip-list-" + nextUniqueId++;
                    /**
                     * Tab index for the chip list.
                     */
                    _this._tabIndex = 0;
                    /**
                     * User defined tab index.
                     * When it is not null, use user defined tab index. Otherwise use _tabIndex
                     */
                    _this._userTabIndex = null;
                    /**
                     * Function when touched
                     */
                    _this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * Function when changed
                     */
                    _this._onChange = ( /**
                     * @return {?}
                     */function () { });
                    _this._multiple = false;
                    _this._compareWith = ( /**
                     * @param {?} o1
                     * @param {?} o2
                     * @return {?}
                     */function (o1, o2) { return o1 === o2; });
                    _this._required = false;
                    _this._disabled = false;
                    /**
                     * Orientation of the chip list.
                     */
                    _this.ariaOrientation = 'horizontal';
                    _this._selectable = true;
                    /**
                     * Event emitted when the selected chip list value has been changed by the user.
                     */
                    _this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Event that emits whenever the raw value of the chip-list changes. This is here primarily
                     * to facilitate the two-way binding for the `value` input.
                     * \@docs-private
                     */
                    _this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    if (_this.ngControl) {
                        _this.ngControl.valueAccessor = _this;
                    }
                    return _this;
                }
                Object.defineProperty(MatChipList.prototype, "selected", {
                    /**
                     * The array of selected chips inside chip list.
                     * @return {?}
                     */
                    get: function () {
                        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "role", {
                    /**
                     * The ARIA role applied to the chip list.
                     * @return {?}
                     */
                    get: function () { return this.empty ? null : 'listbox'; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "multiple", {
                    /**
                     * Whether the user should be allowed to select multiple chips.
                     * @return {?}
                     */
                    get: function () { return this._multiple; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                        this._syncChipsState();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "compareWith", {
                    /**
                     * A function to compare the option values with the selected values. The first argument
                     * is a value from an option. The second is a value from the selection. A boolean
                     * should be returned.
                     * @return {?}
                     */
                    get: function () { return this._compareWith; },
                    /**
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        this._compareWith = fn;
                        if (this._selectionModel) {
                            // A different comparator means the selection could change.
                            this._initializeSelection();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "value", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () { return this._value; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this.writeValue(value);
                        this._value = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "id", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._chipInput ? this._chipInput.id : this._uid;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "required", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () { return this._required; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                        this.stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "placeholder", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._chipInput ? this._chipInput.placeholder : this._placeholder;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._placeholder = value;
                        this.stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "focused", {
                    /**
                     * Whether any chips or the matChipInput inside of this chip-list has focus.
                     * @return {?}
                     */
                    get: function () {
                        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "empty", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "shouldLabelFloat", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () { return !this.empty || this.focused; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "disabled", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () { return this.ngControl ? !!this.ngControl.disabled : this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                        this._syncChipsState();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "selectable", {
                    /**
                     * Whether or not this chip list is selectable. When a chip list is not selectable,
                     * the selected states for all the chips inside the chip list are always ignored.
                     * @return {?}
                     */
                    get: function () { return this._selectable; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        var _this = this;
                        this._selectable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                        if (this.chips) {
                            this.chips.forEach(( /**
                             * @param {?} chip
                             * @return {?}
                             */function (/**
                             * @param {?} chip
                             * @return {?}
                             */ chip) { return chip.chipListSelectable = _this._selectable; }));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "tabIndex", {
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._userTabIndex = value;
                        this._tabIndex = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "chipSelectionChanges", {
                    /**
                     * Combined stream of all of the child chips' selection change events.
                     * @return {?}
                     */
                    get: function () {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"]).apply(void 0, this.chips.map(( /**
                         * @param {?} chip
                         * @return {?}
                         */function (/**
                         * @param {?} chip
                         * @return {?}
                         */ chip) { return chip.selectionChange; })));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "chipFocusChanges", {
                    /**
                     * Combined stream of all of the child chips' focus change events.
                     * @return {?}
                     */
                    get: function () {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"]).apply(void 0, this.chips.map(( /**
                         * @param {?} chip
                         * @return {?}
                         */function (/**
                         * @param {?} chip
                         * @return {?}
                         */ chip) { return chip._onFocus; })));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "chipBlurChanges", {
                    /**
                     * Combined stream of all of the child chips' blur change events.
                     * @return {?}
                     */
                    get: function () {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"]).apply(void 0, this.chips.map(( /**
                         * @param {?} chip
                         * @return {?}
                         */function (/**
                         * @param {?} chip
                         * @return {?}
                         */ chip) { return chip._onBlur; })));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipList.prototype, "chipRemoveChanges", {
                    /**
                     * Combined stream of all of the child chips' remove change events.
                     * @return {?}
                     */
                    get: function () {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"]).apply(void 0, this.chips.map(( /**
                         * @param {?} chip
                         * @return {?}
                         */function (/**
                         * @param {?} chip
                         * @return {?}
                         */ chip) { return chip.destroyed; })));
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatChipList.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_8__["FocusKeyManager"](this.chips)
                        .withWrap()
                        .withVerticalOrientation()
                        .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');
                    if (this._dir) {
                        this._dir.change
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this._destroyed))
                            .subscribe(( /**
                     * @param {?} dir
                     * @return {?}
                     */function (/**
                     * @param {?} dir
                     * @return {?}
                     */ dir) { return _this._keyManager.withHorizontalOrientation(dir); }));
                    }
                    this._keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._allowFocusEscape();
                    }));
                    // When the list changes, re-subscribe
                    this.chips.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @return {?}
                     */function () {
                        if (_this.disabled) {
                            // Since this happens after the content has been
                            // checked, we need to defer it to the next tick.
                            Promise.resolve().then(( /**
                             * @return {?}
                             */function () {
                                _this._syncChipsState();
                            }));
                        }
                        _this._resetChips();
                        // Reset chips selected/deselected status
                        _this._initializeSelection();
                        // Check to see if we need to update our tab index
                        _this._updateTabIndex();
                        // Check to see if we have a destroyed chip and need to refocus
                        _this._updateFocusForDestroyedChips();
                        _this.stateChanges.next();
                    }));
                };
                /**
                 * @return {?}
                 */
                MatChipList.prototype.ngOnInit = function () {
                    this._selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_10__["SelectionModel"](this.multiple, undefined, false);
                    this.stateChanges.next();
                };
                /**
                 * @return {?}
                 */
                MatChipList.prototype.ngDoCheck = function () {
                    if (this.ngControl) {
                        // We need to re-evaluate this on every change detection cycle, because there are some
                        // error triggers that we can't subscribe to (e.g. parent form submissions). This means
                        // that whatever logic is in here has to be super lean or we risk destroying the performance.
                        this.updateErrorState();
                    }
                };
                /**
                 * @return {?}
                 */
                MatChipList.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                    this.stateChanges.complete();
                    this._dropSubscriptions();
                };
                /**
                 * Associates an HTML input element with this chip list.
                 * @param {?} inputElement
                 * @return {?}
                 */
                MatChipList.prototype.registerInput = function (inputElement) {
                    this._chipInput = inputElement;
                };
                /**
                 * Implemented as part of MatFormFieldControl.
                 * \@docs-private
                 * @param {?} ids
                 * @return {?}
                 */
                MatChipList.prototype.setDescribedByIds = function (ids) { this._ariaDescribedby = ids.join(' '); };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} value
                 * @return {?}
                 */
                MatChipList.prototype.writeValue = function (value) {
                    if (this.chips) {
                        this._setSelectionByValue(value, false);
                    }
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                MatChipList.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                MatChipList.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                MatChipList.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                    this.stateChanges.next();
                };
                /**
                 * Implemented as part of MatFormFieldControl.
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                MatChipList.prototype.onContainerClick = function (event) {
                    if (!this._originatesFromChip(event)) {
                        this.focus();
                    }
                };
                /**
                 * Focuses the first non-disabled chip in this chip list, or the associated input when there
                 * are no eligible chips.
                 * @param {?=} options
                 * @return {?}
                 */
                MatChipList.prototype.focus = function (options) {
                    if (this.disabled) {
                        return;
                    }
                    // TODO: ARIA says this should focus the first `selected` chip if any are selected.
                    // Focus on first element if there's no chipInput inside chip-list
                    if (this._chipInput && this._chipInput.focused) {
                        // do nothing
                    }
                    else if (this.chips.length > 0) {
                        this._keyManager.setFirstItemActive();
                        this.stateChanges.next();
                    }
                    else {
                        this._focusInput(options);
                        this.stateChanges.next();
                    }
                };
                /**
                 * Attempt to focus an input if we have one.
                 * @param {?=} options
                 * @return {?}
                 */
                MatChipList.prototype._focusInput = function (options) {
                    if (this._chipInput) {
                        this._chipInput.focus(options);
                    }
                };
                /**
                 * Pass events to the keyboard manager. Available here for tests.
                 * @param {?} event
                 * @return {?}
                 */
                MatChipList.prototype._keydown = function (event) {
                    /** @type {?} */
                    var target = ( /** @type {?} */(event.target));
                    // If they are on an empty input and hit backspace, focus the last chip
                    if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["BACKSPACE"] && this._isInputEmpty(target)) {
                        this._keyManager.setLastItemActive();
                        event.preventDefault();
                    }
                    else if (target && target.classList.contains('mat-chip')) {
                        if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["HOME"]) {
                            this._keyManager.setFirstItemActive();
                            event.preventDefault();
                        }
                        else if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["END"]) {
                            this._keyManager.setLastItemActive();
                            event.preventDefault();
                        }
                        else {
                            this._keyManager.onKeydown(event);
                        }
                        this.stateChanges.next();
                    }
                };
                /**
                 * Check the tab index as you should not be allowed to focus an empty list.
                 * @protected
                 * @return {?}
                 */
                MatChipList.prototype._updateTabIndex = function () {
                    // If we have 0 chips, we should not allow keyboard focus
                    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);
                };
                /**
                 * If the amount of chips changed, we need to update the
                 * key manager state and focus the next closest chip.
                 * @protected
                 * @return {?}
                 */
                MatChipList.prototype._updateFocusForDestroyedChips = function () {
                    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.
                    if (this._lastDestroyedChipIndex != null) {
                        if (this.chips.length) {
                            /** @type {?} */
                            var newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);
                            this._keyManager.setActiveItem(newChipIndex);
                        }
                        else {
                            this.focus();
                        }
                    }
                    this._lastDestroyedChipIndex = null;
                };
                /**
                 * Utility to ensure all indexes are valid.
                 *
                 * @private
                 * @param {?} index The index to be checked.
                 * @return {?} True if the index is valid for our list of chips.
                 */
                MatChipList.prototype._isValidIndex = function (index) {
                    return index >= 0 && index < this.chips.length;
                };
                /**
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                MatChipList.prototype._isInputEmpty = function (element) {
                    if (element && element.nodeName.toLowerCase() === 'input') {
                        /** @type {?} */
                        var input = ( /** @type {?} */(element));
                        return !input.value;
                    }
                    return false;
                };
                /**
                 * @param {?} value
                 * @param {?=} isUserInput
                 * @return {?}
                 */
                MatChipList.prototype._setSelectionByValue = function (value, isUserInput) {
                    var _this = this;
                    if (isUserInput === void 0) { isUserInput = true; }
                    this._clearSelection();
                    this.chips.forEach(( /**
                     * @param {?} chip
                     * @return {?}
                     */function (/**
                     * @param {?} chip
                     * @return {?}
                     */ chip) { return chip.deselect(); }));
                    if (Array.isArray(value)) {
                        value.forEach(( /**
                         * @param {?} currentValue
                         * @return {?}
                         */function (/**
                         * @param {?} currentValue
                         * @return {?}
                         */ currentValue) { return _this._selectValue(currentValue, isUserInput); }));
                        this._sortValues();
                    }
                    else {
                        /** @type {?} */
                        var correspondingChip = this._selectValue(value, isUserInput);
                        // Shift focus to the active item. Note that we shouldn't do this in multiple
                        // mode, because we don't know what chip the user interacted with last.
                        if (correspondingChip) {
                            if (isUserInput) {
                                this._keyManager.setActiveItem(correspondingChip);
                            }
                        }
                    }
                };
                /**
                 * Finds and selects the chip based on its value.
                 * @private
                 * @param {?} value
                 * @param {?=} isUserInput
                 * @return {?} Chip that has the corresponding value.
                 */
                MatChipList.prototype._selectValue = function (value, isUserInput) {
                    var _this = this;
                    if (isUserInput === void 0) { isUserInput = true; }
                    /** @type {?} */
                    var correspondingChip = this.chips.find(( /**
                     * @param {?} chip
                     * @return {?}
                     */function (/**
                     * @param {?} chip
                     * @return {?}
                     */ chip) {
                        return chip.value != null && _this._compareWith(chip.value, value);
                    }));
                    if (correspondingChip) {
                        isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();
                        this._selectionModel.select(correspondingChip);
                    }
                    return correspondingChip;
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatChipList.prototype._initializeSelection = function () {
                    var _this = this;
                    // Defer setting the value in order to avoid the "Expression
                    // has changed after it was checked" errors from Angular.
                    Promise.resolve().then(( /**
                     * @return {?}
                     */function () {
                        if (_this.ngControl || _this._value) {
                            _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value, false);
                            _this.stateChanges.next();
                        }
                    }));
                };
                /**
                 * Deselects every chip in the list.
                 * @private
                 * @param {?=} skip Chip that should not be deselected.
                 * @return {?}
                 */
                MatChipList.prototype._clearSelection = function (skip) {
                    this._selectionModel.clear();
                    this.chips.forEach(( /**
                     * @param {?} chip
                     * @return {?}
                     */function (/**
                     * @param {?} chip
                     * @return {?}
                     */ chip) {
                        if (chip !== skip) {
                            chip.deselect();
                        }
                    }));
                    this.stateChanges.next();
                };
                /**
                 * Sorts the model values, ensuring that they keep the same
                 * order that they have in the panel.
                 * @private
                 * @return {?}
                 */
                MatChipList.prototype._sortValues = function () {
                    var _this = this;
                    if (this._multiple) {
                        this._selectionModel.clear();
                        this.chips.forEach(( /**
                         * @param {?} chip
                         * @return {?}
                         */function (/**
                         * @param {?} chip
                         * @return {?}
                         */ chip) {
                            if (chip.selected) {
                                _this._selectionModel.select(chip);
                            }
                        }));
                        this.stateChanges.next();
                    }
                };
                /**
                 * Emits change event to set the model value.
                 * @private
                 * @param {?=} fallbackValue
                 * @return {?}
                 */
                MatChipList.prototype._propagateChanges = function (fallbackValue) {
                    /** @type {?} */
                    var valueToEmit = null;
                    if (Array.isArray(this.selected)) {
                        valueToEmit = this.selected.map(( /**
                         * @param {?} chip
                         * @return {?}
                         */function (/**
                         * @param {?} chip
                         * @return {?}
                         */ chip) { return chip.value; }));
                    }
                    else {
                        valueToEmit = this.selected ? this.selected.value : fallbackValue;
                    }
                    this._value = valueToEmit;
                    this.change.emit(new MatChipListChange(this, valueToEmit));
                    this.valueChange.emit(valueToEmit);
                    this._onChange(valueToEmit);
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * When blurred, mark the field as touched when focus moved outside the chip list.
                 * @return {?}
                 */
                MatChipList.prototype._blur = function () {
                    var _this = this;
                    if (!this._hasFocusedChip()) {
                        this._keyManager.setActiveItem(-1);
                    }
                    if (!this.disabled) {
                        if (this._chipInput) {
                            // If there's a chip input, we should check whether the focus moved to chip input.
                            // If the focus is not moved to chip input, mark the field as touched. If the focus moved
                            // to chip input, do nothing.
                            // Timeout is needed to wait for the focus() event trigger on chip input.
                            setTimeout(( /**
                             * @return {?}
                             */function () {
                                if (!_this.focused) {
                                    _this._markAsTouched();
                                }
                            }));
                        }
                        else {
                            // If there's no chip input, then mark the field as touched.
                            this._markAsTouched();
                        }
                    }
                };
                /**
                 * Mark the field as touched
                 * @return {?}
                 */
                MatChipList.prototype._markAsTouched = function () {
                    this._onTouched();
                    this._changeDetectorRef.markForCheck();
                    this.stateChanges.next();
                };
                /**
                 * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the
                 * user to tab out of it. This prevents the list from capturing focus and redirecting
                 * it back to the first chip, creating a focus trap, if it user tries to tab away.
                 * @return {?}
                 */
                MatChipList.prototype._allowFocusEscape = function () {
                    var _this = this;
                    if (this._tabIndex !== -1) {
                        this._tabIndex = -1;
                        setTimeout(( /**
                         * @return {?}
                         */function () {
                            _this._tabIndex = _this._userTabIndex || 0;
                            _this._changeDetectorRef.markForCheck();
                        }));
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatChipList.prototype._resetChips = function () {
                    this._dropSubscriptions();
                    this._listenToChipsFocus();
                    this._listenToChipsSelection();
                    this._listenToChipsRemoved();
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatChipList.prototype._dropSubscriptions = function () {
                    if (this._chipFocusSubscription) {
                        this._chipFocusSubscription.unsubscribe();
                        this._chipFocusSubscription = null;
                    }
                    if (this._chipBlurSubscription) {
                        this._chipBlurSubscription.unsubscribe();
                        this._chipBlurSubscription = null;
                    }
                    if (this._chipSelectionSubscription) {
                        this._chipSelectionSubscription.unsubscribe();
                        this._chipSelectionSubscription = null;
                    }
                    if (this._chipRemoveSubscription) {
                        this._chipRemoveSubscription.unsubscribe();
                        this._chipRemoveSubscription = null;
                    }
                };
                /**
                 * Listens to user-generated selection events on each chip.
                 * @private
                 * @return {?}
                 */
                MatChipList.prototype._listenToChipsSelection = function () {
                    var _this = this;
                    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        event.source.selected
                            ? _this._selectionModel.select(event.source)
                            : _this._selectionModel.deselect(event.source);
                        // For single selection chip list, make sure the deselected value is unselected.
                        if (!_this.multiple) {
                            _this.chips.forEach(( /**
                             * @param {?} chip
                             * @return {?}
                             */function (/**
                             * @param {?} chip
                             * @return {?}
                             */ chip) {
                                if (!_this._selectionModel.isSelected(chip) && chip.selected) {
                                    chip.deselect();
                                }
                            }));
                        }
                        if (event.isUserInput) {
                            _this._propagateChanges();
                        }
                    }));
                };
                /**
                 * Listens to user-generated selection events on each chip.
                 * @private
                 * @return {?}
                 */
                MatChipList.prototype._listenToChipsFocus = function () {
                    var _this = this;
                    this._chipFocusSubscription = this.chipFocusChanges.subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        /** @type {?} */
                        var chipIndex = _this.chips.toArray().indexOf(event.chip);
                        if (_this._isValidIndex(chipIndex)) {
                            _this._keyManager.updateActiveItemIndex(chipIndex);
                        }
                        _this.stateChanges.next();
                    }));
                    this._chipBlurSubscription = this.chipBlurChanges.subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._blur();
                        _this.stateChanges.next();
                    }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatChipList.prototype._listenToChipsRemoved = function () {
                    var _this = this;
                    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        /** @type {?} */
                        var chip = event.chip;
                        /** @type {?} */
                        var chipIndex = _this.chips.toArray().indexOf(event.chip);
                        // In case the chip that will be removed is currently focused, we temporarily store
                        // the index in order to be able to determine an appropriate sibling chip that will
                        // receive focus.
                        if (_this._isValidIndex(chipIndex) && chip._hasFocus) {
                            _this._lastDestroyedChipIndex = chipIndex;
                        }
                    }));
                };
                /**
                 * Checks whether an event comes from inside a chip element.
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                MatChipList.prototype._originatesFromChip = function (event) {
                    /** @type {?} */
                    var currentElement = ( /** @type {?} */(event.target));
                    while (currentElement && currentElement !== this._elementRef.nativeElement) {
                        if (currentElement.classList.contains('mat-chip')) {
                            return true;
                        }
                        currentElement = currentElement.parentElement;
                    }
                    return false;
                };
                /**
                 * Checks whether any of the chips is focused.
                 * @private
                 * @return {?}
                 */
                MatChipList.prototype._hasFocusedChip = function () {
                    return this.chips.some(( /**
                     * @param {?} chip
                     * @return {?}
                     */function (/**
                     * @param {?} chip
                     * @return {?}
                     */ chip) { return chip._hasFocus; }));
                };
                /**
                 * Syncs the list's state with the individual chips.
                 * @private
                 * @return {?}
                 */
                MatChipList.prototype._syncChipsState = function () {
                    var _this = this;
                    if (this.chips) {
                        this.chips.forEach(( /**
                         * @param {?} chip
                         * @return {?}
                         */function (/**
                         * @param {?} chip
                         * @return {?}
                         */ chip) {
                            chip.disabled = _this._disabled;
                            chip._chipListMultiple = _this.multiple;
                        }));
                    }
                };
                return MatChipList;
            }(_MatChipListMixinBase));
            MatChipList.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{ selector: 'mat-chip-list',
                            template: "<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>",
                            exportAs: 'matChipList',
                            host: {
                                '[attr.tabindex]': 'disabled ? null : _tabIndex',
                                '[attr.aria-describedby]': '_ariaDescribedby || null',
                                '[attr.aria-required]': 'required.toString()',
                                '[attr.aria-disabled]': 'disabled.toString()',
                                '[attr.aria-invalid]': 'errorState',
                                '[attr.aria-multiselectable]': 'multiple',
                                '[attr.role]': 'role',
                                '[class.mat-chip-list-disabled]': 'disabled',
                                '[class.mat-chip-list-invalid]': 'errorState',
                                '[class.mat-chip-list-required]': 'required',
                                '[attr.aria-orientation]': 'ariaOrientation',
                                'class': 'mat-chip-list',
                                '(focus)': 'focus()',
                                '(blur)': '_blur()',
                                '(keydown)': '_keydown($event)',
                                '[id]': '_uid',
                            },
                            providers: [{ provide: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__["MatFormFieldControl"], useExisting: MatChipList }],
                            styles: [".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}@media (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush
                        },] },
            ];
            /** @nocollapse */
            MatChipList.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgForm"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["FormGroupDirective"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] },
                { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["ErrorStateMatcher"] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Self"] }] }
            ]; };
            MatChipList.propDecorators = {
                errorStateMatcher: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                multiple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                compareWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                ariaOrientation: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['aria-orientation',] }],
                selectable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                chips: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [MatChip, {
                                // We need to use `descendants: true`, because Ivy will no longer match
                                // indirect descendants if it's left as false.
                                descendants: true
                            },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Increasing integer for generating unique ids.
            /** @type {?} */
            var nextUniqueId$1 = 0;
            /**
             * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.
             * May be placed inside or outside of an `<mat-chip-list>`.
             */
            var MatChipInput = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _defaultOptions
                 */
                function MatChipInput(_elementRef, _defaultOptions) {
                    this._elementRef = _elementRef;
                    this._defaultOptions = _defaultOptions;
                    /**
                     * Whether the control is focused.
                     */
                    this.focused = false;
                    this._addOnBlur = false;
                    /**
                     * The list of key codes that will trigger a chipEnd event.
                     *
                     * Defaults to `[ENTER]`.
                     */
                    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;
                    /**
                     * Emitted when a chip is to be added.
                     */
                    this.chipEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * The input's placeholder text.
                     */
                    this.placeholder = '';
                    /**
                     * Unique id for the input.
                     */
                    this.id = "mat-chip-list-input-" + nextUniqueId$1++;
                    this._disabled = false;
                    this._inputElement = ( /** @type {?} */(this._elementRef.nativeElement));
                }
                Object.defineProperty(MatChipInput.prototype, "chipList", {
                    /**
                     * Register input for chip list
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value) {
                            this._chipList = value;
                            this._chipList.registerInput(this);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipInput.prototype, "addOnBlur", {
                    /**
                     * Whether or not the chipEnd event will be emitted when the input is blurred.
                     * @return {?}
                     */
                    get: function () { return this._addOnBlur; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._addOnBlur = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipInput.prototype, "disabled", {
                    /**
                     * Whether the input is disabled.
                     * @return {?}
                     */
                    get: function () { return this._disabled || (this._chipList && this._chipList.disabled); },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatChipInput.prototype, "empty", {
                    /**
                     * Whether the input is empty.
                     * @return {?}
                     */
                    get: function () { return !this._inputElement.value; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatChipInput.prototype.ngOnChanges = function () {
                    this._chipList.stateChanges.next();
                };
                /**
                 * Utility method to make host definition/tests more clear.
                 * @param {?=} event
                 * @return {?}
                 */
                MatChipInput.prototype._keydown = function (event) {
                    // Allow the user's focus to escape when they're tabbing forward. Note that we don't
                    // want to do this when going backwards, because focus should go back to the first chip.
                    if (event && event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["TAB"] && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["hasModifierKey"])(event, 'shiftKey')) {
                        this._chipList._allowFocusEscape();
                    }
                    this._emitChipEnd(event);
                };
                /**
                 * Checks to see if the blur should emit the (chipEnd) event.
                 * @return {?}
                 */
                MatChipInput.prototype._blur = function () {
                    if (this.addOnBlur) {
                        this._emitChipEnd();
                    }
                    this.focused = false;
                    // Blur the chip list if it is not focused
                    if (!this._chipList.focused) {
                        this._chipList._blur();
                    }
                    this._chipList.stateChanges.next();
                };
                /**
                 * @return {?}
                 */
                MatChipInput.prototype._focus = function () {
                    this.focused = true;
                    this._chipList.stateChanges.next();
                };
                /**
                 * Checks to see if the (chipEnd) event needs to be emitted.
                 * @param {?=} event
                 * @return {?}
                 */
                MatChipInput.prototype._emitChipEnd = function (event) {
                    if (!this._inputElement.value && !!event) {
                        this._chipList._keydown(event);
                    }
                    if (!event || this._isSeparatorKey(event)) {
                        this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });
                        if (event) {
                            event.preventDefault();
                        }
                    }
                };
                /**
                 * @return {?}
                 */
                MatChipInput.prototype._onInput = function () {
                    // Let chip list know whenever the value changes.
                    this._chipList.stateChanges.next();
                };
                /**
                 * Focuses the input.
                 * @param {?=} options
                 * @return {?}
                 */
                MatChipInput.prototype.focus = function (options) {
                    this._inputElement.focus(options);
                };
                /**
                 * Checks whether a keycode is one of the configured separators.
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                MatChipInput.prototype._isSeparatorKey = function (event) {
                    if (Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["hasModifierKey"])(event)) {
                        return false;
                    }
                    /** @type {?} */
                    var separators = this.separatorKeyCodes;
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);
                };
                return MatChipInput;
            }());
            MatChipInput.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: 'input[matChipInputFor]',
                            exportAs: 'matChipInput, matChipInputFor',
                            host: {
                                'class': 'mat-chip-input mat-input-element',
                                '(keydown)': '_keydown($event)',
                                '(blur)': '_blur()',
                                '(focus)': '_focus()',
                                '(input)': '_onInput()',
                                '[id]': 'id',
                                '[attr.disabled]': 'disabled || null',
                                '[attr.placeholder]': 'placeholder || null',
                                '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',
                            }
                        },] },
            ];
            /** @nocollapse */
            MatChipInput.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }
            ]; };
            MatChipInput.propDecorators = {
                chipList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['matChipInputFor',] }],
                addOnBlur: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['matChipInputAddOnBlur',] }],
                separatorKeyCodes: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['matChipInputSeparatorKeyCodes',] }],
                chipEnd: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"], args: ['matChipInputTokenEnd',] }],
                placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var CHIP_DECLARATIONS = [
                MatChipList,
                MatChip,
                MatChipInput,
                MatChipRemove,
                MatChipAvatar,
                MatChipTrailingIcon,
            ];
            var ɵ0 = ({
                separatorKeyCodes: [_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["ENTER"]]
            });
            var MatChipsModule = /** @class */ (function () {
                function MatChipsModule() {
                }
                return MatChipsModule;
            }());
            MatChipsModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                            exports: CHIP_DECLARATIONS,
                            declarations: CHIP_DECLARATIONS,
                            providers: [
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["ErrorStateMatcher"],
                                {
                                    provide: MAT_CHIPS_DEFAULT_OPTIONS,
                                    useValue: ( /** @type {?} */(ɵ0))
                                }
                            ]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=chips.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/core.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/core.js ***!
          \********************************************************/
        /*! exports provided: VERSION, AnimationCurves, AnimationDurations, MatCommonModule, MATERIAL_SANITY_CHECKS, mixinDisabled, mixinColor, mixinDisableRipple, mixinTabIndex, mixinErrorState, mixinInitialized, NativeDateModule, MatNativeDateModule, MAT_DATE_LOCALE_FACTORY, MAT_DATE_LOCALE, MAT_DATE_LOCALE_PROVIDER, DateAdapter, MAT_DATE_FORMATS, NativeDateAdapter, MAT_NATIVE_DATE_FORMATS, ShowOnDirtyErrorStateMatcher, ErrorStateMatcher, MAT_HAMMER_OPTIONS, GestureConfig, setLines, MatLine, MatLineSetter, MatLineModule, MatOptionModule, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MAT_OPTION_PARENT_COMPONENT, MatOption, MatOptgroup, MAT_LABEL_GLOBAL_OPTIONS, MatRippleModule, MAT_RIPPLE_GLOBAL_OPTIONS, MatRipple, RippleState, RippleRef, defaultRippleAnimationConfig, RippleRenderer, MatPseudoCheckboxModule, MatPseudoCheckbox, JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC, ɵa1 */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function () { return VERSION$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationCurves", function () { return AnimationCurves; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationDurations", function () { return AnimationDurations; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCommonModule", function () { return MatCommonModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MATERIAL_SANITY_CHECKS", function () { return MATERIAL_SANITY_CHECKS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mixinDisabled", function () { return mixinDisabled; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mixinColor", function () { return mixinColor; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mixinDisableRipple", function () { return mixinDisableRipple; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mixinTabIndex", function () { return mixinTabIndex; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mixinErrorState", function () { return mixinErrorState; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mixinInitialized", function () { return mixinInitialized; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NativeDateModule", function () { return NativeDateModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatNativeDateModule", function () { return MatNativeDateModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DATE_LOCALE_FACTORY", function () { return MAT_DATE_LOCALE_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DATE_LOCALE", function () { return MAT_DATE_LOCALE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DATE_LOCALE_PROVIDER", function () { return MAT_DATE_LOCALE_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateAdapter", function () { return DateAdapter; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DATE_FORMATS", function () { return MAT_DATE_FORMATS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NativeDateAdapter", function () { return NativeDateAdapter; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_NATIVE_DATE_FORMATS", function () { return MAT_NATIVE_DATE_FORMATS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShowOnDirtyErrorStateMatcher", function () { return ShowOnDirtyErrorStateMatcher; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorStateMatcher", function () { return ErrorStateMatcher; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_HAMMER_OPTIONS", function () { return MAT_HAMMER_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GestureConfig", function () { return GestureConfig; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setLines", function () { return setLines; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatLine", function () { return MatLine; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatLineSetter", function () { return MatLineSetter; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatLineModule", function () { return MatLineModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatOptionModule", function () { return MatOptionModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_countGroupLabelsBeforeOption", function () { return _countGroupLabelsBeforeOption; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getOptionScrollPosition", function () { return _getOptionScrollPosition; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatOptionSelectionChange", function () { return MatOptionSelectionChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_OPTION_PARENT_COMPONENT", function () { return MAT_OPTION_PARENT_COMPONENT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatOption", function () { return MatOption; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatOptgroup", function () { return MatOptgroup; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_LABEL_GLOBAL_OPTIONS", function () { return MAT_LABEL_GLOBAL_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatRippleModule", function () { return MatRippleModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_RIPPLE_GLOBAL_OPTIONS", function () { return MAT_RIPPLE_GLOBAL_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatRipple", function () { return MatRipple; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RippleState", function () { return RippleState; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RippleRef", function () { return RippleRef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultRippleAnimationConfig", function () { return defaultRippleAnimationConfig; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RippleRenderer", function () { return RippleRenderer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatPseudoCheckboxModule", function () { return MatPseudoCheckboxModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatPseudoCheckbox", function () { return MatPseudoCheckbox; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JAN", function () { return JAN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FEB", function () { return FEB; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAR", function () { return MAR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APR", function () { return APR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAY", function () { return MAY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JUN", function () { return JUN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JUL", function () { return JUL; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUG", function () { return AUG; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SEP", function () { return SEP; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OCT", function () { return OCT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NOV", function () { return NOV; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEC", function () { return DEC; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa1", function () { return MATERIAL_SANITY_CHECKS_FACTORY; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk */ "./node_modules/@angular/cdk/esm2015/cdk.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Current version of Angular Material.
             * @type {?}
             */
            var VERSION$1 = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('8.2.3');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             */
            var AnimationCurves = /** @class */ (function () {
                function AnimationCurves() {
                }
                return AnimationCurves;
            }());
            AnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';
            AnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';
            AnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';
            AnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';
            /**
             * \@docs-private
             */
            var AnimationDurations = /** @class */ (function () {
                function AnimationDurations() {
                }
                return AnimationDurations;
            }());
            AnimationDurations.COMPLEX = '375ms';
            AnimationDurations.ENTERING = '225ms';
            AnimationDurations.EXITING = '195ms';
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Private version constant to circumvent test/build issues,
            // i.e. avoid core to depend on the @angular/material primary entry-point
            // Can be removed once the Material primary entry-point no longer
            // re-exports all secondary entry-points
            /** @type {?} */
            var VERSION$2 = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('8.2.3');
            /**
             * \@docs-private
             * @return {?}
             */
            function MATERIAL_SANITY_CHECKS_FACTORY() {
                return true;
            }
            /**
             * Injection token that configures whether the Material sanity checks are enabled.
             * @type {?}
             */
            var MATERIAL_SANITY_CHECKS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-sanity-checks', {
                providedIn: 'root',
                factory: MATERIAL_SANITY_CHECKS_FACTORY,
            });
            /**
             * Module that captures anything that should be loaded and/or run for *all* Angular Material
             * components. This includes Bidi, etc.
             *
             * This module should be imported to each top-level component module (e.g., MatTabsModule).
             */
            var MatCommonModule = /** @class */ (function () {
                /**
                 * @param {?} _sanityChecksEnabled
                 * @param {?=} _hammerLoader
                 */
                function MatCommonModule(_sanityChecksEnabled, _hammerLoader) {
                    this._sanityChecksEnabled = _sanityChecksEnabled;
                    this._hammerLoader = _hammerLoader;
                    /**
                     * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).
                     */
                    this._hasDoneGlobalChecks = false;
                    /**
                     * Whether we've already checked for HammerJs availability.
                     */
                    this._hasCheckedHammer = false;
                    /**
                     * Reference to the global `document` object.
                     */
                    this._document = typeof document === 'object' && document ? document : null;
                    /**
                     * Reference to the global 'window' object.
                     */
                    this._window = typeof window === 'object' && window ? window : null;
                    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {
                        this._checkDoctypeIsDefined();
                        this._checkThemeIsPresent();
                        this._checkCdkVersionMatch();
                        this._hasDoneGlobalChecks = true;
                    }
                }
                /**
                 * Whether any sanity checks are enabled
                 * @private
                 * @return {?}
                 */
                MatCommonModule.prototype._areChecksEnabled = function () {
                    return this._sanityChecksEnabled && Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["isDevMode"])() && !this._isTestEnv();
                };
                /**
                 * Whether the code is running in tests.
                 * @private
                 * @return {?}
                 */
                MatCommonModule.prototype._isTestEnv = function () {
                    /** @type {?} */
                    var window = ( /** @type {?} */(this._window));
                    return window && (window.__karma__ || window.jasmine);
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatCommonModule.prototype._checkDoctypeIsDefined = function () {
                    if (this._document && !this._document.doctype) {
                        console.warn('Current document does not have a doctype. This may cause ' +
                            'some Angular Material components not to behave as expected.');
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatCommonModule.prototype._checkThemeIsPresent = function () {
                    // We need to assert that the `body` is defined, because these checks run very early
                    // and the `body` won't be defined if the consumer put their scripts in the `head`.
                    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {
                        return;
                    }
                    /** @type {?} */
                    var testElement = this._document.createElement('div');
                    testElement.classList.add('mat-theme-loaded-marker');
                    this._document.body.appendChild(testElement);
                    /** @type {?} */
                    var computedStyle = getComputedStyle(testElement);
                    // In some situations the computed style of the test element can be null. For example in
                    // Firefox, the computed style is null if an application is running inside of a hidden iframe.
                    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397
                    if (computedStyle && computedStyle.display !== 'none') {
                        console.warn('Could not find Angular Material core theme. Most Material ' +
                            'components may not work as expected. For more info refer ' +
                            'to the theming guide: https://material.angular.io/guide/theming');
                    }
                    this._document.body.removeChild(testElement);
                };
                /**
                 * Checks whether the material version matches the cdk version
                 * @private
                 * @return {?}
                 */
                MatCommonModule.prototype._checkCdkVersionMatch = function () {
                    if (VERSION$2.full !== _angular_cdk__WEBPACK_IMPORTED_MODULE_3__["VERSION"].full) {
                        console.warn('The Angular Material version (' + VERSION$2.full + ') does not match ' +
                            'the Angular CDK version (' + _angular_cdk__WEBPACK_IMPORTED_MODULE_3__["VERSION"].full + ').\n' +
                            'Please ensure the versions of these two packages exactly match.');
                    }
                };
                /**
                 * Checks whether HammerJS is available.
                 * @return {?}
                 */
                MatCommonModule.prototype._checkHammerIsAvailable = function () {
                    if (this._hasCheckedHammer || !this._window) {
                        return;
                    }
                    if (this._areChecksEnabled() && !(( /** @type {?} */(this._window)))['Hammer'] && !this._hammerLoader) {
                        console.warn('Could not find HammerJS. Certain Angular Material components may not work correctly.');
                    }
                    this._hasCheckedHammer = true;
                };
                return MatCommonModule;
            }());
            MatCommonModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"]],
                            exports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"]],
                        },] },
            ];
            /** @nocollapse */
            MatCommonModule.ctorParameters = function () { return [
                { type: Boolean, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MATERIAL_SANITY_CHECKS,] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["HAMMER_LOADER"],] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Mixin to augment a directive with a `disabled` property.
             * @template T
             * @param {?} base
             * @return {?}
             */
            function mixinDisabled(base) {
                return /** @class */ (function (_super) {
                    __extends(class_2, _super);
                    /**
                     * @param {...?} args
                     */
                    function class_2() {
                        var args = [];
                        for (var _b = 0; _b < arguments.length; _b++) {
                            args[_b] = arguments[_b];
                        }
                        var _this = _super.apply(this, args) || this;
                        _this._disabled = false;
                        return _this;
                    }
                    Object.defineProperty(class_2.prototype, "disabled", {
                        /**
                         * @return {?}
                         */
                        get: function () { return this._disabled; },
                        /**
                         * @param {?} value
                         * @return {?}
                         */
                        set: function (value) { this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value); },
                        enumerable: true,
                        configurable: true
                    });
                    return class_2;
                }(base));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Mixin to augment a directive with a `color` property.
             * @template T
             * @param {?} base
             * @param {?=} defaultColor
             * @return {?}
             */
            function mixinColor(base, defaultColor) {
                return /** @class */ (function (_super) {
                    __extends(class_3, _super);
                    /**
                     * @param {...?} args
                     */
                    function class_3() {
                        var args = [];
                        for (var _b = 0; _b < arguments.length; _b++) {
                            args[_b] = arguments[_b];
                        }
                        var _this = _super.apply(this, args) || this;
                        // Set the default color that can be specified from the mixin.
                        _this.color = defaultColor;
                        return _this;
                    }
                    Object.defineProperty(class_3.prototype, "color", {
                        /**
                         * @return {?}
                         */
                        get: function () { return this._color; },
                        /**
                         * @param {?} value
                         * @return {?}
                         */
                        set: function (value) {
                            /** @type {?} */
                            var colorPalette = value || defaultColor;
                            if (colorPalette !== this._color) {
                                if (this._color) {
                                    this._elementRef.nativeElement.classList.remove("mat-" + this._color);
                                }
                                if (colorPalette) {
                                    this._elementRef.nativeElement.classList.add("mat-" + colorPalette);
                                }
                                this._color = colorPalette;
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return class_3;
                }(base));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Mixin to augment a directive with a `disableRipple` property.
             * @template T
             * @param {?} base
             * @return {?}
             */
            function mixinDisableRipple(base) {
                return /** @class */ (function (_super) {
                    __extends(class_4, _super);
                    /**
                     * @param {...?} args
                     */
                    function class_4() {
                        var args = [];
                        for (var _b = 0; _b < arguments.length; _b++) {
                            args[_b] = arguments[_b];
                        }
                        var _this = _super.apply(this, args) || this;
                        _this._disableRipple = false;
                        return _this;
                    }
                    Object.defineProperty(class_4.prototype, "disableRipple", {
                        /**
                         * Whether the ripple effect is disabled or not.
                         * @return {?}
                         */
                        get: function () { return this._disableRipple; },
                        /**
                         * @param {?} value
                         * @return {?}
                         */
                        set: function (value) { this._disableRipple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value); },
                        enumerable: true,
                        configurable: true
                    });
                    return class_4;
                }(base));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Mixin to augment a directive with a `tabIndex` property.
             * @template T
             * @param {?} base
             * @param {?=} defaultTabIndex
             * @return {?}
             */
            function mixinTabIndex(base, defaultTabIndex) {
                if (defaultTabIndex === void 0) { defaultTabIndex = 0; }
                return /** @class */ (function (_super) {
                    __extends(class_5, _super);
                    /**
                     * @param {...?} args
                     */
                    function class_5() {
                        var args = [];
                        for (var _b = 0; _b < arguments.length; _b++) {
                            args[_b] = arguments[_b];
                        }
                        var _this = _super.apply(this, args) || this;
                        _this._tabIndex = defaultTabIndex;
                        return _this;
                    }
                    Object.defineProperty(class_5.prototype, "tabIndex", {
                        /**
                         * @return {?}
                         */
                        get: function () { return this.disabled ? -1 : this._tabIndex; },
                        /**
                         * @param {?} value
                         * @return {?}
                         */
                        set: function (value) {
                            // If the specified tabIndex value is null or undefined, fall back to the default value.
                            this._tabIndex = value != null ? value : defaultTabIndex;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return class_5;
                }(base));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Mixin to augment a directive with updateErrorState method.
             * For component with `errorState` and need to update `errorState`.
             * @template T
             * @param {?} base
             * @return {?}
             */
            function mixinErrorState(base) {
                return /** @class */ (function (_super) {
                    __extends(class_6, _super);
                    /**
                     * @param {...?} args
                     */
                    function class_6() {
                        var args = [];
                        for (var _b = 0; _b < arguments.length; _b++) {
                            args[_b] = arguments[_b];
                        }
                        var _this = _super.apply(this, args) || this;
                        /**
                         * Whether the component is in an error state.
                         */
                        _this.errorState = false;
                        /**
                         * Stream that emits whenever the state of the input changes such that the wrapping
                         * `MatFormField` needs to run change detection.
                         */
                        _this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
                        return _this;
                    }
                    /**
                     * @return {?}
                     */
                    class_6.prototype.updateErrorState = function () {
                        /** @type {?} */
                        var oldState = this.errorState;
                        /** @type {?} */
                        var parent = this._parentFormGroup || this._parentForm;
                        /** @type {?} */
                        var matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;
                        /** @type {?} */
                        var control = this.ngControl ? ( /** @type {?} */(this.ngControl.control)) : null;
                        /** @type {?} */
                        var newState = matcher.isErrorState(control, parent);
                        if (newState !== oldState) {
                            this.errorState = newState;
                            this.stateChanges.next();
                        }
                    };
                    return class_6;
                }(base));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Mixin to augment a directive with an initialized property that will emits when ngOnInit ends.
             * @template T
             * @param {?} base
             * @return {?}
             */
            function mixinInitialized(base) {
                return /** @class */ (function (_super) {
                    __extends(class_7, _super);
                    /**
                     * @param {...?} args
                     */
                    function class_7() {
                        var args = [];
                        for (var _b = 0; _b < arguments.length; _b++) {
                            args[_b] = arguments[_b];
                        }
                        var _this = _super.apply(this, args) || this;
                        /**
                         * Whether this directive has been marked as initialized.
                         */
                        _this._isInitialized = false;
                        /**
                         * List of subscribers that subscribed before the directive was initialized. Should be notified
                         * during _markInitialized. Set to null after pending subscribers are notified, and should
                         * not expect to be populated after.
                         */
                        _this._pendingSubscribers = [];
                        /**
                         * Observable stream that emits when the directive initializes. If already initialized, the
                         * subscriber is stored to be notified once _markInitialized is called.
                         */
                        _this.initialized = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Observable"](( /**
                         * @param {?} subscriber
                         * @return {?}
                         */function (/**
                         * @param {?} subscriber
                         * @return {?}
                         */ subscriber) {
                            // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify
                            // when _markInitialized is called.
                            if (_this._isInitialized) {
                                _this._notifySubscriber(subscriber);
                            }
                            else {
                                ( /** @type {?} */(_this._pendingSubscribers)).push(subscriber);
                            }
                        }));
                        return _this;
                    }
                    /**
                     * Marks the state as initialized and notifies pending subscribers. Should be called at the end
                     * of ngOnInit.
                     * \@docs-private
                     * @return {?}
                     */
                    class_7.prototype._markInitialized = function () {
                        if (this._isInitialized) {
                            throw Error('This directive has already been marked as initialized and ' +
                                'should not be called twice.');
                        }
                        this._isInitialized = true;
                        ( /** @type {?} */(this._pendingSubscribers)).forEach(this._notifySubscriber);
                        this._pendingSubscribers = null;
                    };
                    /**
                     * Emits and completes the subscriber stream (should only emit once).
                     * @param {?} subscriber
                     * @return {?}
                     */
                    class_7.prototype._notifySubscriber = function (subscriber) {
                        subscriber.next();
                        subscriber.complete();
                    };
                    return class_7;
                }(base));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * InjectionToken for datepicker that can be used to override default locale code.
             * @type {?}
             */
            var MAT_DATE_LOCALE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_DATE_LOCALE', {
                providedIn: 'root',
                factory: MAT_DATE_LOCALE_FACTORY,
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function MAT_DATE_LOCALE_FACTORY() {
                return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["inject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]);
            }
            /**
             * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.
             * If you are importing and providing this in your code you can simply remove it.
             * @deprecated
             * \@breaking-change 8.0.0
             * @type {?}
             */
            var MAT_DATE_LOCALE_PROVIDER = { provide: MAT_DATE_LOCALE, useExisting: _angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"] };
            /**
             * Adapts type `D` to be usable as a date by cdk-based components that work with dates.
             * @abstract
             * @template D
             */
            var DateAdapter = /** @class */ (function () {
                function DateAdapter() {
                    this._localeChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
                }
                Object.defineProperty(DateAdapter.prototype, "localeChanges", {
                    /**
                     * A stream that emits when the locale changes.
                     * @return {?}
                     */
                    get: function () { return this._localeChanges; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Attempts to deserialize a value to a valid date object. This is different from parsing in that
                 * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
                 * string). The default implementation does not allow any deserialization, it simply checks that
                 * the given value is already a valid date object or null. The `<mat-datepicker>` will call this
                 * method on all of its `\@Input()` properties that accept dates. It is therefore possible to
                 * support passing values from your backend directly to these properties by overriding this method
                 * to also deserialize the format used by your backend.
                 * @param {?} value The value to be deserialized into a date object.
                 * @return {?} The deserialized date object, either a valid date, null if the value can be
                 *     deserialized into a null date (e.g. the empty string), or an invalid date.
                 */
                DateAdapter.prototype.deserialize = function (value) {
                    if (value == null || this.isDateInstance(value) && this.isValid(value)) {
                        return value;
                    }
                    return this.invalid();
                };
                /**
                 * Sets the locale used for all dates.
                 * @param {?} locale The new locale.
                 * @return {?}
                 */
                DateAdapter.prototype.setLocale = function (locale) {
                    this.locale = locale;
                    this._localeChanges.next();
                };
                /**
                 * Compares two dates.
                 * @param {?} first The first date to compare.
                 * @param {?} second The second date to compare.
                 * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,
                 *     a number greater than 0 if the first date is later.
                 */
                DateAdapter.prototype.compareDate = function (first, second) {
                    return this.getYear(first) - this.getYear(second) ||
                        this.getMonth(first) - this.getMonth(second) ||
                        this.getDate(first) - this.getDate(second);
                };
                /**
                 * Checks if two dates are equal.
                 * @param {?} first The first date to check.
                 * @param {?} second The second date to check.
                 * @return {?} Whether the two dates are equal.
                 *     Null dates are considered equal to other null dates.
                 */
                DateAdapter.prototype.sameDate = function (first, second) {
                    if (first && second) {
                        /** @type {?} */
                        var firstValid = this.isValid(first);
                        /** @type {?} */
                        var secondValid = this.isValid(second);
                        if (firstValid && secondValid) {
                            return !this.compareDate(first, second);
                        }
                        return firstValid == secondValid;
                    }
                    return first == second;
                };
                /**
                 * Clamp the given date between min and max dates.
                 * @param {?} date The date to clamp.
                 * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.
                 * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.
                 * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,
                 *     otherwise `date`.
                 */
                DateAdapter.prototype.clampDate = function (date, min, max) {
                    if (min && this.compareDate(date, min) < 0) {
                        return min;
                    }
                    if (max && this.compareDate(date, max) > 0) {
                        return max;
                    }
                    return date;
                };
                return DateAdapter;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAT_DATE_FORMATS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-date-formats');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // TODO(mmalerba): Remove when we no longer support safari 9.
            /**
             * Whether the browser supports the Intl API.
             * @type {?}
             */
            var SUPPORTS_INTL_API;
            // We need a try/catch around the reference to `Intl`, because accessing it in some cases can
            // cause IE to throw. These cases are tied to particular versions of Windows and can happen if
            // the consumer is providing a polyfilled `Map`. See:
            // https://github.com/Microsoft/ChakraCore/issues/3189
            // https://github.com/angular/components/issues/15687
            try {
                SUPPORTS_INTL_API = typeof Intl != 'undefined';
            }
            catch (_a) {
                SUPPORTS_INTL_API = false;
            }
            /**
             * The default month names to use if Intl API is not available.
             * @type {?}
             */
            var DEFAULT_MONTH_NAMES = {
                'long': [
                    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',
                    'October', 'November', 'December'
                ],
                'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
            };
            var ɵ0 = /**
             * @param {?} i
             * @return {?}
             */ function (/**
             * @param {?} i
             * @return {?}
             */ i) { return String(i + 1); };
            /**
             * The default date names to use if Intl API is not available.
             * @type {?}
             */
            var DEFAULT_DATE_NAMES = range(31, (ɵ0));
            /**
             * The default day of the week names to use if Intl API is not available.
             * @type {?}
             */
            var DEFAULT_DAY_OF_WEEK_NAMES = {
                'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']
            };
            /**
             * Matches strings that have the form of a valid RFC 3339 string
             * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date
             * because the regex will match strings an with out of bounds month, date, etc.
             * @type {?}
             */
            var ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
            /**
             * Creates an array and fills it with values.
             * @template T
             * @param {?} length
             * @param {?} valueFunction
             * @return {?}
             */
            function range(length, valueFunction) {
                /** @type {?} */
                var valuesArray = Array(length);
                for (var i = 0; i < length; i++) {
                    valuesArray[i] = valueFunction(i);
                }
                return valuesArray;
            }
            /**
             * Adapts the native JS Date for use with cdk-based components that work with dates.
             */
            var NativeDateAdapter = /** @class */ (function (_super) {
                __extends(NativeDateAdapter, _super);
                /**
                 * @param {?} matDateLocale
                 * @param {?} platform
                 */
                function NativeDateAdapter(matDateLocale, platform) {
                    var _this = _super.call(this) || this;
                    /**
                     * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
                     * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
                     * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
                     * will produce `'8/13/1800'`.
                     *
                     * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now
                     * getting the string representation of a Date object from its utc representation. We're keeping
                     * it here for sometime, just for precaution, in case we decide to revert some of these changes
                     * though.
                     */
                    _this.useUtcForDisplay = true;
                    _super.prototype.setLocale.call(_this, matDateLocale);
                    // IE does its own time zone correction, so we disable this on IE.
                    _this.useUtcForDisplay = !platform.TRIDENT;
                    _this._clampDate = platform.TRIDENT || platform.EDGE;
                    return _this;
                }
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NativeDateAdapter.prototype.getYear = function (date) {
                    return date.getFullYear();
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NativeDateAdapter.prototype.getMonth = function (date) {
                    return date.getMonth();
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NativeDateAdapter.prototype.getDate = function (date) {
                    return date.getDate();
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NativeDateAdapter.prototype.getDayOfWeek = function (date) {
                    return date.getDay();
                };
                /**
                 * @param {?} style
                 * @return {?}
                 */
                NativeDateAdapter.prototype.getMonthNames = function (style) {
                    var _this = this;
                    if (SUPPORTS_INTL_API) {
                        /** @type {?} */
                        var dtf_1 = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });
                        return range(12, ( /**
                         * @param {?} i
                         * @return {?}
                         */function (/**
                         * @param {?} i
                         * @return {?}
                         */ i) { return _this._stripDirectionalityCharacters(_this._format(dtf_1, new Date(2017, i, 1))); }));
                    }
                    return DEFAULT_MONTH_NAMES[style];
                };
                /**
                 * @return {?}
                 */
                NativeDateAdapter.prototype.getDateNames = function () {
                    var _this = this;
                    if (SUPPORTS_INTL_API) {
                        /** @type {?} */
                        var dtf_2 = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });
                        return range(31, ( /**
                         * @param {?} i
                         * @return {?}
                         */function (/**
                         * @param {?} i
                         * @return {?}
                         */ i) { return _this._stripDirectionalityCharacters(_this._format(dtf_2, new Date(2017, 0, i + 1))); }));
                    }
                    return DEFAULT_DATE_NAMES;
                };
                /**
                 * @param {?} style
                 * @return {?}
                 */
                NativeDateAdapter.prototype.getDayOfWeekNames = function (style) {
                    var _this = this;
                    if (SUPPORTS_INTL_API) {
                        /** @type {?} */
                        var dtf_3 = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });
                        return range(7, ( /**
                         * @param {?} i
                         * @return {?}
                         */function (/**
                         * @param {?} i
                         * @return {?}
                         */ i) { return _this._stripDirectionalityCharacters(_this._format(dtf_3, new Date(2017, 0, i + 1))); }));
                    }
                    return DEFAULT_DAY_OF_WEEK_NAMES[style];
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NativeDateAdapter.prototype.getYearName = function (date) {
                    if (SUPPORTS_INTL_API) {
                        /** @type {?} */
                        var dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });
                        return this._stripDirectionalityCharacters(this._format(dtf, date));
                    }
                    return String(this.getYear(date));
                };
                /**
                 * @return {?}
                 */
                NativeDateAdapter.prototype.getFirstDayOfWeek = function () {
                    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.
                    return 0;
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NativeDateAdapter.prototype.getNumDaysInMonth = function (date) {
                    return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NativeDateAdapter.prototype.clone = function (date) {
                    return new Date(date.getTime());
                };
                /**
                 * @param {?} year
                 * @param {?} month
                 * @param {?} date
                 * @return {?}
                 */
                NativeDateAdapter.prototype.createDate = function (year, month, date) {
                    // Check for invalid month and date (except upper bound on date which we have to check after
                    // creating the Date).
                    if (month < 0 || month > 11) {
                        throw Error("Invalid month index \"" + month + "\". Month index has to be between 0 and 11.");
                    }
                    if (date < 1) {
                        throw Error("Invalid date \"" + date + "\". Date has to be greater than 0.");
                    }
                    /** @type {?} */
                    var result = this._createDateWithOverflow(year, month, date);
                    // Check that the date wasn't above the upper bound for the month, causing the month to overflow
                    if (result.getMonth() != month) {
                        throw Error("Invalid date \"" + date + "\" for month with index \"" + month + "\".");
                    }
                    return result;
                };
                /**
                 * @return {?}
                 */
                NativeDateAdapter.prototype.today = function () {
                    return new Date();
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NativeDateAdapter.prototype.parse = function (value) {
                    // We have no way using the native JS Date to set the parse format or locale, so we ignore these
                    // parameters.
                    if (typeof value == 'number') {
                        return new Date(value);
                    }
                    return value ? new Date(Date.parse(value)) : null;
                };
                /**
                 * @param {?} date
                 * @param {?} displayFormat
                 * @return {?}
                 */
                NativeDateAdapter.prototype.format = function (date, displayFormat) {
                    if (!this.isValid(date)) {
                        throw Error('NativeDateAdapter: Cannot format invalid date.');
                    }
                    if (SUPPORTS_INTL_API) {
                        // On IE and Edge the i18n API will throw a hard error that can crash the entire app
                        // if we attempt to format a date whose year is less than 1 or greater than 9999.
                        if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {
                            date = this.clone(date);
                            date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));
                        }
                        displayFormat = Object.assign({}, displayFormat, { timeZone: 'utc' });
                        /** @type {?} */
                        var dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
                        return this._stripDirectionalityCharacters(this._format(dtf, date));
                    }
                    return this._stripDirectionalityCharacters(date.toDateString());
                };
                /**
                 * @param {?} date
                 * @param {?} years
                 * @return {?}
                 */
                NativeDateAdapter.prototype.addCalendarYears = function (date, years) {
                    return this.addCalendarMonths(date, years * 12);
                };
                /**
                 * @param {?} date
                 * @param {?} months
                 * @return {?}
                 */
                NativeDateAdapter.prototype.addCalendarMonths = function (date, months) {
                    /** @type {?} */
                    var newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));
                    // It's possible to wind up in the wrong month if the original month has more days than the new
                    // month. In this case we want to go to the last day of the desired month.
                    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
                    // guarantee this.
                    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {
                        newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
                    }
                    return newDate;
                };
                /**
                 * @param {?} date
                 * @param {?} days
                 * @return {?}
                 */
                NativeDateAdapter.prototype.addCalendarDays = function (date, days) {
                    return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NativeDateAdapter.prototype.toIso8601 = function (date) {
                    return [
                        date.getUTCFullYear(),
                        this._2digit(date.getUTCMonth() + 1),
                        this._2digit(date.getUTCDate())
                    ].join('-');
                };
                /**
                 * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
                 * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
                 * invalid date for all other values.
                 * @param {?} value
                 * @return {?}
                 */
                NativeDateAdapter.prototype.deserialize = function (value) {
                    if (typeof value === 'string') {
                        if (!value) {
                            return null;
                        }
                        // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the
                        // string is the right format first.
                        if (ISO_8601_REGEX.test(value)) {
                            /** @type {?} */
                            var date = new Date(value);
                            if (this.isValid(date)) {
                                return date;
                            }
                        }
                    }
                    return _super.prototype.deserialize.call(this, value);
                };
                /**
                 * @param {?} obj
                 * @return {?}
                 */
                NativeDateAdapter.prototype.isDateInstance = function (obj) {
                    return obj instanceof Date;
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NativeDateAdapter.prototype.isValid = function (date) {
                    return !isNaN(date.getTime());
                };
                /**
                 * @return {?}
                 */
                NativeDateAdapter.prototype.invalid = function () {
                    return new Date(NaN);
                };
                /**
                 * Creates a date but allows the month and date to overflow.
                 * @private
                 * @param {?} year
                 * @param {?} month
                 * @param {?} date
                 * @return {?}
                 */
                NativeDateAdapter.prototype._createDateWithOverflow = function (year, month, date) {
                    /** @type {?} */
                    var result = new Date(year, month, date);
                    // We need to correct for the fact that JS native Date treats years in range [0, 99] as
                    // abbreviations for 19xx.
                    if (year >= 0 && year < 100) {
                        result.setFullYear(this.getYear(result) - 1900);
                    }
                    return result;
                };
                /**
                 * Pads a number to make it two digits.
                 * @private
                 * @param {?} n The number to pad.
                 * @return {?} The padded number.
                 */
                NativeDateAdapter.prototype._2digit = function (n) {
                    return ('00' + n).slice(-2);
                };
                /**
                 * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
                 * other browsers do not. We remove them to make output consistent and because they interfere with
                 * date parsing.
                 * @private
                 * @param {?} str The string to strip direction characters from.
                 * @return {?} The stripped string.
                 */
                NativeDateAdapter.prototype._stripDirectionalityCharacters = function (str) {
                    return str.replace(/[\u200e\u200f]/g, '');
                };
                /**
                 * When converting Date object to string, javascript built-in functions may return wrong
                 * results because it applies its internal DST rules. The DST rules around the world change
                 * very frequently, and the current valid rule is not always valid in previous years though.
                 * We work around this problem building a new Date object which has its internal UTC
                 * representation with the local date and time.
                 * @private
                 * @param {?} dtf Intl.DateTimeFormat object, containg the desired string format. It must have
                 *    timeZone set to 'utc' to work fine.
                 * @param {?} date Date from which we want to get the string representation according to dtf
                 * @return {?} A Date object with its UTC representation based on the passed in date info
                 */
                NativeDateAdapter.prototype._format = function (dtf, date) {
                    /** @type {?} */
                    var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
                    return dtf.format(d);
                };
                return NativeDateAdapter;
            }(DateAdapter));
            NativeDateAdapter.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
            ];
            /** @nocollapse */
            NativeDateAdapter.ctorParameters = function () { return [
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_DATE_LOCALE,] }] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAT_NATIVE_DATE_FORMATS = {
                parse: {
                    dateInput: null,
                },
                display: {
                    dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },
                    monthYearLabel: { year: 'numeric', month: 'short' },
                    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
                    monthYearA11yLabel: { year: 'numeric', month: 'long' },
                }
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NativeDateModule = /** @class */ (function () {
                function NativeDateModule() {
                }
                return NativeDateModule;
            }());
            NativeDateModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["PlatformModule"]],
                            providers: [
                                { provide: DateAdapter, useClass: NativeDateAdapter },
                            ],
                        },] },
            ];
            var ɵ0$1 = MAT_NATIVE_DATE_FORMATS;
            var MatNativeDateModule = /** @class */ (function () {
                function MatNativeDateModule() {
                }
                return MatNativeDateModule;
            }());
            MatNativeDateModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [NativeDateModule],
                            providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0$1 }],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Error state matcher that matches when a control is invalid and dirty.
             */
            var ShowOnDirtyErrorStateMatcher = /** @class */ (function () {
                function ShowOnDirtyErrorStateMatcher() {
                }
                /**
                 * @param {?} control
                 * @param {?} form
                 * @return {?}
                 */
                ShowOnDirtyErrorStateMatcher.prototype.isErrorState = function (control, form) {
                    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));
                };
                return ShowOnDirtyErrorStateMatcher;
            }());
            ShowOnDirtyErrorStateMatcher.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
            ];
            /**
             * Provider that defines how form controls behave with regards to displaying error messages.
             */
            var ErrorStateMatcher = /** @class */ (function () {
                function ErrorStateMatcher() {
                }
                /**
                 * @param {?} control
                 * @param {?} form
                 * @return {?}
                 */
                ErrorStateMatcher.prototype.isErrorState = function (control, form) {
                    return !!(control && control.invalid && (control.touched || (form && form.submitted)));
                };
                return ErrorStateMatcher;
            }());
            ErrorStateMatcher.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ ErrorStateMatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ErrorStateMatcher_Factory() { return new ErrorStateMatcher(); }, token: ErrorStateMatcher, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used to provide options to the Hammerjs instance.
             * More info at http://hammerjs.github.io/api/.
             * @type {?}
             */
            var MAT_HAMMER_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_HAMMER_OPTIONS');
            /** @type {?} */
            var ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [
                'longpress',
                'slide',
                'slidestart',
                'slideend',
                'slideright',
                'slideleft'
            ];
            var ɵ0$2 = /**
             * @return {?}
             */ function () { }, ɵ1 = /**
             * @return {?}
             */ function () { };
            /**
             * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not
             * been loaded on the page.
             * @type {?}
             */
            var noopHammerInstance = {
                on: (ɵ0$2),
                off: (ɵ1),
            };
            /**
             * Adjusts configuration of our gesture library, Hammer.
             */
            var GestureConfig = /** @class */ (function (_super) {
                __extends(GestureConfig, _super);
                /**
                 * @param {?=} _hammerOptions
                 * @param {?=} commonModule
                 */
                function GestureConfig(_hammerOptions, commonModule) {
                    var _this = _super.call(this) || this;
                    _this._hammerOptions = _hammerOptions;
                    /**
                     * List of new event names to add to the gesture support list
                     */
                    _this.events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;
                    if (commonModule) {
                        commonModule._checkHammerIsAvailable();
                    }
                    return _this;
                }
                /**
                 * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.
                 *
                 * Our gesture names come from the Material Design gestures spec:
                 * https://material.io/design/#gestures-touch-mechanics
                 *
                 * More information on default recognizers can be found in Hammer docs:
                 * http://hammerjs.github.io/recognizer-pan/
                 * http://hammerjs.github.io/recognizer-press/
                 *
                 * @param {?} element Element to which to assign the new HammerJS gestures.
                 * @return {?} Newly-created HammerJS instance.
                 */
                GestureConfig.prototype.buildHammer = function (element) {
                    /** @type {?} */
                    var hammer = typeof window !== 'undefined' ? (( /** @type {?} */(window))).Hammer : null;
                    if (!hammer) {
                        // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to
                        // ensure that omitting HammerJS completely will not cause any errors while *also* supporting
                        // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.
                        // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set
                        // `this.events` to the set we support, instead of conditionally setting it to `[]` if
                        // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is
                        // undefined).
                        // @breaking-change 8.0.0
                        return noopHammerInstance;
                    }
                    /** @type {?} */
                    var mc = new hammer(element, this._hammerOptions || undefined);
                    // Default Hammer Recognizers.
                    /** @type {?} */
                    var pan = new hammer.Pan();
                    /** @type {?} */
                    var swipe = new hammer.Swipe();
                    /** @type {?} */
                    var press = new hammer.Press();
                    // Notice that a HammerJS recognizer can only depend on one other recognizer once.
                    // Otherwise the previous `recognizeWith` will be dropped.
                    // TODO: Confirm threshold numbers with Material Design UX Team
                    /** @type {?} */
                    var slide = this._createRecognizer(pan, { event: 'slide', threshold: 0 }, swipe);
                    /** @type {?} */
                    var longpress = this._createRecognizer(press, { event: 'longpress', time: 500 });
                    // Overwrite the default `pan` event to use the swipe event.
                    pan.recognizeWith(swipe);
                    // Since the slide event threshold is set to zero, the slide recognizer can fire and
                    // accidentally reset the longpress recognizer. In order to make sure that the two
                    // recognizers can run simultaneously but don't affect each other, we allow the slide
                    // recognizer to recognize while a longpress is being processed.
                    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124
                    longpress.recognizeWith(slide);
                    // Add customized gestures to Hammer manager
                    mc.add([swipe, press, pan, slide, longpress]);
                    return ( /** @type {?} */(mc));
                };
                /**
                 * Creates a new recognizer, without affecting the default recognizers of HammerJS
                 * @private
                 * @param {?} base
                 * @param {?} options
                 * @param {...?} inheritances
                 * @return {?}
                 */
                GestureConfig.prototype._createRecognizer = function (base, options) {
                    var inheritances = [];
                    for (var _b = 2; _b < arguments.length; _b++) {
                        inheritances[_b - 2] = arguments[_b];
                    }
                    /** @type {?} */
                    var recognizer = new (( /** @type {?} */(base.constructor)))(options);
                    inheritances.push(base);
                    inheritances.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (/**
                     * @param {?} item
                     * @return {?}
                     */ item) { return recognizer.recognizeWith(item); }));
                    return recognizer;
                };
                return GestureConfig;
            }(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["HammerGestureConfig"]));
            GestureConfig.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] },
            ];
            /** @nocollapse */
            GestureConfig.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_HAMMER_OPTIONS,] }] },
                { type: MatCommonModule, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Shared directive to count lines inside a text area, such as a list item.
             * Line elements can be extracted with a \@ContentChildren(MatLine) query, then
             * counted by checking the query list's length.
             */
            var MatLine = /** @class */ (function () {
                function MatLine() {
                }
                return MatLine;
            }());
            MatLine.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-line], [matLine]',
                            host: { 'class': 'mat-line' }
                        },] },
            ];
            /**
             * Helper that takes a query list of lines and sets the correct class on the host.
             * \@docs-private
             * @param {?} lines
             * @param {?} element
             * @return {?}
             */
            function setLines(lines, element) {
                // Note: doesn't need to unsubscribe, because `changes`
                // gets completed by Angular when the view is destroyed.
                lines.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["startWith"])(lines)).subscribe(( /**
                 * @param {?} __0
                 * @return {?}
                 */function (_b) {
                    var length = _b.length;
                    setClass(element, 'mat-2-line', false);
                    setClass(element, 'mat-3-line', false);
                    setClass(element, 'mat-multi-line', false);
                    if (length === 2 || length === 3) {
                        setClass(element, "mat-" + length + "-line", true);
                    }
                    else if (length > 3) {
                        setClass(element, "mat-multi-line", true);
                    }
                }));
            }
            /**
             * Adds or removes a class from an element.
             * @param {?} element
             * @param {?} className
             * @param {?} isAdd
             * @return {?}
             */
            function setClass(element, className, isAdd) {
                /** @type {?} */
                var classList = element.nativeElement.classList;
                isAdd ? classList.add(className) : classList.remove(className);
            }
            /**
             * Helper that takes a query list of lines and sets the correct class on the host.
             * \@docs-private
             * @deprecated Use `setLines` instead.
             * \@breaking-change 8.0.0
             */
            var MatLineSetter = /** @class */ (function () {
                /**
                 * @param {?} lines
                 * @param {?} element
                 */
                function MatLineSetter(lines, element) {
                    setLines(lines, element);
                }
                return MatLineSetter;
            }());
            var MatLineModule = /** @class */ (function () {
                function MatLineModule() {
                }
                return MatLineModule;
            }());
            MatLineModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [MatCommonModule],
                            exports: [MatLine, MatCommonModule],
                            declarations: [MatLine],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @enum {number} */
            var RippleState = {
                FADING_IN: 0, VISIBLE: 1, FADING_OUT: 2, HIDDEN: 3,
            };
            RippleState[RippleState.FADING_IN] = 'FADING_IN';
            RippleState[RippleState.VISIBLE] = 'VISIBLE';
            RippleState[RippleState.FADING_OUT] = 'FADING_OUT';
            RippleState[RippleState.HIDDEN] = 'HIDDEN';
            /**
             * Reference to a previously launched ripple element.
             */
            var RippleRef = /** @class */ (function () {
                /**
                 * @param {?} _renderer
                 * @param {?} element
                 * @param {?} config
                 */
                function RippleRef(_renderer, element, config) {
                    this._renderer = _renderer;
                    this.element = element;
                    this.config = config;
                    /**
                     * Current state of the ripple.
                     */
                    this.state = RippleState.HIDDEN;
                }
                /**
                 * Fades out the ripple element.
                 * @return {?}
                 */
                RippleRef.prototype.fadeOut = function () {
                    this._renderer.fadeOutRipple(this);
                };
                return RippleRef;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Default ripple animation configuration for ripples without an explicit
             * animation config specified.
             * @type {?}
             */
            var defaultRippleAnimationConfig = {
                enterDuration: 450,
                exitDuration: 400
            };
            /**
             * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch
             * events to avoid synthetic mouse events.
             * @type {?}
             */
            var ignoreMouseEventsTimeout = 800;
            /**
             * Options that apply to all the event listeners that are bound by the ripple renderer.
             * @type {?}
             */
            var passiveEventOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["normalizePassiveListenerOptions"])({ passive: true });
            /**
             * Helper service that performs DOM manipulations. Not intended to be used outside this module.
             * The constructor takes a reference to the ripple directive's host element and a map of DOM
             * event handlers to be installed on the element that triggers ripple animations.
             * This will eventually become a custom renderer once Angular support exists.
             * \@docs-private
             */
            var RippleRenderer = /** @class */ (function () {
                /**
                 * @param {?} _target
                 * @param {?} _ngZone
                 * @param {?} elementOrElementRef
                 * @param {?} platform
                 */
                function RippleRenderer(_target, _ngZone, elementOrElementRef, platform) {
                    var _this = this;
                    this._target = _target;
                    this._ngZone = _ngZone;
                    /**
                     * Whether the pointer is currently down or not.
                     */
                    this._isPointerDown = false;
                    /**
                     * Events to be registered on the trigger element.
                     */
                    this._triggerEvents = new Map();
                    /**
                     * Set of currently active ripple references.
                     */
                    this._activeRipples = new Set();
                    /**
                     * Function being called whenever the trigger is being pressed using mouse.
                     */
                    this._onMousedown = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        // Screen readers will fire fake mouse events for space/enter. Skip launching a
                        // ripple in this case for consistency with the non-screen-reader experience.
                        /** @type {?} */
                        var isFakeMousedown = Object(_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_8__["isFakeMousedownFromScreenReader"])(event);
                        /** @type {?} */
                        var isSyntheticEvent = _this._lastTouchStartEvent &&
                            Date.now() < _this._lastTouchStartEvent + ignoreMouseEventsTimeout;
                        if (!_this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {
                            _this._isPointerDown = true;
                            _this.fadeInRipple(event.clientX, event.clientY, _this._target.rippleConfig);
                        }
                    });
                    /**
                     * Function being called whenever the trigger is being pressed using touch.
                     */
                    this._onTouchStart = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        if (!_this._target.rippleDisabled) {
                            // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse
                            // events will launch a second ripple if we don't ignore mouse events for a specific
                            // time after a touchstart event.
                            _this._lastTouchStartEvent = Date.now();
                            _this._isPointerDown = true;
                            // Use `changedTouches` so we skip any touches where the user put
                            // their finger down, but used another finger to tap the element again.
                            /** @type {?} */
                            var touches = event.changedTouches;
                            for (var i = 0; i < touches.length; i++) {
                                _this.fadeInRipple(touches[i].clientX, touches[i].clientY, _this._target.rippleConfig);
                            }
                        }
                    });
                    /**
                     * Function being called whenever the trigger is being released.
                     */
                    this._onPointerUp = ( /**
                     * @return {?}
                     */function () {
                        if (!_this._isPointerDown) {
                            return;
                        }
                        _this._isPointerDown = false;
                        // Fade-out all ripples that are visible and not persistent.
                        _this._activeRipples.forEach(( /**
                         * @param {?} ripple
                         * @return {?}
                         */function (/**
                         * @param {?} ripple
                         * @return {?}
                         */ ripple) {
                            // By default, only ripples that are completely visible will fade out on pointer release.
                            // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.
                            /** @type {?} */
                            var isVisible = ripple.state === RippleState.VISIBLE ||
                                ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;
                            if (!ripple.config.persistent && isVisible) {
                                ripple.fadeOut();
                            }
                        }));
                    });
                    // Only do anything if we're on the browser.
                    if (platform.isBrowser) {
                        this._containerElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(elementOrElementRef);
                        // Specify events which need to be registered on the trigger.
                        this._triggerEvents
                            .set('mousedown', this._onMousedown)
                            .set('mouseup', this._onPointerUp)
                            .set('mouseleave', this._onPointerUp)
                            .set('touchstart', this._onTouchStart)
                            .set('touchend', this._onPointerUp)
                            .set('touchcancel', this._onPointerUp);
                    }
                }
                /**
                 * Fades in a ripple at the given coordinates.
                 * @param {?} x Coordinate within the element, along the X axis at which to start the ripple.
                 * @param {?} y Coordinate within the element, along the Y axis at which to start the ripple.
                 * @param {?=} config Extra ripple options.
                 * @return {?}
                 */
                RippleRenderer.prototype.fadeInRipple = function (x, y, config) {
                    var _this = this;
                    if (config === void 0) { config = {}; }
                    /** @type {?} */
                    var containerRect = this._containerRect =
                        this._containerRect || this._containerElement.getBoundingClientRect();
                    /** @type {?} */
                    var animationConfig = Object.assign({}, defaultRippleAnimationConfig, config.animation);
                    if (config.centered) {
                        x = containerRect.left + containerRect.width / 2;
                        y = containerRect.top + containerRect.height / 2;
                    }
                    /** @type {?} */
                    var radius = config.radius || distanceToFurthestCorner(x, y, containerRect);
                    /** @type {?} */
                    var offsetX = x - containerRect.left;
                    /** @type {?} */
                    var offsetY = y - containerRect.top;
                    /** @type {?} */
                    var duration = animationConfig.enterDuration;
                    /** @type {?} */
                    var ripple = document.createElement('div');
                    ripple.classList.add('mat-ripple-element');
                    ripple.style.left = offsetX - radius + "px";
                    ripple.style.top = offsetY - radius + "px";
                    ripple.style.height = radius * 2 + "px";
                    ripple.style.width = radius * 2 + "px";
                    // If the color is not set, the default CSS color will be used.
                    ripple.style.backgroundColor = config.color || null;
                    ripple.style.transitionDuration = duration + "ms";
                    this._containerElement.appendChild(ripple);
                    // By default the browser does not recalculate the styles of dynamically created
                    // ripple elements. This is critical because then the `scale` would not animate properly.
                    enforceStyleRecalculation(ripple);
                    ripple.style.transform = 'scale(1)';
                    // Exposed reference to the ripple that will be returned.
                    /** @type {?} */
                    var rippleRef = new RippleRef(this, ripple, config);
                    rippleRef.state = RippleState.FADING_IN;
                    // Add the ripple reference to the list of all active ripples.
                    this._activeRipples.add(rippleRef);
                    if (!config.persistent) {
                        this._mostRecentTransientRipple = rippleRef;
                    }
                    // Wait for the ripple element to be completely faded in.
                    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.
                    this._runTimeoutOutsideZone(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var isMostRecentTransientRipple = rippleRef === _this._mostRecentTransientRipple;
                        rippleRef.state = RippleState.VISIBLE;
                        // When the timer runs out while the user has kept their pointer down, we want to
                        // keep only the persistent ripples and the latest transient ripple. We do this,
                        // because we don't want stacked transient ripples to appear after their enter
                        // animation has finished.
                        if (!config.persistent && (!isMostRecentTransientRipple || !_this._isPointerDown)) {
                            rippleRef.fadeOut();
                        }
                    }), duration);
                    return rippleRef;
                };
                /**
                 * Fades out a ripple reference.
                 * @param {?} rippleRef
                 * @return {?}
                 */
                RippleRenderer.prototype.fadeOutRipple = function (rippleRef) {
                    /** @type {?} */
                    var wasActive = this._activeRipples.delete(rippleRef);
                    if (rippleRef === this._mostRecentTransientRipple) {
                        this._mostRecentTransientRipple = null;
                    }
                    // Clear out the cached bounding rect if we have no more ripples.
                    if (!this._activeRipples.size) {
                        this._containerRect = null;
                    }
                    // For ripples that are not active anymore, don't re-run the fade-out animation.
                    if (!wasActive) {
                        return;
                    }
                    /** @type {?} */
                    var rippleEl = rippleRef.element;
                    /** @type {?} */
                    var animationConfig = Object.assign({}, defaultRippleAnimationConfig, rippleRef.config.animation);
                    rippleEl.style.transitionDuration = animationConfig.exitDuration + "ms";
                    rippleEl.style.opacity = '0';
                    rippleRef.state = RippleState.FADING_OUT;
                    // Once the ripple faded out, the ripple can be safely removed from the DOM.
                    this._runTimeoutOutsideZone(( /**
                     * @return {?}
                     */function () {
                        rippleRef.state = RippleState.HIDDEN;
                        ( /** @type {?} */(rippleEl.parentNode)).removeChild(rippleEl);
                    }), animationConfig.exitDuration);
                };
                /**
                 * Fades out all currently active ripples.
                 * @return {?}
                 */
                RippleRenderer.prototype.fadeOutAll = function () {
                    this._activeRipples.forEach(( /**
                     * @param {?} ripple
                     * @return {?}
                     */function (/**
                     * @param {?} ripple
                     * @return {?}
                     */ ripple) { return ripple.fadeOut(); }));
                };
                /**
                 * Sets up the trigger event listeners
                 * @param {?} elementOrElementRef
                 * @return {?}
                 */
                RippleRenderer.prototype.setupTriggerEvents = function (elementOrElementRef) {
                    var _this = this;
                    /** @type {?} */
                    var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(elementOrElementRef);
                    if (!element || element === this._triggerElement) {
                        return;
                    }
                    // Remove all previously registered event listeners from the trigger element.
                    this._removeTriggerEvents();
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._triggerEvents.forEach(( /**
                         * @param {?} fn
                         * @param {?} type
                         * @return {?}
                         */function (fn, type) {
                            element.addEventListener(type, fn, passiveEventOptions);
                        }));
                    }));
                    this._triggerElement = element;
                };
                /**
                 * Runs a timeout outside of the Angular zone to avoid triggering the change detection.
                 * @private
                 * @param {?} fn
                 * @param {?=} delay
                 * @return {?}
                 */
                RippleRenderer.prototype._runTimeoutOutsideZone = function (fn, delay) {
                    if (delay === void 0) { delay = 0; }
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () { return setTimeout(fn, delay); }));
                };
                /**
                 * Removes previously registered event listeners from the trigger element.
                 * @return {?}
                 */
                RippleRenderer.prototype._removeTriggerEvents = function () {
                    var _this = this;
                    if (this._triggerElement) {
                        this._triggerEvents.forEach(( /**
                         * @param {?} fn
                         * @param {?} type
                         * @return {?}
                         */function (fn, type) {
                            ( /** @type {?} */(_this._triggerElement)).removeEventListener(type, fn, passiveEventOptions);
                        }));
                    }
                };
                return RippleRenderer;
            }());
            /**
             * Enforces a style recalculation of a DOM element by computing its styles.
             * @param {?} element
             * @return {?}
             */
            function enforceStyleRecalculation(element) {
                // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.
                // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.
                // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a
                window.getComputedStyle(element).getPropertyValue('opacity');
            }
            /**
             * Returns the distance from the point (x, y) to the furthest corner of a rectangle.
             * @param {?} x
             * @param {?} y
             * @param {?} rect
             * @return {?}
             */
            function distanceToFurthestCorner(x, y, rect) {
                /** @type {?} */
                var distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));
                /** @type {?} */
                var distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));
                return Math.sqrt(distX * distX + distY * distY);
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used to specify the global ripple options.
             * @type {?}
             */
            var MAT_RIPPLE_GLOBAL_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-ripple-global-options');
            var MatRipple = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} ngZone
                 * @param {?} platform
                 * @param {?=} globalOptions
                 * @param {?=} animationMode
                 */
                function MatRipple(_elementRef, ngZone, platform, globalOptions, animationMode) {
                    this._elementRef = _elementRef;
                    /**
                     * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius
                     * will be the distance from the center of the ripple to the furthest corner of the host element's
                     * bounding rectangle.
                     */
                    this.radius = 0;
                    this._disabled = false;
                    /**
                     * Whether ripple directive is initialized and the input bindings are set.
                     */
                    this._isInitialized = false;
                    this._globalOptions = globalOptions || {};
                    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);
                    if (animationMode === 'NoopAnimations') {
                        this._globalOptions.animation = { enterDuration: 0, exitDuration: 0 };
                    }
                }
                Object.defineProperty(MatRipple.prototype, "disabled", {
                    /**
                     * Whether click events will not trigger the ripple. Ripples can be still launched manually
                     * by using the `launch()` method.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = value;
                        this._setupTriggerEventsIfEnabled();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatRipple.prototype, "trigger", {
                    /**
                     * The element that triggers the ripple when click events are received.
                     * Defaults to the directive's host element.
                     * @return {?}
                     */
                    get: function () { return this._trigger || this._elementRef.nativeElement; },
                    /**
                     * @param {?} trigger
                     * @return {?}
                     */
                    set: function (trigger) {
                        this._trigger = trigger;
                        this._setupTriggerEventsIfEnabled();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatRipple.prototype.ngOnInit = function () {
                    this._isInitialized = true;
                    this._setupTriggerEventsIfEnabled();
                };
                /**
                 * @return {?}
                 */
                MatRipple.prototype.ngOnDestroy = function () {
                    this._rippleRenderer._removeTriggerEvents();
                };
                /**
                 * Fades out all currently showing ripple elements.
                 * @return {?}
                 */
                MatRipple.prototype.fadeOutAll = function () {
                    this._rippleRenderer.fadeOutAll();
                };
                Object.defineProperty(MatRipple.prototype, "rippleConfig", {
                    /**
                     * Ripple configuration from the directive's input values.
                     * \@docs-private Implemented as part of RippleTarget
                     * @return {?}
                     */
                    get: function () {
                        return {
                            centered: this.centered,
                            radius: this.radius,
                            color: this.color,
                            animation: Object.assign({}, this._globalOptions.animation, this.animation),
                            terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatRipple.prototype, "rippleDisabled", {
                    /**
                     * Whether ripples on pointer-down are disabled or not.
                     * \@docs-private Implemented as part of RippleTarget
                     * @return {?}
                     */
                    get: function () {
                        return this.disabled || !!this._globalOptions.disabled;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Sets up the trigger event listeners if ripples are enabled.
                 * @private
                 * @return {?}
                 */
                MatRipple.prototype._setupTriggerEventsIfEnabled = function () {
                    if (!this.disabled && this._isInitialized) {
                        this._rippleRenderer.setupTriggerEvents(this.trigger);
                    }
                };
                /**
                 * Launches a manual ripple at the specified coordinated or just by the ripple config.
                 * @param {?} configOrX
                 * @param {?=} y
                 * @param {?=} config
                 * @return {?}
                 */
                MatRipple.prototype.launch = function (configOrX, y, config) {
                    if (y === void 0) { y = 0; }
                    if (typeof configOrX === 'number') {
                        return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign({}, this.rippleConfig, config));
                    }
                    else {
                        return this._rippleRenderer.fadeInRipple(0, 0, Object.assign({}, this.rippleConfig, configOrX));
                    }
                };
                return MatRipple;
            }());
            MatRipple.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-ripple], [matRipple]',
                            exportAs: 'matRipple',
                            host: {
                                'class': 'mat-ripple',
                                '[class.mat-ripple-unbounded]': 'unbounded'
                            }
                        },] },
            ];
            /** @nocollapse */
            MatRipple.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            MatRipple.propDecorators = {
                color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['matRippleColor',] }],
                unbounded: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['matRippleUnbounded',] }],
                centered: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['matRippleCentered',] }],
                radius: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['matRippleRadius',] }],
                animation: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['matRippleAnimation',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['matRippleDisabled',] }],
                trigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['matRippleTrigger',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatRippleModule = /** @class */ (function () {
                function MatRippleModule() {
                }
                return MatRippleModule;
            }());
            MatRippleModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [MatCommonModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["PlatformModule"]],
                            exports: [MatRipple, MatCommonModule],
                            declarations: [MatRipple],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Component that shows a simplified checkbox without including any kind of "real" checkbox.
             * Meant to be used when the checkbox is purely decorative and a large number of them will be
             * included, such as for the options in a multi-select. Uses no SVGs or complex animations.
             * Note that theming is meant to be handled by the parent element, e.g.
             * `mat-primary .mat-pseudo-checkbox`.
             *
             * Note that this component will be completely invisible to screen-reader users. This is *not*
             * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly
             * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail
             * of more complex components that appropriately handle selected / checked state.
             * \@docs-private
             */
            var MatPseudoCheckbox = /** @class */ (function () {
                /**
                 * @param {?=} _animationMode
                 */
                function MatPseudoCheckbox(_animationMode) {
                    this._animationMode = _animationMode;
                    /**
                     * Display state of the checkbox.
                     */
                    this.state = 'unchecked';
                    /**
                     * Whether the checkbox is disabled.
                     */
                    this.disabled = false;
                }
                return MatPseudoCheckbox;
            }());
            MatPseudoCheckbox.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            selector: 'mat-pseudo-checkbox',
                            styles: [".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0,0,.2,.1),background-color 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:'';border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}"],
                            template: '',
                            host: {
                                'class': 'mat-pseudo-checkbox',
                                '[class.mat-pseudo-checkbox-indeterminate]': 'state === "indeterminate"',
                                '[class.mat-pseudo-checkbox-checked]': 'state === "checked"',
                                '[class.mat-pseudo-checkbox-disabled]': 'disabled',
                                '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
                            },
                        },] },
            ];
            /** @nocollapse */
            MatPseudoCheckbox.ctorParameters = function () { return [
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            MatPseudoCheckbox.propDecorators = {
                state: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatPseudoCheckboxModule = /** @class */ (function () {
                function MatPseudoCheckboxModule() {
                }
                return MatPseudoCheckboxModule;
            }());
            MatPseudoCheckboxModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            exports: [MatPseudoCheckbox],
                            declarations: [MatPseudoCheckbox]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Boilerplate for applying mixins to MatOptgroup.
            /**
             * \@docs-private
             */
            var MatOptgroupBase = /** @class */ (function () {
                function MatOptgroupBase() {
                }
                return MatOptgroupBase;
            }());
            /** @type {?} */
            var _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);
            // Counter for unique group ids.
            /** @type {?} */
            var _uniqueOptgroupIdCounter = 0;
            /**
             * Component that is used to group instances of `mat-option`.
             */
            var MatOptgroup = /** @class */ (function (_super) {
                __extends(MatOptgroup, _super);
                function MatOptgroup() {
                    var _this = _super.apply(this, arguments) || this;
                    /**
                     * Unique id for the underlying label.
                     */
                    _this._labelId = "mat-optgroup-label-" + _uniqueOptgroupIdCounter++;
                    return _this;
                }
                return MatOptgroup;
            }(_MatOptgroupMixinBase));
            MatOptgroup.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-optgroup',
                            exportAs: 'matOptgroup',
                            template: "<label class=\"mat-optgroup-label\" [id]=\"_labelId\">{{ label }}<ng-content></ng-content></label><ng-content select=\"mat-option, ng-container\"></ng-content>",
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            inputs: ['disabled'],
                            styles: [".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}"],
                            host: {
                                'class': 'mat-optgroup',
                                'role': 'group',
                                '[class.mat-optgroup-disabled]': 'disabled',
                                '[attr.aria-disabled]': 'disabled.toString()',
                                '[attr.aria-labelledby]': '_labelId',
                            }
                        },] },
            ];
            MatOptgroup.propDecorators = {
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Option IDs need to be unique across components, so this counter exists outside of
             * the component definition.
             * @type {?}
             */
            var _uniqueIdCounter = 0;
            /**
             * Event object emitted by MatOption when selected or deselected.
             */
            var MatOptionSelectionChange = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?=} isUserInput
                 */
                function MatOptionSelectionChange(source, isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this.source = source;
                    this.isUserInput = isUserInput;
                }
                return MatOptionSelectionChange;
            }());
            /**
             * Injection token used to provide the parent component to options.
             * @type {?}
             */
            var MAT_OPTION_PARENT_COMPONENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_OPTION_PARENT_COMPONENT');
            /**
             * Single option inside of a `<mat-select>` element.
             */
            var MatOption = /** @class */ (function () {
                /**
                 * @param {?} _element
                 * @param {?} _changeDetectorRef
                 * @param {?} _parent
                 * @param {?} group
                 */
                function MatOption(_element, _changeDetectorRef, _parent, group) {
                    this._element = _element;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._parent = _parent;
                    this.group = group;
                    this._selected = false;
                    this._active = false;
                    this._disabled = false;
                    this._mostRecentViewValue = '';
                    /**
                     * The unique ID of the option.
                     */
                    this.id = "mat-option-" + _uniqueIdCounter++;
                    /**
                     * Event emitted when the option is selected or deselected.
                     */
                    // tslint:disable-next-line:no-output-on-prefix
                    this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits when the state of the option changes and any parents have to be notified.
                     */
                    this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
                }
                Object.defineProperty(MatOption.prototype, "multiple", {
                    /**
                     * Whether the wrapping component is in multiple selection mode.
                     * @return {?}
                     */
                    get: function () { return this._parent && this._parent.multiple; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatOption.prototype, "selected", {
                    /**
                     * Whether or not the option is currently selected.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatOption.prototype, "disabled", {
                    /**
                     * Whether the option is disabled.
                     * @return {?}
                     */
                    get: function () { return (this.group && this.group.disabled) || this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatOption.prototype, "disableRipple", {
                    /**
                     * Whether ripples for the option are disabled.
                     * @return {?}
                     */
                    get: function () { return this._parent && this._parent.disableRipple; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatOption.prototype, "active", {
                    /**
                     * Whether or not the option is currently active and ready to be selected.
                     * An active option displays styles as if it is focused, but the
                     * focus is actually retained somewhere else. This comes in handy
                     * for components like autocomplete where focus must remain on the input.
                     * @return {?}
                     */
                    get: function () {
                        return this._active;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatOption.prototype, "viewValue", {
                    /**
                     * The displayed value of the option. It is necessary to show the selected option in the
                     * select's trigger.
                     * @return {?}
                     */
                    get: function () {
                        // TODO(kara): Add input property alternative for node envs.
                        return (this._getHostElement().textContent || '').trim();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Selects the option.
                 * @return {?}
                 */
                MatOption.prototype.select = function () {
                    if (!this._selected) {
                        this._selected = true;
                        this._changeDetectorRef.markForCheck();
                        this._emitSelectionChangeEvent();
                    }
                };
                /**
                 * Deselects the option.
                 * @return {?}
                 */
                MatOption.prototype.deselect = function () {
                    if (this._selected) {
                        this._selected = false;
                        this._changeDetectorRef.markForCheck();
                        this._emitSelectionChangeEvent();
                    }
                };
                /**
                 * Sets focus onto this option.
                 * @param {?=} _origin
                 * @param {?=} options
                 * @return {?}
                 */
                MatOption.prototype.focus = function (_origin, options) {
                    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers
                    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.
                    /** @type {?} */
                    var element = this._getHostElement();
                    if (typeof element.focus === 'function') {
                        element.focus(options);
                    }
                };
                /**
                 * This method sets display styles on the option to make it appear
                 * active. This is used by the ActiveDescendantKeyManager so key
                 * events will display the proper options as active on arrow key events.
                 * @return {?}
                 */
                MatOption.prototype.setActiveStyles = function () {
                    if (!this._active) {
                        this._active = true;
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * This method removes display styles on the option that made it appear
                 * active. This is used by the ActiveDescendantKeyManager so key
                 * events will display the proper options as active on arrow key events.
                 * @return {?}
                 */
                MatOption.prototype.setInactiveStyles = function () {
                    if (this._active) {
                        this._active = false;
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * Gets the label to be used when determining whether the option should be focused.
                 * @return {?}
                 */
                MatOption.prototype.getLabel = function () {
                    return this.viewValue;
                };
                /**
                 * Ensures the option is selected when activated from the keyboard.
                 * @param {?} event
                 * @return {?}
                 */
                MatOption.prototype._handleKeydown = function (event) {
                    if ((event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["SPACE"]) && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["hasModifierKey"])(event)) {
                        this._selectViaInteraction();
                        // Prevent the page from scrolling down and form submits.
                        event.preventDefault();
                    }
                };
                /**
                 * `Selects the option while indicating the selection came from the user. Used to
                 * determine if the select's view -> model callback should be invoked.`
                 * @return {?}
                 */
                MatOption.prototype._selectViaInteraction = function () {
                    if (!this.disabled) {
                        this._selected = this.multiple ? !this._selected : true;
                        this._changeDetectorRef.markForCheck();
                        this._emitSelectionChangeEvent(true);
                    }
                };
                /**
                 * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`
                 * attribute from single-selection, unselected options. Including the `aria-selected="false"`
                 * attributes adds a significant amount of noise to screen-reader users without providing useful
                 * information.
                 * @return {?}
                 */
                MatOption.prototype._getAriaSelected = function () {
                    return this.selected || (this.multiple ? false : null);
                };
                /**
                 * Returns the correct tabindex for the option depending on disabled state.
                 * @return {?}
                 */
                MatOption.prototype._getTabIndex = function () {
                    return this.disabled ? '-1' : '0';
                };
                /**
                 * Gets the host DOM element.
                 * @return {?}
                 */
                MatOption.prototype._getHostElement = function () {
                    return this._element.nativeElement;
                };
                /**
                 * @return {?}
                 */
                MatOption.prototype.ngAfterViewChecked = function () {
                    // Since parent components could be using the option's label to display the selected values
                    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed
                    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
                    // relatively cheap, however we still limit them only to selected options in order to avoid
                    // hitting the DOM too often.
                    if (this._selected) {
                        /** @type {?} */
                        var viewValue = this.viewValue;
                        if (viewValue !== this._mostRecentViewValue) {
                            this._mostRecentViewValue = viewValue;
                            this._stateChanges.next();
                        }
                    }
                };
                /**
                 * @return {?}
                 */
                MatOption.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                };
                /**
                 * Emits the selection change event.
                 * @private
                 * @param {?=} isUserInput
                 * @return {?}
                 */
                MatOption.prototype._emitSelectionChangeEvent = function (isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));
                };
                return MatOption;
            }());
            MatOption.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-option',
                            exportAs: 'matOption',
                            host: {
                                'role': 'option',
                                '[attr.tabindex]': '_getTabIndex()',
                                '[class.mat-selected]': 'selected',
                                '[class.mat-option-multiple]': 'multiple',
                                '[class.mat-active]': 'active',
                                '[id]': 'id',
                                '[attr.aria-selected]': '_getAriaSelected()',
                                '[attr.aria-disabled]': 'disabled.toString()',
                                '[class.mat-option-disabled]': 'disabled',
                                '(click)': '_selectViaInteraction()',
                                '(keydown)': '_handleKeydown($event)',
                                'class': 'mat-option',
                            },
                            styles: [".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:0;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}@media (-ms-high-contrast:active){.mat-option{margin:0 1px}.mat-option.mat-active{border:solid 1px currentColor;margin:0}}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}@media (-ms-high-contrast:active){.mat-option .mat-option-ripple{opacity:.5}}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}"],
                            template: "<mat-pseudo-checkbox *ngIf=\"multiple\" class=\"mat-option-pseudo-checkbox\" [state]=\"selected ? 'checked' : ''\" [disabled]=\"disabled\"></mat-pseudo-checkbox><span class=\"mat-option-text\"><ng-content></ng-content></span><div class=\"mat-option-ripple\" mat-ripple [matRippleTrigger]=\"_getHostElement()\" [matRippleDisabled]=\"disabled || disableRipple\"></div>",
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatOption.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_OPTION_PARENT_COMPONENT,] }] },
                { type: MatOptgroup, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            MatOption.propDecorators = {
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                onSelectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
            };
            /**
             * Counts the amount of option group labels that precede the specified option.
             * \@docs-private
             * @param {?} optionIndex Index of the option at which to start counting.
             * @param {?} options Flat list of all of the options.
             * @param {?} optionGroups Flat list of all of the option groups.
             * @return {?}
             */
            function _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {
                if (optionGroups.length) {
                    /** @type {?} */
                    var optionsArray = options.toArray();
                    /** @type {?} */
                    var groups = optionGroups.toArray();
                    /** @type {?} */
                    var groupCounter = 0;
                    for (var i = 0; i < optionIndex + 1; i++) {
                        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {
                            groupCounter++;
                        }
                    }
                    return groupCounter;
                }
                return 0;
            }
            /**
             * Determines the position to which to scroll a panel in order for an option to be into view.
             * \@docs-private
             * @param {?} optionIndex Index of the option to be scrolled into the view.
             * @param {?} optionHeight Height of the options.
             * @param {?} currentScrollPosition Current scroll position of the panel.
             * @param {?} panelHeight Height of the panel.
             * @return {?}
             */
            function _getOptionScrollPosition(optionIndex, optionHeight, currentScrollPosition, panelHeight) {
                /** @type {?} */
                var optionOffset = optionIndex * optionHeight;
                if (optionOffset < currentScrollPosition) {
                    return optionOffset;
                }
                if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
                    return Math.max(0, optionOffset - panelHeight + optionHeight);
                }
                return currentScrollPosition;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatOptionModule = /** @class */ (function () {
                function MatOptionModule() {
                }
                return MatOptionModule;
            }());
            MatOptionModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [MatRippleModule, _angular_common__WEBPACK_IMPORTED_MODULE_11__["CommonModule"], MatPseudoCheckboxModule],
                            exports: [MatOption, MatOptgroup],
                            declarations: [MatOption, MatOptgroup]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * InjectionToken that can be used to specify the global label options.
             * @type {?}
             */
            var MAT_LABEL_GLOBAL_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-label-global-options');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * When constructing a Date, the month is zero-based. This can be confusing, since people are
             * used to seeing them one-based. So we create these aliases to make writing the tests easier.
             * \@docs-private
             * \@breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.
             * @type {?}
             */
            var JAN = 0;
            /** @type {?} */
            var FEB = 1;
            /** @type {?} */
            var MAR = 2;
            /** @type {?} */
            var APR = 3;
            /** @type {?} */
            var MAY = 4;
            /** @type {?} */
            var JUN = 5;
            /** @type {?} */
            var JUL = 6;
            /** @type {?} */
            var AUG = 7;
            /** @type {?} */
            var SEP = 8;
            /** @type {?} */
            var OCT = 9;
            /** @type {?} */
            var NOV = 10;
            /** @type {?} */
            var DEC = 11;
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=core.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/datepicker.js": 
        /*!**************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/datepicker.js ***!
          \**************************************************************/
        /*! exports provided: MatMultiYearView, yearsPerPage, yearsPerRow, MatDatepickerModule, MatCalendarHeader, MatCalendar, MatCalendarCell, MatCalendarBody, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MatDatepickerContent, MatDatepicker, matDatepickerAnimations, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, MatDatepickerInputEvent, MatDatepickerInput, MatDatepickerIntl, MatDatepickerToggleIcon, MatDatepickerToggle, MatMonthView, MatYearView */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatMultiYearView", function () { return MatMultiYearView; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "yearsPerPage", function () { return yearsPerPage; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "yearsPerRow", function () { return yearsPerRow; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDatepickerModule", function () { return MatDatepickerModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCalendarHeader", function () { return MatCalendarHeader; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCalendar", function () { return MatCalendar; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCalendarCell", function () { return MatCalendarCell; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCalendarBody", function () { return MatCalendarBody; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY", function () { return MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_SCROLL_STRATEGY", function () { return MAT_DATEPICKER_SCROLL_STRATEGY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER", function () { return MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDatepickerContent", function () { return MatDatepickerContent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDatepicker", function () { return MatDatepicker; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matDatepickerAnimations", function () { return matDatepickerAnimations; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_VALUE_ACCESSOR", function () { return MAT_DATEPICKER_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_VALIDATORS", function () { return MAT_DATEPICKER_VALIDATORS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDatepickerInputEvent", function () { return MatDatepickerInputEvent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDatepickerInput", function () { return MatDatepickerInput; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDatepickerIntl", function () { return MatDatepickerIntl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDatepickerToggleIcon", function () { return MatDatepickerToggleIcon; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDatepickerToggle", function () { return MatDatepickerToggle; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatMonthView", function () { return MatMonthView; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatYearView", function () { return MatYearView; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm2015/dialog.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/form-field */ "./node_modules/@angular/material/esm2015/form-field.js");
            /* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/input */ "./node_modules/@angular/material/esm2015/input.js");
            /* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm2015/button.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             * @param {?} provider
             * @return {?}
             */
            function createMissingDateImplError(provider) {
                return Error("MatDatepicker: No provider found for " + provider + ". You must import one of the following " +
                    "modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a " +
                    "custom implementation.");
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Datepicker data that requires internationalization.
             */
            var MatDatepickerIntl = /** @class */ (function () {
                function MatDatepickerIntl() {
                    /**
                     * Stream that emits whenever the labels here are changed. Use this to notify
                     * components if the labels have changed after initialization.
                     */
                    this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    /**
                     * A label for the calendar popup (used by screen readers).
                     */
                    this.calendarLabel = 'Calendar';
                    /**
                     * A label for the button used to open the calendar popup (used by screen readers).
                     */
                    this.openCalendarLabel = 'Open calendar';
                    /**
                     * A label for the previous month button (used by screen readers).
                     */
                    this.prevMonthLabel = 'Previous month';
                    /**
                     * A label for the next month button (used by screen readers).
                     */
                    this.nextMonthLabel = 'Next month';
                    /**
                     * A label for the previous year button (used by screen readers).
                     */
                    this.prevYearLabel = 'Previous year';
                    /**
                     * A label for the next year button (used by screen readers).
                     */
                    this.nextYearLabel = 'Next year';
                    /**
                     * A label for the previous multi-year button (used by screen readers).
                     */
                    this.prevMultiYearLabel = 'Previous 20 years';
                    /**
                     * A label for the next multi-year button (used by screen readers).
                     */
                    this.nextMultiYearLabel = 'Next 20 years';
                    /**
                     * A label for the 'switch to month view' button (used by screen readers).
                     */
                    this.switchToMonthViewLabel = 'Choose date';
                    /**
                     * A label for the 'switch to year view' button (used by screen readers).
                     */
                    this.switchToMultiYearViewLabel = 'Choose month and year';
                }
                /**
                 * Formats a range of years.
                 * @param {?} start
                 * @param {?} end
                 * @return {?}
                 */
                MatDatepickerIntl.prototype.formatYearRange = function (start, end) {
                    return start + " \u2013 " + end;
                };
                return MatDatepickerIntl;
            }());
            MatDatepickerIntl.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ MatDatepickerIntl.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function MatDatepickerIntl_Factory() { return new MatDatepickerIntl(); }, token: MatDatepickerIntl, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * An internal class that represents the data corresponding to a single calendar cell.
             * \@docs-private
             */
            var MatCalendarCell = /** @class */ (function () {
                /**
                 * @param {?} value
                 * @param {?} displayValue
                 * @param {?} ariaLabel
                 * @param {?} enabled
                 * @param {?=} cssClasses
                 */
                function MatCalendarCell(value, displayValue, ariaLabel, enabled, cssClasses) {
                    this.value = value;
                    this.displayValue = displayValue;
                    this.ariaLabel = ariaLabel;
                    this.enabled = enabled;
                    this.cssClasses = cssClasses;
                }
                return MatCalendarCell;
            }());
            /**
             * An internal component used to display calendar data in a table.
             * \@docs-private
             */
            var MatCalendarBody = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _ngZone
                 */
                function MatCalendarBody(_elementRef, _ngZone) {
                    this._elementRef = _elementRef;
                    this._ngZone = _ngZone;
                    /**
                     * The number of columns in the table.
                     */
                    this.numCols = 7;
                    /**
                     * The cell number of the active cell in the table.
                     */
                    this.activeCell = 0;
                    /**
                     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be
                     * maintained even as the table resizes.
                     */
                    this.cellAspectRatio = 1;
                    /**
                     * Emits when a new value is selected.
                     */
                    this.selectedValueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                }
                /**
                 * @param {?} cell
                 * @return {?}
                 */
                MatCalendarBody.prototype._cellClicked = function (cell) {
                    if (cell.enabled) {
                        this.selectedValueChange.emit(cell.value);
                    }
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                MatCalendarBody.prototype.ngOnChanges = function (changes) {
                    /** @type {?} */
                    var columnChanges = changes['numCols'];
                    var _b = this, rows = _b.rows, numCols = _b.numCols;
                    if (changes['rows'] || columnChanges) {
                        this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;
                    }
                    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {
                        this._cellPadding = 50 * this.cellAspectRatio / numCols + "%";
                    }
                    if (columnChanges || !this._cellWidth) {
                        this._cellWidth = 100 / numCols + "%";
                    }
                };
                /**
                 * @param {?} rowIndex
                 * @param {?} colIndex
                 * @return {?}
                 */
                MatCalendarBody.prototype._isActiveCell = function (rowIndex, colIndex) {
                    /** @type {?} */
                    var cellNumber = rowIndex * this.numCols + colIndex;
                    // Account for the fact that the first row may not have as many cells.
                    if (rowIndex) {
                        cellNumber -= this._firstRowOffset;
                    }
                    return cellNumber == this.activeCell;
                };
                /**
                 * Focuses the active cell after the microtask queue is empty.
                 * @return {?}
                 */
                MatCalendarBody.prototype._focusActiveCell = function () {
                    var _this = this;
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["take"])(1)).subscribe(( /**
                         * @return {?}
                         */function () {
                            /** @type {?} */
                            var activeCell = _this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');
                            if (activeCell) {
                                activeCell.focus();
                            }
                        }));
                    }));
                };
                return MatCalendarBody;
            }());
            MatCalendarBody.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: '[mat-calendar-body]',
                            template: "<tr *ngIf=\"_firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\"><td class=\"mat-calendar-body-label\" [attr.colspan]=\"numCols\" [style.paddingTop]=\"_cellPadding\" [style.paddingBottom]=\"_cellPadding\">{{label}}</td></tr><tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\"><td *ngIf=\"rowIndex === 0 && _firstRowOffset\" aria-hidden=\"true\" class=\"mat-calendar-body-label\" [attr.colspan]=\"_firstRowOffset\" [style.paddingTop]=\"_cellPadding\" [style.paddingBottom]=\"_cellPadding\">{{_firstRowOffset >= labelMinRequiredCells ? label : ''}}</td><td *ngFor=\"let item of row; let colIndex = index\" role=\"gridcell\" class=\"mat-calendar-body-cell\" [ngClass]=\"item.cssClasses\" [tabindex]=\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\" [class.mat-calendar-body-disabled]=\"!item.enabled\" [class.mat-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\" [attr.aria-label]=\"item.ariaLabel\" [attr.aria-disabled]=\"!item.enabled || null\" [attr.aria-selected]=\"selectedValue === item.value\" (click)=\"_cellClicked(item)\" [style.width]=\"_cellWidth\" [style.paddingTop]=\"_cellPadding\" role=\"button\" [style.paddingBottom]=\"_cellPadding\"><div class=\"mat-calendar-body-cell-content\" [class.mat-calendar-body-selected]=\"selectedValue === item.value\" [class.mat-calendar-body-today]=\"todayValue === item.value\">{{item.displayValue}}</div></td></tr>",
                            styles: [".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}@media (-ms-high-contrast:active){.mat-calendar-body-cell-content{border:none}}@media (-ms-high-contrast:active){.mat-calendar-body-selected,.mat-datepicker-popup:not(:empty){outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}}[dir=rtl] .mat-calendar-body-label{text-align:right}"],
                            host: {
                                'class': 'mat-calendar-body',
                                'role': 'grid',
                                'aria-readonly': 'true'
                            },
                            exportAs: 'matCalendarBody',
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatCalendarBody.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }
            ]; };
            MatCalendarBody.propDecorators = {
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                rows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                todayValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selectedValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                labelMinRequiredCells: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                numCols: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                activeCell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                cellAspectRatio: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selectedValueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DAYS_PER_WEEK = 7;
            /**
             * An internal component used to display a single month in the datepicker.
             * \@docs-private
             * @template D
             */
            var MatMonthView = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _dateFormats
                 * @param {?} _dateAdapter
                 * @param {?=} _dir
                 */
                function MatMonthView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._dateFormats = _dateFormats;
                    this._dateAdapter = _dateAdapter;
                    this._dir = _dir;
                    /**
                     * Emits when a new date is selected.
                     */
                    this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits when any date is selected.
                     */
                    this._userSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits when any date is activated.
                     */
                    this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    if (!this._dateAdapter) {
                        throw createMissingDateImplError('DateAdapter');
                    }
                    if (!this._dateFormats) {
                        throw createMissingDateImplError('MAT_DATE_FORMATS');
                    }
                    this._activeDate = this._dateAdapter.today();
                }
                Object.defineProperty(MatMonthView.prototype, "activeDate", {
                    /**
                     * The date to display in this month view (everything other than the month and year is ignored).
                     * @return {?}
                     */
                    get: function () { return this._activeDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var oldActiveDate = this._activeDate;
                        /** @type {?} */
                        var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
                            this._init();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatMonthView.prototype, "selected", {
                    /**
                     * The currently selected date.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                        this._selectedDate = this._getDateInCurrentMonth(this._selected);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatMonthView.prototype, "minDate", {
                    /**
                     * The minimum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._minDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatMonthView.prototype, "maxDate", {
                    /**
                     * The maximum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._maxDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatMonthView.prototype.ngAfterContentInit = function () {
                    this._init();
                };
                /**
                 * Handles when a new date is selected.
                 * @param {?} date
                 * @return {?}
                 */
                MatMonthView.prototype._dateSelected = function (date) {
                    if (this._selectedDate != date) {
                        /** @type {?} */
                        var selectedYear = this._dateAdapter.getYear(this.activeDate);
                        /** @type {?} */
                        var selectedMonth = this._dateAdapter.getMonth(this.activeDate);
                        /** @type {?} */
                        var selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);
                        this.selectedChange.emit(selectedDate);
                    }
                    this._userSelection.emit();
                };
                /**
                 * Handles keydown events on the calendar body when calendar is in month view.
                 * @param {?} event
                 * @return {?}
                 */
                MatMonthView.prototype._handleCalendarBodyKeydown = function (event) {
                    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                    // disabled ones from being selected. This may not be ideal, we should look into whether
                    // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                    // disabled ones from being selected. This may not be ideal, we should look into whether
                    // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                    /** @type {?} */
                    var oldActiveDate = this._activeDate;
                    /** @type {?} */
                    var isRtl = this._isRtl();
                    switch (event.keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["LEFT_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["RIGHT_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["HOME"]:
                            this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["END"]:
                            this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -
                                this._dateAdapter.getDate(this._activeDate)));
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_UP"]:
                            this.activeDate = event.altKey ?
                                this._dateAdapter.addCalendarYears(this._activeDate, -1) :
                                this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_DOWN"]:
                            this.activeDate = event.altKey ?
                                this._dateAdapter.addCalendarYears(this._activeDate, 1) :
                                this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ENTER"]:
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["SPACE"]:
                            if (!this.dateFilter || this.dateFilter(this._activeDate)) {
                                this._dateSelected(this._dateAdapter.getDate(this._activeDate));
                                this._userSelection.emit();
                                // Prevent unexpected default actions such as form submission.
                                event.preventDefault();
                            }
                            return;
                        default:
                            // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                            return;
                    }
                    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
                        this.activeDateChange.emit(this.activeDate);
                    }
                    this._focusActiveCell();
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                };
                /**
                 * Initializes this month view.
                 * @return {?}
                 */
                MatMonthView.prototype._init = function () {
                    this._selectedDate = this._getDateInCurrentMonth(this.selected);
                    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());
                    this._monthLabel =
                        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]
                            .toLocaleUpperCase();
                    /** @type {?} */
                    var firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
                    this._firstWeekOffset =
                        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -
                            this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;
                    this._initWeekdays();
                    this._createWeekCells();
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Focuses the active cell after the microtask queue is empty.
                 * @return {?}
                 */
                MatMonthView.prototype._focusActiveCell = function () {
                    this._matCalendarBody._focusActiveCell();
                };
                /**
                 * Initializes the weekdays.
                 * @private
                 * @return {?}
                 */
                MatMonthView.prototype._initWeekdays = function () {
                    /** @type {?} */
                    var firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();
                    /** @type {?} */
                    var narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');
                    /** @type {?} */
                    var longWeekdays = this._dateAdapter.getDayOfWeekNames('long');
                    // Rotate the labels for days of the week based on the configured first day of the week.
                    /** @type {?} */
                    var weekdays = longWeekdays.map(( /**
                     * @param {?} long
                     * @param {?} i
                     * @return {?}
                     */function (long, i) {
                        return { long: long, narrow: narrowWeekdays[i] };
                    }));
                    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
                };
                /**
                 * Creates MatCalendarCells for the dates in this month.
                 * @private
                 * @return {?}
                 */
                MatMonthView.prototype._createWeekCells = function () {
                    /** @type {?} */
                    var daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);
                    /** @type {?} */
                    var dateNames = this._dateAdapter.getDateNames();
                    this._weeks = [[]];
                    for (var i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {
                        if (cell == DAYS_PER_WEEK) {
                            this._weeks.push([]);
                            cell = 0;
                        }
                        /** @type {?} */
                        var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);
                        /** @type {?} */
                        var enabled = this._shouldEnableDate(date);
                        /** @type {?} */
                        var ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);
                        /** @type {?} */
                        var cellClasses = this.dateClass ? this.dateClass(date) : undefined;
                        this._weeks[this._weeks.length - 1]
                            .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));
                    }
                };
                /**
                 * Date filter for the month
                 * @private
                 * @param {?} date
                 * @return {?}
                 */
                MatMonthView.prototype._shouldEnableDate = function (date) {
                    return !!date &&
                        (!this.dateFilter || this.dateFilter(date)) &&
                        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&
                        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);
                };
                /**
                 * Gets the date in this month that the given Date falls on.
                 * Returns null if the given Date is in another month.
                 * @private
                 * @param {?} date
                 * @return {?}
                 */
                MatMonthView.prototype._getDateInCurrentMonth = function (date) {
                    return date && this._hasSameMonthAndYear(date, this.activeDate) ?
                        this._dateAdapter.getDate(date) : null;
                };
                /**
                 * Checks whether the 2 dates are non-null and fall within the same month of the same year.
                 * @private
                 * @param {?} d1
                 * @param {?} d2
                 * @return {?}
                 */
                MatMonthView.prototype._hasSameMonthAndYear = function (d1, d2) {
                    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&
                        this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));
                };
                /**
                 * @private
                 * @param {?} obj The object to check.
                 * @return {?} The given object if it is both a date instance and valid, otherwise null.
                 */
                MatMonthView.prototype._getValidDateOrNull = function (obj) {
                    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
                };
                /**
                 * Determines whether the user has the RTL layout direction.
                 * @private
                 * @return {?}
                 */
                MatMonthView.prototype._isRtl = function () {
                    return this._dir && this._dir.value === 'rtl';
                };
                return MatMonthView;
            }());
            MatMonthView.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-month-view',
                            template: "<table class=\"mat-calendar-table\" role=\"presentation\"><thead class=\"mat-calendar-table-header\"><tr><th scope=\"col\" *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th></tr><tr><th class=\"mat-calendar-table-header-divider\" colspan=\"7\" aria-hidden=\"true\"></th></tr></thead><tbody mat-calendar-body [label]=\"_monthLabel\" [rows]=\"_weeks\" [todayValue]=\"_todayDate\" [selectedValue]=\"_selectedDate\" [labelMinRequiredCells]=\"3\" [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\" (selectedValueChange)=\"_dateSelected($event)\" (keydown)=\"_handleCalendarBodyKeydown($event)\"></tbody></table>",
                            exportAs: 'matMonthView',
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
                        },] },
            ];
            /** @nocollapse */
            MatMonthView.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MAT_DATE_FORMATS"],] }] },
                { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            MatMonthView.propDecorators = {
                activeDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                minDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                maxDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                dateFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                dateClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _userSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                activeDateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _matCalendarBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatCalendarBody, { static: false },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var yearsPerPage = 24;
            /** @type {?} */
            var yearsPerRow = 4;
            /**
             * An internal component used to display a year selector in the datepicker.
             * \@docs-private
             * @template D
             */
            var MatMultiYearView = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _dateAdapter
                 * @param {?=} _dir
                 */
                function MatMultiYearView(_changeDetectorRef, _dateAdapter, _dir) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._dateAdapter = _dateAdapter;
                    this._dir = _dir;
                    /**
                     * Emits when a new year is selected.
                     */
                    this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits the selected year. This doesn't imply a change on the selected date
                     */
                    this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits when any date is activated.
                     */
                    this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    if (!this._dateAdapter) {
                        throw createMissingDateImplError('DateAdapter');
                    }
                    this._activeDate = this._dateAdapter.today();
                }
                Object.defineProperty(MatMultiYearView.prototype, "activeDate", {
                    /**
                     * The date to display in this multi-year view (everything other than the year is ignored).
                     * @return {?}
                     */
                    get: function () { return this._activeDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var oldActiveDate = this._activeDate;
                        /** @type {?} */
                        var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                        if (!isSameMultiYearView(this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {
                            this._init();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatMultiYearView.prototype, "selected", {
                    /**
                     * The currently selected date.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                        this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatMultiYearView.prototype, "minDate", {
                    /**
                     * The minimum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._minDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatMultiYearView.prototype, "maxDate", {
                    /**
                     * The maximum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._maxDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatMultiYearView.prototype.ngAfterContentInit = function () {
                    this._init();
                };
                /**
                 * Initializes this multi-year view.
                 * @return {?}
                 */
                MatMultiYearView.prototype._init = function () {
                    var _this = this;
                    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());
                    // We want a range years such that we maximize the number of
                    // enabled dates visible at once. This prevents issues where the minimum year
                    // is the last item of a page OR the maximum year is the first item of a page.
                    // The offset from the active year to the "slot" for the starting year is the
                    // *actual* first rendered year in the multi-year view.
                    /** @type {?} */
                    var activeYear = this._dateAdapter.getYear(this._activeDate);
                    /** @type {?} */
                    var minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);
                    this._years = [];
                    for (var i = 0, row = []; i < yearsPerPage; i++) {
                        row.push(minYearOfPage + i);
                        if (row.length == yearsPerRow) {
                            this._years.push(row.map(( /**
                             * @param {?} year
                             * @return {?}
                             */function (/**
                             * @param {?} year
                             * @return {?}
                             */ year) { return _this._createCellForYear(year); })));
                            row = [];
                        }
                    }
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Handles when a new year is selected.
                 * @param {?} year
                 * @return {?}
                 */
                MatMultiYearView.prototype._yearSelected = function (year) {
                    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));
                    /** @type {?} */
                    var month = this._dateAdapter.getMonth(this.activeDate);
                    /** @type {?} */
                    var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));
                    this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));
                };
                /**
                 * Handles keydown events on the calendar body when calendar is in multi-year view.
                 * @param {?} event
                 * @return {?}
                 */
                MatMultiYearView.prototype._handleCalendarBodyKeydown = function (event) {
                    /** @type {?} */
                    var oldActiveDate = this._activeDate;
                    /** @type {?} */
                    var isRtl = this._isRtl();
                    switch (event.keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["LEFT_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["RIGHT_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["HOME"]:
                            this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["END"]:
                            this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_UP"]:
                            this.activeDate =
                                this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_DOWN"]:
                            this.activeDate =
                                this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ENTER"]:
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["SPACE"]:
                            this._yearSelected(this._dateAdapter.getYear(this._activeDate));
                            break;
                        default:
                            // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                            return;
                    }
                    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
                        this.activeDateChange.emit(this.activeDate);
                    }
                    this._focusActiveCell();
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                };
                /**
                 * @return {?}
                 */
                MatMultiYearView.prototype._getActiveCell = function () {
                    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);
                };
                /**
                 * Focuses the active cell after the microtask queue is empty.
                 * @return {?}
                 */
                MatMultiYearView.prototype._focusActiveCell = function () {
                    this._matCalendarBody._focusActiveCell();
                };
                /**
                 * Creates an MatCalendarCell for the given year.
                 * @private
                 * @param {?} year
                 * @return {?}
                 */
                MatMultiYearView.prototype._createCellForYear = function (year) {
                    /** @type {?} */
                    var yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));
                    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));
                };
                /**
                 * Whether the given year is enabled.
                 * @private
                 * @param {?} year
                 * @return {?}
                 */
                MatMultiYearView.prototype._shouldEnableYear = function (year) {
                    // disable if the year is greater than maxDate lower than minDate
                    if (year === undefined || year === null ||
                        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||
                        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {
                        return false;
                    }
                    // enable if it reaches here and there's no filter defined
                    if (!this.dateFilter) {
                        return true;
                    }
                    /** @type {?} */
                    var firstOfYear = this._dateAdapter.createDate(year, 0, 1);
                    // If any date in the year is enabled count the year as enabled.
                    for (var date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {
                        if (this.dateFilter(date)) {
                            return true;
                        }
                    }
                    return false;
                };
                /**
                 * @private
                 * @param {?} obj The object to check.
                 * @return {?} The given object if it is both a date instance and valid, otherwise null.
                 */
                MatMultiYearView.prototype._getValidDateOrNull = function (obj) {
                    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
                };
                /**
                 * Determines whether the user has the RTL layout direction.
                 * @private
                 * @return {?}
                 */
                MatMultiYearView.prototype._isRtl = function () {
                    return this._dir && this._dir.value === 'rtl';
                };
                return MatMultiYearView;
            }());
            MatMultiYearView.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-multi-year-view',
                            template: "<table class=\"mat-calendar-table\" role=\"presentation\"><thead class=\"mat-calendar-table-header\"><tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr></thead><tbody mat-calendar-body [rows]=\"_years\" [todayValue]=\"_todayYear\" [selectedValue]=\"_selectedYear\" [numCols]=\"4\" [cellAspectRatio]=\"4 / 7\" [activeCell]=\"_getActiveCell()\" (selectedValueChange)=\"_yearSelected($event)\" (keydown)=\"_handleCalendarBodyKeydown($event)\"></tbody></table>",
                            exportAs: 'matMultiYearView',
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
                        },] },
            ];
            /** @nocollapse */
            MatMultiYearView.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            MatMultiYearView.propDecorators = {
                activeDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                minDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                maxDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                dateFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                yearSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                activeDateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _matCalendarBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatCalendarBody, { static: false },] }]
            };
            /**
             * @template D
             * @param {?} dateAdapter
             * @param {?} date1
             * @param {?} date2
             * @param {?} minDate
             * @param {?} maxDate
             * @return {?}
             */
            function isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {
                /** @type {?} */
                var year1 = dateAdapter.getYear(date1);
                /** @type {?} */
                var year2 = dateAdapter.getYear(date2);
                /** @type {?} */
                var startingYear = getStartingYear(dateAdapter, minDate, maxDate);
                return Math.floor((year1 - startingYear) / yearsPerPage) ===
                    Math.floor((year2 - startingYear) / yearsPerPage);
            }
            /**
             * When the multi-year view is first opened, the active year will be in view.
             * So we compute how many years are between the active year and the *slot* where our
             * "startingYear" will render when paged into view.
             * @template D
             * @param {?} dateAdapter
             * @param {?} activeDate
             * @param {?} minDate
             * @param {?} maxDate
             * @return {?}
             */
            function getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {
                /** @type {?} */
                var activeYear = dateAdapter.getYear(activeDate);
                return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)), yearsPerPage);
            }
            /**
             * We pick a "starting" year such that either the maximum year would be at the end
             * or the minimum year would be at the beginning of a page.
             * @template D
             * @param {?} dateAdapter
             * @param {?} minDate
             * @param {?} maxDate
             * @return {?}
             */
            function getStartingYear(dateAdapter, minDate, maxDate) {
                /** @type {?} */
                var startingYear = 0;
                if (maxDate) {
                    /** @type {?} */
                    var maxYear = dateAdapter.getYear(maxDate);
                    startingYear = maxYear - yearsPerPage + 1;
                }
                else if (minDate) {
                    startingYear = dateAdapter.getYear(minDate);
                }
                return startingYear;
            }
            /**
             * Gets remainder that is non-negative, even if first number is negative
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function euclideanModulo(a, b) {
                return (a % b + b) % b;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * An internal component used to display a single year in the datepicker.
             * \@docs-private
             * @template D
             */
            var MatYearView = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _dateFormats
                 * @param {?} _dateAdapter
                 * @param {?=} _dir
                 */
                function MatYearView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._dateFormats = _dateFormats;
                    this._dateAdapter = _dateAdapter;
                    this._dir = _dir;
                    /**
                     * Emits when a new month is selected.
                     */
                    this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits the selected month. This doesn't imply a change on the selected date
                     */
                    this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits when any date is activated.
                     */
                    this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    if (!this._dateAdapter) {
                        throw createMissingDateImplError('DateAdapter');
                    }
                    if (!this._dateFormats) {
                        throw createMissingDateImplError('MAT_DATE_FORMATS');
                    }
                    this._activeDate = this._dateAdapter.today();
                }
                Object.defineProperty(MatYearView.prototype, "activeDate", {
                    /**
                     * The date to display in this year view (everything other than the year is ignored).
                     * @return {?}
                     */
                    get: function () { return this._activeDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var oldActiveDate = this._activeDate;
                        /** @type {?} */
                        var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                        if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {
                            this._init();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatYearView.prototype, "selected", {
                    /**
                     * The currently selected date.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                        this._selectedMonth = this._getMonthInCurrentYear(this._selected);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatYearView.prototype, "minDate", {
                    /**
                     * The minimum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._minDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatYearView.prototype, "maxDate", {
                    /**
                     * The maximum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._maxDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatYearView.prototype.ngAfterContentInit = function () {
                    this._init();
                };
                /**
                 * Handles when a new month is selected.
                 * @param {?} month
                 * @return {?}
                 */
                MatYearView.prototype._monthSelected = function (month) {
                    /** @type {?} */
                    var normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);
                    this.monthSelected.emit(normalizedDate);
                    /** @type {?} */
                    var daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);
                    this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));
                };
                /**
                 * Handles keydown events on the calendar body when calendar is in year view.
                 * @param {?} event
                 * @return {?}
                 */
                MatYearView.prototype._handleCalendarBodyKeydown = function (event) {
                    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                    // disabled ones from being selected. This may not be ideal, we should look into whether
                    // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                    // disabled ones from being selected. This may not be ideal, we should look into whether
                    // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                    /** @type {?} */
                    var oldActiveDate = this._activeDate;
                    /** @type {?} */
                    var isRtl = this._isRtl();
                    switch (event.keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["LEFT_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["RIGHT_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["HOME"]:
                            this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["END"]:
                            this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_UP"]:
                            this.activeDate =
                                this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_DOWN"]:
                            this.activeDate =
                                this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ENTER"]:
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["SPACE"]:
                            this._monthSelected(this._dateAdapter.getMonth(this._activeDate));
                            break;
                        default:
                            // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                            return;
                    }
                    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
                        this.activeDateChange.emit(this.activeDate);
                    }
                    this._focusActiveCell();
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                };
                /**
                 * Initializes this year view.
                 * @return {?}
                 */
                MatYearView.prototype._init = function () {
                    var _this = this;
                    this._selectedMonth = this._getMonthInCurrentYear(this.selected);
                    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());
                    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);
                    /** @type {?} */
                    var monthNames = this._dateAdapter.getMonthNames('short');
                    // First row of months only contains 5 elements so we can fit the year label on the same row.
                    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(( /**
                     * @param {?} row
                     * @return {?}
                     */function (/**
                     * @param {?} row
                     * @return {?}
                     */ row) { return row.map(( /**
                     * @param {?} month
                     * @return {?}
                     */function (/**
                     * @param {?} month
                     * @return {?}
                     */ month) { return _this._createCellForMonth(month, monthNames[month]); })); }));
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Focuses the active cell after the microtask queue is empty.
                 * @return {?}
                 */
                MatYearView.prototype._focusActiveCell = function () {
                    this._matCalendarBody._focusActiveCell();
                };
                /**
                 * Gets the month in this year that the given Date falls on.
                 * Returns null if the given Date is in another year.
                 * @private
                 * @param {?} date
                 * @return {?}
                 */
                MatYearView.prototype._getMonthInCurrentYear = function (date) {
                    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?
                        this._dateAdapter.getMonth(date) : null;
                };
                /**
                 * Creates an MatCalendarCell for the given month.
                 * @private
                 * @param {?} month
                 * @param {?} monthName
                 * @return {?}
                 */
                MatYearView.prototype._createCellForMonth = function (month, monthName) {
                    /** @type {?} */
                    var ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);
                    return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));
                };
                /**
                 * Whether the given month is enabled.
                 * @private
                 * @param {?} month
                 * @return {?}
                 */
                MatYearView.prototype._shouldEnableMonth = function (month) {
                    /** @type {?} */
                    var activeYear = this._dateAdapter.getYear(this.activeDate);
                    if (month === undefined || month === null ||
                        this._isYearAndMonthAfterMaxDate(activeYear, month) ||
                        this._isYearAndMonthBeforeMinDate(activeYear, month)) {
                        return false;
                    }
                    if (!this.dateFilter) {
                        return true;
                    }
                    /** @type {?} */
                    var firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);
                    // If any date in the month is enabled count the month as enabled.
                    for (var date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {
                        if (this.dateFilter(date)) {
                            return true;
                        }
                    }
                    return false;
                };
                /**
                 * Tests whether the combination month/year is after this.maxDate, considering
                 * just the month and year of this.maxDate
                 * @private
                 * @param {?} year
                 * @param {?} month
                 * @return {?}
                 */
                MatYearView.prototype._isYearAndMonthAfterMaxDate = function (year, month) {
                    if (this.maxDate) {
                        /** @type {?} */
                        var maxYear = this._dateAdapter.getYear(this.maxDate);
                        /** @type {?} */
                        var maxMonth = this._dateAdapter.getMonth(this.maxDate);
                        return year > maxYear || (year === maxYear && month > maxMonth);
                    }
                    return false;
                };
                /**
                 * Tests whether the combination month/year is before this.minDate, considering
                 * just the month and year of this.minDate
                 * @private
                 * @param {?} year
                 * @param {?} month
                 * @return {?}
                 */
                MatYearView.prototype._isYearAndMonthBeforeMinDate = function (year, month) {
                    if (this.minDate) {
                        /** @type {?} */
                        var minYear = this._dateAdapter.getYear(this.minDate);
                        /** @type {?} */
                        var minMonth = this._dateAdapter.getMonth(this.minDate);
                        return year < minYear || (year === minYear && month < minMonth);
                    }
                    return false;
                };
                /**
                 * @private
                 * @param {?} obj The object to check.
                 * @return {?} The given object if it is both a date instance and valid, otherwise null.
                 */
                MatYearView.prototype._getValidDateOrNull = function (obj) {
                    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
                };
                /**
                 * Determines whether the user has the RTL layout direction.
                 * @private
                 * @return {?}
                 */
                MatYearView.prototype._isRtl = function () {
                    return this._dir && this._dir.value === 'rtl';
                };
                return MatYearView;
            }());
            MatYearView.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-year-view',
                            template: "<table class=\"mat-calendar-table\" role=\"presentation\"><thead class=\"mat-calendar-table-header\"><tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr></thead><tbody mat-calendar-body [label]=\"_yearLabel\" [rows]=\"_months\" [todayValue]=\"_todayMonth\" [selectedValue]=\"_selectedMonth\" [labelMinRequiredCells]=\"2\" [numCols]=\"4\" [cellAspectRatio]=\"4 / 7\" [activeCell]=\"_dateAdapter.getMonth(activeDate)\" (selectedValueChange)=\"_monthSelected($event)\" (keydown)=\"_handleCalendarBodyKeydown($event)\"></tbody></table>",
                            exportAs: 'matYearView',
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
                        },] },
            ];
            /** @nocollapse */
            MatYearView.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MAT_DATE_FORMATS"],] }] },
                { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            MatYearView.propDecorators = {
                activeDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                minDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                maxDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                dateFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                monthSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                activeDateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _matCalendarBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatCalendarBody, { static: false },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Default header for MatCalendar
             * @template D
             */
            var MatCalendarHeader = /** @class */ (function () {
                /**
                 * @param {?} _intl
                 * @param {?} calendar
                 * @param {?} _dateAdapter
                 * @param {?} _dateFormats
                 * @param {?} changeDetectorRef
                 */
                function MatCalendarHeader(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {
                    this._intl = _intl;
                    this.calendar = calendar;
                    this._dateAdapter = _dateAdapter;
                    this._dateFormats = _dateFormats;
                    this.calendar.stateChanges.subscribe(( /**
                     * @return {?}
                     */function () { return changeDetectorRef.markForCheck(); }));
                }
                Object.defineProperty(MatCalendarHeader.prototype, "periodButtonText", {
                    /**
                     * The label for the current calendar view.
                     * @return {?}
                     */
                    get: function () {
                        if (this.calendar.currentView == 'month') {
                            return this._dateAdapter
                                .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)
                                .toLocaleUpperCase();
                        }
                        if (this.calendar.currentView == 'year') {
                            return this._dateAdapter.getYearName(this.calendar.activeDate);
                        }
                        // The offset from the active year to the "slot" for the starting year is the
                        // *actual* first rendered year in the multi-year view, and the last year is
                        // just yearsPerPage - 1 away.
                        /** @type {?} */
                        var activeYear = this._dateAdapter.getYear(this.calendar.activeDate);
                        /** @type {?} */
                        var minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);
                        /** @type {?} */
                        var maxYearOfPage = minYearOfPage + yearsPerPage - 1;
                        /** @type {?} */
                        var minYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));
                        /** @type {?} */
                        var maxYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));
                        return this._intl.formatYearRange(minYearName, maxYearName);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatCalendarHeader.prototype, "periodButtonLabel", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this.calendar.currentView == 'month' ?
                            this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatCalendarHeader.prototype, "prevButtonLabel", {
                    /**
                     * The label for the previous button.
                     * @return {?}
                     */
                    get: function () {
                        return {
                            'month': this._intl.prevMonthLabel,
                            'year': this._intl.prevYearLabel,
                            'multi-year': this._intl.prevMultiYearLabel
                        }[this.calendar.currentView];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatCalendarHeader.prototype, "nextButtonLabel", {
                    /**
                     * The label for the next button.
                     * @return {?}
                     */
                    get: function () {
                        return {
                            'month': this._intl.nextMonthLabel,
                            'year': this._intl.nextYearLabel,
                            'multi-year': this._intl.nextMultiYearLabel
                        }[this.calendar.currentView];
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Handles user clicks on the period label.
                 * @return {?}
                 */
                MatCalendarHeader.prototype.currentPeriodClicked = function () {
                    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';
                };
                /**
                 * Handles user clicks on the previous button.
                 * @return {?}
                 */
                MatCalendarHeader.prototype.previousClicked = function () {
                    this.calendar.activeDate = this.calendar.currentView == 'month' ?
                        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :
                        this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);
                };
                /**
                 * Handles user clicks on the next button.
                 * @return {?}
                 */
                MatCalendarHeader.prototype.nextClicked = function () {
                    this.calendar.activeDate = this.calendar.currentView == 'month' ?
                        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :
                        this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);
                };
                /**
                 * Whether the previous period button is enabled.
                 * @return {?}
                 */
                MatCalendarHeader.prototype.previousEnabled = function () {
                    if (!this.calendar.minDate) {
                        return true;
                    }
                    return !this.calendar.minDate ||
                        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);
                };
                /**
                 * Whether the next period button is enabled.
                 * @return {?}
                 */
                MatCalendarHeader.prototype.nextEnabled = function () {
                    return !this.calendar.maxDate ||
                        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);
                };
                /**
                 * Whether the two dates represent the same view in the current view mode (month or year).
                 * @private
                 * @param {?} date1
                 * @param {?} date2
                 * @return {?}
                 */
                MatCalendarHeader.prototype._isSameView = function (date1, date2) {
                    if (this.calendar.currentView == 'month') {
                        return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&
                            this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);
                    }
                    if (this.calendar.currentView == 'year') {
                        return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);
                    }
                    // Otherwise we are in 'multi-year' view.
                    return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);
                };
                return MatCalendarHeader;
            }());
            MatCalendarHeader.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-calendar-header',
                            template: "<div class=\"mat-calendar-header\"><div class=\"mat-calendar-controls\"><button mat-button type=\"button\" class=\"mat-calendar-period-button\" (click)=\"currentPeriodClicked()\" [attr.aria-label]=\"periodButtonLabel\" cdkAriaLive=\"polite\">{{periodButtonText}}<div class=\"mat-calendar-arrow\" [class.mat-calendar-invert]=\"calendar.currentView != 'month'\"></div></button><div class=\"mat-calendar-spacer\"></div><ng-content></ng-content><button mat-icon-button type=\"button\" class=\"mat-calendar-previous-button\" [disabled]=\"!previousEnabled()\" (click)=\"previousClicked()\" [attr.aria-label]=\"prevButtonLabel\"></button> <button mat-icon-button type=\"button\" class=\"mat-calendar-next-button\" [disabled]=\"!nextEnabled()\" (click)=\"nextClicked()\" [attr.aria-label]=\"nextButtonLabel\"></button></div></div>",
                            exportAs: 'matCalendarHeader',
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatCalendarHeader.ctorParameters = function () { return [
                { type: MatDatepickerIntl },
                { type: MatCalendar, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                                                 * @return {?}
                                                 */function () { return MatCalendar; })),] }] },
                { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MAT_DATE_FORMATS"],] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
            ]; };
            /**
             * A calendar that is used as part of the datepicker.
             * \@docs-private
             * @template D
             */
            var MatCalendar = /** @class */ (function () {
                /**
                 * @param {?} _intl
                 * @param {?} _dateAdapter
                 * @param {?} _dateFormats
                 * @param {?} _changeDetectorRef
                 */
                function MatCalendar(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {
                    var _this = this;
                    this._dateAdapter = _dateAdapter;
                    this._dateFormats = _dateFormats;
                    this._changeDetectorRef = _changeDetectorRef;
                    /**
                     * Used for scheduling that focus should be moved to the active cell on the next tick.
                     * We need to schedule it, rather than do it immediately, because we have to wait
                     * for Angular to re-evaluate the view children.
                     */
                    this._moveFocusOnNextTick = false;
                    /**
                     * Whether the calendar should be started in month or year view.
                     */
                    this.startView = 'month';
                    /**
                     * Emits when the currently selected date changes.
                     */
                    this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits the year chosen in multiyear view.
                     * This doesn't imply a change on the selected date.
                     */
                    this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits the month chosen in year view.
                     * This doesn't imply a change on the selected date.
                     */
                    this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits when any date is selected.
                     */
                    this._userSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits whenever there is a state change that the header may need to respond to.
                     */
                    this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    if (!this._dateAdapter) {
                        throw createMissingDateImplError('DateAdapter');
                    }
                    if (!this._dateFormats) {
                        throw createMissingDateImplError('MAT_DATE_FORMATS');
                    }
                    this._intlChanges = _intl.changes.subscribe(( /**
                     * @return {?}
                     */function () {
                        _changeDetectorRef.markForCheck();
                        _this.stateChanges.next();
                    }));
                }
                Object.defineProperty(MatCalendar.prototype, "startAt", {
                    /**
                     * A date representing the period (month or year) to start the calendar in.
                     * @return {?}
                     */
                    get: function () { return this._startAt; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatCalendar.prototype, "selected", {
                    /**
                     * The currently selected date.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatCalendar.prototype, "minDate", {
                    /**
                     * The minimum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._minDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatCalendar.prototype, "maxDate", {
                    /**
                     * The maximum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._maxDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatCalendar.prototype, "activeDate", {
                    /**
                     * The current active date. This determines which time period is shown and which date is
                     * highlighted when using keyboard navigation.
                     * @return {?}
                     */
                    get: function () { return this._clampedActiveDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);
                        this.stateChanges.next();
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatCalendar.prototype, "currentView", {
                    /**
                     * Whether the calendar is in month view.
                     * @return {?}
                     */
                    get: function () { return this._currentView; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._currentView = value;
                        this._moveFocusOnNextTick = true;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatCalendar.prototype.ngAfterContentInit = function () {
                    this._calendarHeaderPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__["ComponentPortal"](this.headerComponent || MatCalendarHeader);
                    this.activeDate = this.startAt || this._dateAdapter.today();
                    // Assign to the private property since we don't want to move focus on init.
                    this._currentView = this.startView;
                };
                /**
                 * @return {?}
                 */
                MatCalendar.prototype.ngAfterViewChecked = function () {
                    if (this._moveFocusOnNextTick) {
                        this._moveFocusOnNextTick = false;
                        this.focusActiveCell();
                    }
                };
                /**
                 * @return {?}
                 */
                MatCalendar.prototype.ngOnDestroy = function () {
                    this._intlChanges.unsubscribe();
                    this.stateChanges.complete();
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                MatCalendar.prototype.ngOnChanges = function (changes) {
                    /** @type {?} */
                    var change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];
                    if (change && !change.firstChange) {
                        /** @type {?} */
                        var view = this._getCurrentViewComponent();
                        if (view) {
                            // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are
                            // passed down to the view via data bindings which won't be up-to-date when we call `_init`.
                            this._changeDetectorRef.detectChanges();
                            view._init();
                        }
                    }
                    this.stateChanges.next();
                };
                /**
                 * @return {?}
                 */
                MatCalendar.prototype.focusActiveCell = function () {
                    this._getCurrentViewComponent()._focusActiveCell();
                };
                /**
                 * Updates today's date after an update of the active date
                 * @return {?}
                 */
                MatCalendar.prototype.updateTodaysDate = function () {
                    /** @type {?} */
                    var view = this.currentView == 'month' ? this.monthView :
                        (this.currentView == 'year' ? this.yearView : this.multiYearView);
                    view.ngAfterContentInit();
                };
                /**
                 * Handles date selection in the month view.
                 * @param {?} date
                 * @return {?}
                 */
                MatCalendar.prototype._dateSelected = function (date) {
                    if (!this._dateAdapter.sameDate(date, this.selected)) {
                        this.selectedChange.emit(date);
                    }
                };
                /**
                 * Handles year selection in the multiyear view.
                 * @param {?} normalizedYear
                 * @return {?}
                 */
                MatCalendar.prototype._yearSelectedInMultiYearView = function (normalizedYear) {
                    this.yearSelected.emit(normalizedYear);
                };
                /**
                 * Handles month selection in the year view.
                 * @param {?} normalizedMonth
                 * @return {?}
                 */
                MatCalendar.prototype._monthSelectedInYearView = function (normalizedMonth) {
                    this.monthSelected.emit(normalizedMonth);
                };
                /**
                 * @return {?}
                 */
                MatCalendar.prototype._userSelected = function () {
                    this._userSelection.emit();
                };
                /**
                 * Handles year/month selection in the multi-year/year views.
                 * @param {?} date
                 * @param {?} view
                 * @return {?}
                 */
                MatCalendar.prototype._goToDateInView = function (date, view) {
                    this.activeDate = date;
                    this.currentView = view;
                };
                /**
                 * @private
                 * @param {?} obj The object to check.
                 * @return {?} The given object if it is both a date instance and valid, otherwise null.
                 */
                MatCalendar.prototype._getValidDateOrNull = function (obj) {
                    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
                };
                /**
                 * Returns the component instance that corresponds to the current calendar view.
                 * @private
                 * @return {?}
                 */
                MatCalendar.prototype._getCurrentViewComponent = function () {
                    return this.monthView || this.yearView || this.multiYearView;
                };
                return MatCalendar;
            }());
            MatCalendar.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-calendar',
                            template: "<ng-template [cdkPortalOutlet]=\"_calendarHeaderPortal\"></ng-template><div class=\"mat-calendar-content\" [ngSwitch]=\"currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\"><mat-month-view *ngSwitchCase=\"'month'\" [(activeDate)]=\"activeDate\" [selected]=\"selected\" [dateFilter]=\"dateFilter\" [maxDate]=\"maxDate\" [minDate]=\"minDate\" [dateClass]=\"dateClass\" (selectedChange)=\"_dateSelected($event)\" (_userSelection)=\"_userSelected()\"></mat-month-view><mat-year-view *ngSwitchCase=\"'year'\" [(activeDate)]=\"activeDate\" [selected]=\"selected\" [dateFilter]=\"dateFilter\" [maxDate]=\"maxDate\" [minDate]=\"minDate\" (monthSelected)=\"_monthSelectedInYearView($event)\" (selectedChange)=\"_goToDateInView($event, 'month')\"></mat-year-view><mat-multi-year-view *ngSwitchCase=\"'multi-year'\" [(activeDate)]=\"activeDate\" [selected]=\"selected\" [dateFilter]=\"dateFilter\" [maxDate]=\"maxDate\" [minDate]=\"minDate\" (yearSelected)=\"_yearSelectedInMultiYearView($event)\" (selectedChange)=\"_goToDateInView($event, 'year')\"></mat-multi-year-view></div>",
                            styles: [".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}"],
                            host: {
                                'class': 'mat-calendar',
                            },
                            exportAs: 'matCalendar',
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatCalendar.ctorParameters = function () { return [
                { type: MatDatepickerIntl },
                { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MAT_DATE_FORMATS"],] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
            ]; };
            MatCalendar.propDecorators = {
                headerComponent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                startAt: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                startView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                minDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                maxDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                dateFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                dateClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                yearSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                monthSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _userSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                monthView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatMonthView, { static: false },] }],
                yearView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatYearView, { static: false },] }],
                multiYearView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatMultiYearView, { static: false },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Animations used by the Material datepicker.
             * \@docs-private
             * @type {?}
             */
            var matDatepickerAnimations = {
                /**
                 * Transforms the height of the datepicker's calendar.
                 */
                transformPanel: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["trigger"])('transformPanel', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({
                        opacity: 0,
                        transform: 'scale(1, 0.8)'
                    })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["transition"])('void => enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["animate"])('120ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({
                        opacity: 1,
                        transform: 'scale(1, 1)'
                    }))),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["animate"])('100ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({ opacity: 0 })))
                ]),
                /**
                 * Fades in the content of the calendar.
                 */
                fadeInCalendar: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["trigger"])('fadeInCalendar', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({ opacity: 0 })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["state"])('enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({ opacity: 1 })),
                    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we
                    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["transition"])('void => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["animate"])('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))
                ])
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Used to generate a unique ID for each datepicker instance.
             * @type {?}
             */
            var datepickerUid = 0;
            /**
             * Injection token that determines the scroll handling while the calendar is open.
             * @type {?}
             */
            var MAT_DATEPICKER_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-datepicker-scroll-strategy');
            /**
             * \@docs-private
             * @param {?} overlay
             * @return {?}
             */
            function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {
                return ( /**
                 * @return {?}
                 */function () { return overlay.scrollStrategies.reposition(); });
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {
                provide: MAT_DATEPICKER_SCROLL_STRATEGY,
                deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["Overlay"]],
                useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,
            };
            // Boilerplate for applying mixins to MatDatepickerContent.
            /**
             * \@docs-private
             */
            var MatDatepickerContentBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatDatepickerContentBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatDatepickerContentBase;
            }());
            /** @type {?} */
            var _MatDatepickerContentMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(MatDatepickerContentBase);
            /**
             * Component used as the content for the datepicker dialog and popup. We use this instead of using
             * MatCalendar directly as the content so we can control the initial focus. This also gives us a
             * place to put additional features of the popup that are not part of the calendar itself in the
             * future. (e.g. confirmation buttons).
             * \@docs-private
             * @template D
             */
            var MatDatepickerContent = /** @class */ (function (_super) {
                __extends(MatDatepickerContent, _super);
                /**
                 * @param {?} elementRef
                 */
                function MatDatepickerContent(elementRef) {
                    return _super.call(this, elementRef) || this;
                }
                /**
                 * @return {?}
                 */
                MatDatepickerContent.prototype.ngAfterViewInit = function () {
                    this._calendar.focusActiveCell();
                };
                return MatDatepickerContent;
            }(_MatDatepickerContentMixinBase));
            MatDatepickerContent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-datepicker-content',
                            template: "<mat-calendar cdkTrapFocus [id]=\"datepicker.id\" [ngClass]=\"datepicker.panelClass\" [startAt]=\"datepicker.startAt\" [startView]=\"datepicker.startView\" [minDate]=\"datepicker._minDate\" [maxDate]=\"datepicker._maxDate\" [dateFilter]=\"datepicker._dateFilter\" [headerComponent]=\"datepicker.calendarHeaderComponent\" [selected]=\"datepicker._selected\" [dateClass]=\"datepicker.dateClass\" [@fadeInCalendar]=\"'enter'\" (selectedChange)=\"datepicker.select($event)\" (yearSelected)=\"datepicker._selectYear($event)\" (monthSelected)=\"datepicker._selectMonth($event)\" (_userSelection)=\"datepicker.close()\"></mat-calendar>",
                            styles: [".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}"],
                            host: {
                                'class': 'mat-datepicker-content',
                                '[@transformPanel]': '"enter"',
                                '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',
                            },
                            animations: [
                                matDatepickerAnimations.transformPanel,
                                matDatepickerAnimations.fadeInCalendar,
                            ],
                            exportAs: 'matDatepickerContent',
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            inputs: ['color'],
                        },] },
            ];
            /** @nocollapse */
            MatDatepickerContent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            MatDatepickerContent.propDecorators = {
                _calendar: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatCalendar, { static: false },] }]
            };
            // TODO(mmalerba): We use a component instead of a directive here so the user can use implicit
            // template reference variables (e.g. #d vs #d="matDatepicker"). We can change this to a directive
            // if angular adds support for `exportAs: '$implicit'` on directives.
            /**
             * Component responsible for managing the datepicker popup/dialog.
             * @template D
             */
            var MatDatepicker = /** @class */ (function () {
                /**
                 * @param {?} _dialog
                 * @param {?} _overlay
                 * @param {?} _ngZone
                 * @param {?} _viewContainerRef
                 * @param {?} scrollStrategy
                 * @param {?} _dateAdapter
                 * @param {?} _dir
                 * @param {?} _document
                 */
                function MatDatepicker(_dialog, _overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _document) {
                    this._dialog = _dialog;
                    this._overlay = _overlay;
                    this._ngZone = _ngZone;
                    this._viewContainerRef = _viewContainerRef;
                    this._dateAdapter = _dateAdapter;
                    this._dir = _dir;
                    this._document = _document;
                    /**
                     * The view that the calendar should start in.
                     */
                    this.startView = 'month';
                    this._touchUi = false;
                    /**
                     * Emits selected year in multiyear view.
                     * This doesn't imply a change on the selected date.
                     */
                    this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits selected month in year view.
                     * This doesn't imply a change on the selected date.
                     */
                    this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits when the datepicker has been opened.
                     */
                    this.openedStream = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits when the datepicker has been closed.
                     */
                    this.closedStream = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    this._opened = false;
                    /**
                     * The id for the datepicker calendar.
                     */
                    this.id = "mat-datepicker-" + datepickerUid++;
                    this._validSelected = null;
                    /**
                     * The element that was focused before the datepicker was opened.
                     */
                    this._focusedElementBeforeOpen = null;
                    /**
                     * Subscription to value changes in the associated input element.
                     */
                    this._inputSubscription = rxjs__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
                    /**
                     * Emits when the datepicker is disabled.
                     */
                    this._disabledChange = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    /**
                     * Emits new selected date when selected date changes.
                     */
                    this._selectedChanged = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    if (!this._dateAdapter) {
                        throw createMissingDateImplError('DateAdapter');
                    }
                    this._scrollStrategy = scrollStrategy;
                }
                Object.defineProperty(MatDatepicker.prototype, "startAt", {
                    /**
                     * The date to open the calendar to initially.
                     * @return {?}
                     */
                    get: function () {
                        // If an explicit startAt is set we start there, otherwise we start at whatever the currently
                        // selected value is.
                        return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepicker.prototype, "color", {
                    /**
                     * Color palette to use on the datepicker's calendar.
                     * @return {?}
                     */
                    get: function () {
                        return this._color ||
                            (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._color = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepicker.prototype, "touchUi", {
                    /**
                     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather
                     * than a popup and elements have more padding to allow for bigger touch targets.
                     * @return {?}
                     */
                    get: function () { return this._touchUi; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._touchUi = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepicker.prototype, "disabled", {
                    /**
                     * Whether the datepicker pop-up should be disabled.
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled === undefined && this._datepickerInput ?
                            this._datepickerInput.disabled : !!this._disabled;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
                        if (newValue !== this._disabled) {
                            this._disabled = newValue;
                            this._disabledChange.next(newValue);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepicker.prototype, "opened", {
                    /**
                     * Whether the calendar is open.
                     * @return {?}
                     */
                    get: function () { return this._opened; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { value ? this.open() : this.close(); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepicker.prototype, "_selected", {
                    /**
                     * The currently selected date.
                     * @return {?}
                     */
                    get: function () { return this._validSelected; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._validSelected = value; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepicker.prototype, "_minDate", {
                    /**
                     * The minimum selectable date.
                     * @return {?}
                     */
                    get: function () {
                        return this._datepickerInput && this._datepickerInput.min;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepicker.prototype, "_maxDate", {
                    /**
                     * The maximum selectable date.
                     * @return {?}
                     */
                    get: function () {
                        return this._datepickerInput && this._datepickerInput.max;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepicker.prototype, "_dateFilter", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._datepickerInput && this._datepickerInput._dateFilter;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatDatepicker.prototype.ngOnDestroy = function () {
                    this.close();
                    this._inputSubscription.unsubscribe();
                    this._disabledChange.complete();
                    if (this._popupRef) {
                        this._popupRef.dispose();
                        this._popupComponentRef = null;
                    }
                };
                /**
                 * Selects the given date
                 * @param {?} date
                 * @return {?}
                 */
                MatDatepicker.prototype.select = function (date) {
                    /** @type {?} */
                    var oldValue = this._selected;
                    this._selected = date;
                    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {
                        this._selectedChanged.next(date);
                    }
                };
                /**
                 * Emits the selected year in multiyear view
                 * @param {?} normalizedYear
                 * @return {?}
                 */
                MatDatepicker.prototype._selectYear = function (normalizedYear) {
                    this.yearSelected.emit(normalizedYear);
                };
                /**
                 * Emits selected month in year view
                 * @param {?} normalizedMonth
                 * @return {?}
                 */
                MatDatepicker.prototype._selectMonth = function (normalizedMonth) {
                    this.monthSelected.emit(normalizedMonth);
                };
                /**
                 * Register an input with this datepicker.
                 * @param {?} input The datepicker input to register with this datepicker.
                 * @return {?}
                 */
                MatDatepicker.prototype._registerInput = function (input) {
                    var _this = this;
                    if (this._datepickerInput) {
                        throw Error('A MatDatepicker can only be associated with a single input.');
                    }
                    this._datepickerInput = input;
                    this._inputSubscription =
                        this._datepickerInput._valueChange.subscribe(( /**
                         * @param {?} value
                         * @return {?}
                         */function (value) { return _this._selected = value; }));
                };
                /**
                 * Open the calendar.
                 * @return {?}
                 */
                MatDatepicker.prototype.open = function () {
                    if (this._opened || this.disabled) {
                        return;
                    }
                    if (!this._datepickerInput) {
                        throw Error('Attempted to open an MatDatepicker with no associated input.');
                    }
                    if (this._document) {
                        this._focusedElementBeforeOpen = this._document.activeElement;
                    }
                    this.touchUi ? this._openAsDialog() : this._openAsPopup();
                    this._opened = true;
                    this.openedStream.emit();
                };
                /**
                 * Close the calendar.
                 * @return {?}
                 */
                MatDatepicker.prototype.close = function () {
                    var _this = this;
                    if (!this._opened) {
                        return;
                    }
                    if (this._popupRef && this._popupRef.hasAttached()) {
                        this._popupRef.detach();
                    }
                    if (this._dialogRef) {
                        this._dialogRef.close();
                        this._dialogRef = null;
                    }
                    if (this._calendarPortal && this._calendarPortal.isAttached) {
                        this._calendarPortal.detach();
                    }
                    /** @type {?} */
                    var completeClose = ( /**
                     * @return {?}
                     */function () {
                        // The `_opened` could've been reset already if
                        // we got two events in quick succession.
                        if (_this._opened) {
                            _this._opened = false;
                            _this.closedStream.emit();
                            _this._focusedElementBeforeOpen = null;
                        }
                    });
                    if (this._focusedElementBeforeOpen &&
                        typeof this._focusedElementBeforeOpen.focus === 'function') {
                        // Because IE moves focus asynchronously, we can't count on it being restored before we've
                        // marked the datepicker as closed. If the event fires out of sequence and the element that
                        // we're refocusing opens the datepicker on focus, the user could be stuck with not being
                        // able to close the calendar at all. We work around it by making the logic, that marks
                        // the datepicker as closed, async as well.
                        this._focusedElementBeforeOpen.focus();
                        setTimeout(completeClose);
                    }
                    else {
                        completeClose();
                    }
                };
                /**
                 * Open the calendar as a dialog.
                 * @private
                 * @return {?}
                 */
                MatDatepicker.prototype._openAsDialog = function () {
                    var _this = this;
                    // Usually this would be handled by `open` which ensures that we can only have one overlay
                    // open at a time, however since we reset the variables in async handlers some overlays
                    // may slip through if the user opens and closes multiple times in quick succession (e.g.
                    // by holding down the enter key).
                    if (this._dialogRef) {
                        this._dialogRef.close();
                    }
                    this._dialogRef = this._dialog.open(MatDatepickerContent, {
                        direction: this._dir ? this._dir.value : 'ltr',
                        viewContainerRef: this._viewContainerRef,
                        panelClass: 'mat-datepicker-dialog',
                    });
                    this._dialogRef.afterClosed().subscribe(( /**
                     * @return {?}
                     */function () { return _this.close(); }));
                    this._dialogRef.componentInstance.datepicker = this;
                    this._setColor();
                };
                /**
                 * Open the calendar as a popup.
                 * @private
                 * @return {?}
                 */
                MatDatepicker.prototype._openAsPopup = function () {
                    var _this = this;
                    if (!this._calendarPortal) {
                        this._calendarPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__["ComponentPortal"](MatDatepickerContent, this._viewContainerRef);
                    }
                    if (!this._popupRef) {
                        this._createPopup();
                    }
                    if (!this._popupRef.hasAttached()) {
                        this._popupComponentRef = this._popupRef.attach(this._calendarPortal);
                        this._popupComponentRef.instance.datepicker = this;
                        this._setColor();
                        // Update the position once the calendar has rendered.
                        this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["take"])(1)).subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._popupRef.updatePosition();
                        }));
                    }
                };
                /**
                 * Create the popup.
                 * @private
                 * @return {?}
                 */
                MatDatepicker.prototype._createPopup = function () {
                    var _this = this;
                    /** @type {?} */
                    var overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["OverlayConfig"]({
                        positionStrategy: this._createPopupPositionStrategy(),
                        hasBackdrop: true,
                        backdropClass: 'mat-overlay-transparent-backdrop',
                        direction: this._dir,
                        scrollStrategy: this._scrollStrategy(),
                        panelClass: 'mat-datepicker-popup',
                    });
                    this._popupRef = this._overlay.create(overlayConfig);
                    this._popupRef.overlayElement.setAttribute('role', 'dialog');
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["merge"])(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["filter"])(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        // Closing on alt + up is only valid when there's an input associated with the datepicker.
                        return event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ESCAPE"] ||
                            (_this._datepickerInput && event.altKey && event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]);
                    })))).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        if (event) {
                            event.preventDefault();
                        }
                        _this.close();
                    }));
                };
                /**
                 * Create the popup PositionStrategy.
                 * @private
                 * @return {?}
                 */
                MatDatepicker.prototype._createPopupPositionStrategy = function () {
                    return this._overlay.position()
                        .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())
                        .withTransformOriginOn('.mat-datepicker-content')
                        .withFlexibleDimensions(false)
                        .withViewportMargin(8)
                        .withLockedPosition()
                        .withPositions([
                        {
                            originX: 'start',
                            originY: 'bottom',
                            overlayX: 'start',
                            overlayY: 'top'
                        },
                        {
                            originX: 'start',
                            originY: 'top',
                            overlayX: 'start',
                            overlayY: 'bottom'
                        },
                        {
                            originX: 'end',
                            originY: 'bottom',
                            overlayX: 'end',
                            overlayY: 'top'
                        },
                        {
                            originX: 'end',
                            originY: 'top',
                            overlayX: 'end',
                            overlayY: 'bottom'
                        }
                    ]);
                };
                /**
                 * @private
                 * @param {?} obj The object to check.
                 * @return {?} The given object if it is both a date instance and valid, otherwise null.
                 */
                MatDatepicker.prototype._getValidDateOrNull = function (obj) {
                    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
                };
                /**
                 * Passes the current theme color along to the calendar overlay.
                 * @private
                 * @return {?}
                 */
                MatDatepicker.prototype._setColor = function () {
                    /** @type {?} */
                    var color = this.color;
                    if (this._popupComponentRef) {
                        this._popupComponentRef.instance.color = color;
                    }
                    if (this._dialogRef) {
                        this._dialogRef.componentInstance.color = color;
                    }
                };
                return MatDatepicker;
            }());
            MatDatepicker.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-datepicker',
                            template: '',
                            exportAs: 'matDatepicker',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        },] },
            ];
            /** @nocollapse */
            MatDatepicker.ctorParameters = function () { return [
                { type: _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MatDialog"] },
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["Overlay"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_DATEPICKER_SCROLL_STRATEGY,] }] },
                { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_10__["DOCUMENT"],] }] }
            ]; };
            MatDatepicker.propDecorators = {
                calendarHeaderComponent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                startAt: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                startView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                touchUi: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                yearSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                monthSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                panelClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                dateClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                openedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"], args: ['opened',] }],
                closedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"], args: ['closed',] }],
                opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_DATEPICKER_VALUE_ACCESSOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_12__["NG_VALUE_ACCESSOR"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MatDatepickerInput; })),
                multi: true
            };
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_DATEPICKER_VALIDATORS = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_12__["NG_VALIDATORS"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MatDatepickerInput; })),
                multi: true
            };
            /**
             * An event used for datepicker input and change events. We don't always have access to a native
             * input or change event because the event may have been triggered by the user clicking on the
             * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.
             * @template D
             */
            var MatDatepickerInputEvent = /** @class */ (function () {
                /**
                 * @param {?} target
                 * @param {?} targetElement
                 */
                function MatDatepickerInputEvent(target, targetElement) {
                    this.target = target;
                    this.targetElement = targetElement;
                    this.value = this.target.value;
                }
                return MatDatepickerInputEvent;
            }());
            /**
             * Directive used to connect an input to a MatDatepicker.
             * @template D
             */
            var MatDatepickerInput = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _dateAdapter
                 * @param {?} _dateFormats
                 * @param {?} _formField
                 */
                function MatDatepickerInput(_elementRef, _dateAdapter, _dateFormats, _formField) {
                    var _this = this;
                    this._elementRef = _elementRef;
                    this._dateAdapter = _dateAdapter;
                    this._dateFormats = _dateFormats;
                    this._formField = _formField;
                    /**
                     * Emits when a `change` event is fired on this `<input>`.
                     */
                    this.dateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits when an `input` event is fired on this `<input>`.
                     */
                    this.dateInput = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits when the value changes (either due to user input or programmatic change).
                     */
                    this._valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Emits when the disabled state has changed
                     */
                    this._disabledChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    this._cvaOnChange = ( /**
                     * @return {?}
                     */function () { });
                    this._validatorOnChange = ( /**
                     * @return {?}
                     */function () { });
                    this._datepickerSubscription = rxjs__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
                    this._localeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
                    /**
                     * The form control validator for whether the input parses.
                     */
                    this._parseValidator = ( /**
                     * @return {?}
                     */function () {
                        return _this._lastValueValid ?
                            null : { 'matDatepickerParse': { 'text': _this._elementRef.nativeElement.value } };
                    });
                    /**
                     * The form control validator for the min date.
                     */
                    this._minValidator = ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        /** @type {?} */
                        var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
                        return (!_this.min || !controlValue ||
                            _this._dateAdapter.compareDate(_this.min, controlValue) <= 0) ?
                            null : { 'matDatepickerMin': { 'min': _this.min, 'actual': controlValue } };
                    });
                    /**
                     * The form control validator for the max date.
                     */
                    this._maxValidator = ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        /** @type {?} */
                        var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
                        return (!_this.max || !controlValue ||
                            _this._dateAdapter.compareDate(_this.max, controlValue) >= 0) ?
                            null : { 'matDatepickerMax': { 'max': _this.max, 'actual': controlValue } };
                    });
                    /**
                     * The form control validator for the date filter.
                     */
                    this._filterValidator = ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        /** @type {?} */
                        var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
                        return !_this._dateFilter || !controlValue || _this._dateFilter(controlValue) ?
                            null : { 'matDatepickerFilter': true };
                    });
                    /**
                     * The combined form control validator for this input.
                     */
                    this._validator = _angular_forms__WEBPACK_IMPORTED_MODULE_12__["Validators"].compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);
                    /**
                     * Whether the last value set on the input was valid.
                     */
                    this._lastValueValid = false;
                    if (!this._dateAdapter) {
                        throw createMissingDateImplError('DateAdapter');
                    }
                    if (!this._dateFormats) {
                        throw createMissingDateImplError('MAT_DATE_FORMATS');
                    }
                    // Update the displayed date when the locale changes.
                    this._localeSubscription = _dateAdapter.localeChanges.subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.value = _this.value;
                    }));
                }
                Object.defineProperty(MatDatepickerInput.prototype, "matDatepicker", {
                    /**
                     * The datepicker that this input is associated with.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        var _this = this;
                        if (!value) {
                            return;
                        }
                        this._datepicker = value;
                        this._datepicker._registerInput(this);
                        this._datepickerSubscription.unsubscribe();
                        this._datepickerSubscription = this._datepicker._selectedChanged.subscribe(( /**
                         * @param {?} selected
                         * @return {?}
                         */function (selected) {
                            _this.value = selected;
                            _this._cvaOnChange(selected);
                            _this._onTouched();
                            _this.dateInput.emit(new MatDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                            _this.dateChange.emit(new MatDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                        }));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepickerInput.prototype, "matDatepickerFilter", {
                    /**
                     * Function that can be used to filter out dates within the datepicker.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._dateFilter = value;
                        this._validatorOnChange();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepickerInput.prototype, "value", {
                    /**
                     * The value of the input.
                     * @return {?}
                     */
                    get: function () { return this._value; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        value = this._dateAdapter.deserialize(value);
                        this._lastValueValid = !value || this._dateAdapter.isValid(value);
                        value = this._getValidDateOrNull(value);
                        /** @type {?} */
                        var oldDate = this.value;
                        this._value = value;
                        this._formatValue(value);
                        if (!this._dateAdapter.sameDate(oldDate, value)) {
                            this._valueChange.emit(value);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepickerInput.prototype, "min", {
                    /**
                     * The minimum valid date.
                     * @return {?}
                     */
                    get: function () { return this._min; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                        this._validatorOnChange();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepickerInput.prototype, "max", {
                    /**
                     * The maximum valid date.
                     * @return {?}
                     */
                    get: function () { return this._max; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                        this._validatorOnChange();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDatepickerInput.prototype, "disabled", {
                    /**
                     * Whether the datepicker-input is disabled.
                     * @return {?}
                     */
                    get: function () { return !!this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
                        /** @type {?} */
                        var element = this._elementRef.nativeElement;
                        if (this._disabled !== newValue) {
                            this._disabled = newValue;
                            this._disabledChange.emit(newValue);
                        }
                        // We need to null check the `blur` method, because it's undefined during SSR.
                        if (newValue && element.blur) {
                            // Normally, native input elements automatically blur if they turn disabled. This behavior
                            // is problematic, because it would mean that it triggers another change detection cycle,
                            // which then causes a changed after checked error if the input element was focused before.
                            element.blur();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatDatepickerInput.prototype.ngOnDestroy = function () {
                    this._datepickerSubscription.unsubscribe();
                    this._localeSubscription.unsubscribe();
                    this._valueChange.complete();
                    this._disabledChange.complete();
                };
                /**
                 * \@docs-private
                 * @param {?} fn
                 * @return {?}
                 */
                MatDatepickerInput.prototype.registerOnValidatorChange = function (fn) {
                    this._validatorOnChange = fn;
                };
                /**
                 * \@docs-private
                 * @param {?} c
                 * @return {?}
                 */
                MatDatepickerInput.prototype.validate = function (c) {
                    return this._validator ? this._validator(c) : null;
                };
                /**
                 * @deprecated
                 * \@breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead
                 * @return {?}
                 */
                MatDatepickerInput.prototype.getPopupConnectionElementRef = function () {
                    return this.getConnectedOverlayOrigin();
                };
                /**
                 * Gets the element that the datepicker popup should be connected to.
                 * @return {?} The element to connect the popup to.
                 */
                MatDatepickerInput.prototype.getConnectedOverlayOrigin = function () {
                    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} value
                 * @return {?}
                 */
                MatDatepickerInput.prototype.writeValue = function (value) {
                    this.value = value;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                MatDatepickerInput.prototype.registerOnChange = function (fn) {
                    this._cvaOnChange = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                MatDatepickerInput.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                MatDatepickerInput.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatDatepickerInput.prototype._onKeydown = function (event) {
                    /** @type {?} */
                    var isAltDownArrow = event.altKey && event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"];
                    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {
                        this._datepicker.open();
                        event.preventDefault();
                    }
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                MatDatepickerInput.prototype._onInput = function (value) {
                    /** @type {?} */
                    var date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);
                    this._lastValueValid = !date || this._dateAdapter.isValid(date);
                    date = this._getValidDateOrNull(date);
                    if (!this._dateAdapter.sameDate(date, this._value)) {
                        this._value = date;
                        this._cvaOnChange(date);
                        this._valueChange.emit(date);
                        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));
                    }
                    else {
                        this._validatorOnChange();
                    }
                };
                /**
                 * @return {?}
                 */
                MatDatepickerInput.prototype._onChange = function () {
                    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));
                };
                /**
                 * Returns the palette used by the input's form field, if any.
                 * @return {?}
                 */
                MatDatepickerInput.prototype._getThemePalette = function () {
                    return this._formField ? this._formField.color : undefined;
                };
                /**
                 * Handles blur events on the input.
                 * @return {?}
                 */
                MatDatepickerInput.prototype._onBlur = function () {
                    // Reformat the input only if we have a valid value.
                    if (this.value) {
                        this._formatValue(this.value);
                    }
                    this._onTouched();
                };
                /**
                 * Formats a value and sets it on the input element.
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                MatDatepickerInput.prototype._formatValue = function (value) {
                    this._elementRef.nativeElement.value =
                        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';
                };
                /**
                 * @private
                 * @param {?} obj The object to check.
                 * @return {?} The given object if it is both a date instance and valid, otherwise null.
                 */
                MatDatepickerInput.prototype._getValidDateOrNull = function (obj) {
                    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
                };
                return MatDatepickerInput;
            }());
            MatDatepickerInput.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'input[matDatepicker]',
                            providers: [
                                MAT_DATEPICKER_VALUE_ACCESSOR,
                                MAT_DATEPICKER_VALIDATORS,
                                { provide: _angular_material_input__WEBPACK_IMPORTED_MODULE_14__["MAT_INPUT_VALUE_ACCESSOR"], useExisting: MatDatepickerInput },
                            ],
                            host: {
                                '[attr.aria-haspopup]': '_datepicker ? "dialog" : null',
                                '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',
                                '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',
                                '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',
                                '[disabled]': 'disabled',
                                '(input)': '_onInput($event.target.value)',
                                '(change)': '_onChange()',
                                '(blur)': '_onBlur()',
                                '(keydown)': '_onKeydown($event)',
                            },
                            exportAs: 'matDatepickerInput',
                        },] },
            ];
            /** @nocollapse */
            MatDatepickerInput.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MAT_DATE_FORMATS"],] }] },
                { type: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__["MatFormField"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            MatDatepickerInput.propDecorators = {
                matDatepicker: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                matDatepickerFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                min: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                max: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                dateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                dateInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Can be used to override the icon of a `matDatepickerToggle`.
             */
            var MatDatepickerToggleIcon = /** @class */ (function () {
                function MatDatepickerToggleIcon() {
                }
                return MatDatepickerToggleIcon;
            }());
            MatDatepickerToggleIcon.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[matDatepickerToggleIcon]'
                        },] },
            ];
            /**
             * @template D
             */
            var MatDatepickerToggle = /** @class */ (function () {
                /**
                 * @param {?} _intl
                 * @param {?} _changeDetectorRef
                 * @param {?} defaultTabIndex
                 */
                function MatDatepickerToggle(_intl, _changeDetectorRef, defaultTabIndex) {
                    this._intl = _intl;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._stateChanges = rxjs__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
                    /** @type {?} */
                    var parsedTabIndex = Number(defaultTabIndex);
                    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;
                }
                Object.defineProperty(MatDatepickerToggle.prototype, "disabled", {
                    /**
                     * Whether the toggle button is disabled.
                     * @return {?}
                     */
                    get: function () {
                        if (this._disabled === undefined && this.datepicker) {
                            return this.datepicker.disabled;
                        }
                        return !!this._disabled;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                MatDatepickerToggle.prototype.ngOnChanges = function (changes) {
                    if (changes['datepicker']) {
                        this._watchStateChanges();
                    }
                };
                /**
                 * @return {?}
                 */
                MatDatepickerToggle.prototype.ngOnDestroy = function () {
                    this._stateChanges.unsubscribe();
                };
                /**
                 * @return {?}
                 */
                MatDatepickerToggle.prototype.ngAfterContentInit = function () {
                    this._watchStateChanges();
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatDatepickerToggle.prototype._open = function (event) {
                    if (this.datepicker && !this.disabled) {
                        this.datepicker.open();
                        event.stopPropagation();
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatDatepickerToggle.prototype._watchStateChanges = function () {
                    var _this = this;
                    /** @type {?} */
                    var datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])();
                    /** @type {?} */
                    var inputDisabled = this.datepicker && this.datepicker._datepickerInput ?
                        this.datepicker._datepickerInput._disabledChange : Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])();
                    /** @type {?} */
                    var datepickerToggled = this.datepicker ?
                        Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["merge"])(this.datepicker.openedStream, this.datepicker.closedStream) :
                        Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])();
                    this._stateChanges.unsubscribe();
                    this._stateChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["merge"])(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(( /**
                     * @return {?}
                     */function () { return _this._changeDetectorRef.markForCheck(); }));
                };
                return MatDatepickerToggle;
            }());
            MatDatepickerToggle.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-datepicker-toggle',
                            template: "<button #button mat-icon-button type=\"button\" [attr.aria-haspopup]=\"datepicker ? 'dialog' : null\" [attr.aria-label]=\"_intl.openCalendarLabel\" [attr.tabindex]=\"disabled ? -1 : tabIndex\" [disabled]=\"disabled\" [disableRipple]=\"disableRipple\" (click)=\"_open($event)\"><svg *ngIf=\"!_customIcon\" class=\"mat-datepicker-toggle-default-icon\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" fill=\"currentColor\" focusable=\"false\"><path d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/></svg><ng-content select=\"[matDatepickerToggleIcon]\"></ng-content></button>",
                            styles: [".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}"],
                            host: {
                                'class': 'mat-datepicker-toggle',
                                // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the
                                // consumer may have provided, while still being able to receive focus.
                                '[attr.tabindex]': '-1',
                                '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',
                                '[class.mat-accent]': 'datepicker && datepicker.color === "accent"',
                                '[class.mat-warn]': 'datepicker && datepicker.color === "warn"',
                                '(focus)': '_button.focus()',
                            },
                            exportAs: 'matDatepickerToggle',
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatDatepickerToggle.ctorParameters = function () { return [
                { type: MatDatepickerIntl },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"], args: ['tabindex',] }] }
            ]; };
            MatDatepickerToggle.propDecorators = {
                datepicker: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['for',] }],
                tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                disableRipple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                _customIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatDatepickerToggleIcon, { static: false },] }],
                _button: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['button', { static: false },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatDatepickerModule = /** @class */ (function () {
                function MatDatepickerModule() {
                }
                return MatDatepickerModule;
            }());
            MatDatepickerModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_10__["CommonModule"],
                                _angular_material_button__WEBPACK_IMPORTED_MODULE_15__["MatButtonModule"],
                                _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MatDialogModule"],
                                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["OverlayModule"],
                                _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_16__["A11yModule"],
                                _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__["PortalModule"],
                            ],
                            exports: [
                                MatCalendar,
                                MatCalendarBody,
                                MatDatepicker,
                                MatDatepickerContent,
                                MatDatepickerInput,
                                MatDatepickerToggle,
                                MatDatepickerToggleIcon,
                                MatMonthView,
                                MatYearView,
                                MatMultiYearView,
                                MatCalendarHeader,
                            ],
                            declarations: [
                                MatCalendar,
                                MatCalendarBody,
                                MatDatepicker,
                                MatDatepickerContent,
                                MatDatepickerInput,
                                MatDatepickerToggle,
                                MatDatepickerToggleIcon,
                                MatMonthView,
                                MatYearView,
                                MatMultiYearView,
                                MatCalendarHeader,
                            ],
                            providers: [
                                MatDatepickerIntl,
                                MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,
                            ],
                            entryComponents: [
                                MatDatepickerContent,
                                MatCalendarHeader,
                            ]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=datepicker.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/dialog.js": 
        /*!**********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/dialog.js ***!
          \**********************************************************/
        /*! exports provided: MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogModule", function () { return MatDialogModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY_FACTORY", function () { return MAT_DIALOG_SCROLL_STRATEGY_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY", function () { return MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_DATA", function () { return MAT_DIALOG_DATA; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_DEFAULT_OPTIONS", function () { return MAT_DIALOG_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY", function () { return MAT_DIALOG_SCROLL_STRATEGY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY_PROVIDER", function () { return MAT_DIALOG_SCROLL_STRATEGY_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialog", function () { return MatDialog; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwMatDialogContentAlreadyAttachedError", function () { return throwMatDialogContentAlreadyAttachedError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogContainer", function () { return MatDialogContainer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogClose", function () { return MatDialogClose; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogTitle", function () { return MatDialogTitle; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogContent", function () { return MatDialogContent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogActions", function () { return MatDialogActions; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogConfig", function () { return MatDialogConfig; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogRef", function () { return MatDialogRef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matDialogAnimations", function () { return matDialogAnimations; });
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Configuration for opening a modal dialog with the MatDialog service.
             * @template D
             */
            var MatDialogConfig = /** @class */ (function () {
                function MatDialogConfig() {
                    /**
                     * The ARIA role of the dialog element.
                     */
                    this.role = 'dialog';
                    /**
                     * Custom class for the overlay pane.
                     */
                    this.panelClass = '';
                    /**
                     * Whether the dialog has a backdrop.
                     */
                    this.hasBackdrop = true;
                    /**
                     * Custom class for the backdrop.
                     */
                    this.backdropClass = '';
                    /**
                     * Whether the user can use escape or clicking on the backdrop to close the modal.
                     */
                    this.disableClose = false;
                    /**
                     * Width of the dialog.
                     */
                    this.width = '';
                    /**
                     * Height of the dialog.
                     */
                    this.height = '';
                    /**
                     * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.
                     */
                    this.maxWidth = '80vw';
                    /**
                     * Data being injected into the child component.
                     */
                    this.data = null;
                    /**
                     * ID of the element that describes the dialog.
                     */
                    this.ariaDescribedBy = null;
                    /**
                     * ID of the element that labels the dialog.
                     */
                    this.ariaLabelledBy = null;
                    /**
                     * Aria label to assign to the dialog element.
                     */
                    this.ariaLabel = null;
                    /**
                     * Whether the dialog should focus the first focusable element on open.
                     */
                    this.autoFocus = true;
                    /**
                     * Whether the dialog should restore focus to the
                     * previously-focused element, after it's closed.
                     */
                    this.restoreFocus = true;
                    /**
                     * Whether the dialog should close when the user goes backwards/forwards in history.
                     * Note that this usually doesn't include clicking on links (unless the user is using
                     * the `HashLocationStrategy`).
                     */
                    this.closeOnNavigation = true;
                    // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.
                }
                return MatDialogConfig;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var animationBody = [
                // Note: The `enter` animation transitions to `transform: none`, because for some reason
                // specifying the transform explicitly, causes IE both to blur the dialog content and
                // decimate the animation performance. Leaving it as `none` solves both issues.
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('void, exit', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 0, transform: 'scale(0.7)' })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ transform: 'none' })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('150ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ transform: 'none', opacity: 1 }))),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => void, * => exit', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 0 }))),
            ];
            /**
             * Animations used by MatDialog.
             * \@docs-private
             * @type {?}
             */
            var matDialogAnimations = {
                /**
                 * Animation that is applied on the dialog container by defalt.
                 */
                dialogContainer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('dialogContainer', animationBody),
                /**
                 * @deprecated \@breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead.
                 */
                slideDialog: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('slideDialog', animationBody)
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Throws an exception for the case when a ComponentPortal is
             * attached to a DomPortalOutlet without an origin.
             * \@docs-private
             * @return {?}
             */
            function throwMatDialogContentAlreadyAttachedError() {
                throw Error('Attempting to attach dialog content after content is already attached');
            }
            /**
             * Internal component that wraps user-provided dialog content.
             * Animation is based on https://material.io/guidelines/motion/choreography.html.
             * \@docs-private
             */
            var MatDialogContainer = /** @class */ (function (_super) {
                __extends(MatDialogContainer, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} _focusTrapFactory
                 * @param {?} _changeDetectorRef
                 * @param {?} _document
                 * @param {?} _config
                 */
                function MatDialogContainer(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {
                    var _this = _super.call(this) || this;
                    _this._elementRef = _elementRef;
                    _this._focusTrapFactory = _focusTrapFactory;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._document = _document;
                    _this._config = _config;
                    /**
                     * Element that was focused before the dialog was opened. Save this to restore upon close.
                     */
                    _this._elementFocusedBeforeDialogWasOpened = null;
                    /**
                     * State of the dialog animation.
                     */
                    _this._state = 'enter';
                    /**
                     * Emits when an animation state changes.
                     */
                    _this._animationStateChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    _this._ariaLabelledBy = _config.ariaLabelledBy || null;
                    return _this;
                }
                /**
                 * Attach a ComponentPortal as content to this dialog container.
                 * @template T
                 * @param {?} portal Portal to be attached as the dialog content.
                 * @return {?}
                 */
                MatDialogContainer.prototype.attachComponentPortal = function (portal) {
                    if (this._portalOutlet.hasAttached()) {
                        throwMatDialogContentAlreadyAttachedError();
                    }
                    this._savePreviouslyFocusedElement();
                    return this._portalOutlet.attachComponentPortal(portal);
                };
                /**
                 * Attach a TemplatePortal as content to this dialog container.
                 * @template C
                 * @param {?} portal Portal to be attached as the dialog content.
                 * @return {?}
                 */
                MatDialogContainer.prototype.attachTemplatePortal = function (portal) {
                    if (this._portalOutlet.hasAttached()) {
                        throwMatDialogContentAlreadyAttachedError();
                    }
                    this._savePreviouslyFocusedElement();
                    return this._portalOutlet.attachTemplatePortal(portal);
                };
                /**
                 * Moves the focus inside the focus trap.
                 * @private
                 * @return {?}
                 */
                MatDialogContainer.prototype._trapFocus = function () {
                    /** @type {?} */
                    var element = this._elementRef.nativeElement;
                    if (!this._focusTrap) {
                        this._focusTrap = this._focusTrapFactory.create(element);
                    }
                    // If we were to attempt to focus immediately, then the content of the dialog would not yet be
                    // ready in instances where change detection has to run first. To deal with this, we simply
                    // wait for the microtask queue to be empty.
                    if (this._config.autoFocus) {
                        this._focusTrap.focusInitialElementWhenReady();
                    }
                    else {
                        /** @type {?} */
                        var activeElement = this._document.activeElement;
                        // Otherwise ensure that focus is on the dialog container. It's possible that a different
                        // component tried to move focus while the open animation was running. See:
                        // https://github.com/angular/components/issues/16215. Note that we only want to do this
                        // if the focus isn't inside the dialog already, because it's possible that the consumer
                        // turned off `autoFocus` in order to move focus themselves.
                        if (activeElement !== element && !element.contains(activeElement)) {
                            element.focus();
                        }
                    }
                };
                /**
                 * Restores focus to the element that was focused before the dialog opened.
                 * @private
                 * @return {?}
                 */
                MatDialogContainer.prototype._restoreFocus = function () {
                    /** @type {?} */
                    var toFocus = this._elementFocusedBeforeDialogWasOpened;
                    // We need the extra check, because IE can set the `activeElement` to null in some cases.
                    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {
                        toFocus.focus();
                    }
                    if (this._focusTrap) {
                        this._focusTrap.destroy();
                    }
                };
                /**
                 * Saves a reference to the element that was focused before the dialog was opened.
                 * @private
                 * @return {?}
                 */
                MatDialogContainer.prototype._savePreviouslyFocusedElement = function () {
                    var _this = this;
                    if (this._document) {
                        this._elementFocusedBeforeDialogWasOpened = ( /** @type {?} */(this._document.activeElement));
                        // Note that there is no focus method when rendering on the server.
                        if (this._elementRef.nativeElement.focus) {
                            // Move focus onto the dialog immediately in order to prevent the user from accidentally
                            // opening multiple dialogs at the same time. Needs to be async, because the element
                            // may not be focusable immediately.
                            Promise.resolve().then(( /**
                             * @return {?}
                             */function () { return _this._elementRef.nativeElement.focus(); }));
                        }
                    }
                };
                /**
                 * Callback, invoked whenever an animation on the host completes.
                 * @param {?} event
                 * @return {?}
                 */
                MatDialogContainer.prototype._onAnimationDone = function (event) {
                    if (event.toState === 'enter') {
                        this._trapFocus();
                    }
                    else if (event.toState === 'exit') {
                        this._restoreFocus();
                    }
                    this._animationStateChanged.emit(event);
                };
                /**
                 * Callback, invoked when an animation on the host starts.
                 * @param {?} event
                 * @return {?}
                 */
                MatDialogContainer.prototype._onAnimationStart = function (event) {
                    this._animationStateChanged.emit(event);
                };
                /**
                 * Starts the dialog exit animation.
                 * @return {?}
                 */
                MatDialogContainer.prototype._startExitAnimation = function () {
                    this._state = 'exit';
                    // Mark the container for check so it can react if the
                    // view container is using OnPush change detection.
                    this._changeDetectorRef.markForCheck();
                };
                return MatDialogContainer;
            }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["BasePortalOutlet"]));
            MatDialogContainer.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'mat-dialog-container',
                            template: "<ng-template cdkPortalOutlet></ng-template>",
                            styles: [".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                            animations: [matDialogAnimations.dialogContainer],
                            host: {
                                'class': 'mat-dialog-container',
                                'tabindex': '-1',
                                'aria-modal': 'true',
                                '[attr.id]': '_id',
                                '[attr.role]': '_config.role',
                                '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',
                                '[attr.aria-label]': '_config.ariaLabel',
                                '[attr.aria-describedby]': '_config.ariaDescribedBy || null',
                                '[@dialogContainer]': '_state',
                                '(@dialogContainer.start)': '_onAnimationStart($event)',
                                '(@dialogContainer.done)': '_onAnimationDone($event)',
                            },
                        },] },
            ];
            /** @nocollapse */
            MatDialogContainer.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__["FocusTrapFactory"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] },
                { type: MatDialogConfig }
            ]; };
            MatDialogContainer.propDecorators = {
                _portalOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["CdkPortalOutlet"], { static: true },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // TODO(jelbourn): resizing
            // Counter for unique dialog ids.
            /** @type {?} */
            var uniqueId = 0;
            /**
             * Reference to a dialog opened via the MatDialog service.
             * @template T, R
             */
            var MatDialogRef = /** @class */ (function () {
                /**
                 * @param {?} _overlayRef
                 * @param {?} _containerInstance
                 * @param {?=} _location
                 * @param {?=} id
                 */
                function MatDialogRef(_overlayRef, _containerInstance, 
                // @breaking-change 8.0.0 `_location` parameter to be removed.
                _location, id) {
                    var _this = this;
                    if (id === void 0) { id = "mat-dialog-" + uniqueId++; }
                    this._overlayRef = _overlayRef;
                    this._containerInstance = _containerInstance;
                    this.id = id;
                    /**
                     * Whether the user is allowed to close the dialog.
                     */
                    this.disableClose = this._containerInstance._config.disableClose;
                    /**
                     * Subject for notifying the user that the dialog has finished opening.
                     */
                    this._afterOpened = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
                    /**
                     * Subject for notifying the user that the dialog has finished closing.
                     */
                    this._afterClosed = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
                    /**
                     * Subject for notifying the user that the dialog has started closing.
                     */
                    this._beforeClosed = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
                    /**
                     * Current state of the dialog.
                     */
                    this._state = 0 /* OPEN */;
                    // Pass the id along to the container.
                    _containerInstance._id = id;
                    // Emit when opening animation completes
                    _containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["filter"])(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) { return event.phaseName === 'done' && event.toState === 'enter'; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["take"])(1))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this._afterOpened.next();
                        _this._afterOpened.complete();
                    }));
                    // Dispose overlay when closing animation is complete
                    _containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["filter"])(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) { return event.phaseName === 'done' && event.toState === 'exit'; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["take"])(1)).subscribe(( /**
                     * @return {?}
                     */function () {
                        clearTimeout(_this._closeFallbackTimeout);
                        _this._overlayRef.dispose();
                    }));
                    _overlayRef.detachments().subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._beforeClosed.next(_this._result);
                        _this._beforeClosed.complete();
                        _this._afterClosed.next(_this._result);
                        _this._afterClosed.complete();
                        _this.componentInstance = ( /** @type {?} */(null));
                        _this._overlayRef.dispose();
                    }));
                    _overlayRef.keydownEvents()
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["filter"])(( /**
                 * @param {?} event
                 * @return {?}
                 */function (/**
                 * @param {?} event
                 * @return {?}
                 */ event) {
                        return event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["ESCAPE"] && !_this.disableClose && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["hasModifierKey"])(event);
                    })))
                        .subscribe(( /**
                 * @param {?} event
                 * @return {?}
                 */function (/**
                 * @param {?} event
                 * @return {?}
                 */ event) {
                        event.preventDefault();
                        _this.close();
                    }));
                }
                /**
                 * Close the dialog.
                 * @param {?=} dialogResult Optional result to return to the dialog opener.
                 * @return {?}
                 */
                MatDialogRef.prototype.close = function (dialogResult) {
                    var _this = this;
                    this._result = dialogResult;
                    // Transition the backdrop in parallel to the dialog.
                    this._containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["filter"])(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) { return event.phaseName === 'start'; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["take"])(1))
                        .subscribe(( /**
                 * @param {?} event
                 * @return {?}
                 */function (/**
                 * @param {?} event
                 * @return {?}
                 */ event) {
                        _this._beforeClosed.next(dialogResult);
                        _this._beforeClosed.complete();
                        _this._state = 2 /* CLOSED */;
                        _this._overlayRef.detachBackdrop();
                        // The logic that disposes of the overlay depends on the exit animation completing, however
                        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback
                        // timeout which will clean everything up if the animation hasn't fired within the specified
                        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the
                        // vast majority of cases the timeout will have been cleared before it has the chance to fire.
                        _this._closeFallbackTimeout = setTimeout(( /**
                         * @return {?}
                         */function () {
                            _this._overlayRef.dispose();
                        }), event.totalTime + 100);
                    }));
                    this._containerInstance._startExitAnimation();
                    this._state = 1 /* CLOSING */;
                };
                /**
                 * Gets an observable that is notified when the dialog is finished opening.
                 * @return {?}
                 */
                MatDialogRef.prototype.afterOpened = function () {
                    return this._afterOpened.asObservable();
                };
                /**
                 * Gets an observable that is notified when the dialog is finished closing.
                 * @return {?}
                 */
                MatDialogRef.prototype.afterClosed = function () {
                    return this._afterClosed.asObservable();
                };
                /**
                 * Gets an observable that is notified when the dialog has started closing.
                 * @return {?}
                 */
                MatDialogRef.prototype.beforeClosed = function () {
                    return this._beforeClosed.asObservable();
                };
                /**
                 * Gets an observable that emits when the overlay's backdrop has been clicked.
                 * @return {?}
                 */
                MatDialogRef.prototype.backdropClick = function () {
                    return this._overlayRef.backdropClick();
                };
                /**
                 * Gets an observable that emits when keydown events are targeted on the overlay.
                 * @return {?}
                 */
                MatDialogRef.prototype.keydownEvents = function () {
                    return this._overlayRef.keydownEvents();
                };
                /**
                 * Updates the dialog's position.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} position New dialog position.
                 * @return {THIS}
                 */
                MatDialogRef.prototype.updatePosition = function (position) {
                    /** @type {?} */
                    var strategy = ( /** @type {?} */(this))._getPositionStrategy();
                    if (position && (position.left || position.right)) {
                        position.left ? strategy.left(position.left) : strategy.right(position.right);
                    }
                    else {
                        strategy.centerHorizontally();
                    }
                    if (position && (position.top || position.bottom)) {
                        position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);
                    }
                    else {
                        strategy.centerVertically();
                    }
                    ( /** @type {?} */(this))._overlayRef.updatePosition();
                    return ( /** @type {?} */(this));
                };
                /**
                 * Updates the dialog's width and height.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} width New width of the dialog.
                 * @param {?=} height New height of the dialog.
                 * @return {THIS}
                 */
                MatDialogRef.prototype.updateSize = function (width, height) {
                    if (width === void 0) { width = ''; }
                    if (height === void 0) { height = ''; }
                    ( /** @type {?} */(this))._getPositionStrategy().width(width).height(height);
                    ( /** @type {?} */(this))._overlayRef.updatePosition();
                    return ( /** @type {?} */(this));
                };
                /**
                 * Add a CSS class or an array of classes to the overlay pane.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} classes
                 * @return {THIS}
                 */
                MatDialogRef.prototype.addPanelClass = function (classes) {
                    ( /** @type {?} */(this))._overlayRef.addPanelClass(classes);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Remove a CSS class or an array of classes from the overlay pane.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} classes
                 * @return {THIS}
                 */
                MatDialogRef.prototype.removePanelClass = function (classes) {
                    ( /** @type {?} */(this))._overlayRef.removePanelClass(classes);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Gets an observable that is notified when the dialog is finished opening.
                 * @deprecated Use `afterOpened` instead.
                 * \@breaking-change 8.0.0
                 * @return {?}
                 */
                MatDialogRef.prototype.afterOpen = function () {
                    return this.afterOpened();
                };
                /**
                 * Gets an observable that is notified when the dialog has started closing.
                 * @deprecated Use `beforeClosed` instead.
                 * \@breaking-change 8.0.0
                 * @return {?}
                 */
                MatDialogRef.prototype.beforeClose = function () {
                    return this.beforeClosed();
                };
                /**
                 * Gets the current state of the dialog's lifecycle.
                 * @return {?}
                 */
                MatDialogRef.prototype.getState = function () {
                    return this._state;
                };
                /**
                 * Fetches the position strategy object from the overlay ref.
                 * @private
                 * @return {?}
                 */
                MatDialogRef.prototype._getPositionStrategy = function () {
                    return ( /** @type {?} */(this._overlayRef.getConfig().positionStrategy));
                };
                return MatDialogRef;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used to access the data that was passed in to a dialog.
             * @type {?}
             */
            var MAT_DIALOG_DATA = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('MatDialogData');
            /**
             * Injection token that can be used to specify default dialog options.
             * @type {?}
             */
            var MAT_DIALOG_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mat-dialog-default-options');
            /**
             * Injection token that determines the scroll handling while the dialog is open.
             * @type {?}
             */
            var MAT_DIALOG_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mat-dialog-scroll-strategy');
            /**
             * \@docs-private
             * @param {?} overlay
             * @return {?}
             */
            function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {
                return ( /**
                 * @return {?}
                 */function () { return overlay.scrollStrategies.block(); });
            }
            /**
             * \@docs-private
             * @param {?} overlay
             * @return {?}
             */
            function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
                return ( /**
                 * @return {?}
                 */function () { return overlay.scrollStrategies.block(); });
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {
                provide: MAT_DIALOG_SCROLL_STRATEGY,
                deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["Overlay"]],
                useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,
            };
            /**
             * Service to open Material Design modal dialogs.
             */
            var MatDialog = /** @class */ (function () {
                /**
                 * @param {?} _overlay
                 * @param {?} _injector
                 * @param {?} _location
                 * @param {?} _defaultOptions
                 * @param {?} scrollStrategy
                 * @param {?} _parentDialog
                 * @param {?} _overlayContainer
                 */
                function MatDialog(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {
                    var _this = this;
                    this._overlay = _overlay;
                    this._injector = _injector;
                    this._location = _location;
                    this._defaultOptions = _defaultOptions;
                    this._parentDialog = _parentDialog;
                    this._overlayContainer = _overlayContainer;
                    this._openDialogsAtThisLevel = [];
                    this._afterAllClosedAtThisLevel = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
                    this._afterOpenedAtThisLevel = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
                    this._ariaHiddenElements = new Map();
                    // TODO (jelbourn): tighten the typing right-hand side of this expression.
                    /**
                     * Stream that emits when all open dialog have finished closing.
                     * Will emit on subscribe if there are no open dialogs to begin with.
                     */
                    this.afterAllClosed = ( /** @type {?} */(Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["defer"])(( /**
                     * @return {?}
                     */function () { return _this.openDialogs.length ?
                        _this._afterAllClosed :
                        _this._afterAllClosed.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["startWith"])(undefined)); }))));
                    this._scrollStrategy = scrollStrategy;
                }
                Object.defineProperty(MatDialog.prototype, "openDialogs", {
                    /**
                     * Keeps track of the currently-open dialogs.
                     * @return {?}
                     */
                    get: function () {
                        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDialog.prototype, "afterOpened", {
                    /**
                     * Stream that emits when a dialog has been opened.
                     * @return {?}
                     */
                    get: function () {
                        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDialog.prototype, "afterOpen", {
                    /**
                     * Stream that emits when a dialog has been opened.
                     * @deprecated Use `afterOpened` instead.
                     * \@breaking-change 8.0.0
                     * @return {?}
                     */
                    get: function () {
                        return this.afterOpened;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDialog.prototype, "_afterAllClosed", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var parent = this._parentDialog;
                        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Opens a modal dialog containing the given component.
                 * @template T, D, R
                 * @param {?} componentOrTemplateRef Type of the component to load into the dialog,
                 *     or a TemplateRef to instantiate as the dialog content.
                 * @param {?=} config Extra configuration options.
                 * @return {?} Reference to the newly-opened dialog.
                 */
                MatDialog.prototype.open = function (componentOrTemplateRef, config) {
                    var _this = this;
                    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());
                    if (config.id && this.getDialogById(config.id)) {
                        throw Error("Dialog with id \"" + config.id + "\" exists already. The dialog id must be unique.");
                    }
                    /** @type {?} */
                    var overlayRef = this._createOverlay(config);
                    /** @type {?} */
                    var dialogContainer = this._attachDialogContainer(overlayRef, config);
                    /** @type {?} */
                    var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);
                    // If this is the first dialog that we're opening, hide all the non-overlay content.
                    if (!this.openDialogs.length) {
                        this._hideNonDialogContentFromAssistiveTechnology();
                    }
                    this.openDialogs.push(dialogRef);
                    dialogRef.afterClosed().subscribe(( /**
                     * @return {?}
                     */function () { return _this._removeOpenDialog(dialogRef); }));
                    this.afterOpened.next(dialogRef);
                    return dialogRef;
                };
                /**
                 * Closes all of the currently-open dialogs.
                 * @return {?}
                 */
                MatDialog.prototype.closeAll = function () {
                    this._closeDialogs(this.openDialogs);
                };
                /**
                 * Finds an open dialog by its id.
                 * @param {?} id ID to use when looking up the dialog.
                 * @return {?}
                 */
                MatDialog.prototype.getDialogById = function (id) {
                    return this.openDialogs.find(( /**
                     * @param {?} dialog
                     * @return {?}
                     */function (/**
                     * @param {?} dialog
                     * @return {?}
                     */ dialog) { return dialog.id === id; }));
                };
                /**
                 * @return {?}
                 */
                MatDialog.prototype.ngOnDestroy = function () {
                    // Only close the dialogs at this level on destroy
                    // since the parent service may still be active.
                    this._closeDialogs(this._openDialogsAtThisLevel);
                    this._afterAllClosedAtThisLevel.complete();
                    this._afterOpenedAtThisLevel.complete();
                };
                /**
                 * Creates the overlay into which the dialog will be loaded.
                 * @private
                 * @param {?} config The dialog configuration.
                 * @return {?} A promise resolving to the OverlayRef for the created overlay.
                 */
                MatDialog.prototype._createOverlay = function (config) {
                    /** @type {?} */
                    var overlayConfig = this._getOverlayConfig(config);
                    return this._overlay.create(overlayConfig);
                };
                /**
                 * Creates an overlay config from a dialog config.
                 * @private
                 * @param {?} dialogConfig The dialog configuration.
                 * @return {?} The overlay configuration.
                 */
                MatDialog.prototype._getOverlayConfig = function (dialogConfig) {
                    /** @type {?} */
                    var state$$1 = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["OverlayConfig"]({
                        positionStrategy: this._overlay.position().global(),
                        scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),
                        panelClass: dialogConfig.panelClass,
                        hasBackdrop: dialogConfig.hasBackdrop,
                        direction: dialogConfig.direction,
                        minWidth: dialogConfig.minWidth,
                        minHeight: dialogConfig.minHeight,
                        maxWidth: dialogConfig.maxWidth,
                        maxHeight: dialogConfig.maxHeight,
                        disposeOnNavigation: dialogConfig.closeOnNavigation
                    });
                    if (dialogConfig.backdropClass) {
                        state$$1.backdropClass = dialogConfig.backdropClass;
                    }
                    return state$$1;
                };
                /**
                 * Attaches an MatDialogContainer to a dialog's already-created overlay.
                 * @private
                 * @param {?} overlay Reference to the dialog's underlying overlay.
                 * @param {?} config The dialog configuration.
                 * @return {?} A promise resolving to a ComponentRef for the attached container.
                 */
                MatDialog.prototype._attachDialogContainer = function (overlay, config) {
                    /** @type {?} */
                    var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
                    /** @type {?} */
                    var injector = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["PortalInjector"](userInjector || this._injector, new WeakMap([
                        [MatDialogConfig, config]
                    ]));
                    /** @type {?} */
                    var containerPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["ComponentPortal"](MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);
                    /** @type {?} */
                    var containerRef = overlay.attach(containerPortal);
                    return containerRef.instance;
                };
                /**
                 * Attaches the user-provided component to the already-created MatDialogContainer.
                 * @private
                 * @template T, R
                 * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,
                 *     or a TemplateRef to instantiate as the content.
                 * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.
                 * @param {?} overlayRef Reference to the overlay in which the dialog resides.
                 * @param {?} config The dialog configuration.
                 * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.
                 */
                MatDialog.prototype._attachDialogContent = function (componentOrTemplateRef, dialogContainer, overlayRef, config) {
                    // Create a reference to the dialog we're creating in order to give the user a handle
                    // to modify and close it.
                    /** @type {?} */
                    var dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id);
                    // When the dialog backdrop is clicked, we want to close it.
                    if (config.hasBackdrop) {
                        overlayRef.backdropClick().subscribe(( /**
                         * @return {?}
                         */function () {
                            if (!dialogRef.disableClose) {
                                dialogRef.close();
                            }
                        }));
                    }
                    if (componentOrTemplateRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]) {
                        dialogContainer.attachTemplatePortal(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["TemplatePortal"](componentOrTemplateRef, ( /** @type {?} */(null)), ( /** @type {?} */({ $implicit: config.data, dialogRef: dialogRef }))));
                    }
                    else {
                        /** @type {?} */
                        var injector = this._createInjector(config, dialogRef, dialogContainer);
                        /** @type {?} */
                        var contentRef = dialogContainer.attachComponentPortal(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["ComponentPortal"](componentOrTemplateRef, undefined, injector));
                        dialogRef.componentInstance = contentRef.instance;
                    }
                    dialogRef
                        .updateSize(config.width, config.height)
                        .updatePosition(config.position);
                    return dialogRef;
                };
                /**
                 * Creates a custom injector to be used inside the dialog. This allows a component loaded inside
                 * of a dialog to close itself and, optionally, to return a value.
                 * @private
                 * @template T
                 * @param {?} config Config object that is used to construct the dialog.
                 * @param {?} dialogRef Reference to the dialog.
                 * @param {?} dialogContainer
                 * @return {?} The custom injector that can be used inside the dialog.
                 */
                MatDialog.prototype._createInjector = function (config, dialogRef, dialogContainer) {
                    /** @type {?} */
                    var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
                    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's
                    // content are created out of the same ViewContainerRef and as such, are siblings for injector
                    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly
                    // added to the injection tokens.
                    /** @type {?} */
                    var injectionTokens = new WeakMap([
                        [MatDialogContainer, dialogContainer],
                        [MAT_DIALOG_DATA, config.data],
                        [MatDialogRef, dialogRef]
                    ]);
                    if (config.direction &&
                        (!userInjector || !userInjector.get(_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__["Directionality"], null))) {
                        injectionTokens.set(_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__["Directionality"], {
                            value: config.direction,
                            change: Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])()
                        });
                    }
                    return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["PortalInjector"](userInjector || this._injector, injectionTokens);
                };
                /**
                 * Removes a dialog from the array of open dialogs.
                 * @private
                 * @param {?} dialogRef Dialog to be removed.
                 * @return {?}
                 */
                MatDialog.prototype._removeOpenDialog = function (dialogRef) {
                    /** @type {?} */
                    var index = this.openDialogs.indexOf(dialogRef);
                    if (index > -1) {
                        this.openDialogs.splice(index, 1);
                        // If all the dialogs were closed, remove/restore the `aria-hidden`
                        // to a the siblings and emit to the `afterAllClosed` stream.
                        if (!this.openDialogs.length) {
                            this._ariaHiddenElements.forEach(( /**
                             * @param {?} previousValue
                             * @param {?} element
                             * @return {?}
                             */function (previousValue, element) {
                                if (previousValue) {
                                    element.setAttribute('aria-hidden', previousValue);
                                }
                                else {
                                    element.removeAttribute('aria-hidden');
                                }
                            }));
                            this._ariaHiddenElements.clear();
                            this._afterAllClosed.next();
                        }
                    }
                };
                /**
                 * Hides all of the content that isn't an overlay from assistive technology.
                 * @private
                 * @return {?}
                 */
                MatDialog.prototype._hideNonDialogContentFromAssistiveTechnology = function () {
                    /** @type {?} */
                    var overlayContainer = this._overlayContainer.getContainerElement();
                    // Ensure that the overlay container is attached to the DOM.
                    if (overlayContainer.parentElement) {
                        /** @type {?} */
                        var siblings = overlayContainer.parentElement.children;
                        for (var i = siblings.length - 1; i > -1; i--) {
                            /** @type {?} */
                            var sibling = siblings[i];
                            if (sibling !== overlayContainer &&
                                sibling.nodeName !== 'SCRIPT' &&
                                sibling.nodeName !== 'STYLE' &&
                                !sibling.hasAttribute('aria-live')) {
                                this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));
                                sibling.setAttribute('aria-hidden', 'true');
                            }
                        }
                    }
                };
                /**
                 * Closes all of the dialogs in an array.
                 * @private
                 * @param {?} dialogs
                 * @return {?}
                 */
                MatDialog.prototype._closeDialogs = function (dialogs) {
                    /** @type {?} */
                    var i = dialogs.length;
                    while (i--) {
                        // The `_openDialogs` property isn't updated after close until the rxjs subscription
                        // runs on the next microtask, in addition to modifying the array as we're going
                        // through it. We loop through all of them and call close without assuming that
                        // they'll be removed from the list instantaneously.
                        dialogs[i].close();
                    }
                };
                return MatDialog;
            }());
            MatDialog.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] },
            ];
            /** @nocollapse */
            MatDialog.ctorParameters = function () { return [
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["Overlay"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"] },
                { type: _angular_common__WEBPACK_IMPORTED_MODULE_2__["Location"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
                { type: MatDialogConfig, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },
                { type: MatDialog, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"] }] },
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["OverlayContainer"] }
            ]; };
            /**
             * Applies default options to the dialog config.
             * @param {?=} config Config to be modified.
             * @param {?=} defaultOptions Default options provided.
             * @return {?} The new configuration object.
             */
            function _applyConfigDefaults(config, defaultOptions) {
                return Object.assign({}, defaultOptions, config);
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Counter used to generate unique IDs for dialog elements.
             * @type {?}
             */
            var dialogElementUid = 0;
            /**
             * Button that will close the current dialog.
             */
            var MatDialogClose = /** @class */ (function () {
                /**
                 * @param {?} dialogRef
                 * @param {?} _elementRef
                 * @param {?} _dialog
                 */
                function MatDialogClose(dialogRef, _elementRef, _dialog) {
                    this.dialogRef = dialogRef;
                    this._elementRef = _elementRef;
                    this._dialog = _dialog;
                    /**
                     * Default to "button" to prevents accidental form submits.
                     */
                    this.type = 'button';
                }
                /**
                 * @return {?}
                 */
                MatDialogClose.prototype.ngOnInit = function () {
                    if (!this.dialogRef) {
                        // When this directive is included in a dialog via TemplateRef (rather than being
                        // in a Component), the DialogRef isn't available via injection because embedded
                        // views cannot be given a custom injector. Instead, we look up the DialogRef by
                        // ID. This must occur in `onInit`, as the ID binding for the dialog container won't
                        // be resolved at constructor time.
                        this.dialogRef = ( /** @type {?} */(getClosestDialog(this._elementRef, this._dialog.openDialogs)));
                    }
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                MatDialogClose.prototype.ngOnChanges = function (changes) {
                    /** @type {?} */
                    var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];
                    if (proxiedChange) {
                        this.dialogResult = proxiedChange.currentValue;
                    }
                };
                return MatDialogClose;
            }());
            MatDialogClose.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[mat-dialog-close], [matDialogClose]',
                            exportAs: 'matDialogClose',
                            host: {
                                '(click)': 'dialogRef.close(dialogResult)',
                                '[attr.aria-label]': 'ariaLabel || null',
                                '[attr.type]': 'type',
                            }
                        },] },
            ];
            /** @nocollapse */
            MatDialogClose.ctorParameters = function () { return [
                { type: MatDialogRef, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: MatDialog }
            ]; };
            MatDialogClose.propDecorators = {
                ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['aria-label',] }],
                type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                dialogResult: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['mat-dialog-close',] }],
                _matDialogClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matDialogClose',] }]
            };
            /**
             * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.
             */
            var MatDialogTitle = /** @class */ (function () {
                /**
                 * @param {?} _dialogRef
                 * @param {?} _elementRef
                 * @param {?} _dialog
                 */
                function MatDialogTitle(_dialogRef, _elementRef, _dialog) {
                    this._dialogRef = _dialogRef;
                    this._elementRef = _elementRef;
                    this._dialog = _dialog;
                    this.id = "mat-dialog-title-" + dialogElementUid++;
                }
                /**
                 * @return {?}
                 */
                MatDialogTitle.prototype.ngOnInit = function () {
                    var _this = this;
                    if (!this._dialogRef) {
                        this._dialogRef = ( /** @type {?} */(getClosestDialog(this._elementRef, this._dialog.openDialogs)));
                    }
                    if (this._dialogRef) {
                        Promise.resolve().then(( /**
                         * @return {?}
                         */function () {
                            /** @type {?} */
                            var container = _this._dialogRef._containerInstance;
                            if (container && !container._ariaLabelledBy) {
                                container._ariaLabelledBy = _this.id;
                            }
                        }));
                    }
                };
                return MatDialogTitle;
            }());
            MatDialogTitle.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[mat-dialog-title], [matDialogTitle]',
                            exportAs: 'matDialogTitle',
                            host: {
                                'class': 'mat-dialog-title',
                                '[id]': 'id',
                            },
                        },] },
            ];
            /** @nocollapse */
            MatDialogTitle.ctorParameters = function () { return [
                { type: MatDialogRef, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: MatDialog }
            ]; };
            MatDialogTitle.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * Scrollable content container of a dialog.
             */
            var MatDialogContent = /** @class */ (function () {
                function MatDialogContent() {
                }
                return MatDialogContent;
            }());
            MatDialogContent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]",
                            host: { 'class': 'mat-dialog-content' }
                        },] },
            ];
            /**
             * Container for the bottom action buttons in a dialog.
             * Stays fixed to the bottom when scrolling.
             */
            var MatDialogActions = /** @class */ (function () {
                function MatDialogActions() {
                }
                return MatDialogActions;
            }());
            MatDialogActions.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]",
                            host: { 'class': 'mat-dialog-actions' }
                        },] },
            ];
            /**
             * Finds the closest MatDialogRef to an element by looking at the DOM.
             * @param {?} element Element relative to which to look for a dialog.
             * @param {?} openDialogs References to the currently-open dialogs.
             * @return {?}
             */
            function getClosestDialog(element, openDialogs) {
                /** @type {?} */
                var parent = element.nativeElement.parentElement;
                while (parent && !parent.classList.contains('mat-dialog-container')) {
                    parent = parent.parentElement;
                }
                return parent ? openDialogs.find(( /**
                 * @param {?} dialog
                 * @return {?}
                 */function (/**
                 * @param {?} dialog
                 * @return {?}
                 */ dialog) { return dialog.id === ( /** @type {?} */(parent)).id; })) : null;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatDialogModule = /** @class */ (function () {
                function MatDialogModule() {
                }
                return MatDialogModule;
            }());
            MatDialogModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["OverlayModule"],
                                _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["PortalModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_10__["MatCommonModule"],
                            ],
                            exports: [
                                MatDialogContainer,
                                MatDialogClose,
                                MatDialogTitle,
                                MatDialogContent,
                                MatDialogActions,
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_10__["MatCommonModule"],
                            ],
                            declarations: [
                                MatDialogContainer,
                                MatDialogClose,
                                MatDialogTitle,
                                MatDialogActions,
                                MatDialogContent,
                            ],
                            providers: [
                                MatDialog,
                                MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,
                            ],
                            entryComponents: [MatDialogContainer],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=dialog.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/divider.js": 
        /*!***********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/divider.js ***!
          \***********************************************************/
        /*! exports provided: MatDivider, MatDividerModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDivider", function () { return MatDivider; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDividerModule", function () { return MatDividerModule; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatDivider = /** @class */ (function () {
                function MatDivider() {
                    this._vertical = false;
                    this._inset = false;
                }
                Object.defineProperty(MatDivider.prototype, "vertical", {
                    /**
                     * Whether the divider is vertically aligned.
                     * @return {?}
                     */
                    get: function () { return this._vertical; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._vertical = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDivider.prototype, "inset", {
                    /**
                     * Whether the divider is an inset divider.
                     * @return {?}
                     */
                    get: function () { return this._inset; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._inset = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                return MatDivider;
            }());
            MatDivider.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-divider',
                            host: {
                                'role': 'separator',
                                '[attr.aria-orientation]': 'vertical ? "vertical" : "horizontal"',
                                '[class.mat-divider-vertical]': 'vertical',
                                '[class.mat-divider-horizontal]': '!vertical',
                                '[class.mat-divider-inset]': 'inset',
                                'class': 'mat-divider'
                            },
                            template: '',
                            styles: [".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            MatDivider.propDecorators = {
                vertical: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                inset: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatDividerModule = /** @class */ (function () {
                function MatDividerModule() {
                }
                return MatDividerModule;
            }());
            MatDividerModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]],
                            exports: [MatDivider, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]],
                            declarations: [MatDivider],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=divider.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/expansion.js": 
        /*!*************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/expansion.js ***!
          \*************************************************************/
        /*! exports provided: MatExpansionModule, MatAccordion, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatExpansionModule", function () { return MatExpansionModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatAccordion", function () { return MatAccordion; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_ACCORDION", function () { return MAT_ACCORDION; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_EXPANSION_PANEL_DEFAULT_OPTIONS", function () { return MAT_EXPANSION_PANEL_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatExpansionPanel", function () { return MatExpansionPanel; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatExpansionPanelActionRow", function () { return MatExpansionPanelActionRow; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatExpansionPanelHeader", function () { return MatExpansionPanelHeader; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatExpansionPanelDescription", function () { return MatExpansionPanelDescription; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatExpansionPanelTitle", function () { return MatExpansionPanelTitle; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatExpansionPanelContent", function () { return MatExpansionPanelContent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXPANSION_PANEL_ANIMATION_TIMING", function () { return EXPANSION_PANEL_ANIMATION_TIMING; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matExpansionAnimations", function () { return matExpansionAnimations; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/accordion */ "./node_modules/@angular/cdk/esm2015/accordion.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Token used to provide a `MatAccordion` to `MatExpansionPanel`.
             * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.
             * @type {?}
             */
            var MAT_ACCORDION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_ACCORDION');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Time and timing curve for expansion panel animations.
             * @type {?}
             */
            var EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';
            /**
             * Animations used by the Material expansion panel.
             *
             * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()
             * causes the animation state of moved components to become `void` upon exit, and not update again
             * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state
             * of the panel is `expanded` or `collapsed` but the animation state is `void`.
             *
             * To correctly handle animating to the next state, we animate between `void` and `collapsed` which
             * are defined to have the same styles. Since angular animates from the current styles to the
             * destination state's style definition, in situations where we are moving from `void`'s styles to
             * `collapsed` this acts a noop since no style values change.
             *
             * In the case where angular's animation state is out of sync with the expansion panel's state, the
             * expansion panel being `expanded` and angular animations being `void`, the animation from the
             * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will
             * occur as expected.
             *
             * Angular Bug: https://github.com/angular/angular/issues/18847
             *
             * \@docs-private
             * @type {?}
             */
            var matExpansionAnimations = {
                /**
                 * Animation that rotates the indicator arrow.
                 */
                indicatorRotate: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["trigger"])('indicatorRotate', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('collapsed, void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({ transform: 'rotate(0deg)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({ transform: 'rotate(180deg)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["transition"])('expanded <=> collapsed, void => collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["animate"])(EXPANSION_PANEL_ANIMATION_TIMING)),
                ]),
                /**
                 * Animation that expands and collapses the panel header height.
                 */
                expansionHeaderHeight: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["trigger"])('expansionHeight', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('collapsed, void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({
                        height: '{{collapsedHeight}}',
                    }), {
                        params: { collapsedHeight: '48px' },
                    }),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({
                        height: '{{expandedHeight}}'
                    }), {
                        params: { expandedHeight: '64px' }
                    }),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["transition"])('expanded <=> collapsed, void => collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["group"])([
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["query"])('@indicatorRotate', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["animateChild"])(), { optional: true }),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["animate"])(EXPANSION_PANEL_ANIMATION_TIMING),
                    ])),
                ]),
                /**
                 * Animation that expands and collapses the panel content.
                 */
                bodyExpansion: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["trigger"])('bodyExpansion', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('collapsed, void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({ height: '0px', visibility: 'hidden' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({ height: '*', visibility: 'visible' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["transition"])('expanded <=> collapsed, void => collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["animate"])(EXPANSION_PANEL_ANIMATION_TIMING)),
                ])
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Expansion panel content that will be rendered lazily
             * after the panel is opened for the first time.
             */
            var MatExpansionPanelContent = /** @class */ (function () {
                /**
                 * @param {?} _template
                 */
                function MatExpansionPanelContent(_template) {
                    this._template = _template;
                }
                return MatExpansionPanelContent;
            }());
            MatExpansionPanelContent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'ng-template[matExpansionPanelContent]'
                        },] },
            ];
            /** @nocollapse */
            MatExpansionPanelContent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Counter for generating unique element ids.
             * @type {?}
             */
            var uniqueId = 0;
            /**
             * Injection token that can be used to configure the defalt
             * options for the expansion panel component.
             * @type {?}
             */
            var MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');
            var ɵ0 = undefined;
            /**
             * `<mat-expansion-panel>`
             *
             * This component can be used as a single element to show expandable content, or as one of
             * multiple children of an element with the MatAccordion directive attached.
             */
            var MatExpansionPanel = /** @class */ (function (_super) {
                __extends(MatExpansionPanel, _super);
                /**
                 * @param {?} accordion
                 * @param {?} _changeDetectorRef
                 * @param {?} _uniqueSelectionDispatcher
                 * @param {?} _viewContainerRef
                 * @param {?} _document
                 * @param {?} _animationMode
                 * @param {?=} defaultOptions
                 */
                function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {
                    var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;
                    _this._viewContainerRef = _viewContainerRef;
                    _this._animationMode = _animationMode;
                    _this._hideToggle = false;
                    /**
                     * An event emitted after the body's expansion animation happens.
                     */
                    _this.afterExpand = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * An event emitted after the body's collapse animation happens.
                     */
                    _this.afterCollapse = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Stream that emits for changes in `\@Input` properties.
                     */
                    _this._inputChanges = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
                    /**
                     * ID for the associated header element. Used for a11y labelling.
                     */
                    _this._headerId = "mat-expansion-panel-header-" + uniqueId++;
                    /**
                     * Stream of body animation done events.
                     */
                    _this._bodyAnimationDone = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
                    _this.accordion = accordion;
                    _this._document = _document;
                    // We need a Subject with distinctUntilChanged, because the `done` event
                    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084
                    _this._bodyAnimationDone.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["distinctUntilChanged"])(( /**
                     * @param {?} x
                     * @param {?} y
                     * @return {?}
                     */function (x, y) {
                        return x.fromState === y.fromState && x.toState === y.toState;
                    }))).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        if (event.fromState !== 'void') {
                            if (event.toState === 'expanded') {
                                _this.afterExpand.emit();
                            }
                            else if (event.toState === 'collapsed') {
                                _this.afterCollapse.emit();
                            }
                        }
                    }));
                    if (defaultOptions) {
                        _this.hideToggle = defaultOptions.hideToggle;
                    }
                    return _this;
                }
                Object.defineProperty(MatExpansionPanel.prototype, "hideToggle", {
                    /**
                     * Whether the toggle indicator should be hidden.
                     * @return {?}
                     */
                    get: function () {
                        return this._hideToggle || (this.accordion && this.accordion.hideToggle);
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._hideToggle = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatExpansionPanel.prototype, "togglePosition", {
                    /**
                     * The position of the expansion indicator.
                     * @return {?}
                     */
                    get: function () {
                        return this._togglePosition || (this.accordion && this.accordion.togglePosition);
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._togglePosition = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Determines whether the expansion panel should have spacing between it and its siblings.
                 * @return {?}
                 */
                MatExpansionPanel.prototype._hasSpacing = function () {
                    if (this.accordion) {
                        // We don't need to subscribe to the `stateChanges` of the parent accordion because each time
                        // the [displayMode] input changes, the change detection will also cover the host bindings
                        // of this expansion panel.
                        return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';
                    }
                    return false;
                };
                /**
                 * Gets the expanded state string.
                 * @return {?}
                 */
                MatExpansionPanel.prototype._getExpandedState = function () {
                    return this.expanded ? 'expanded' : 'collapsed';
                };
                /**
                 * @return {?}
                 */
                MatExpansionPanel.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    if (this._lazyContent) {
                        // Render the content as soon as the panel becomes open.
                        this.opened.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["startWith"])(( /** @type {?} */(null))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(( /**
                         * @return {?}
                         */function () { return _this.expanded && !_this._portal; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1)).subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["TemplatePortal"](_this._lazyContent._template, _this._viewContainerRef);
                        }));
                    }
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                MatExpansionPanel.prototype.ngOnChanges = function (changes) {
                    this._inputChanges.next(changes);
                };
                /**
                 * @return {?}
                 */
                MatExpansionPanel.prototype.ngOnDestroy = function () {
                    _super.prototype.ngOnDestroy.call(this);
                    this._bodyAnimationDone.complete();
                    this._inputChanges.complete();
                };
                /**
                 * Checks whether the expansion panel's content contains the currently-focused element.
                 * @return {?}
                 */
                MatExpansionPanel.prototype._containsFocus = function () {
                    if (this._body) {
                        /** @type {?} */
                        var focusedElement = this._document.activeElement;
                        /** @type {?} */
                        var bodyElement = this._body.nativeElement;
                        return focusedElement === bodyElement || bodyElement.contains(focusedElement);
                    }
                    return false;
                };
                return MatExpansionPanel;
            }(_angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_2__["CdkAccordionItem"]));
            MatExpansionPanel.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ styles: [".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(.4,0,.2,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel._mat-animation-noopable,.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base{margin-left:0;margin-right:8px}"],
                            selector: 'mat-expansion-panel',
                            exportAs: 'matExpansionPanel',
                            template: "<ng-content select=\"mat-expansion-panel-header\"></ng-content><div class=\"mat-expansion-panel-content\" role=\"region\" [@bodyExpansion]=\"_getExpandedState()\" (@bodyExpansion.done)=\"_bodyAnimationDone.next($event)\" [attr.aria-labelledby]=\"_headerId\" [id]=\"id\" #body><div class=\"mat-expansion-panel-body\"><ng-content></ng-content><ng-template [cdkPortalOutlet]=\"_portal\"></ng-template></div><ng-content select=\"mat-action-row\"></ng-content></div>",
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            inputs: ['disabled', 'expanded'],
                            outputs: ['opened', 'closed', 'expandedChange'],
                            animations: [matExpansionAnimations.bodyExpansion],
                            providers: [
                                // Provide MatAccordion as undefined to prevent nested expansion panels from registering
                                // to the same accordion.
                                { provide: MAT_ACCORDION, useValue: ɵ0 },
                            ],
                            host: {
                                'class': 'mat-expansion-panel',
                                '[class.mat-expanded]': 'expanded',
                                '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
                                '[class.mat-expansion-panel-spacing]': '_hasSpacing()',
                            }
                        },] },
            ];
            /** @nocollapse */
            MatExpansionPanel.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_ACCORDION,] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__["UniqueSelectionDispatcher"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["DOCUMENT"],] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__["ANIMATION_MODULE_TYPE"],] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            MatExpansionPanel.propDecorators = {
                hideToggle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                togglePosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                afterExpand: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                afterCollapse: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _lazyContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatExpansionPanelContent, { static: false },] }],
                _body: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['body', { static: false },] }]
            };
            var MatExpansionPanelActionRow = /** @class */ (function () {
                function MatExpansionPanelActionRow() {
                }
                return MatExpansionPanelActionRow;
            }());
            MatExpansionPanelActionRow.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-action-row',
                            host: {
                                class: 'mat-action-row'
                            }
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * `<mat-expansion-panel-header>`
             *
             * This component corresponds to the header element of an `<mat-expansion-panel>`.
             */
            var MatExpansionPanelHeader = /** @class */ (function () {
                /**
                 * @param {?} panel
                 * @param {?} _element
                 * @param {?} _focusMonitor
                 * @param {?} _changeDetectorRef
                 * @param {?=} defaultOptions
                 */
                function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions) {
                    var _this = this;
                    this.panel = panel;
                    this._element = _element;
                    this._focusMonitor = _focusMonitor;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._parentChangeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_8__["Subscription"].EMPTY;
                    /**
                     * Whether Angular animations in the panel header should be disabled.
                     */
                    this._animationsDisabled = true;
                    /** @type {?} */
                    var accordionHideToggleChange = panel.accordion ?
                        panel.accordion._stateChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(( /**
                         * @param {?} changes
                         * @return {?}
                         */function (/**
                         * @param {?} changes
                         * @return {?}
                         */ changes) { return !!(changes['hideToggle'] || changes['togglePosition']); }))) :
                        rxjs__WEBPACK_IMPORTED_MODULE_8__["EMPTY"];
                    // Since the toggle state depends on an @Input on the panel, we
                    // need to subscribe and trigger change detection manually.
                    this._parentChangeSubscription =
                        Object(rxjs__WEBPACK_IMPORTED_MODULE_8__["merge"])(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(( /**
                         * @param {?} changes
                         * @return {?}
                         */function (/**
                         * @param {?} changes
                         * @return {?}
                         */ changes) {
                            return !!(changes['hideToggle'] ||
                                changes['disabled'] ||
                                changes['togglePosition']);
                        }))))
                            .subscribe(( /**
                     * @return {?}
                     */function () { return _this._changeDetectorRef.markForCheck(); }));
                    // Avoids focus being lost if the panel contained the focused element and was closed.
                    panel.closed
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(( /**
                 * @return {?}
                 */function () { return panel._containsFocus(); })))
                        .subscribe(( /**
                 * @return {?}
                 */function () { return _focusMonitor.focusVia(_element, 'program'); }));
                    _focusMonitor.monitor(_element).subscribe(( /**
                     * @param {?} origin
                     * @return {?}
                     */function (/**
                     * @param {?} origin
                     * @return {?}
                     */ origin) {
                        if (origin && panel.accordion) {
                            panel.accordion._handleHeaderFocus(_this);
                        }
                    }));
                    if (defaultOptions) {
                        this.expandedHeight = defaultOptions.expandedHeight;
                        this.collapsedHeight = defaultOptions.collapsedHeight;
                    }
                }
                /**
                 * @return {?}
                 */
                MatExpansionPanelHeader.prototype._animationStarted = function () {
                    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is
                    // there to work around a bug in Angular (see #13088), however this introduces a different
                    // issue. The new transition will cause the header to animate in on init (see #16067), if the
                    // consumer has set a header height that is different from the default one. We work around it
                    // by disabling animations on the header and re-enabling them after the first animation has run.
                    // Note that Angular dispatches animation events even if animations are disabled. Ideally this
                    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait
                    // for https://github.com/angular/angular/issues/18847 to be resolved.
                    this._animationsDisabled = false;
                };
                Object.defineProperty(MatExpansionPanelHeader.prototype, "disabled", {
                    /**
                     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.panel.disabled;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Toggles the expanded state of the panel.
                 * @return {?}
                 */
                MatExpansionPanelHeader.prototype._toggle = function () {
                    this.panel.toggle();
                };
                /**
                 * Gets whether the panel is expanded.
                 * @return {?}
                 */
                MatExpansionPanelHeader.prototype._isExpanded = function () {
                    return this.panel.expanded;
                };
                /**
                 * Gets the expanded state string of the panel.
                 * @return {?}
                 */
                MatExpansionPanelHeader.prototype._getExpandedState = function () {
                    return this.panel._getExpandedState();
                };
                /**
                 * Gets the panel id.
                 * @return {?}
                 */
                MatExpansionPanelHeader.prototype._getPanelId = function () {
                    return this.panel.id;
                };
                /**
                 * Gets the toggle position for the header.
                 * @return {?}
                 */
                MatExpansionPanelHeader.prototype._getTogglePosition = function () {
                    return this.panel.togglePosition;
                };
                /**
                 * Gets whether the expand indicator should be shown.
                 * @return {?}
                 */
                MatExpansionPanelHeader.prototype._showToggle = function () {
                    return !this.panel.hideToggle && !this.panel.disabled;
                };
                /**
                 * Handle keydown event calling to toggle() if appropriate.
                 * @param {?} event
                 * @return {?}
                 */
                MatExpansionPanelHeader.prototype._keydown = function (event) {
                    switch (event.keyCode) {
                        // Toggle for space and enter keys.
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["SPACE"]:
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["ENTER"]:
                            if (!Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["hasModifierKey"])(event)) {
                                event.preventDefault();
                                this._toggle();
                            }
                            break;
                        default:
                            if (this.panel.accordion) {
                                this.panel.accordion._handleHeaderKeydown(event);
                            }
                            return;
                    }
                };
                /**
                 * Focuses the panel header. Implemented as a part of `FocusableOption`.
                 * \@docs-private
                 * @param {?=} origin Origin of the action that triggered the focus.
                 * @param {?=} options
                 * @return {?}
                 */
                MatExpansionPanelHeader.prototype.focus = function (origin, options) {
                    if (origin === void 0) { origin = 'program'; }
                    this._focusMonitor.focusVia(this._element, origin, options);
                };
                /**
                 * @return {?}
                 */
                MatExpansionPanelHeader.prototype.ngOnDestroy = function () {
                    this._parentChangeSubscription.unsubscribe();
                    this._focusMonitor.stopMonitoring(this._element);
                };
                return MatExpansionPanelHeader;
            }());
            MatExpansionPanelHeader.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-expansion-panel-header',
                            styles: [".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}"],
                            template: "<span class=\"mat-content\"><ng-content select=\"mat-panel-title\"></ng-content><ng-content select=\"mat-panel-description\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\" class=\"mat-expansion-indicator\"></span>",
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            animations: [
                                matExpansionAnimations.indicatorRotate,
                                matExpansionAnimations.expansionHeaderHeight
                            ],
                            host: {
                                'class': 'mat-expansion-panel-header',
                                'role': 'button',
                                '[attr.id]': 'panel._headerId',
                                '[attr.tabindex]': 'disabled ? -1 : 0',
                                '[attr.aria-controls]': '_getPanelId()',
                                '[attr.aria-expanded]': '_isExpanded()',
                                '[attr.aria-disabled]': 'panel.disabled',
                                '[class.mat-expanded]': '_isExpanded()',
                                '[class.mat-expansion-toggle-indicator-after]': "_getTogglePosition() === 'after'",
                                '[class.mat-expansion-toggle-indicator-before]': "_getTogglePosition() === 'before'",
                                '(click)': '_toggle()',
                                '(keydown)': '_keydown($event)',
                                '[@.disabled]': '_animationsDisabled',
                                '(@expansionHeight.start)': '_animationStarted()',
                                '[@expansionHeight]': "{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }",
                            },
                        },] },
            ];
            /** @nocollapse */
            MatExpansionPanelHeader.ctorParameters = function () { return [
                { type: MatExpansionPanel, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__["FocusMonitor"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            MatExpansionPanelHeader.propDecorators = {
                expandedHeight: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                collapsedHeight: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * `<mat-panel-description>`
             *
             * This directive is to be used inside of the MatExpansionPanelHeader component.
             */
            var MatExpansionPanelDescription = /** @class */ (function () {
                function MatExpansionPanelDescription() {
                }
                return MatExpansionPanelDescription;
            }());
            MatExpansionPanelDescription.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-panel-description',
                            host: {
                                class: 'mat-expansion-panel-header-description'
                            }
                        },] },
            ];
            /**
             * `<mat-panel-title>`
             *
             * This directive is to be used inside of the MatExpansionPanelHeader component.
             */
            var MatExpansionPanelTitle = /** @class */ (function () {
                function MatExpansionPanelTitle() {
                }
                return MatExpansionPanelTitle;
            }());
            MatExpansionPanelTitle.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-panel-title',
                            host: {
                                class: 'mat-expansion-panel-header-title'
                            }
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Directive for a Material Design Accordion.
             */
            var MatAccordion = /** @class */ (function (_super) {
                __extends(MatAccordion, _super);
                function MatAccordion() {
                    var _this = _super.apply(this, arguments) || this;
                    _this._hideToggle = false;
                    /**
                     * Display mode used for all expansion panels in the accordion. Currently two display
                     * modes exist:
                     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded
                     *     panel at a different elevation from the rest of the accordion.
                     *  flat - no spacing is placed around expanded panels, showing all panels at the same
                     *     elevation.
                     */
                    _this.displayMode = 'default';
                    /**
                     * The position of the expansion indicator.
                     */
                    _this.togglePosition = 'after';
                    return _this;
                }
                Object.defineProperty(MatAccordion.prototype, "hideToggle", {
                    /**
                     * Whether the expansion indicator should be hidden.
                     * @return {?}
                     */
                    get: function () { return this._hideToggle; },
                    /**
                     * @param {?} show
                     * @return {?}
                     */
                    set: function (show) { this._hideToggle = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(show); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatAccordion.prototype.ngAfterContentInit = function () {
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__["FocusKeyManager"](this._headers).withWrap();
                };
                /**
                 * Handles keyboard events coming in from the panel headers.
                 * @param {?} event
                 * @return {?}
                 */
                MatAccordion.prototype._handleHeaderKeydown = function (event) {
                    var keyCode = event.keyCode;
                    /** @type {?} */
                    var manager = this._keyManager;
                    if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["HOME"]) {
                        if (!Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["hasModifierKey"])(event)) {
                            manager.setFirstItemActive();
                            event.preventDefault();
                        }
                    }
                    else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["END"]) {
                        if (!Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["hasModifierKey"])(event)) {
                            manager.setLastItemActive();
                            event.preventDefault();
                        }
                    }
                    else {
                        this._keyManager.onKeydown(event);
                    }
                };
                /**
                 * @param {?} header
                 * @return {?}
                 */
                MatAccordion.prototype._handleHeaderFocus = function (header) {
                    this._keyManager.updateActiveItem(header);
                };
                return MatAccordion;
            }(_angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_2__["CdkAccordion"]));
            MatAccordion.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-accordion',
                            exportAs: 'matAccordion',
                            inputs: ['multi'],
                            providers: [{
                                    provide: MAT_ACCORDION,
                                    useExisting: MatAccordion
                                }],
                            host: {
                                class: 'mat-accordion'
                            }
                        },] },
            ];
            MatAccordion.propDecorators = {
                _headers: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatExpansionPanelHeader, { descendants: true },] }],
                hideToggle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                displayMode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                togglePosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatExpansionModule = /** @class */ (function () {
                function MatExpansionModule() {
                }
                return MatExpansionModule;
            }());
            MatExpansionModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_2__["CdkAccordionModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["PortalModule"]],
                            exports: [
                                MatAccordion,
                                MatExpansionPanel,
                                MatExpansionPanelActionRow,
                                MatExpansionPanelHeader,
                                MatExpansionPanelTitle,
                                MatExpansionPanelDescription,
                                MatExpansionPanelContent,
                            ],
                            declarations: [
                                MatAccordion,
                                MatExpansionPanel,
                                MatExpansionPanelActionRow,
                                MatExpansionPanelHeader,
                                MatExpansionPanelTitle,
                                MatExpansionPanelDescription,
                                MatExpansionPanelContent,
                            ],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=expansion.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/form-field.js": 
        /*!**************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/form-field.js ***!
          \**************************************************************/
        /*! exports provided: MatFormFieldModule, MatError, MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormField, MatFormFieldControl, getMatFormFieldPlaceholderConflictError, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, MatHint, MatPlaceholder, MatPrefix, MatSuffix, MatLabel, matFormFieldAnimations */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatFormFieldModule", function () { return MatFormFieldModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatError", function () { return MatError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_FORM_FIELD_DEFAULT_OPTIONS", function () { return MAT_FORM_FIELD_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatFormField", function () { return MatFormField; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatFormFieldControl", function () { return MatFormFieldControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatFormFieldPlaceholderConflictError", function () { return getMatFormFieldPlaceholderConflictError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatFormFieldDuplicatedHintError", function () { return getMatFormFieldDuplicatedHintError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatFormFieldMissingControlError", function () { return getMatFormFieldMissingControlError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatHint", function () { return MatHint; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatPlaceholder", function () { return MatPlaceholder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatPrefix", function () { return MatPrefix; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSuffix", function () { return MatSuffix; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatLabel", function () { return MatLabel; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matFormFieldAnimations", function () { return matFormFieldAnimations; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/observers */ "./node_modules/@angular/cdk/esm2015/observers.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextUniqueId = 0;
            /**
             * Single error message to be shown underneath the form field.
             */
            var MatError = /** @class */ (function () {
                function MatError() {
                    this.id = "mat-error-" + nextUniqueId++;
                }
                return MatError;
            }());
            MatError.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-error',
                            host: {
                                'class': 'mat-error',
                                'role': 'alert',
                                '[attr.id]': 'id',
                            }
                        },] },
            ];
            MatError.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Animations used by the MatFormField.
             * \@docs-private
             * @type {?}
             */
            var matFormFieldAnimations = {
                /**
                 * Animation that transitions the form field's error and hint messages.
                 */
                transitionMessages: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["trigger"])('transitionMessages', [
                    // TODO(mmalerba): Use angular animations for label animation as well.
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({ opacity: 1, transform: 'translateY(0%)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["transition"])('void => enter', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({ opacity: 0, transform: 'translateY(-100%)' }),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["animate"])('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),
                    ]),
                ])
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * An interface which allows a control to work inside of a `MatFormField`.
             * @abstract
             * @template T
             */
            var MatFormFieldControl = /** @class */ (function () {
                function MatFormFieldControl() {
                }
                return MatFormFieldControl;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             * @return {?}
             */
            function getMatFormFieldPlaceholderConflictError() {
                return Error('Placeholder attribute and child element were both specified.');
            }
            /**
             * \@docs-private
             * @param {?} align
             * @return {?}
             */
            function getMatFormFieldDuplicatedHintError(align) {
                return Error("A hint was already declared for 'align=\"" + align + "\"'.");
            }
            /**
             * \@docs-private
             * @return {?}
             */
            function getMatFormFieldMissingControlError() {
                return Error('mat-form-field must contain a MatFormFieldControl.');
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextUniqueId$1 = 0;
            /**
             * Hint text to be shown underneath the form field control.
             */
            var MatHint = /** @class */ (function () {
                function MatHint() {
                    /**
                     * Whether to align the hint label at the start or end of the line.
                     */
                    this.align = 'start';
                    /**
                     * Unique ID for the hint. Used for the aria-describedby on the form field control.
                     */
                    this.id = "mat-hint-" + nextUniqueId$1++;
                }
                return MatHint;
            }());
            MatHint.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-hint',
                            host: {
                                'class': 'mat-hint',
                                '[class.mat-right]': 'align == "end"',
                                '[attr.id]': 'id',
                                // Remove align attribute to prevent it from interfering with layout.
                                '[attr.align]': 'null',
                            }
                        },] },
            ];
            MatHint.propDecorators = {
                align: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The floating label for a `mat-form-field`.
             */
            var MatLabel = /** @class */ (function () {
                function MatLabel() {
                }
                return MatLabel;
            }());
            MatLabel.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-label'
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The placeholder text for an `MatFormField`.
             * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the
             *     placeholder.
             * \@breaking-change 8.0.0
             */
            var MatPlaceholder = /** @class */ (function () {
                function MatPlaceholder() {
                }
                return MatPlaceholder;
            }());
            MatPlaceholder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-placeholder'
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Prefix to be placed in front of the form field.
             */
            var MatPrefix = /** @class */ (function () {
                function MatPrefix() {
                }
                return MatPrefix;
            }());
            MatPrefix.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[matPrefix]',
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Suffix to be placed at the end of the form field.
             */
            var MatSuffix = /** @class */ (function () {
                function MatSuffix() {
                }
                return MatSuffix;
            }());
            MatSuffix.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[matSuffix]',
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextUniqueId$2 = 0;
            /** @type {?} */
            var floatingLabelScale = 0.75;
            /** @type {?} */
            var outlineGapPadding = 5;
            /**
             * Boilerplate for applying mixins to MatFormField.
             * \@docs-private
             */
            var MatFormFieldBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatFormFieldBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatFormFieldBase;
            }());
            /**
             * Base class to which we're applying the form field mixins.
             * \@docs-private
             * @type {?}
             */
            var _MatFormFieldMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(MatFormFieldBase, 'primary');
            /**
             * Injection token that can be used to configure the
             * default options for all form field within an app.
             * @type {?}
             */
            var MAT_FORM_FIELD_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_FORM_FIELD_DEFAULT_OPTIONS');
            /**
             * Container for form controls that applies Material Design styling and behavior.
             */
            var MatFormField = /** @class */ (function (_super) {
                __extends(MatFormField, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} _changeDetectorRef
                 * @param {?} labelOptions
                 * @param {?} _dir
                 * @param {?} _defaults
                 * @param {?} _platform
                 * @param {?} _ngZone
                 * @param {?} _animationMode
                 */
                function MatFormField(_elementRef, _changeDetectorRef, labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {
                    var _this = _super.call(this, _elementRef) || this;
                    _this._elementRef = _elementRef;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._dir = _dir;
                    _this._defaults = _defaults;
                    _this._platform = _platform;
                    _this._ngZone = _ngZone;
                    /**
                     * Whether the outline gap needs to be calculated
                     * immediately on the next change detection run.
                     */
                    _this._outlineGapCalculationNeededImmediately = false;
                    /**
                     * Whether the outline gap needs to be calculated next time the zone has stabilized.
                     */
                    _this._outlineGapCalculationNeededOnStable = false;
                    _this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
                    /**
                     * Override for the logic that disables the label animation in certain cases.
                     */
                    _this._showAlwaysAnimate = false;
                    /**
                     * State of the mat-hint and mat-error animations.
                     */
                    _this._subscriptAnimationState = '';
                    _this._hintLabel = '';
                    // Unique id for the hint label.
                    _this._hintLabelId = "mat-hint-" + nextUniqueId$2++;
                    // Unique id for the internal form field label.
                    _this._labelId = "mat-form-field-label-" + nextUniqueId$2++;
                    /* Holds the previous direction emitted by directionality service change emitter.
                         This is used in updateOutlineGap() method to update the width and position of the gap in the
                         outline. Only relevant for the outline appearance. The direction is getting updated in the
                         UI after directionality service change emission. So the outlines gaps are getting
                         updated in updateOutlineGap() method before connectionContainer child direction change
                         in UI. We may get wrong calculations. So we are storing the previous direction to get the
                         correct outline calculations*/
                    _this._previousDirection = 'ltr';
                    _this._labelOptions = labelOptions ? labelOptions : {};
                    _this.floatLabel = _this._labelOptions.float || 'auto';
                    _this._animationsEnabled = _animationMode !== 'NoopAnimations';
                    // Set the default through here so we invoke the setter on the first run.
                    _this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';
                    _this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?
                        _defaults.hideRequiredMarker : false;
                    return _this;
                }
                Object.defineProperty(MatFormField.prototype, "appearance", {
                    /**
                     * The form-field appearance style.
                     * @return {?}
                     */
                    get: function () { return this._appearance; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var oldValue = this._appearance;
                        this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';
                        if (this._appearance === 'outline' && oldValue !== value) {
                            this._outlineGapCalculationNeededOnStable = true;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatFormField.prototype, "hideRequiredMarker", {
                    /**
                     * Whether the required marker should be hidden.
                     * @return {?}
                     */
                    get: function () { return this._hideRequiredMarker; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._hideRequiredMarker = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatFormField.prototype, "_shouldAlwaysFloat", {
                    /**
                     * Whether the floating label should always float or not.
                     * @return {?}
                     */
                    get: function () {
                        return this.floatLabel === 'always' && !this._showAlwaysAnimate;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatFormField.prototype, "_canLabelFloat", {
                    /**
                     * Whether the label can float or not.
                     * @return {?}
                     */
                    get: function () { return this.floatLabel !== 'never'; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatFormField.prototype, "hintLabel", {
                    /**
                     * Text for the form field hint.
                     * @return {?}
                     */
                    get: function () { return this._hintLabel; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._hintLabel = value;
                        this._processHints();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatFormField.prototype, "floatLabel", {
                    /**
                     * Whether the label should always float, never float or float as the user types.
                     *
                     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a
                     * way to make the floating label emulate the behavior of a standard input placeholder. However
                     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy
                     * appearances the `never` option has been disabled in favor of just using the placeholder.
                     * @return {?}
                     */
                    get: function () {
                        return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._floatLabel) {
                            this._floatLabel = value || this._labelOptions.float || 'auto';
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatFormField.prototype, "_control", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        // TODO(crisbeto): we need this hacky workaround in order to support both Ivy
                        // and ViewEngine. We should clean this up once Ivy is the default renderer.
                        return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._explicitFormFieldControl = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatFormField.prototype, "_labelChild", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._labelChildNonStatic || this._labelChildStatic;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Gets an ElementRef for the element that a overlay attached to the form-field should be
                 * positioned relative to.
                 * @return {?}
                 */
                MatFormField.prototype.getConnectedOverlayOrigin = function () {
                    return this._connectionContainerRef || this._elementRef;
                };
                /**
                 * @return {?}
                 */
                MatFormField.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._validateControlChild();
                    /** @type {?} */
                    var control = this._control;
                    if (control.controlType) {
                        this._elementRef.nativeElement.classList.add("mat-form-field-type-" + control.controlType);
                    }
                    // Subscribe to changes in the child control state in order to update the form field UI.
                    control.stateChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["startWith"])(( /** @type {?} */(null)))).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._validatePlaceholders();
                        _this._syncDescribedByIds();
                        _this._changeDetectorRef.markForCheck();
                    }));
                    // Run change detection if the value changes.
                    if (control.ngControl && control.ngControl.valueChanges) {
                        control.ngControl.valueChanges
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this._destroyed))
                            .subscribe(( /**
                     * @return {?}
                     */function () { return _this._changeDetectorRef.markForCheck(); }));
                    }
                    // Note that we have to run outside of the `NgZone` explicitly,
                    // in order to avoid throwing users into an infinite loop
                    // if `zone-patch-rxjs` is included.
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(_this._destroyed)).subscribe(( /**
                         * @return {?}
                         */function () {
                            if (_this._outlineGapCalculationNeededOnStable) {
                                _this.updateOutlineGap();
                            }
                        }));
                    }));
                    // Run change detection and update the outline if the suffix or prefix changes.
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._outlineGapCalculationNeededOnStable = true;
                        _this._changeDetectorRef.markForCheck();
                    }));
                    // Re-validate when the number of hints changes.
                    this._hintChildren.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["startWith"])(null)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._processHints();
                        _this._changeDetectorRef.markForCheck();
                    }));
                    // Update the aria-described by when the number of errors changes.
                    this._errorChildren.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["startWith"])(null)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._syncDescribedByIds();
                        _this._changeDetectorRef.markForCheck();
                    }));
                    if (this._dir) {
                        this._dir.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this._destroyed)).subscribe(( /**
                         * @return {?}
                         */function () {
                            _this.updateOutlineGap();
                            _this._previousDirection = _this._dir.value;
                        }));
                    }
                };
                /**
                 * @return {?}
                 */
                MatFormField.prototype.ngAfterContentChecked = function () {
                    this._validateControlChild();
                    if (this._outlineGapCalculationNeededImmediately) {
                        this.updateOutlineGap();
                    }
                };
                /**
                 * @return {?}
                 */
                MatFormField.prototype.ngAfterViewInit = function () {
                    // Avoid animations on load.
                    this._subscriptAnimationState = 'enter';
                    this._changeDetectorRef.detectChanges();
                };
                /**
                 * @return {?}
                 */
                MatFormField.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * Determines whether a class from the NgControl should be forwarded to the host element.
                 * @param {?} prop
                 * @return {?}
                 */
                MatFormField.prototype._shouldForward = function (prop) {
                    /** @type {?} */
                    var ngControl = this._control ? this._control.ngControl : null;
                    return ngControl && ngControl[prop];
                };
                /**
                 * @return {?}
                 */
                MatFormField.prototype._hasPlaceholder = function () {
                    return !!(this._control && this._control.placeholder || this._placeholderChild);
                };
                /**
                 * @return {?}
                 */
                MatFormField.prototype._hasLabel = function () {
                    return !!this._labelChild;
                };
                /**
                 * @return {?}
                 */
                MatFormField.prototype._shouldLabelFloat = function () {
                    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);
                };
                /**
                 * @return {?}
                 */
                MatFormField.prototype._hideControlPlaceholder = function () {
                    // In the legacy appearance the placeholder is promoted to a label if no label is given.
                    return this.appearance === 'legacy' && !this._hasLabel() ||
                        this._hasLabel() && !this._shouldLabelFloat();
                };
                /**
                 * @return {?}
                 */
                MatFormField.prototype._hasFloatingLabel = function () {
                    // In the legacy appearance the placeholder is promoted to a label if no label is given.
                    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();
                };
                /**
                 * Determines whether to display hints or errors.
                 * @return {?}
                 */
                MatFormField.prototype._getDisplayedMessages = function () {
                    return (this._errorChildren && this._errorChildren.length > 0 &&
                        this._control.errorState) ? 'error' : 'hint';
                };
                /**
                 * Animates the placeholder up and locks it in position.
                 * @return {?}
                 */
                MatFormField.prototype._animateAndLockLabel = function () {
                    var _this = this;
                    if (this._hasFloatingLabel() && this._canLabelFloat) {
                        // If animations are disabled, we shouldn't go in here,
                        // because the `transitionend` will never fire.
                        if (this._animationsEnabled) {
                            this._showAlwaysAnimate = true;
                            Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["fromEvent"])(this._label.nativeElement, 'transitionend').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["take"])(1)).subscribe(( /**
                             * @return {?}
                             */function () {
                                _this._showAlwaysAnimate = false;
                            }));
                        }
                        this.floatLabel = 'always';
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * Ensure that there is only one placeholder (either `placeholder` attribute on the child control
                 * or child element with the `mat-placeholder` directive).
                 * @private
                 * @return {?}
                 */
                MatFormField.prototype._validatePlaceholders = function () {
                    if (this._control.placeholder && this._placeholderChild) {
                        throw getMatFormFieldPlaceholderConflictError();
                    }
                };
                /**
                 * Does any extra processing that is required when handling the hints.
                 * @private
                 * @return {?}
                 */
                MatFormField.prototype._processHints = function () {
                    this._validateHints();
                    this._syncDescribedByIds();
                };
                /**
                 * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the
                 * attribute being considered as `align="start"`.
                 * @private
                 * @return {?}
                 */
                MatFormField.prototype._validateHints = function () {
                    var _this = this;
                    if (this._hintChildren) {
                        /** @type {?} */
                        var startHint_1;
                        /** @type {?} */
                        var endHint_1;
                        this._hintChildren.forEach(( /**
                         * @param {?} hint
                         * @return {?}
                         */function (hint) {
                            if (hint.align === 'start') {
                                if (startHint_1 || _this.hintLabel) {
                                    throw getMatFormFieldDuplicatedHintError('start');
                                }
                                startHint_1 = hint;
                            }
                            else if (hint.align === 'end') {
                                if (endHint_1) {
                                    throw getMatFormFieldDuplicatedHintError('end');
                                }
                                endHint_1 = hint;
                            }
                        }));
                    }
                };
                /**
                 * Sets the list of element IDs that describe the child control. This allows the control to update
                 * its `aria-describedby` attribute accordingly.
                 * @private
                 * @return {?}
                 */
                MatFormField.prototype._syncDescribedByIds = function () {
                    if (this._control) {
                        /** @type {?} */
                        var ids = [];
                        if (this._getDisplayedMessages() === 'hint') {
                            /** @type {?} */
                            var startHint = this._hintChildren ?
                                this._hintChildren.find(( /**
                                 * @param {?} hint
                                 * @return {?}
                                 */function (/**
                                 * @param {?} hint
                                 * @return {?}
                                 */ hint) { return hint.align === 'start'; })) : null;
                            /** @type {?} */
                            var endHint = this._hintChildren ?
                                this._hintChildren.find(( /**
                                 * @param {?} hint
                                 * @return {?}
                                 */function (/**
                                 * @param {?} hint
                                 * @return {?}
                                 */ hint) { return hint.align === 'end'; })) : null;
                            if (startHint) {
                                ids.push(startHint.id);
                            }
                            else if (this._hintLabel) {
                                ids.push(this._hintLabelId);
                            }
                            if (endHint) {
                                ids.push(endHint.id);
                            }
                        }
                        else if (this._errorChildren) {
                            ids = this._errorChildren.map(( /**
                             * @param {?} error
                             * @return {?}
                             */function (/**
                             * @param {?} error
                             * @return {?}
                             */ error) { return error.id; }));
                        }
                        this._control.setDescribedByIds(ids);
                    }
                };
                /**
                 * Throws an error if the form field's control is missing.
                 * @protected
                 * @return {?}
                 */
                MatFormField.prototype._validateControlChild = function () {
                    if (!this._control) {
                        throw getMatFormFieldMissingControlError();
                    }
                };
                /**
                 * Updates the width and position of the gap in the outline. Only relevant for the outline
                 * appearance.
                 * @return {?}
                 */
                MatFormField.prototype.updateOutlineGap = function () {
                    /** @type {?} */
                    var labelEl = this._label ? this._label.nativeElement : null;
                    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||
                        !labelEl.textContent.trim()) {
                        return;
                    }
                    if (!this._platform.isBrowser) {
                        // getBoundingClientRect isn't available on the server.
                        return;
                    }
                    // If the element is not present in the DOM, the outline gap will need to be calculated
                    // the next time it is checked and in the DOM.
                    if (!( /** @type {?} */(document.documentElement)).contains(this._elementRef.nativeElement)) {
                        this._outlineGapCalculationNeededImmediately = true;
                        return;
                    }
                    /** @type {?} */
                    var startWidth = 0;
                    /** @type {?} */
                    var gapWidth = 0;
                    /** @type {?} */
                    var container = this._connectionContainerRef.nativeElement;
                    /** @type {?} */
                    var startEls = container.querySelectorAll('.mat-form-field-outline-start');
                    /** @type {?} */
                    var gapEls = container.querySelectorAll('.mat-form-field-outline-gap');
                    if (this._label && this._label.nativeElement.children.length) {
                        /** @type {?} */
                        var containerRect = container.getBoundingClientRect();
                        // If the container's width and height are zero, it means that the element is
                        // invisible and we can't calculate the outline gap. Mark the element as needing
                        // to be checked the next time the zone stabilizes. We can't do this immediately
                        // on the next change detection, because even if the element becomes visible,
                        // the `ClientRect` won't be reclaculated immediately. We reset the
                        // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.
                        if (containerRect.width === 0 && containerRect.height === 0) {
                            this._outlineGapCalculationNeededOnStable = true;
                            this._outlineGapCalculationNeededImmediately = false;
                            return;
                        }
                        /** @type {?} */
                        var containerStart = this._getStartEnd(containerRect);
                        /** @type {?} */
                        var labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());
                        /** @type {?} */
                        var labelWidth = 0;
                        for (var _b = 0, _c = labelEl.children; _b < _c.length; _b++) {
                            var child = _c[_b];
                            labelWidth += child.offsetWidth;
                        }
                        startWidth = labelStart - containerStart - outlineGapPadding;
                        gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;
                    }
                    for (var i = 0; i < startEls.length; i++) {
                        startEls.item(i).style.width = startWidth + "px";
                    }
                    for (var i = 0; i < gapEls.length; i++) {
                        gapEls.item(i).style.width = gapWidth + "px";
                    }
                    this._outlineGapCalculationNeededOnStable =
                        this._outlineGapCalculationNeededImmediately = false;
                };
                /**
                 * Gets the start end of the rect considering the current directionality.
                 * @private
                 * @param {?} rect
                 * @return {?}
                 */
                MatFormField.prototype._getStartEnd = function (rect) {
                    return this._previousDirection === 'rtl' ? rect.right : rect.left;
                };
                return MatFormField;
            }(_MatFormFieldMixinBase));
            MatFormField.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-form-field',
                            exportAs: 'matFormField',
                            template: "<div class=\"mat-form-field-wrapper\"><div class=\"mat-form-field-flex\" #connectionContainer (click)=\"_control.onContainerClick && _control.onContainerClick($event)\"><ng-container *ngIf=\"appearance == 'outline'\"><div class=\"mat-form-field-outline\"><div class=\"mat-form-field-outline-start\"></div><div class=\"mat-form-field-outline-gap\"></div><div class=\"mat-form-field-outline-end\"></div></div><div class=\"mat-form-field-outline mat-form-field-outline-thick\"><div class=\"mat-form-field-outline-start\"></div><div class=\"mat-form-field-outline-gap\"></div><div class=\"mat-form-field-outline-end\"></div></div></ng-container><div class=\"mat-form-field-prefix\" *ngIf=\"_prefixChildren.length\"><ng-content select=\"[matPrefix]\"></ng-content></div><div class=\"mat-form-field-infix\" #inputContainer><ng-content></ng-content><span class=\"mat-form-field-label-wrapper\"><label class=\"mat-form-field-label\" (cdkObserveContent)=\"updateOutlineGap()\" [cdkObserveContentDisabled]=\"appearance != 'outline'\" [id]=\"_labelId\" [attr.for]=\"_control.id\" [attr.aria-owns]=\"_control.id\" [class.mat-empty]=\"_control.empty && !_shouldAlwaysFloat\" [class.mat-form-field-empty]=\"_control.empty && !_shouldAlwaysFloat\" [class.mat-accent]=\"color == 'accent'\" [class.mat-warn]=\"color == 'warn'\" #label *ngIf=\"_hasFloatingLabel()\" [ngSwitch]=\"_hasLabel()\"><ng-container *ngSwitchCase=\"false\"><ng-content select=\"mat-placeholder\"></ng-content><span>{{_control.placeholder}}</span></ng-container><ng-content select=\"mat-label\" *ngSwitchCase=\"true\"></ng-content><span class=\"mat-placeholder-required mat-form-field-required-marker\" aria-hidden=\"true\" *ngIf=\"!hideRequiredMarker && _control.required && !_control.disabled\">&#32;*</span></label></span></div><div class=\"mat-form-field-suffix\" *ngIf=\"_suffixChildren.length\"><ng-content select=\"[matSuffix]\"></ng-content></div></div><div class=\"mat-form-field-underline\" #underline *ngIf=\"appearance != 'outline'\"><span class=\"mat-form-field-ripple\" [class.mat-accent]=\"color == 'accent'\" [class.mat-warn]=\"color == 'warn'\"></span></div><div class=\"mat-form-field-subscript-wrapper\" [ngSwitch]=\"_getDisplayedMessages()\"><div *ngSwitchCase=\"'error'\" [@transitionMessages]=\"_subscriptAnimationState\"><ng-content select=\"mat-error\"></ng-content></div><div class=\"mat-form-field-hint-wrapper\" *ngSwitchCase=\"'hint'\" [@transitionMessages]=\"_subscriptAnimationState\"><div *ngIf=\"hintLabel\" [id]=\"_hintLabelId\" class=\"mat-hint\">{{hintLabel}}</div><ng-content select=\"mat-hint:not([align='end'])\"></ng-content><div class=\"mat-form-field-hint-spacer\"></div><ng-content select=\"mat-hint[align='end']\"></ng-content></div></div></div>",
                            // MatInput is a directive and can't have styles, so we need to include its styles here
                            // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a
                            // big deal for people who aren't using MatInput.
                            styles: [".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}@media (-ms-high-contrast:active){.mat-form-field-infix{border-image:linear-gradient(transparent,transparent)}}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-empty.mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scaleY(1.0001)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(.5);opacity:0;transition:background-color .3s cubic-bezier(.55,0,.55,.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform .3s cubic-bezier(.25,.8,.25,1),opacity .1s cubic-bezier(.25,.8,.25,1),background-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-label-wrapper .mat-icon,.mat-form-field-subscript-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none} .mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}@media (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:'';display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}@media (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em} .mat-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=month]::after,.mat-input-element[type=time]::after,.mat-input-element[type=week]::after{content:' ';white-space:pre;width:1px}.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button,.mat-input-element::-webkit-inner-spin-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:0 0}@media (-ms-high-contrast:active){.mat-focused select.mat-input-element::-ms-value{color:inherit}}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:'';width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px} .mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}@media (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}@media (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media (-ms-high-contrast:active){.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px} .mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-start{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start{border-width:2px;transition:border-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity .1s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline{transition:none} .mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}@media (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}@media (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media (-ms-high-contrast:active){.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}"],
                            animations: [matFormFieldAnimations.transitionMessages],
                            host: {
                                'class': 'mat-form-field',
                                '[class.mat-form-field-appearance-standard]': 'appearance == "standard"',
                                '[class.mat-form-field-appearance-fill]': 'appearance == "fill"',
                                '[class.mat-form-field-appearance-outline]': 'appearance == "outline"',
                                '[class.mat-form-field-appearance-legacy]': 'appearance == "legacy"',
                                '[class.mat-form-field-invalid]': '_control.errorState',
                                '[class.mat-form-field-can-float]': '_canLabelFloat',
                                '[class.mat-form-field-should-float]': '_shouldLabelFloat()',
                                '[class.mat-form-field-has-label]': '_hasFloatingLabel()',
                                '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',
                                '[class.mat-form-field-disabled]': '_control.disabled',
                                '[class.mat-form-field-autofilled]': '_control.autofilled',
                                '[class.mat-focused]': '_control.focused',
                                '[class.mat-accent]': 'color == "accent"',
                                '[class.mat-warn]': 'color == "warn"',
                                '[class.ng-untouched]': '_shouldForward("untouched")',
                                '[class.ng-touched]': '_shouldForward("touched")',
                                '[class.ng-pristine]': '_shouldForward("pristine")',
                                '[class.ng-dirty]': '_shouldForward("dirty")',
                                '[class.ng-valid]': '_shouldForward("valid")',
                                '[class.ng-invalid]': '_shouldForward("invalid")',
                                '[class.ng-pending]': '_shouldForward("pending")',
                                '[class._mat-animation-noopable]': '!_animationsEnabled',
                            },
                            inputs: ['color'],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatFormField.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MAT_LABEL_GLOBAL_OPTIONS"],] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_8__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            MatFormField.propDecorators = {
                appearance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                hideRequiredMarker: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                hintLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                floatLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                underlineRef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['underline', { static: false },] }],
                _connectionContainerRef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['connectionContainer', { static: true },] }],
                _inputContainerRef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['inputContainer', { static: false },] }],
                _label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['label', { static: false },] }],
                _controlNonStatic: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatFormFieldControl, { static: false },] }],
                _controlStatic: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatFormFieldControl, { static: true },] }],
                _labelChildNonStatic: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatLabel, { static: false },] }],
                _labelChildStatic: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatLabel, { static: true },] }],
                _placeholderChild: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatPlaceholder, { static: false },] }],
                _errorChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatError,] }],
                _hintChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatHint,] }],
                _prefixChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatPrefix,] }],
                _suffixChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatSuffix,] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatFormFieldModule = /** @class */ (function () {
                function MatFormFieldModule() {
                }
                return MatFormFieldModule;
            }());
            MatFormFieldModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            declarations: [
                                MatError,
                                MatFormField,
                                MatHint,
                                MatLabel,
                                MatPlaceholder,
                                MatPrefix,
                                MatSuffix,
                            ],
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_9__["CommonModule"],
                                _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_10__["ObserversModule"],
                            ],
                            exports: [
                                MatError,
                                MatFormField,
                                MatHint,
                                MatLabel,
                                MatPlaceholder,
                                MatPrefix,
                                MatSuffix,
                            ],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=form-field.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/grid-list.js": 
        /*!*************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/grid-list.js ***!
          \*************************************************************/
        /*! exports provided: MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, ɵa11 */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatGridListModule", function () { return MatGridListModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatGridList", function () { return MatGridList; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatGridTile", function () { return MatGridTile; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatGridTileText", function () { return MatGridTileText; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatGridAvatarCssMatStyler", function () { return MatGridAvatarCssMatStyler; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatGridTileHeaderCssMatStyler", function () { return MatGridTileHeaderCssMatStyler; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatGridTileFooterCssMatStyler", function () { return MatGridTileFooterCssMatStyler; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa11", function () { return MAT_GRID_LIST; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token used to provide a grid list to a tile and to avoid circular imports.
             * \@docs-private
             * @type {?}
             */
            var MAT_GRID_LIST = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_GRID_LIST');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatGridTile = /** @class */ (function () {
                /**
                 * @param {?} _element
                 * @param {?=} _gridList
                 */
                function MatGridTile(_element, _gridList) {
                    this._element = _element;
                    this._gridList = _gridList;
                    this._rowspan = 1;
                    this._colspan = 1;
                }
                Object.defineProperty(MatGridTile.prototype, "rowspan", {
                    /**
                     * Amount of rows that the grid tile takes up.
                     * @return {?}
                     */
                    get: function () { return this._rowspan; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._rowspan = Math.round(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(value)); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatGridTile.prototype, "colspan", {
                    /**
                     * Amount of columns that the grid tile takes up.
                     * @return {?}
                     */
                    get: function () { return this._colspan; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._colspan = Math.round(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(value)); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Sets the style of the grid-tile element.  Needs to be set manually to avoid
                 * "Changed after checked" errors that would occur with HostBinding.
                 * @param {?} property
                 * @param {?} value
                 * @return {?}
                 */
                MatGridTile.prototype._setStyle = function (property, value) {
                    (( /** @type {?} */(this._element.nativeElement.style)))[property] = value;
                };
                return MatGridTile;
            }());
            MatGridTile.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-grid-tile',
                            exportAs: 'matGridTile',
                            host: {
                                'class': 'mat-grid-tile',
                            },
                            template: "<figure class=\"mat-figure\"><ng-content></ng-content></figure>",
                            styles: [".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatGridTile.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_GRID_LIST,] }] }
            ]; };
            MatGridTile.propDecorators = {
                rowspan: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                colspan: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            var MatGridTileText = /** @class */ (function () {
                /**
                 * @param {?} _element
                 */
                function MatGridTileText(_element) {
                    this._element = _element;
                }
                /**
                 * @return {?}
                 */
                MatGridTileText.prototype.ngAfterContentInit = function () {
                    Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["setLines"])(this._lines, this._element);
                };
                return MatGridTileText;
            }());
            MatGridTileText.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-grid-tile-header, mat-grid-tile-footer',
                            template: "<ng-content select=\"[mat-grid-avatar], [matGridAvatar]\"></ng-content><div class=\"mat-grid-list-text\"><ng-content select=\"[mat-line], [matLine]\"></ng-content></div><ng-content></ng-content>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        },] },
            ];
            /** @nocollapse */
            MatGridTileText.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            MatGridTileText.propDecorators = {
                _lines: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatLine"],] }]
            };
            /**
             * Directive whose purpose is to add the mat- CSS styling to this selector.
             * \@docs-private
             */
            var MatGridAvatarCssMatStyler = /** @class */ (function () {
                function MatGridAvatarCssMatStyler() {
                }
                return MatGridAvatarCssMatStyler;
            }());
            MatGridAvatarCssMatStyler.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-grid-avatar], [matGridAvatar]',
                            host: { 'class': 'mat-grid-avatar' }
                        },] },
            ];
            /**
             * Directive whose purpose is to add the mat- CSS styling to this selector.
             * \@docs-private
             */
            var MatGridTileHeaderCssMatStyler = /** @class */ (function () {
                function MatGridTileHeaderCssMatStyler() {
                }
                return MatGridTileHeaderCssMatStyler;
            }());
            MatGridTileHeaderCssMatStyler.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-grid-tile-header',
                            host: { 'class': 'mat-grid-tile-header' }
                        },] },
            ];
            /**
             * Directive whose purpose is to add the mat- CSS styling to this selector.
             * \@docs-private
             */
            var MatGridTileFooterCssMatStyler = /** @class */ (function () {
                function MatGridTileFooterCssMatStyler() {
                }
                return MatGridTileFooterCssMatStyler;
            }());
            MatGridTileFooterCssMatStyler.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-grid-tile-footer',
                            host: { 'class': 'mat-grid-tile-footer' }
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Class for determining, from a list of tiles, the (row, col) position of each of those tiles
             * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)
             * because the tiles can have a rowspan.
             *
             * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid
             * large enough to accommodate it so that the tiles still render in the same order in which they
             * are given.
             *
             * The basis of the algorithm is the use of an array to track the already placed tiles. Each
             * element of the array corresponds to a column, and the value indicates how many cells in that
             * column are already occupied; zero indicates an empty cell. Moving "down" to the next row
             * decrements each value in the tracking array (indicating that the column is one cell closer to
             * being free).
             *
             * \@docs-private
             */
            var TileCoordinator = /** @class */ (function () {
                function TileCoordinator() {
                    /**
                     * Index at which the search for the next gap will start.
                     */
                    this.columnIndex = 0;
                    /**
                     * The current row index.
                     */
                    this.rowIndex = 0;
                }
                Object.defineProperty(TileCoordinator.prototype, "rowCount", {
                    /**
                     * Gets the total number of rows occupied by tiles
                     * @return {?}
                     */
                    get: function () { return this.rowIndex + 1; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TileCoordinator.prototype, "rowspan", {
                    /**
                     * Gets the total span of rows occupied by tiles.
                     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var lastRowMax = Math.max.apply(Math, this.tracker);
                        // if any of the tiles has a rowspan that pushes it beyond the total row count,
                        // add the difference to the rowcount
                        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Updates the tile positions.
                 * @param {?} numColumns Amount of columns in the grid.
                 * @param {?} tiles
                 * @return {?}
                 */
                TileCoordinator.prototype.update = function (numColumns, tiles) {
                    var _this = this;
                    this.columnIndex = 0;
                    this.rowIndex = 0;
                    this.tracker = new Array(numColumns);
                    this.tracker.fill(0, 0, this.tracker.length);
                    this.positions = tiles.map(( /**
                     * @param {?} tile
                     * @return {?}
                     */function (/**
                     * @param {?} tile
                     * @return {?}
                     */ tile) { return _this._trackTile(tile); }));
                };
                /**
                 * Calculates the row and col position of a tile.
                 * @private
                 * @param {?} tile
                 * @return {?}
                 */
                TileCoordinator.prototype._trackTile = function (tile) {
                    // Find a gap large enough for this tile.
                    /** @type {?} */
                    var gapStartIndex = this._findMatchingGap(tile.colspan);
                    // Place tile in the resulting gap.
                    this._markTilePosition(gapStartIndex, tile);
                    // The next time we look for a gap, the search will start at columnIndex, which should be
                    // immediately after the tile that has just been placed.
                    this.columnIndex = gapStartIndex + tile.colspan;
                    return new TilePosition(this.rowIndex, gapStartIndex);
                };
                /**
                 * Finds the next available space large enough to fit the tile.
                 * @private
                 * @param {?} tileCols
                 * @return {?}
                 */
                TileCoordinator.prototype._findMatchingGap = function (tileCols) {
                    if (tileCols > this.tracker.length) {
                        throw Error("mat-grid-list: tile with colspan " + tileCols + " is wider than " +
                            ("grid with cols=\"" + this.tracker.length + "\"."));
                    }
                    // Start index is inclusive, end index is exclusive.
                    /** @type {?} */
                    var gapStartIndex = -1;
                    /** @type {?} */
                    var gapEndIndex = -1;
                    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.
                    do {
                        // If we've reached the end of the row, go to the next row.
                        if (this.columnIndex + tileCols > this.tracker.length) {
                            this._nextRow();
                            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);
                            gapEndIndex = this._findGapEndIndex(gapStartIndex);
                            continue;
                        }
                        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);
                        // If there are no more empty spaces in this row at all, move on to the next row.
                        if (gapStartIndex == -1) {
                            this._nextRow();
                            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);
                            gapEndIndex = this._findGapEndIndex(gapStartIndex);
                            continue;
                        }
                        gapEndIndex = this._findGapEndIndex(gapStartIndex);
                        // If a gap large enough isn't found, we want to start looking immediately after the current
                        // gap on the next iteration.
                        this.columnIndex = gapStartIndex + 1;
                        // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is
                        // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.
                    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));
                    // If we still didn't manage to find a gap, ensure that the index is
                    // at least zero so the tile doesn't get pulled out of the grid.
                    return Math.max(gapStartIndex, 0);
                };
                /**
                 * Move "down" to the next row.
                 * @private
                 * @return {?}
                 */
                TileCoordinator.prototype._nextRow = function () {
                    this.columnIndex = 0;
                    this.rowIndex++;
                    // Decrement all spaces by one to reflect moving down one row.
                    for (var i = 0; i < this.tracker.length; i++) {
                        this.tracker[i] = Math.max(0, this.tracker[i] - 1);
                    }
                };
                /**
                 * Finds the end index (exclusive) of a gap given the index from which to start looking.
                 * The gap ends when a non-zero value is found.
                 * @private
                 * @param {?} gapStartIndex
                 * @return {?}
                 */
                TileCoordinator.prototype._findGapEndIndex = function (gapStartIndex) {
                    for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {
                        if (this.tracker[i] != 0) {
                            return i;
                        }
                    }
                    // The gap ends with the end of the row.
                    return this.tracker.length;
                };
                /**
                 * Update the tile tracker to account for the given tile in the given space.
                 * @private
                 * @param {?} start
                 * @param {?} tile
                 * @return {?}
                 */
                TileCoordinator.prototype._markTilePosition = function (start, tile) {
                    for (var i = 0; i < tile.colspan; i++) {
                        this.tracker[start + i] = tile.rowspan;
                    }
                };
                return TileCoordinator;
            }());
            /**
             * Simple data structure for tile position (row, col).
             * \@docs-private
             */
            var TilePosition = /** @class */ (function () {
                /**
                 * @param {?} row
                 * @param {?} col
                 */
                function TilePosition(row, col) {
                    this.row = row;
                    this.col = col;
                }
                return TilePosition;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * RegExp that can be used to check whether a value will
             * be allowed inside a CSS `calc()` expression.
             * @type {?}
             */
            var cssCalcAllowedValue = /^-?\d+((\.\d+)?[A-Za-z%$]?)+$/;
            /**
             * Sets the style properties for an individual tile, given the position calculated by the
             * Tile Coordinator.
             * \@docs-private
             * @abstract
             */
            var TileStyler = /** @class */ (function () {
                function TileStyler() {
                    this._rows = 0;
                    this._rowspan = 0;
                }
                /**
                 * Adds grid-list layout info once it is available. Cannot be processed in the constructor
                 * because these properties haven't been calculated by that point.
                 *
                 * @param {?} gutterSize Size of the grid's gutter.
                 * @param {?} tracker Instance of the TileCoordinator.
                 * @param {?} cols Amount of columns in the grid.
                 * @param {?} direction Layout direction of the grid.
                 * @return {?}
                 */
                TileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {
                    this._gutterSize = normalizeUnits(gutterSize);
                    this._rows = tracker.rowCount;
                    this._rowspan = tracker.rowspan;
                    this._cols = cols;
                    this._direction = direction;
                };
                /**
                 * Computes the amount of space a single 1x1 tile would take up (width or height).
                 * Used as a basis for other calculations.
                 * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.
                 * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.
                 * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().
                 */
                TileStyler.prototype.getBaseTileSize = function (sizePercent, gutterFraction) {
                    // Take the base size percent (as would be if evenly dividing the size between cells),
                    // and then subtracting the size of one gutter. However, since there are no gutters on the
                    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter
                    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the
                    // edge evenly among the cells).
                    return "(" + sizePercent + "% - (" + this._gutterSize + " * " + gutterFraction + "))";
                };
                /**
                 * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.
                 * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
                 * @param {?} offset Number of tiles that have already been rendered in the row/column.
                 * @return {?} Position of the tile as a CSS calc() expression.
                 */
                TileStyler.prototype.getTilePosition = function (baseSize, offset) {
                    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the
                    // row/column (offset).
                    return offset === 0 ? '0' : calc("(" + baseSize + " + " + this._gutterSize + ") * " + offset);
                };
                /**
                 * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.
                 * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
                 * @param {?} span The tile's rowspan or colspan.
                 * @return {?} Size of the tile as a CSS calc() expression.
                 */
                TileStyler.prototype.getTileSize = function (baseSize, span) {
                    return "(" + baseSize + " * " + span + ") + (" + (span - 1) + " * " + this._gutterSize + ")";
                };
                /**
                 * Sets the style properties to be applied to a tile for the given row and column index.
                 * @param {?} tile Tile to which to apply the styling.
                 * @param {?} rowIndex Index of the tile's row.
                 * @param {?} colIndex Index of the tile's column.
                 * @return {?}
                 */
                TileStyler.prototype.setStyle = function (tile, rowIndex, colIndex) {
                    // Percent of the available horizontal space that one column takes up.
                    /** @type {?} */
                    var percentWidthPerTile = 100 / this._cols;
                    // Fraction of the vertical gutter size that each column takes up.
                    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.
                    /** @type {?} */
                    var gutterWidthFractionPerTile = (this._cols - 1) / this._cols;
                    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);
                    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);
                };
                /**
                 * Sets the horizontal placement of the tile in the list.
                 * @param {?} tile
                 * @param {?} colIndex
                 * @param {?} percentWidth
                 * @param {?} gutterWidth
                 * @return {?}
                 */
                TileStyler.prototype.setColStyles = function (tile, colIndex, percentWidth, gutterWidth) {
                    // Base horizontal size of a column.
                    /** @type {?} */
                    var baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);
                    // The width and horizontal position of each tile is always calculated the same way, but the
                    // height and vertical position depends on the rowMode.
                    /** @type {?} */
                    var side = this._direction === 'rtl' ? 'right' : 'left';
                    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));
                    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));
                };
                /**
                 * Calculates the total size taken up by gutters across one axis of a list.
                 * @return {?}
                 */
                TileStyler.prototype.getGutterSpan = function () {
                    return this._gutterSize + " * (" + this._rowspan + " - 1)";
                };
                /**
                 * Calculates the total size taken up by tiles across one axis of a list.
                 * @param {?} tileHeight Height of the tile.
                 * @return {?}
                 */
                TileStyler.prototype.getTileSpan = function (tileHeight) {
                    return this._rowspan + " * " + this.getTileSize(tileHeight, 1);
                };
                /**
                 * Calculates the computed height and returns the correct style property to set.
                 * This method can be implemented by each type of TileStyler.
                 * \@docs-private
                 * @return {?}
                 */
                TileStyler.prototype.getComputedHeight = function () { return null; };
                return TileStyler;
            }());
            /**
             * This type of styler is instantiated when the user passes in a fixed row height.
             * Example `<mat-grid-list cols="3" rowHeight="100px">`
             * \@docs-private
             */
            var FixedTileStyler = /** @class */ (function (_super) {
                __extends(FixedTileStyler, _super);
                /**
                 * @param {?} fixedRowHeight
                 */
                function FixedTileStyler(fixedRowHeight) {
                    var _this = _super.call(this) || this;
                    _this.fixedRowHeight = fixedRowHeight;
                    return _this;
                }
                /**
                 * @param {?} gutterSize
                 * @param {?} tracker
                 * @param {?} cols
                 * @param {?} direction
                 * @return {?}
                 */
                FixedTileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {
                    _super.prototype.init.call(this, gutterSize, tracker, cols, direction);
                    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);
                    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {
                        throw Error("Invalid value \"" + this.fixedRowHeight + "\" set as rowHeight.");
                    }
                };
                /**
                 * @param {?} tile
                 * @param {?} rowIndex
                 * @return {?}
                 */
                FixedTileStyler.prototype.setRowStyles = function (tile, rowIndex) {
                    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));
                    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));
                };
                /**
                 * @return {?}
                 */
                FixedTileStyler.prototype.getComputedHeight = function () {
                    return [
                        'height', calc(this.getTileSpan(this.fixedRowHeight) + " + " + this.getGutterSpan())
                    ];
                };
                /**
                 * @param {?} list
                 * @return {?}
                 */
                FixedTileStyler.prototype.reset = function (list) {
                    list._setListStyle(['height', null]);
                    if (list._tiles) {
                        list._tiles.forEach(( /**
                         * @param {?} tile
                         * @return {?}
                         */function (/**
                         * @param {?} tile
                         * @return {?}
                         */ tile) {
                            tile._setStyle('top', null);
                            tile._setStyle('height', null);
                        }));
                    }
                };
                return FixedTileStyler;
            }(TileStyler));
            /**
             * This type of styler is instantiated when the user passes in a width:height ratio
             * for the row height.  Example `<mat-grid-list cols="3" rowHeight="3:1">`
             * \@docs-private
             */
            var RatioTileStyler = /** @class */ (function (_super) {
                __extends(RatioTileStyler, _super);
                /**
                 * @param {?} value
                 */
                function RatioTileStyler(value) {
                    var _this = _super.call(this) || this;
                    _this._parseRatio(value);
                    return _this;
                }
                /**
                 * @param {?} tile
                 * @param {?} rowIndex
                 * @param {?} percentWidth
                 * @param {?} gutterWidth
                 * @return {?}
                 */
                RatioTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
                    /** @type {?} */
                    var percentHeightPerTile = percentWidth / this.rowHeightRatio;
                    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);
                    // Use padding-top and margin-top to maintain the given aspect ratio, as
                    // a percentage-based value for these properties is applied versus the *width* of the
                    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties
                    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));
                    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));
                };
                /**
                 * @return {?}
                 */
                RatioTileStyler.prototype.getComputedHeight = function () {
                    return [
                        'paddingBottom', calc(this.getTileSpan(this.baseTileHeight) + " + " + this.getGutterSpan())
                    ];
                };
                /**
                 * @param {?} list
                 * @return {?}
                 */
                RatioTileStyler.prototype.reset = function (list) {
                    list._setListStyle(['paddingBottom', null]);
                    list._tiles.forEach(( /**
                     * @param {?} tile
                     * @return {?}
                     */function (/**
                     * @param {?} tile
                     * @return {?}
                     */ tile) {
                        tile._setStyle('marginTop', null);
                        tile._setStyle('paddingTop', null);
                    }));
                };
                /**
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                RatioTileStyler.prototype._parseRatio = function (value) {
                    /** @type {?} */
                    var ratioParts = value.split(':');
                    if (ratioParts.length !== 2) {
                        throw Error("mat-grid-list: invalid ratio given for row-height: \"" + value + "\"");
                    }
                    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);
                };
                return RatioTileStyler;
            }(TileStyler));
            /**
             * This type of styler is instantiated when the user selects a "fit" row height mode.
             * In other words, the row height will reflect the total height of the container divided
             * by the number of rows.  Example `<mat-grid-list cols="3" rowHeight="fit">`
             *
             * \@docs-private
             */
            var FitTileStyler = /** @class */ (function (_super) {
                __extends(FitTileStyler, _super);
                function FitTileStyler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} tile
                 * @param {?} rowIndex
                 * @return {?}
                 */
                FitTileStyler.prototype.setRowStyles = function (tile, rowIndex) {
                    // Percent of the available vertical space that one row takes up.
                    /** @type {?} */
                    var percentHeightPerTile = 100 / this._rowspan;
                    // Fraction of the horizontal gutter size that each column takes up.
                    /** @type {?} */
                    var gutterHeightPerTile = (this._rows - 1) / this._rows;
                    // Base vertical size of a column.
                    /** @type {?} */
                    var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);
                    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));
                    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));
                };
                /**
                 * @param {?} list
                 * @return {?}
                 */
                FitTileStyler.prototype.reset = function (list) {
                    if (list._tiles) {
                        list._tiles.forEach(( /**
                         * @param {?} tile
                         * @return {?}
                         */function (/**
                         * @param {?} tile
                         * @return {?}
                         */ tile) {
                            tile._setStyle('top', null);
                            tile._setStyle('height', null);
                        }));
                    }
                };
                return FitTileStyler;
            }(TileStyler));
            /**
             * Wraps a CSS string in a calc function
             * @param {?} exp
             * @return {?}
             */
            function calc(exp) {
                return "calc(" + exp + ")";
            }
            /**
             * Appends pixels to a CSS string if no units are given.
             * @param {?} value
             * @return {?}
             */
            function normalizeUnits(value) {
                return value.match(/([A-Za-z%]+)$/) ? value : value + "px";
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // TODO(kara): Conditional (responsive) column count / row size.
            // TODO(kara): Re-layout on window resize / media change (debounced).
            // TODO(kara): gridTileHeader and gridTileFooter.
            /** @type {?} */
            var MAT_FIT_MODE = 'fit';
            var MatGridList = /** @class */ (function () {
                /**
                 * @param {?} _element
                 * @param {?} _dir
                 */
                function MatGridList(_element, _dir) {
                    this._element = _element;
                    this._dir = _dir;
                    /**
                     * The amount of space between tiles. This will be something like '5px' or '2em'.
                     */
                    this._gutter = '1px';
                }
                Object.defineProperty(MatGridList.prototype, "cols", {
                    /**
                     * Amount of columns in the grid list.
                     * @return {?}
                     */
                    get: function () { return this._cols; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._cols = Math.max(1, Math.round(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(value)));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatGridList.prototype, "gutterSize", {
                    /**
                     * Size of the grid list's gutter in pixels.
                     * @return {?}
                     */
                    get: function () { return this._gutter; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._gutter = "" + (value == null ? '' : value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatGridList.prototype, "rowHeight", {
                    /**
                     * Set internal representation of row height from the user-provided value.
                     * @return {?}
                     */
                    get: function () { return this._rowHeight; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = "" + (value == null ? '' : value);
                        if (newValue !== this._rowHeight) {
                            this._rowHeight = newValue;
                            this._setTileStyler(this._rowHeight);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatGridList.prototype.ngOnInit = function () {
                    this._checkCols();
                    this._checkRowHeight();
                };
                /**
                 * The layout calculation is fairly cheap if nothing changes, so there's little cost
                 * to run it frequently.
                 * @return {?}
                 */
                MatGridList.prototype.ngAfterContentChecked = function () {
                    this._layoutTiles();
                };
                /**
                 * Throw a friendly error if cols property is missing
                 * @private
                 * @return {?}
                 */
                MatGridList.prototype._checkCols = function () {
                    if (!this.cols) {
                        throw Error("mat-grid-list: must pass in number of columns. " +
                            "Example: <mat-grid-list cols=\"3\">");
                    }
                };
                /**
                 * Default to equal width:height if rowHeight property is missing
                 * @private
                 * @return {?}
                 */
                MatGridList.prototype._checkRowHeight = function () {
                    if (!this._rowHeight) {
                        this._setTileStyler('1:1');
                    }
                };
                /**
                 * Creates correct Tile Styler subtype based on rowHeight passed in by user
                 * @private
                 * @param {?} rowHeight
                 * @return {?}
                 */
                MatGridList.prototype._setTileStyler = function (rowHeight) {
                    if (this._tileStyler) {
                        this._tileStyler.reset(this);
                    }
                    if (rowHeight === MAT_FIT_MODE) {
                        this._tileStyler = new FitTileStyler();
                    }
                    else if (rowHeight && rowHeight.indexOf(':') > -1) {
                        this._tileStyler = new RatioTileStyler(rowHeight);
                    }
                    else {
                        this._tileStyler = new FixedTileStyler(rowHeight);
                    }
                };
                /**
                 * Computes and applies the size and position for all children grid tiles.
                 * @private
                 * @return {?}
                 */
                MatGridList.prototype._layoutTiles = function () {
                    var _this = this;
                    if (!this._tileCoordinator) {
                        this._tileCoordinator = new TileCoordinator();
                    }
                    /** @type {?} */
                    var tracker = this._tileCoordinator;
                    /** @type {?} */
                    var tiles = this._tiles.filter(( /**
                     * @param {?} tile
                     * @return {?}
                     */function (/**
                     * @param {?} tile
                     * @return {?}
                     */ tile) { return !tile._gridList || tile._gridList === _this; }));
                    /** @type {?} */
                    var direction = this._dir ? this._dir.value : 'ltr';
                    this._tileCoordinator.update(this.cols, tiles);
                    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);
                    tiles.forEach(( /**
                     * @param {?} tile
                     * @param {?} index
                     * @return {?}
                     */function (tile, index) {
                        /** @type {?} */
                        var pos = tracker.positions[index];
                        _this._tileStyler.setStyle(tile, pos.row, pos.col);
                    }));
                    this._setListStyle(this._tileStyler.getComputedHeight());
                };
                /**
                 * Sets style on the main grid-list element, given the style name and value.
                 * @param {?} style
                 * @return {?}
                 */
                MatGridList.prototype._setListStyle = function (style) {
                    if (style) {
                        (( /** @type {?} */(this._element.nativeElement.style)))[style[0]] = style[1];
                    }
                };
                return MatGridList;
            }());
            MatGridList.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-grid-list',
                            exportAs: 'matGridList',
                            template: "<div><ng-content></ng-content></div>",
                            styles: [".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}"],
                            host: {
                                'class': 'mat-grid-list',
                            },
                            providers: [{
                                    provide: MAT_GRID_LIST,
                                    useExisting: MatGridList
                                }],
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        },] },
            ];
            /** @nocollapse */
            MatGridList.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_3__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            MatGridList.propDecorators = {
                _tiles: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatGridTile, { descendants: true },] }],
                cols: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                gutterSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                rowHeight: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatGridListModule = /** @class */ (function () {
                function MatGridListModule() {
                }
                return MatGridListModule;
            }());
            MatGridListModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatLineModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatCommonModule"]],
                            exports: [
                                MatGridList,
                                MatGridTile,
                                MatGridTileText,
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatLineModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatCommonModule"],
                                MatGridTileHeaderCssMatStyler,
                                MatGridTileFooterCssMatStyler,
                                MatGridAvatarCssMatStyler
                            ],
                            declarations: [
                                MatGridList,
                                MatGridTile,
                                MatGridTileText,
                                MatGridTileHeaderCssMatStyler,
                                MatGridTileFooterCssMatStyler,
                                MatGridAvatarCssMatStyler
                            ],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=grid-list.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/icon.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/icon.js ***!
          \********************************************************/
        /*! exports provided: MatIconModule, MAT_ICON_LOCATION_FACTORY, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatIconModule", function () { return MatIconModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_ICON_LOCATION_FACTORY", function () { return MAT_ICON_LOCATION_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_ICON_LOCATION", function () { return MAT_ICON_LOCATION; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatIcon", function () { return MatIcon; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatIconNameNotFoundError", function () { return getMatIconNameNotFoundError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatIconNoHttpProviderError", function () { return getMatIconNoHttpProviderError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatIconFailedToSanitizeUrlError", function () { return getMatIconFailedToSanitizeUrlError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatIconFailedToSanitizeLiteralError", function () { return getMatIconFailedToSanitizeLiteralError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ICON_REGISTRY_PROVIDER_FACTORY", function () { return ICON_REGISTRY_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatIconRegistry", function () { return MatIconRegistry; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ICON_REGISTRY_PROVIDER", function () { return ICON_REGISTRY_PROVIDER; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Returns an exception to be thrown in the case when attempting to
             * load an icon with a name that cannot be found.
             * \@docs-private
             * @param {?} iconName
             * @return {?}
             */
            function getMatIconNameNotFoundError(iconName) {
                return Error("Unable to find icon with the name \"" + iconName + "\"");
            }
            /**
             * Returns an exception to be thrown when the consumer attempts to use
             * `<mat-icon>` without including \@angular/common/http.
             * \@docs-private
             * @return {?}
             */
            function getMatIconNoHttpProviderError() {
                return Error('Could not find HttpClient provider for use with Angular Material icons. ' +
                    'Please include the HttpClientModule from @angular/common/http in your ' +
                    'app imports.');
            }
            /**
             * Returns an exception to be thrown when a URL couldn't be sanitized.
             * \@docs-private
             * @param {?} url URL that was attempted to be sanitized.
             * @return {?}
             */
            function getMatIconFailedToSanitizeUrlError(url) {
                return Error("The URL provided to MatIconRegistry was not trusted as a resource URL " +
                    ("via Angular's DomSanitizer. Attempted URL was \"" + url + "\"."));
            }
            /**
             * Returns an exception to be thrown when a HTML string couldn't be sanitized.
             * \@docs-private
             * @param {?} literal HTML that was attempted to be sanitized.
             * @return {?}
             */
            function getMatIconFailedToSanitizeLiteralError(literal) {
                return Error("The literal provided to MatIconRegistry was not trusted as safe HTML by " +
                    ("Angular's DomSanitizer. Attempted literal was \"" + literal + "\"."));
            }
            /**
             * Configuration for an icon, including the URL and possibly the cached SVG element.
             * \@docs-private
             */
            var SvgIconConfig = /** @class */ (function () {
                /**
                 * @param {?} data
                 * @param {?=} options
                 */
                function SvgIconConfig(data, options) {
                    this.options = options;
                    // Note that we can't use `instanceof SVGElement` here,
                    // because it'll break during server-side rendering.
                    if (!!(( /** @type {?} */(data))).nodeName) {
                        this.svgElement = ( /** @type {?} */(data));
                    }
                    else {
                        this.url = ( /** @type {?} */(data));
                    }
                }
                return SvgIconConfig;
            }());
            /**
             * Service to register and display icons used by the `<mat-icon>` component.
             * - Registers icon URLs by namespace and name.
             * - Registers icon set URLs by namespace.
             * - Registers aliases for CSS classes, for use with icon fonts.
             * - Loads icons from URLs and extracts individual icons from icon sets.
             */
            var MatIconRegistry = /** @class */ (function () {
                /**
                 * @param {?} _httpClient
                 * @param {?} _sanitizer
                 * @param {?} document
                 * @param {?=} _errorHandler
                 */
                function MatIconRegistry(_httpClient, _sanitizer, document, _errorHandler) {
                    this._httpClient = _httpClient;
                    this._sanitizer = _sanitizer;
                    this._errorHandler = _errorHandler;
                    /**
                     * URLs and cached SVG elements for individual icons. Keys are of the format "[namespace]:[icon]".
                     */
                    this._svgIconConfigs = new Map();
                    /**
                     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.
                     * Multiple icon sets can be registered under the same namespace.
                     */
                    this._iconSetConfigs = new Map();
                    /**
                     * Cache for icons loaded by direct URLs.
                     */
                    this._cachedIconsByUrl = new Map();
                    /**
                     * In-progress icon fetches. Used to coalesce multiple requests to the same URL.
                     */
                    this._inProgressUrlFetches = new Map();
                    /**
                     * Map from font identifiers to their CSS class names. Used for icon fonts.
                     */
                    this._fontCssClassesByAlias = new Map();
                    /**
                     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.
                     * The default 'material-icons' value assumes that the material icon font has been loaded as
                     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web
                     */
                    this._defaultFontSetClass = 'material-icons';
                    this._document = document;
                }
                /**
                 * Registers an icon by URL in the default namespace.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} iconName Name under which the icon should be registered.
                 * @param {?} url
                 * @param {?=} options
                 * @return {THIS}
                 */
                MatIconRegistry.prototype.addSvgIcon = function (iconName, url, options) {
                    return ( /** @type {?} */(this)).addSvgIconInNamespace('', iconName, url, options);
                };
                /**
                 * Registers an icon using an HTML string in the default namespace.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} iconName Name under which the icon should be registered.
                 * @param {?} literal SVG source of the icon.
                 * @param {?=} options
                 * @return {THIS}
                 */
                MatIconRegistry.prototype.addSvgIconLiteral = function (iconName, literal, options) {
                    return ( /** @type {?} */(this)).addSvgIconLiteralInNamespace('', iconName, literal, options);
                };
                /**
                 * Registers an icon by URL in the specified namespace.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} namespace Namespace in which the icon should be registered.
                 * @param {?} iconName Name under which the icon should be registered.
                 * @param {?} url
                 * @param {?=} options
                 * @return {THIS}
                 */
                MatIconRegistry.prototype.addSvgIconInNamespace = function (namespace, iconName, url, options) {
                    return ( /** @type {?} */(this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));
                };
                /**
                 * Registers an icon using an HTML string in the specified namespace.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} namespace Namespace in which the icon should be registered.
                 * @param {?} iconName Name under which the icon should be registered.
                 * @param {?} literal SVG source of the icon.
                 * @param {?=} options
                 * @return {THIS}
                 */
                MatIconRegistry.prototype.addSvgIconLiteralInNamespace = function (namespace, iconName, literal, options) {
                    /** @type {?} */
                    var sanitizedLiteral = ( /** @type {?} */(this))._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_2__["SecurityContext"].HTML, literal);
                    if (!sanitizedLiteral) {
                        throw getMatIconFailedToSanitizeLiteralError(literal);
                    }
                    /** @type {?} */
                    var svgElement = ( /** @type {?} */(this))._createSvgElementForSingleIcon(sanitizedLiteral, options);
                    return ( /** @type {?} */(this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));
                };
                /**
                 * Registers an icon set by URL in the default namespace.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} url
                 * @param {?=} options
                 * @return {THIS}
                 */
                MatIconRegistry.prototype.addSvgIconSet = function (url, options) {
                    return ( /** @type {?} */(this)).addSvgIconSetInNamespace('', url, options);
                };
                /**
                 * Registers an icon set using an HTML string in the default namespace.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} literal SVG source of the icon set.
                 * @param {?=} options
                 * @return {THIS}
                 */
                MatIconRegistry.prototype.addSvgIconSetLiteral = function (literal, options) {
                    return ( /** @type {?} */(this)).addSvgIconSetLiteralInNamespace('', literal, options);
                };
                /**
                 * Registers an icon set by URL in the specified namespace.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} namespace Namespace in which to register the icon set.
                 * @param {?} url
                 * @param {?=} options
                 * @return {THIS}
                 */
                MatIconRegistry.prototype.addSvgIconSetInNamespace = function (namespace, url, options) {
                    return ( /** @type {?} */(this))._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));
                };
                /**
                 * Registers an icon set using an HTML string in the specified namespace.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} namespace Namespace in which to register the icon set.
                 * @param {?} literal SVG source of the icon set.
                 * @param {?=} options
                 * @return {THIS}
                 */
                MatIconRegistry.prototype.addSvgIconSetLiteralInNamespace = function (namespace, literal, options) {
                    /** @type {?} */
                    var sanitizedLiteral = ( /** @type {?} */(this))._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_2__["SecurityContext"].HTML, literal);
                    if (!sanitizedLiteral) {
                        throw getMatIconFailedToSanitizeLiteralError(literal);
                    }
                    /** @type {?} */
                    var svgElement = ( /** @type {?} */(this))._svgElementFromString(sanitizedLiteral);
                    return ( /** @type {?} */(this))._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));
                };
                /**
                 * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon
                 * component with the alias as the fontSet input will cause the class name to be applied
                 * to the `<mat-icon>` element.
                 *
                 * @template THIS
                 * @this {THIS}
                 * @param {?} alias Alias for the font.
                 * @param {?=} className Class name override to be used instead of the alias.
                 * @return {THIS}
                 */
                MatIconRegistry.prototype.registerFontClassAlias = function (alias, className) {
                    if (className === void 0) { className = alias; }
                    ( /** @type {?} */(this))._fontCssClassesByAlias.set(alias, className);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Returns the CSS class name associated with the alias by a previous call to
                 * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.
                 * @param {?} alias
                 * @return {?}
                 */
                MatIconRegistry.prototype.classNameForFontAlias = function (alias) {
                    return this._fontCssClassesByAlias.get(alias) || alias;
                };
                /**
                 * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not
                 * have a fontSet input value, and is not loading an icon by name or URL.
                 *
                 * @template THIS
                 * @this {THIS}
                 * @param {?} className
                 * @return {THIS}
                 */
                MatIconRegistry.prototype.setDefaultFontSetClass = function (className) {
                    ( /** @type {?} */(this))._defaultFontSetClass = className;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not
                 * have a fontSet input value, and is not loading an icon by name or URL.
                 * @return {?}
                 */
                MatIconRegistry.prototype.getDefaultFontSetClass = function () {
                    return this._defaultFontSetClass;
                };
                /**
                 * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.
                 * The response from the URL may be cached so this will not always cause an HTTP request, but
                 * the produced element will always be a new copy of the originally fetched icon. (That is,
                 * it will not contain any modifications made to elements previously returned).
                 *
                 * @param {?} safeUrl URL from which to fetch the SVG icon.
                 * @return {?}
                 */
                MatIconRegistry.prototype.getSvgIconFromUrl = function (safeUrl) {
                    var _this = this;
                    /** @type {?} */
                    var url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_2__["SecurityContext"].RESOURCE_URL, safeUrl);
                    if (!url) {
                        throw getMatIconFailedToSanitizeUrlError(safeUrl);
                    }
                    /** @type {?} */
                    var cachedIcon = this._cachedIconsByUrl.get(url);
                    if (cachedIcon) {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(cloneSvg(cachedIcon));
                    }
                    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["tap"])(( /**
                     * @param {?} svg
                     * @return {?}
                     */function (/**
                     * @param {?} svg
                     * @return {?}
                     */ svg) { return _this._cachedIconsByUrl.set(( /** @type {?} */(url)), svg); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(( /**
                     * @param {?} svg
                     * @return {?}
                     */function (/**
                     * @param {?} svg
                     * @return {?}
                     */ svg) { return cloneSvg(svg); })));
                };
                /**
                 * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name
                 * and namespace. The icon must have been previously registered with addIcon or addIconSet;
                 * if not, the Observable will throw an error.
                 *
                 * @param {?} name Name of the icon to be retrieved.
                 * @param {?=} namespace Namespace in which to look for the icon.
                 * @return {?}
                 */
                MatIconRegistry.prototype.getNamedSvgIcon = function (name, namespace) {
                    if (namespace === void 0) { namespace = ''; }
                    // Return (copy of) cached icon if possible.
                    /** @type {?} */
                    var key = iconKey(namespace, name);
                    /** @type {?} */
                    var config = this._svgIconConfigs.get(key);
                    if (config) {
                        return this._getSvgFromConfig(config);
                    }
                    // See if we have any icon sets registered for the namespace.
                    /** @type {?} */
                    var iconSetConfigs = this._iconSetConfigs.get(namespace);
                    if (iconSetConfigs) {
                        return this._getSvgFromIconSetConfigs(name, iconSetConfigs);
                    }
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["throwError"])(getMatIconNameNotFoundError(key));
                };
                /**
                 * @return {?}
                 */
                MatIconRegistry.prototype.ngOnDestroy = function () {
                    this._svgIconConfigs.clear();
                    this._iconSetConfigs.clear();
                    this._cachedIconsByUrl.clear();
                };
                /**
                 * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.
                 * @private
                 * @param {?} config
                 * @return {?}
                 */
                MatIconRegistry.prototype._getSvgFromConfig = function (config) {
                    if (config.svgElement) {
                        // We already have the SVG element for this icon, return a copy.
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(cloneSvg(config.svgElement));
                    }
                    else {
                        // Fetch the icon from the config's URL, cache it, and return a copy.
                        return this._loadSvgIconFromConfig(config).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["tap"])(( /**
                         * @param {?} svg
                         * @return {?}
                         */function (/**
                         * @param {?} svg
                         * @return {?}
                         */ svg) { return config.svgElement = svg; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(( /**
                         * @param {?} svg
                         * @return {?}
                         */function (/**
                         * @param {?} svg
                         * @return {?}
                         */ svg) { return cloneSvg(svg); })));
                    }
                };
                /**
                 * Attempts to find an icon with the specified name in any of the SVG icon sets.
                 * First searches the available cached icons for a nested element with a matching name, and
                 * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets
                 * that have not been cached, and searches again after all fetches are completed.
                 * The returned Observable produces the SVG element if possible, and throws
                 * an error if no icon with the specified name can be found.
                 * @private
                 * @param {?} name
                 * @param {?} iconSetConfigs
                 * @return {?}
                 */
                MatIconRegistry.prototype._getSvgFromIconSetConfigs = function (name, iconSetConfigs) {
                    var _this = this;
                    // For all the icon set SVG elements we've fetched, see if any contain an icon with the
                    // requested name.
                    /** @type {?} */
                    var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);
                    if (namedIcon) {
                        // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every
                        // time anyway, there's probably not much advantage compared to just always extracting
                        // it from the icon set.
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(namedIcon);
                    }
                    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't
                    // fetched, fetch them now and look for iconName in the results.
                    /** @type {?} */
                    var iconSetFetchRequests = iconSetConfigs
                        .filter(( /**
                 * @param {?} iconSetConfig
                 * @return {?}
                 */function (/**
                 * @param {?} iconSetConfig
                 * @return {?}
                 */ iconSetConfig) { return !iconSetConfig.svgElement; }))
                        .map(( /**
                 * @param {?} iconSetConfig
                 * @return {?}
                 */function (/**
                 * @param {?} iconSetConfig
                 * @return {?}
                 */ iconSetConfig) {
                        return _this._loadSvgIconSetFromConfig(iconSetConfig).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["catchError"])(( /**
                         * @param {?} err
                         * @return {?}
                         */function (err) {
                            /** @type {?} */
                            var url = _this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_2__["SecurityContext"].RESOURCE_URL, iconSetConfig.url);
                            // Swallow errors fetching individual URLs so the
                            // combined Observable won't necessarily fail.
                            /** @type {?} */
                            var errorMessage = "Loading icon set URL: " + url + " failed: " + err.message;
                            // @breaking-change 9.0.0 _errorHandler parameter to be made required
                            if (_this._errorHandler) {
                                _this._errorHandler.handleError(new Error(errorMessage));
                            }
                            else {
                                console.error(errorMessage);
                            }
                            return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(null);
                        })));
                    }));
                    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a
                    // cached SVG element (unless the request failed), and we can check again for the icon.
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["forkJoin"])(iconSetFetchRequests).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var foundIcon = _this._extractIconWithNameFromAnySet(name, iconSetConfigs);
                        if (!foundIcon) {
                            throw getMatIconNameNotFoundError(name);
                        }
                        return foundIcon;
                    })));
                };
                /**
                 * Searches the cached SVG elements for the given icon sets for a nested icon element whose "id"
                 * tag matches the specified name. If found, copies the nested element to a new SVG element and
                 * returns it. Returns null if no matching element is found.
                 * @private
                 * @param {?} iconName
                 * @param {?} iconSetConfigs
                 * @return {?}
                 */
                MatIconRegistry.prototype._extractIconWithNameFromAnySet = function (iconName, iconSetConfigs) {
                    // Iterate backwards, so icon sets added later have precedence.
                    for (var i = iconSetConfigs.length - 1; i >= 0; i--) {
                        /** @type {?} */
                        var config = iconSetConfigs[i];
                        if (config.svgElement) {
                            /** @type {?} */
                            var foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);
                            if (foundIcon) {
                                return foundIcon;
                            }
                        }
                    }
                    return null;
                };
                /**
                 * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element
                 * from it.
                 * @private
                 * @param {?} config
                 * @return {?}
                 */
                MatIconRegistry.prototype._loadSvgIconFromConfig = function (config) {
                    var _this = this;
                    return this._fetchUrl(config.url)
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(( /**
                 * @param {?} svgText
                 * @return {?}
                 */function (/**
                 * @param {?} svgText
                 * @return {?}
                 */ svgText) { return _this._createSvgElementForSingleIcon(svgText, config.options); })));
                };
                /**
                 * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element
                 * from it.
                 * @private
                 * @param {?} config
                 * @return {?}
                 */
                MatIconRegistry.prototype._loadSvgIconSetFromConfig = function (config) {
                    var _this = this;
                    // If the SVG for this icon set has already been parsed, do nothing.
                    if (config.svgElement) {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(config.svgElement);
                    }
                    return this._fetchUrl(config.url).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(( /**
                     * @param {?} svgText
                     * @return {?}
                     */function (/**
                     * @param {?} svgText
                     * @return {?}
                     */ svgText) {
                        // It is possible that the icon set was parsed and cached by an earlier request, so parsing
                        // only needs to occur if the cache is yet unset.
                        if (!config.svgElement) {
                            config.svgElement = _this._svgElementFromString(svgText);
                        }
                        return config.svgElement;
                    })));
                };
                /**
                 * Creates a DOM element from the given SVG string, and adds default attributes.
                 * @private
                 * @param {?} responseText
                 * @param {?=} options
                 * @return {?}
                 */
                MatIconRegistry.prototype._createSvgElementForSingleIcon = function (responseText, options) {
                    /** @type {?} */
                    var svg = this._svgElementFromString(responseText);
                    this._setSvgAttributes(svg, options);
                    return svg;
                };
                /**
                 * Searches the cached element of the given SvgIconConfig for a nested icon element whose "id"
                 * tag matches the specified name. If found, copies the nested element to a new SVG element and
                 * returns it. Returns null if no matching element is found.
                 * @private
                 * @param {?} iconSet
                 * @param {?} iconName
                 * @param {?=} options
                 * @return {?}
                 */
                MatIconRegistry.prototype._extractSvgIconFromSet = function (iconSet, iconName, options) {
                    // Use the `id="iconName"` syntax in order to escape special
                    // characters in the ID (versus using the #iconName syntax).
                    /** @type {?} */
                    var iconSource = iconSet.querySelector("[id=\"" + iconName + "\"]");
                    if (!iconSource) {
                        return null;
                    }
                    // Clone the element and remove the ID to prevent multiple elements from being added
                    // to the page with the same ID.
                    /** @type {?} */
                    var iconElement = ( /** @type {?} */(iconSource.cloneNode(true)));
                    iconElement.removeAttribute('id');
                    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as
                    // the content of a new <svg> node.
                    if (iconElement.nodeName.toLowerCase() === 'svg') {
                        return this._setSvgAttributes(( /** @type {?} */(iconElement)), options);
                    }
                    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note
                    // that the same could be achieved by referring to it via <use href="#id">, however the <use>
                    // tag is problematic on Firefox, because it needs to include the current page path.
                    if (iconElement.nodeName.toLowerCase() === 'symbol') {
                        return this._setSvgAttributes(this._toSvgElement(iconElement), options);
                    }
                    // createElement('SVG') doesn't work as expected; the DOM ends up with
                    // the correct nodes, but the SVG content doesn't render. Instead we
                    // have to create an empty SVG node using innerHTML and append its content.
                    // Elements created using DOMParser.parseFromString have the same problem.
                    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display
                    /** @type {?} */
                    var svg = this._svgElementFromString('<svg></svg>');
                    // Clone the node so we don't remove it from the parent icon set element.
                    svg.appendChild(iconElement);
                    return this._setSvgAttributes(svg, options);
                };
                /**
                 * Creates a DOM element from the given SVG string.
                 * @private
                 * @param {?} str
                 * @return {?}
                 */
                MatIconRegistry.prototype._svgElementFromString = function (str) {
                    /** @type {?} */
                    var div = this._document.createElement('DIV');
                    div.innerHTML = str;
                    /** @type {?} */
                    var svg = ( /** @type {?} */(div.querySelector('svg')));
                    if (!svg) {
                        throw Error('<svg> tag not found');
                    }
                    return svg;
                };
                /**
                 * Converts an element into an SVG node by cloning all of its children.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                MatIconRegistry.prototype._toSvgElement = function (element) {
                    /** @type {?} */
                    var svg = this._svgElementFromString('<svg></svg>');
                    /** @type {?} */
                    var attributes = element.attributes;
                    // Copy over all the attributes from the `symbol` to the new SVG, except the id.
                    for (var i = 0; i < attributes.length; i++) {
                        var _b = attributes[i], name = _b.name, value = _b.value;
                        if (name !== 'id') {
                            svg.setAttribute(name, value);
                        }
                    }
                    for (var i = 0; i < element.childNodes.length; i++) {
                        if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {
                            svg.appendChild(element.childNodes[i].cloneNode(true));
                        }
                    }
                    return svg;
                };
                /**
                 * Sets the default attributes for an SVG element to be used as an icon.
                 * @private
                 * @param {?} svg
                 * @param {?=} options
                 * @return {?}
                 */
                MatIconRegistry.prototype._setSvgAttributes = function (svg, options) {
                    svg.setAttribute('fit', '');
                    svg.setAttribute('height', '100%');
                    svg.setAttribute('width', '100%');
                    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
                    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.
                    if (options && options.viewBox) {
                        svg.setAttribute('viewBox', options.viewBox);
                    }
                    return svg;
                };
                /**
                 * Returns an Observable which produces the string contents of the given URL. Results may be
                 * cached, so future calls with the same URL may not cause another HTTP request.
                 * @private
                 * @param {?} safeUrl
                 * @return {?}
                 */
                MatIconRegistry.prototype._fetchUrl = function (safeUrl) {
                    var _this = this;
                    if (!this._httpClient) {
                        throw getMatIconNoHttpProviderError();
                    }
                    if (safeUrl == null) {
                        throw Error("Cannot fetch icon from URL \"" + safeUrl + "\".");
                    }
                    /** @type {?} */
                    var url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_2__["SecurityContext"].RESOURCE_URL, safeUrl);
                    if (!url) {
                        throw getMatIconFailedToSanitizeUrlError(safeUrl);
                    }
                    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is
                    // already a request in progress for that URL. It's necessary to call share() on the
                    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.
                    /** @type {?} */
                    var inProgressFetch = this._inProgressUrlFetches.get(url);
                    if (inProgressFetch) {
                        return inProgressFetch;
                    }
                    // TODO(jelbourn): for some reason, the `finalize` operator "loses" the generic type on the
                    // Observable. Figure out why and fix it.
                    /** @type {?} */
                    var req = this._httpClient.get(url, { responseType: 'text' }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["finalize"])(( /**
                     * @return {?}
                     */function () { return _this._inProgressUrlFetches.delete(url); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["share"])());
                    this._inProgressUrlFetches.set(url, req);
                    return req;
                };
                /**
                 * Registers an icon config by name in the specified namespace.
                 * @private
                 * @template THIS
                 * @this {THIS}
                 * @param {?} namespace Namespace in which to register the icon config.
                 * @param {?} iconName Name under which to register the config.
                 * @param {?} config Config to be registered.
                 * @return {THIS}
                 */
                MatIconRegistry.prototype._addSvgIconConfig = function (namespace, iconName, config) {
                    ( /** @type {?} */(this))._svgIconConfigs.set(iconKey(namespace, iconName), config);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Registers an icon set config in the specified namespace.
                 * @private
                 * @template THIS
                 * @this {THIS}
                 * @param {?} namespace Namespace in which to register the icon config.
                 * @param {?} config Config to be registered.
                 * @return {THIS}
                 */
                MatIconRegistry.prototype._addSvgIconSetConfig = function (namespace, config) {
                    /** @type {?} */
                    var configNamespace = ( /** @type {?} */(this))._iconSetConfigs.get(namespace);
                    if (configNamespace) {
                        configNamespace.push(config);
                    }
                    else {
                        ( /** @type {?} */(this))._iconSetConfigs.set(namespace, [config]);
                    }
                    return ( /** @type {?} */(this));
                };
                return MatIconRegistry;
            }());
            MatIconRegistry.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            MatIconRegistry.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
                { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__["DomSanitizer"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ErrorHandler"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] }
            ]; };
            /** @nocollapse */ MatIconRegistry.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"])({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"], 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__["DomSanitizer"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ErrorHandler"], 8)); }, token: MatIconRegistry, providedIn: "root" });
            /**
             * \@docs-private
             * @param {?} parentRegistry
             * @param {?} httpClient
             * @param {?} sanitizer
             * @param {?=} document
             * @param {?=} errorHandler
             * @return {?}
             */
            function ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document, errorHandler) {
                return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var ICON_REGISTRY_PROVIDER = {
                // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.
                provide: MatIconRegistry,
                deps: [
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_2__["SkipSelf"](), MatIconRegistry],
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"](), _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]],
                    _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__["DomSanitizer"],
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"](), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ErrorHandler"]],
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"](), ( /** @type {?} */(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]))],
                ],
                useFactory: ICON_REGISTRY_PROVIDER_FACTORY,
            };
            /**
             * Clones an SVGElement while preserving type information.
             * @param {?} svg
             * @return {?}
             */
            function cloneSvg(svg) {
                return ( /** @type {?} */(svg.cloneNode(true)));
            }
            /**
             * Returns the cache key to use for an icon namespace and name.
             * @param {?} namespace
             * @param {?} name
             * @return {?}
             */
            function iconKey(namespace, name) {
                return namespace + ':' + name;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Boilerplate for applying mixins to MatIcon.
            /**
             * \@docs-private
             */
            var MatIconBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatIconBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatIconBase;
            }());
            /** @type {?} */
            var _MatIconMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_7__["mixinColor"])(MatIconBase);
            /**
             * Injection token used to provide the current location to `MatIcon`.
             * Used to handle server-side rendering and to stub out during unit tests.
             * \@docs-private
             * @type {?}
             */
            var MAT_ICON_LOCATION = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mat-icon-location', {
                providedIn: 'root',
                factory: MAT_ICON_LOCATION_FACTORY
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function MAT_ICON_LOCATION_FACTORY() {
                /** @type {?} */
                var _document = Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]);
                /** @type {?} */
                var _location = _document ? _document.location : null;
                return {
                    // Note that this needs to be a function, rather than a property, because Angular
                    // will only resolve it once, but we want the current path on each call.
                    getPathname: ( /**
                     * @return {?}
                     */function () { return _location ? (_location.pathname + _location.search) : ''; })
                };
            }
            /**
             * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).
             * @type {?}
             */
            var funcIriAttributes = [
                'clip-path',
                'color-profile',
                'src',
                'cursor',
                'fill',
                'filter',
                'marker',
                'marker-start',
                'marker-mid',
                'marker-end',
                'mask',
                'stroke'
            ];
            var ɵ0 = /**
             * @param {?} attr
             * @return {?}
             */ function (/**
             * @param {?} attr
             * @return {?}
             */ attr) { return "[" + attr + "]"; };
            /**
             * Selector that can be used to find all elements that are using a `FuncIRI`.
             * @type {?}
             */
            var funcIriAttributeSelector = funcIriAttributes.map((ɵ0)).join(', ');
            /**
             * Regex that can be used to extract the id out of a FuncIRI.
             * @type {?}
             */
            var funcIriPattern = /^url\(['"]?#(.*?)['"]?\)$/;
            /**
             * Component to display an icon. It can be used in the following ways:
             *
             * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the
             *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of
             *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format
             *   "[namespace]:[name]", if not the value will be the name of an icon in the default namespace.
             *   Examples:
             *     `<mat-icon svgIcon="left-arrow"></mat-icon>
             *     <mat-icon svgIcon="animals:cat"></mat-icon>`
             *
             * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`
             *   component. By default the Material icons font is used as described at
             *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an
             *   alternate font by setting the fontSet input to either the CSS class to apply to use the
             *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.
             *   Examples:
             *     `<mat-icon>home</mat-icon>
             *     <mat-icon fontSet="myfont">sun</mat-icon>`
             *
             * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the
             *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a
             *   CSS class which causes the glyph to be displayed via a :before selector, as in
             *   https://fortawesome.github.io/Font-Awesome/examples/
             *   Example:
             *     `<mat-icon fontSet="fa" fontIcon="alarm"></mat-icon>`
             */
            var MatIcon = /** @class */ (function (_super) {
                __extends(MatIcon, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} _iconRegistry
                 * @param {?} ariaHidden
                 * @param {?=} _location
                 * @param {?=} _errorHandler
                 */
                function MatIcon(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {
                    var _this = _super.call(this, elementRef) || this;
                    _this._iconRegistry = _iconRegistry;
                    _this._location = _location;
                    _this._errorHandler = _errorHandler;
                    _this._inline = false;
                    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is
                    // the right thing to do for the majority of icon use-cases.
                    if (!ariaHidden) {
                        elementRef.nativeElement.setAttribute('aria-hidden', 'true');
                    }
                    return _this;
                }
                Object.defineProperty(MatIcon.prototype, "inline", {
                    /**
                     * Whether the icon should be inlined, automatically sizing the icon to match the font size of
                     * the element the icon is contained in.
                     * @return {?}
                     */
                    get: function () {
                        return this._inline;
                    },
                    /**
                     * @param {?} inline
                     * @return {?}
                     */
                    set: function (inline) {
                        this._inline = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceBooleanProperty"])(inline);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatIcon.prototype, "fontSet", {
                    /**
                     * Font set that the icon is a part of.
                     * @return {?}
                     */
                    get: function () { return this._fontSet; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._fontSet = this._cleanupFontValue(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatIcon.prototype, "fontIcon", {
                    /**
                     * Name of an icon within a font set.
                     * @return {?}
                     */
                    get: function () { return this._fontIcon; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._fontIcon = this._cleanupFontValue(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Splits an svgIcon binding value into its icon set and icon name components.
                 * Returns a 2-element array of [(icon set), (icon name)].
                 * The separator for the two fields is ':'. If there is no separator, an empty
                 * string is returned for the icon set and the entire value is returned for
                 * the icon name. If the argument is falsy, returns an array of two empty strings.
                 * Throws an error if the name contains two or more ':' separators.
                 * Examples:
                 *   `'social:cake' -> ['social', 'cake']
                 *   'penguin' -> ['', 'penguin']
                 *   null -> ['', '']
                 *   'a:b:c' -> (throws Error)`
                 * @private
                 * @param {?} iconName
                 * @return {?}
                 */
                MatIcon.prototype._splitIconName = function (iconName) {
                    if (!iconName) {
                        return ['', ''];
                    }
                    /** @type {?} */
                    var parts = iconName.split(':');
                    switch (parts.length) {
                        case 1: return ['', parts[0]]; // Use default namespace.
                        case 2: return ( /** @type {?} */(parts));
                        default: throw Error("Invalid icon name: \"" + iconName + "\"");
                    }
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                MatIcon.prototype.ngOnChanges = function (changes) {
                    var _this = this;
                    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.
                    /** @type {?} */
                    var svgIconChanges = changes['svgIcon'];
                    if (svgIconChanges) {
                        if (this.svgIcon) {
                            var _b = this._splitIconName(this.svgIcon), namespace_1 = _b[0], iconName_1 = _b[1];
                            this._iconRegistry.getNamedSvgIcon(iconName_1, namespace_1)
                                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1))
                                .subscribe(( /**
                         * @param {?} svg
                         * @return {?}
                         */function (/**
                         * @param {?} svg
                         * @return {?}
                         */ svg) { return _this._setSvgElement(svg); }), ( /**
                             * @param {?} err
                             * @return {?}
                             */function (err) {
                                /** @type {?} */
                                var errorMessage = "Error retrieving icon " + namespace_1 + ":" + iconName_1 + "! " + err.message;
                                // @breaking-change 9.0.0 _errorHandler parameter to be made required.
                                if (_this._errorHandler) {
                                    _this._errorHandler.handleError(new Error(errorMessage));
                                }
                                else {
                                    console.error(errorMessage);
                                }
                            }));
                        }
                        else if (svgIconChanges.previousValue) {
                            this._clearSvgElement();
                        }
                    }
                    if (this._usingFontIcon()) {
                        this._updateFontIconClasses();
                    }
                };
                /**
                 * @return {?}
                 */
                MatIcon.prototype.ngOnInit = function () {
                    // Update font classes because ngOnChanges won't be called if none of the inputs are present,
                    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.
                    if (this._usingFontIcon()) {
                        this._updateFontIconClasses();
                    }
                };
                /**
                 * @return {?}
                 */
                MatIcon.prototype.ngAfterViewChecked = function () {
                    /** @type {?} */
                    var cachedElements = this._elementsWithExternalReferences;
                    if (cachedElements && this._location && cachedElements.size) {
                        /** @type {?} */
                        var newPath = this._location.getPathname();
                        // We need to check whether the URL has changed on each change detection since
                        // the browser doesn't have an API that will let us react on link clicks and
                        // we can't depend on the Angular router. The references need to be updated,
                        // because while most browsers don't care whether the URL is correct after
                        // the first render, Safari will break if the user navigates to a different
                        // page and the SVG isn't re-rendered.
                        if (newPath !== this._previousPath) {
                            this._previousPath = newPath;
                            this._prependPathToReferences(newPath);
                        }
                    }
                };
                /**
                 * @return {?}
                 */
                MatIcon.prototype.ngOnDestroy = function () {
                    if (this._elementsWithExternalReferences) {
                        this._elementsWithExternalReferences.clear();
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatIcon.prototype._usingFontIcon = function () {
                    return !this.svgIcon;
                };
                /**
                 * @private
                 * @param {?} svg
                 * @return {?}
                 */
                MatIcon.prototype._setSvgElement = function (svg) {
                    this._clearSvgElement();
                    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.
                    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/
                    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.
                    /** @type {?} */
                    var styleTags = ( /** @type {?} */(svg.querySelectorAll('style')));
                    for (var i = 0; i < styleTags.length; i++) {
                        styleTags[i].textContent += ' ';
                    }
                    // Note: we do this fix here, rather than the icon registry, because the
                    // references have to point to the URL at the time that the icon was created.
                    if (this._location) {
                        /** @type {?} */
                        var path = this._location.getPathname();
                        this._previousPath = path;
                        this._cacheChildrenWithExternalReferences(svg);
                        this._prependPathToReferences(path);
                    }
                    this._elementRef.nativeElement.appendChild(svg);
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatIcon.prototype._clearSvgElement = function () {
                    /** @type {?} */
                    var layoutElement = this._elementRef.nativeElement;
                    /** @type {?} */
                    var childCount = layoutElement.childNodes.length;
                    if (this._elementsWithExternalReferences) {
                        this._elementsWithExternalReferences.clear();
                    }
                    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that
                    // we can't use innerHTML, because IE will throw if the element has a data binding.
                    while (childCount--) {
                        /** @type {?} */
                        var child = layoutElement.childNodes[childCount];
                        // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid
                        // of any loose text nodes, as well as any SVG elements in order to remove any old icons.
                        if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {
                            layoutElement.removeChild(child);
                        }
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatIcon.prototype._updateFontIconClasses = function () {
                    if (!this._usingFontIcon()) {
                        return;
                    }
                    /** @type {?} */
                    var elem = this._elementRef.nativeElement;
                    /** @type {?} */
                    var fontSetClass = this.fontSet ?
                        this._iconRegistry.classNameForFontAlias(this.fontSet) :
                        this._iconRegistry.getDefaultFontSetClass();
                    if (fontSetClass != this._previousFontSetClass) {
                        if (this._previousFontSetClass) {
                            elem.classList.remove(this._previousFontSetClass);
                        }
                        if (fontSetClass) {
                            elem.classList.add(fontSetClass);
                        }
                        this._previousFontSetClass = fontSetClass;
                    }
                    if (this.fontIcon != this._previousFontIconClass) {
                        if (this._previousFontIconClass) {
                            elem.classList.remove(this._previousFontIconClass);
                        }
                        if (this.fontIcon) {
                            elem.classList.add(this.fontIcon);
                        }
                        this._previousFontIconClass = this.fontIcon;
                    }
                };
                /**
                 * Cleans up a value to be used as a fontIcon or fontSet.
                 * Since the value ends up being assigned as a CSS class, we
                 * have to trim the value and omit space-separated values.
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                MatIcon.prototype._cleanupFontValue = function (value) {
                    return typeof value === 'string' ? value.trim().split(' ')[0] : value;
                };
                /**
                 * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`
                 * reference. This is required because WebKit browsers require references to be prefixed with
                 * the current path, if the page has a `base` tag.
                 * @private
                 * @param {?} path
                 * @return {?}
                 */
                MatIcon.prototype._prependPathToReferences = function (path) {
                    /** @type {?} */
                    var elements = this._elementsWithExternalReferences;
                    if (elements) {
                        elements.forEach(( /**
                         * @param {?} attrs
                         * @param {?} element
                         * @return {?}
                         */function (attrs, element) {
                            attrs.forEach(( /**
                             * @param {?} attr
                             * @return {?}
                             */function (/**
                             * @param {?} attr
                             * @return {?}
                             */ attr) {
                                element.setAttribute(attr.name, "url('" + path + "#" + attr.value + "')");
                            }));
                        }));
                    }
                };
                /**
                 * Caches the children of an SVG element that have `url()`
                 * references that we need to prefix with the current path.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                MatIcon.prototype._cacheChildrenWithExternalReferences = function (element) {
                    /** @type {?} */
                    var elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);
                    /** @type {?} */
                    var elements = this._elementsWithExternalReferences =
                        this._elementsWithExternalReferences || new Map();
                    var _loop_1 = function (i) {
                        funcIriAttributes.forEach(( /**
                         * @param {?} attr
                         * @return {?}
                         */function (/**
                         * @param {?} attr
                         * @return {?}
                         */ attr) {
                            /** @type {?} */
                            var elementWithReference = elementsWithFuncIri[i];
                            /** @type {?} */
                            var value = elementWithReference.getAttribute(attr);
                            /** @type {?} */
                            var match = value ? value.match(funcIriPattern) : null;
                            if (match) {
                                /** @type {?} */
                                var attributes = elements.get(elementWithReference);
                                if (!attributes) {
                                    attributes = [];
                                    elements.set(elementWithReference, attributes);
                                }
                                ( /** @type {?} */(attributes)).push({ name: attr, value: match[1] });
                            }
                        }));
                    };
                    for (var i = 0; i < elementsWithFuncIri.length; i++) {
                        _loop_1(i);
                    }
                };
                return MatIcon;
            }(_MatIconMixinBase));
            MatIcon.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{ template: '<ng-content></ng-content>',
                            selector: 'mat-icon',
                            exportAs: 'matIcon',
                            styles: [".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}"],
                            inputs: ['color'],
                            host: {
                                'role': 'img',
                                'class': 'mat-icon notranslate',
                                '[class.mat-icon-inline]': 'inline',
                                '[class.mat-icon-no-color]': 'color !== "primary" && color !== "accent" && color !== "warn"',
                            },
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatIcon.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
                { type: MatIconRegistry },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"], args: ['aria-hidden',] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [MAT_ICON_LOCATION,] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ErrorHandler"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] }
            ]; };
            MatIcon.propDecorators = {
                inline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                svgIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                fontSet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                fontIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatIconModule = /** @class */ (function () {
                function MatIconModule() {
                }
                return MatIconModule;
            }());
            MatIconModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatCommonModule"]],
                            exports: [MatIcon, _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatCommonModule"]],
                            declarations: [MatIcon],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=icon.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/input.js": 
        /*!*********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/input.js ***!
          \*********************************************************/
        /*! exports provided: MatTextareaAutosize, MatInput, getMatInputUnsupportedTypeError, MatInputModule, MAT_INPUT_VALUE_ACCESSOR */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTextareaAutosize", function () { return MatTextareaAutosize; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatInput", function () { return MatInput; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatInputUnsupportedTypeError", function () { return getMatInputUnsupportedTypeError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatInputModule", function () { return MatInputModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_INPUT_VALUE_ACCESSOR", function () { return MAT_INPUT_VALUE_ACCESSOR; });
            /* harmony import */ var _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/text-field */ "./node_modules/@angular/cdk/esm2015/text-field.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/form-field */ "./node_modules/@angular/material/esm2015/form-field.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Directive to automatically resize a textarea to fit its content.
             * @deprecated Use `cdkTextareaAutosize` from `\@angular/cdk/text-field` instead.
             * \@breaking-change 8.0.0
             */
            var MatTextareaAutosize = /** @class */ (function (_super) {
                __extends(MatTextareaAutosize, _super);
                function MatTextareaAutosize() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(MatTextareaAutosize.prototype, "matAutosizeMinRows", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this.minRows; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this.minRows = value; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatTextareaAutosize.prototype, "matAutosizeMaxRows", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this.maxRows; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this.maxRows = value; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatTextareaAutosize.prototype, "matAutosize", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this.enabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this.enabled = value; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatTextareaAutosize.prototype, "matTextareaAutosize", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this.enabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this.enabled = value; },
                    enumerable: true,
                    configurable: true
                });
                return MatTextareaAutosize;
            }(_angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_0__["CdkTextareaAutosize"]));
            MatTextareaAutosize.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',
                            exportAs: 'matTextareaAutosize',
                            inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],
                            host: {
                                'class': 'cdk-textarea-autosize mat-autosize',
                                // Textarea elements that have the directive applied should have a single row by default.
                                // Browsers normally show two rows by default and therefore this limits the minRows binding.
                                'rows': '1',
                                '(input)': '_noopInputHandler()',
                            },
                        },] },
            ];
            MatTextareaAutosize.propDecorators = {
                matAutosizeMinRows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                matAutosizeMaxRows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                matAutosize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['mat-autosize',] }],
                matTextareaAutosize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             * @param {?} type
             * @return {?}
             */
            function getMatInputUnsupportedTypeError(type) {
                return Error("Input type \"" + type + "\" isn't supported by matInput.");
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * This token is used to inject the object whose value should be set into `MatInput`. If none is
             * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide
             * themselves for this token, in order to make `MatInput` delegate the getting and setting of the
             * value to them.
             * @type {?}
             */
            var MAT_INPUT_VALUE_ACCESSOR = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('MAT_INPUT_VALUE_ACCESSOR');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.
            /** @type {?} */
            var MAT_INPUT_INVALID_TYPES = [
                'button',
                'checkbox',
                'file',
                'hidden',
                'image',
                'radio',
                'range',
                'reset',
                'submit'
            ];
            /** @type {?} */
            var nextUniqueId = 0;
            // Boilerplate for applying mixins to MatInput.
            /**
             * \@docs-private
             */
            var MatInputBase = /** @class */ (function () {
                /**
                 * @param {?} _defaultErrorStateMatcher
                 * @param {?} _parentForm
                 * @param {?} _parentFormGroup
                 * @param {?} ngControl
                 */
                function MatInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
                    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
                    this._parentForm = _parentForm;
                    this._parentFormGroup = _parentFormGroup;
                    this.ngControl = ngControl;
                }
                return MatInputBase;
            }());
            /** @type {?} */
            var _MatInputMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinErrorState"])(MatInputBase);
            /**
             * Directive that allows a native input to work inside a `MatFormField`.
             */
            var MatInput = /** @class */ (function (_super) {
                __extends(MatInput, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} _platform
                 * @param {?} ngControl
                 * @param {?} _parentForm
                 * @param {?} _parentFormGroup
                 * @param {?} _defaultErrorStateMatcher
                 * @param {?} inputValueAccessor
                 * @param {?} _autofillMonitor
                 * @param {?} ngZone
                 */
                function MatInput(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {
                    var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
                    _this._elementRef = _elementRef;
                    _this._platform = _platform;
                    _this.ngControl = ngControl;
                    _this._autofillMonitor = _autofillMonitor;
                    _this._uid = "mat-input-" + nextUniqueId++;
                    /**
                     * Whether the component is being rendered on the server.
                     */
                    _this._isServer = false;
                    /**
                     * Whether the component is a native html select.
                     */
                    _this._isNativeSelect = false;
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     */
                    _this.focused = false;
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     */
                    _this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     */
                    _this.controlType = 'mat-input';
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     */
                    _this.autofilled = false;
                    _this._disabled = false;
                    _this._required = false;
                    _this._type = 'text';
                    _this._readonly = false;
                    _this._neverEmptyInputTypes = [
                        'date',
                        'datetime',
                        'datetime-local',
                        'month',
                        'time',
                        'week'
                    ].filter(( /**
                     * @param {?} t
                     * @return {?}
                     */function (/**
                     * @param {?} t
                     * @return {?}
                     */ t) { return Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_3__["getSupportedInputTypes"])().has(t); }));
                    /** @type {?} */
                    var element = _this._elementRef.nativeElement;
                    // If no input value accessor was explicitly specified, use the element as the input value
                    // accessor.
                    _this._inputValueAccessor = inputValueAccessor || element;
                    _this._previousNativeValue = _this.value;
                    // Force setter to be called in case id was not specified.
                    _this.id = _this.id;
                    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete
                    // key. In order to get around this we need to "jiggle" the caret loose. Since this bug only
                    // exists on iOS, we only bother to install the listener on iOS.
                    if (_platform.IOS) {
                        ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () {
                            _elementRef.nativeElement.addEventListener('keyup', ( /**
                             * @param {?} event
                             * @return {?}
                             */function (event) {
                                /** @type {?} */
                                var el = ( /** @type {?} */(event.target));
                                if (!el.value && !el.selectionStart && !el.selectionEnd) {
                                    // Note: Just setting `0, 0` doesn't fix the issue. Setting
                                    // `1, 1` fixes it for the first time that you type text and
                                    // then hold delete. Toggling to `1, 1` and then back to
                                    // `0, 0` seems to completely fix it.
                                    el.setSelectionRange(1, 1);
                                    el.setSelectionRange(0, 0);
                                }
                            }));
                        }));
                    }
                    _this._isServer = !_this._platform.isBrowser;
                    _this._isNativeSelect = element.nodeName.toLowerCase() === 'select';
                    if (_this._isNativeSelect) {
                        _this.controlType = (( /** @type {?} */(element))).multiple ? 'mat-native-select-multiple' :
                            'mat-native-select';
                    }
                    return _this;
                }
                Object.defineProperty(MatInput.prototype, "disabled", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        if (this.ngControl && this.ngControl.disabled !== null) {
                            return this.ngControl.disabled;
                        }
                        return this._disabled;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                        // Browsers may not fire the blur event if the input is disabled too quickly.
                        // Reset from here to ensure that the element doesn't become stuck.
                        if (this.focused) {
                            this.focused = false;
                            this.stateChanges.next();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatInput.prototype, "id", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () { return this._id; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._id = value || this._uid; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatInput.prototype, "required", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () { return this._required; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatInput.prototype, "type", {
                    /**
                     * Input type of the element.
                     * @return {?}
                     */
                    get: function () { return this._type; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._type = value || 'text';
                        this._validateType();
                        // When using Angular inputs, developers are no longer able to set the properties on the native
                        // input element. To ensure that bindings for `type` work, we need to sync the setter
                        // with the native property. Textarea elements don't support the type property or attribute.
                        if (!this._isTextarea() && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_3__["getSupportedInputTypes"])().has(this._type)) {
                            (( /** @type {?} */(this._elementRef.nativeElement))).type = this._type;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatInput.prototype, "value", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () { return this._inputValueAccessor.value; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this.value) {
                            this._inputValueAccessor.value = value;
                            this.stateChanges.next();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatInput.prototype, "readonly", {
                    /**
                     * Whether the element is readonly.
                     * @return {?}
                     */
                    get: function () { return this._readonly; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._readonly = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatInput.prototype.ngOnInit = function () {
                    var _this = this;
                    if (this._platform.isBrowser) {
                        this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(( /**
                         * @param {?} event
                         * @return {?}
                         */function (/**
                         * @param {?} event
                         * @return {?}
                         */ event) {
                            _this.autofilled = event.isAutofilled;
                            _this.stateChanges.next();
                        }));
                    }
                };
                /**
                 * @return {?}
                 */
                MatInput.prototype.ngOnChanges = function () {
                    this.stateChanges.next();
                };
                /**
                 * @return {?}
                 */
                MatInput.prototype.ngOnDestroy = function () {
                    this.stateChanges.complete();
                    if (this._platform.isBrowser) {
                        this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);
                    }
                };
                /**
                 * @return {?}
                 */
                MatInput.prototype.ngDoCheck = function () {
                    if (this.ngControl) {
                        // We need to re-evaluate this on every change detection cycle, because there are some
                        // error triggers that we can't subscribe to (e.g. parent form submissions). This means
                        // that whatever logic is in here has to be super lean or we risk destroying the performance.
                        this.updateErrorState();
                    }
                    // We need to dirty-check the native element's value, because there are some cases where
                    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're
                    // updating the value using `emitEvent: false`).
                    this._dirtyCheckNativeValue();
                };
                /**
                 * Focuses the input.
                 * @param {?=} options
                 * @return {?}
                 */
                MatInput.prototype.focus = function (options) {
                    this._elementRef.nativeElement.focus(options);
                };
                /**
                 * Callback for the cases where the focused state of the input changes.
                 * @param {?} isFocused
                 * @return {?}
                 */
                MatInput.prototype._focusChanged = function (isFocused) {
                    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {
                        this.focused = isFocused;
                        this.stateChanges.next();
                    }
                };
                /**
                 * @return {?}
                 */
                MatInput.prototype._onInput = function () {
                    // This is a noop function and is used to let Angular know whenever the value changes.
                    // Angular will run a new change detection each time the `input` event has been dispatched.
                    // It's necessary that Angular recognizes the value change, because when floatingLabel
                    // is set to false and Angular forms aren't used, the placeholder won't recognize the
                    // value changes and will not disappear.
                    // Listening to the input event wouldn't be necessary when the input is using the
                    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.
                };
                /**
                 * Does some manual dirty checking on the native input `value` property.
                 * @protected
                 * @return {?}
                 */
                MatInput.prototype._dirtyCheckNativeValue = function () {
                    /** @type {?} */
                    var newValue = this._elementRef.nativeElement.value;
                    if (this._previousNativeValue !== newValue) {
                        this._previousNativeValue = newValue;
                        this.stateChanges.next();
                    }
                };
                /**
                 * Make sure the input is a supported type.
                 * @protected
                 * @return {?}
                 */
                MatInput.prototype._validateType = function () {
                    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {
                        throw getMatInputUnsupportedTypeError(this._type);
                    }
                };
                /**
                 * Checks whether the input type is one of the types that are never empty.
                 * @protected
                 * @return {?}
                 */
                MatInput.prototype._isNeverEmpty = function () {
                    return this._neverEmptyInputTypes.indexOf(this._type) > -1;
                };
                /**
                 * Checks whether the input is invalid based on the native validation.
                 * @protected
                 * @return {?}
                 */
                MatInput.prototype._isBadInput = function () {
                    // The `validity` property won't be present on platform-server.
                    /** @type {?} */
                    var validity = (( /** @type {?} */(this._elementRef.nativeElement))).validity;
                    return validity && validity.badInput;
                };
                /**
                 * Determines if the component host is a textarea.
                 * @protected
                 * @return {?}
                 */
                MatInput.prototype._isTextarea = function () {
                    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';
                };
                Object.defineProperty(MatInput.prototype, "empty", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&
                            !this.autofilled;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatInput.prototype, "shouldLabelFloat", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        if (this._isNativeSelect) {
                            // For a single-selection `<select>`, the label should float when the selected option has
                            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid
                            // overlapping the label with the options.
                            /** @type {?} */
                            var selectElement = ( /** @type {?} */(this._elementRef.nativeElement));
                            /** @type {?} */
                            var firstOption = selectElement.options[0];
                            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be
                            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.
                            return this.focused || selectElement.multiple || !this.empty ||
                                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);
                        }
                        else {
                            return this.focused || !this.empty;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Implemented as part of MatFormFieldControl.
                 * \@docs-private
                 * @param {?} ids
                 * @return {?}
                 */
                MatInput.prototype.setDescribedByIds = function (ids) {
                    this._ariaDescribedby = ids.join(' ');
                };
                /**
                 * Implemented as part of MatFormFieldControl.
                 * \@docs-private
                 * @return {?}
                 */
                MatInput.prototype.onContainerClick = function () {
                    // Do not re-focus the input element if the element is already focused. Otherwise it can happen
                    // that someone clicks on a time input and the cursor resets to the "hours" field while the
                    // "minutes" field was actually clicked. See: https://github.com/angular/components/issues/12849
                    if (!this.focused) {
                        this.focus();
                    }
                };
                return MatInput;
            }(_MatInputMixinBase));
            MatInput.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: "input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]",
                            exportAs: 'matInput',
                            host: {
                                /**
                                 * \@breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.
                                 */
                                'class': 'mat-input-element mat-form-field-autofill-control',
                                '[class.mat-input-server]': '_isServer',
                                // Native input properties that are overwritten by Angular inputs need to be synced with
                                // the native input element. Otherwise property bindings for those don't work.
                                '[attr.id]': 'id',
                                '[attr.placeholder]': 'placeholder',
                                '[disabled]': 'disabled',
                                '[required]': 'required',
                                '[attr.readonly]': 'readonly && !_isNativeSelect || null',
                                '[attr.aria-describedby]': '_ariaDescribedby || null',
                                '[attr.aria-invalid]': 'errorState',
                                '[attr.aria-required]': 'required.toString()',
                                '(blur)': '_focusChanged(false)',
                                '(focus)': '_focusChanged(true)',
                                '(input)': '_onInput()',
                            },
                            providers: [{ provide: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_6__["MatFormFieldControl"], useExisting: MatInput }],
                        },] },
            ];
            /** @nocollapse */
            MatInput.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_3__["Platform"] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Self"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NgForm"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormGroupDirective"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
                { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["ErrorStateMatcher"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MAT_INPUT_VALUE_ACCESSOR,] }] },
                { type: _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_0__["AutofillMonitor"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] }
            ]; };
            MatInput.propDecorators = {
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                errorStateMatcher: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                readonly: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatInputModule = /** @class */ (function () {
                function MatInputModule() {
                }
                return MatInputModule;
            }());
            MatInputModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            declarations: [MatInput, MatTextareaAutosize],
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_8__["CommonModule"],
                                _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_0__["TextFieldModule"],
                                _angular_material_form_field__WEBPACK_IMPORTED_MODULE_6__["MatFormFieldModule"],
                            ],
                            exports: [
                                _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_0__["TextFieldModule"],
                                // We re-export the `MatFormFieldModule` since `MatInput` will almost always
                                // be used together with `MatFormField`.
                                _angular_material_form_field__WEBPACK_IMPORTED_MODULE_6__["MatFormFieldModule"],
                                MatInput,
                                MatTextareaAutosize,
                            ],
                            providers: [_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["ErrorStateMatcher"]],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=input.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/list.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/list.js ***!
          \********************************************************/
        /*! exports provided: MatListModule, MatNavList, MatList, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatListItem, MAT_SELECTION_LIST_VALUE_ACCESSOR, MatSelectionListChange, MatListOption, MatSelectionList */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatListModule", function () { return MatListModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatNavList", function () { return MatNavList; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatList", function () { return MatList; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatListAvatarCssMatStyler", function () { return MatListAvatarCssMatStyler; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatListIconCssMatStyler", function () { return MatListIconCssMatStyler; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatListSubheaderCssMatStyler", function () { return MatListSubheaderCssMatStyler; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatListItem", function () { return MatListItem; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SELECTION_LIST_VALUE_ACCESSOR", function () { return MAT_SELECTION_LIST_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSelectionListChange", function () { return MatSelectionListChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatListOption", function () { return MatListOption; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSelectionList", function () { return MatSelectionList; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_material_divider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/divider */ "./node_modules/@angular/material/esm2015/divider.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Boilerplate for applying mixins to MatList.
            /**
             * \@docs-private
             */
            var MatListBase = /** @class */ (function () {
                function MatListBase() {
                }
                return MatListBase;
            }());
            /** @type {?} */
            var _MatListMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["mixinDisableRipple"])(MatListBase);
            // Boilerplate for applying mixins to MatListItem.
            /**
             * \@docs-private
             */
            var MatListItemBase = /** @class */ (function () {
                function MatListItemBase() {
                }
                return MatListItemBase;
            }());
            /** @type {?} */
            var _MatListItemMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["mixinDisableRipple"])(MatListItemBase);
            var MatNavList = /** @class */ (function (_super) {
                __extends(MatNavList, _super);
                function MatNavList() {
                    var _this = _super.apply(this, arguments) || this;
                    /**
                     * Emits when the state of the list changes.
                     */
                    _this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    return _this;
                }
                /**
                 * @return {?}
                 */
                MatNavList.prototype.ngOnChanges = function () {
                    this._stateChanges.next();
                };
                /**
                 * @return {?}
                 */
                MatNavList.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                };
                return MatNavList;
            }(_MatListMixinBase));
            MatNavList.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-nav-list',
                            exportAs: 'matNavList',
                            host: {
                                'role': 'navigation',
                                'class': 'mat-nav-list mat-list-base'
                            },
                            template: "<ng-content></ng-content>",
                            styles: [".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:0}mat-action-list button{background:0 0;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:0}@media (-ms-high-contrast:active){.mat-selection-list:focus{outline-style:dotted}.mat-list-option:focus,.mat-list-option:hover,.mat-nav-list .mat-list-item:focus,.mat-nav-list .mat-list-item:hover,mat-action-list .mat-list-item:focus,mat-action-list .mat-list-item:hover{outline:dotted 1px}}@media (hover:none){.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover{background:0 0}}"],
                            inputs: ['disableRipple'],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            var MatList = /** @class */ (function (_super) {
                __extends(MatList, _super);
                /**
                 * @param {?} _elementRef
                 */
                function MatList(_elementRef) {
                    var _this = _super.call(this) || this;
                    _this._elementRef = _elementRef;
                    /**
                     * Emits when the state of the list changes.
                     */
                    _this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    if (_this._getListType() === 'action-list') {
                        _elementRef.nativeElement.classList.add('mat-action-list');
                    }
                    return _this;
                }
                /**
                 * @return {?}
                 */
                MatList.prototype._getListType = function () {
                    /** @type {?} */
                    var nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();
                    if (nodeName === 'mat-list') {
                        return 'list';
                    }
                    if (nodeName === 'mat-action-list') {
                        return 'action-list';
                    }
                    return null;
                };
                /**
                 * @return {?}
                 */
                MatList.prototype.ngOnChanges = function () {
                    this._stateChanges.next();
                };
                /**
                 * @return {?}
                 */
                MatList.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                };
                return MatList;
            }(_MatListMixinBase));
            MatList.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-list, mat-action-list',
                            exportAs: 'matList',
                            template: "<ng-content></ng-content>",
                            host: {
                                'class': 'mat-list mat-list-base'
                            },
                            styles: [".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:0}mat-action-list button{background:0 0;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:0}@media (-ms-high-contrast:active){.mat-selection-list:focus{outline-style:dotted}.mat-list-option:focus,.mat-list-option:hover,.mat-nav-list .mat-list-item:focus,.mat-nav-list .mat-list-item:hover,mat-action-list .mat-list-item:focus,mat-action-list .mat-list-item:hover{outline:dotted 1px}}@media (hover:none){.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover{background:0 0}}"],
                            inputs: ['disableRipple'],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatList.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            /**
             * Directive whose purpose is to add the mat- CSS styling to this selector.
             * \@docs-private
             */
            var MatListAvatarCssMatStyler = /** @class */ (function () {
                function MatListAvatarCssMatStyler() {
                }
                return MatListAvatarCssMatStyler;
            }());
            MatListAvatarCssMatStyler.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-list-avatar], [matListAvatar]',
                            host: { 'class': 'mat-list-avatar' }
                        },] },
            ];
            /**
             * Directive whose purpose is to add the mat- CSS styling to this selector.
             * \@docs-private
             */
            var MatListIconCssMatStyler = /** @class */ (function () {
                function MatListIconCssMatStyler() {
                }
                return MatListIconCssMatStyler;
            }());
            MatListIconCssMatStyler.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-list-icon], [matListIcon]',
                            host: { 'class': 'mat-list-icon' }
                        },] },
            ];
            /**
             * Directive whose purpose is to add the mat- CSS styling to this selector.
             * \@docs-private
             */
            var MatListSubheaderCssMatStyler = /** @class */ (function () {
                function MatListSubheaderCssMatStyler() {
                }
                return MatListSubheaderCssMatStyler;
            }());
            MatListSubheaderCssMatStyler.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-subheader], [matSubheader]',
                            host: { 'class': 'mat-subheader' }
                        },] },
            ];
            /**
             * An item within a Material Design list.
             */
            var MatListItem = /** @class */ (function (_super) {
                __extends(MatListItem, _super);
                /**
                 * @param {?} _element
                 * @param {?} _changeDetectorRef
                 * @param {?=} navList
                 * @param {?=} list
                 */
                function MatListItem(_element, _changeDetectorRef, navList, list) {
                    var _this = _super.call(this) || this;
                    _this._element = _element;
                    _this._isInteractiveList = false;
                    _this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    _this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));
                    _this._list = navList || list;
                    // If no type attributed is specified for <button>, set it to "button".
                    // If a type attribute is already specified, do nothing.
                    /** @type {?} */
                    var element = _this._getHostElement();
                    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {
                        element.setAttribute('type', 'button');
                    }
                    if (_this._list) {
                        // React to changes in the state of the parent list since
                        // some of the item's properties depend on it (e.g. `disableRipple`).
                        _this._list._stateChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(_this._destroyed)).subscribe(( /**
                         * @return {?}
                         */function () {
                            _changeDetectorRef.markForCheck();
                        }));
                    }
                    return _this;
                }
                /**
                 * @return {?}
                 */
                MatListItem.prototype.ngAfterContentInit = function () {
                    Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["setLines"])(this._lines, this._element);
                };
                /**
                 * @return {?}
                 */
                MatListItem.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * Whether this list item should show a ripple effect when clicked.
                 * @return {?}
                 */
                MatListItem.prototype._isRippleDisabled = function () {
                    return !this._isInteractiveList || this.disableRipple ||
                        !!(this._list && this._list.disableRipple);
                };
                /**
                 * Retrieves the DOM element of the component host.
                 * @return {?}
                 */
                MatListItem.prototype._getHostElement = function () {
                    return this._element.nativeElement;
                };
                return MatListItem;
            }(_MatListItemMixinBase));
            MatListItem.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',
                            exportAs: 'matListItem',
                            host: {
                                'class': 'mat-list-item',
                                // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.
                                '[class.mat-list-item-avatar]': '_avatar || _icon',
                                '[class.mat-list-item-with-avatar]': '_avatar || _icon',
                            },
                            inputs: ['disableRipple'],
                            template: "<div class=\"mat-list-item-content\"><div class=\"mat-list-item-ripple\" mat-ripple [matRippleTrigger]=\"_getHostElement()\" [matRippleDisabled]=\"_isRippleDisabled()\"></div><ng-content select=\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\"></ng-content><div class=\"mat-list-text\"><ng-content select=\"[mat-line], [matLine]\"></ng-content></div><ng-content></ng-content></div>",
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatListItem.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: MatNavList, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: MatList, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            MatListItem.propDecorators = {
                _lines: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatLine"], { descendants: true },] }],
                _avatar: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatListAvatarCssMatStyler, { static: false },] }],
                _icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatListIconCssMatStyler, { static: false },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             */
            var MatSelectionListBase = /** @class */ (function () {
                function MatSelectionListBase() {
                }
                return MatSelectionListBase;
            }());
            /** @type {?} */
            var _MatSelectionListMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["mixinDisableRipple"])(MatSelectionListBase);
            /**
             * \@docs-private
             */
            var MatListOptionBase = /** @class */ (function () {
                function MatListOptionBase() {
                }
                return MatListOptionBase;
            }());
            /** @type {?} */
            var _MatListOptionMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["mixinDisableRipple"])(MatListOptionBase);
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_SELECTION_LIST_VALUE_ACCESSOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_8__["NG_VALUE_ACCESSOR"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MatSelectionList; })),
                multi: true
            };
            /**
             * Change event that is being fired whenever the selected state of an option changes.
             */
            var MatSelectionListChange = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} option
                 */
                function MatSelectionListChange(source, option) {
                    this.source = source;
                    this.option = option;
                }
                return MatSelectionListChange;
            }());
            /**
             * Component for list-options of selection-list. Each list-option can automatically
             * generate a checkbox and can put current item into the selectionModel of selection-list
             * if the current item is selected.
             */
            var MatListOption = /** @class */ (function (_super) {
                __extends(MatListOption, _super);
                /**
                 * @param {?} _element
                 * @param {?} _changeDetector
                 * @param {?} selectionList
                 */
                function MatListOption(_element, _changeDetector, selectionList) {
                    var _this = _super.call(this) || this;
                    _this._element = _element;
                    _this._changeDetector = _changeDetector;
                    _this.selectionList = selectionList;
                    _this._selected = false;
                    _this._disabled = false;
                    _this._hasFocus = false;
                    /**
                     * Whether the label should appear before or after the checkbox. Defaults to 'after'
                     */
                    _this.checkboxPosition = 'after';
                    return _this;
                }
                Object.defineProperty(MatListOption.prototype, "color", {
                    /**
                     * Theme color of the list option. This sets the color of the checkbox.
                     * @return {?}
                     */
                    get: function () { return this._color || this.selectionList.color; },
                    /**
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) { this._color = newValue; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatListOption.prototype, "value", {
                    /**
                     * Value of the option
                     * @return {?}
                     */
                    get: function () { return this._value; },
                    /**
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        if (this.selected && newValue !== this.value) {
                            this.selected = false;
                        }
                        this._value = newValue;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatListOption.prototype, "disabled", {
                    /**
                     * Whether the option is disabled.
                     * @return {?}
                     */
                    get: function () { return this._disabled || (this.selectionList && this.selectionList.disabled); },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
                        if (newValue !== this._disabled) {
                            this._disabled = newValue;
                            this._changeDetector.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatListOption.prototype, "selected", {
                    /**
                     * Whether the option is selected.
                     * @return {?}
                     */
                    get: function () { return this.selectionList.selectedOptions.isSelected(this); },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var isSelected = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
                        if (isSelected !== this._selected) {
                            this._setSelected(isSelected);
                            this.selectionList._reportValueChange();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatListOption.prototype.ngOnInit = function () {
                    var _this = this;
                    /** @type {?} */
                    var list = this.selectionList;
                    if (list._value && list._value.some(( /**
                     * @param {?} value
                     * @return {?}
                     */function (/**
                     * @param {?} value
                     * @return {?}
                     */ value) { return list.compareWith(value, _this._value); }))) {
                        this._setSelected(true);
                    }
                    /** @type {?} */
                    var wasSelected = this._selected;
                    // List options that are selected at initialization can't be reported properly to the form
                    // control. This is because it takes some time until the selection-list knows about all
                    // available options. Also it can happen that the ControlValueAccessor has an initial value
                    // that should be used instead. Deferring the value change report to the next tick ensures
                    // that the form control value is not being overwritten.
                    Promise.resolve().then(( /**
                     * @return {?}
                     */function () {
                        if (_this._selected || wasSelected) {
                            _this.selected = true;
                            _this._changeDetector.markForCheck();
                        }
                    }));
                };
                /**
                 * @return {?}
                 */
                MatListOption.prototype.ngAfterContentInit = function () {
                    Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["setLines"])(this._lines, this._element);
                };
                /**
                 * @return {?}
                 */
                MatListOption.prototype.ngOnDestroy = function () {
                    var _this = this;
                    if (this.selected) {
                        // We have to delay this until the next tick in order
                        // to avoid changed after checked errors.
                        Promise.resolve().then(( /**
                         * @return {?}
                         */function () {
                            _this.selected = false;
                        }));
                    }
                    /** @type {?} */
                    var hadFocus = this._hasFocus;
                    /** @type {?} */
                    var newActiveItem = this.selectionList._removeOptionFromList(this);
                    // Only move focus if this option was focused at the time it was destroyed.
                    if (hadFocus && newActiveItem) {
                        newActiveItem.focus();
                    }
                };
                /**
                 * Toggles the selection state of the option.
                 * @return {?}
                 */
                MatListOption.prototype.toggle = function () {
                    this.selected = !this.selected;
                };
                /**
                 * Allows for programmatic focusing of the option.
                 * @return {?}
                 */
                MatListOption.prototype.focus = function () {
                    this._element.nativeElement.focus();
                };
                /**
                 * Returns the list item's text label. Implemented as a part of the FocusKeyManager.
                 * \@docs-private
                 * @return {?}
                 */
                MatListOption.prototype.getLabel = function () {
                    return this._text ? (this._text.nativeElement.textContent || '') : '';
                };
                /**
                 * Whether this list item should show a ripple effect when clicked.
                 * @return {?}
                 */
                MatListOption.prototype._isRippleDisabled = function () {
                    return this.disabled || this.disableRipple || this.selectionList.disableRipple;
                };
                /**
                 * @return {?}
                 */
                MatListOption.prototype._handleClick = function () {
                    if (!this.disabled) {
                        this.toggle();
                        // Emit a change event if the selected state of the option changed through user interaction.
                        this.selectionList._emitChangeEvent(this);
                    }
                };
                /**
                 * @return {?}
                 */
                MatListOption.prototype._handleFocus = function () {
                    this.selectionList._setFocusedOption(this);
                    this._hasFocus = true;
                };
                /**
                 * @return {?}
                 */
                MatListOption.prototype._handleBlur = function () {
                    this.selectionList._onTouched();
                    this._hasFocus = false;
                };
                /**
                 * Retrieves the DOM element of the component host.
                 * @return {?}
                 */
                MatListOption.prototype._getHostElement = function () {
                    return this._element.nativeElement;
                };
                /**
                 * Sets the selected state of the option. Returns whether the value has changed.
                 * @param {?} selected
                 * @return {?}
                 */
                MatListOption.prototype._setSelected = function (selected) {
                    if (selected === this._selected) {
                        return false;
                    }
                    this._selected = selected;
                    if (selected) {
                        this.selectionList.selectedOptions.select(this);
                    }
                    else {
                        this.selectionList.selectedOptions.deselect(this);
                    }
                    this._changeDetector.markForCheck();
                    return true;
                };
                /**
                 * Notifies Angular that the option needs to be checked in the next change detection run. Mainly
                 * used to trigger an update of the list option if the disabled state of the selection list
                 * changed.
                 * @return {?}
                 */
                MatListOption.prototype._markForCheck = function () {
                    this._changeDetector.markForCheck();
                };
                return MatListOption;
            }(_MatListOptionMixinBase));
            MatListOption.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-list-option',
                            exportAs: 'matListOption',
                            inputs: ['disableRipple'],
                            host: {
                                'role': 'option',
                                'class': 'mat-list-item mat-list-option',
                                '(focus)': '_handleFocus()',
                                '(blur)': '_handleBlur()',
                                '(click)': '_handleClick()',
                                'tabindex': '-1',
                                '[class.mat-list-item-disabled]': 'disabled',
                                '[class.mat-list-item-with-avatar]': '_avatar || _icon',
                                // Manually set the "primary" or "warn" class if the color has been explicitly
                                // set to "primary" or "warn". The pseudo checkbox picks up these classes for
                                // its theme.
                                '[class.mat-primary]': 'color === "primary"',
                                // Even though accent is the default, we need to set this class anyway, because the  list might
                                // be placed inside a parent that has one of the other colors with a higher specificity.
                                '[class.mat-accent]': 'color !== "primary" && color !== "warn"',
                                '[class.mat-warn]': 'color === "warn"',
                                '[attr.aria-selected]': 'selected',
                                '[attr.aria-disabled]': 'disabled',
                            },
                            template: "<div class=\"mat-list-item-content\" [class.mat-list-item-content-reverse]=\"checkboxPosition == 'after'\"><div mat-ripple class=\"mat-list-item-ripple\" [matRippleTrigger]=\"_getHostElement()\" [matRippleDisabled]=\"_isRippleDisabled()\"></div><mat-pseudo-checkbox [state]=\"selected ? 'checked' : 'unchecked'\" [disabled]=\"disabled\"></mat-pseudo-checkbox><div class=\"mat-list-text\" #text><ng-content></ng-content></div><ng-content select=\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\"></ng-content></div>",
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatListOption.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: MatSelectionList, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                                                 * @return {?}
                                                 */function () { return MatSelectionList; })),] }] }
            ]; };
            MatListOption.propDecorators = {
                _avatar: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatListAvatarCssMatStyler, { static: false },] }],
                _icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatListIconCssMatStyler, { static: false },] }],
                _lines: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatLine"],] }],
                _text: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['text', { static: false },] }],
                checkboxPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * Material Design list component where each item is a selectable option. Behaves as a listbox.
             */
            var MatSelectionList = /** @class */ (function (_super) {
                __extends(MatSelectionList, _super);
                /**
                 * @param {?} _element
                 * @param {?} tabIndex
                 */
                function MatSelectionList(_element, tabIndex) {
                    var _this = _super.call(this) || this;
                    _this._element = _element;
                    /**
                     * Emits a change event whenever the selected state of an option changes.
                     */
                    _this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Tabindex of the selection list.
                     */
                    _this.tabIndex = 0;
                    /**
                     * Theme color of the selection list. This sets the checkbox color for all list options.
                     */
                    _this.color = 'accent';
                    /**
                     * Function used for comparing an option against the selected value when determining which
                     * options should appear as selected. The first argument is the value of an options. The second
                     * one is a value from the selected value. A boolean must be returned.
                     */
                    _this.compareWith = ( /**
                     * @param {?} a1
                     * @param {?} a2
                     * @return {?}
                     */function (a1, a2) { return a1 === a2; });
                    _this._disabled = false;
                    /**
                     * The currently selected options.
                     */
                    _this.selectedOptions = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__["SelectionModel"](true);
                    /**
                     * View to model callback that should be called whenever the selected options change.
                     */
                    _this._onChange = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    /**
                     * Emits when the list has been destroyed.
                     */
                    _this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * View to model callback that should be called if the list or its options lost focus.
                     */
                    _this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    _this.tabIndex = parseInt(tabIndex) || 0;
                    return _this;
                }
                Object.defineProperty(MatSelectionList.prototype, "disabled", {
                    /**
                     * Whether the selection list is disabled.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
                        // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection
                        // strategy. Therefore the options will not check for any changes if the `MatSelectionList`
                        // changed its state. Since we know that a change to `disabled` property of the list affects
                        // the state of the options, we manually mark each option for check.
                        this._markOptionsForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatSelectionList.prototype.ngAfterContentInit = function () {
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__["FocusKeyManager"](this.options)
                        .withWrap()
                        .withTypeAhead()
                        // Allow disabled items to be focusable. For accessibility reasons, there must be a way for
                        // screenreader users, that allows reading the different options of the list.
                        .skipPredicate(( /**
                 * @return {?}
                 */function () { return false; }))
                        .withAllowedModifierKeys(['shiftKey']);
                    if (this._value) {
                        this._setOptionsFromValues(this._value);
                    }
                    // Sync external changes to the model back to the options.
                    this.selectedOptions.onChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        if (event.added) {
                            for (var _b = 0, _c = event.added; _b < _c.length; _b++) {
                                var item = _c[_b];
                                item.selected = true;
                            }
                        }
                        if (event.removed) {
                            for (var _d = 0, _e = event.removed; _d < _e.length; _d++) {
                                var item = _e[_d];
                                item.selected = false;
                            }
                        }
                    }));
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                MatSelectionList.prototype.ngOnChanges = function (changes) {
                    /** @type {?} */
                    var disableRippleChanges = changes['disableRipple'];
                    /** @type {?} */
                    var colorChanges = changes['color'];
                    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||
                        (colorChanges && !colorChanges.firstChange)) {
                        this._markOptionsForCheck();
                    }
                };
                /**
                 * @return {?}
                 */
                MatSelectionList.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                    this._isDestroyed = true;
                };
                /**
                 * Focuses the selection list.
                 * @param {?=} options
                 * @return {?}
                 */
                MatSelectionList.prototype.focus = function (options) {
                    this._element.nativeElement.focus(options);
                };
                /**
                 * Selects all of the options.
                 * @return {?}
                 */
                MatSelectionList.prototype.selectAll = function () {
                    this._setAllOptionsSelected(true);
                };
                /**
                 * Deselects all of the options.
                 * @return {?}
                 */
                MatSelectionList.prototype.deselectAll = function () {
                    this._setAllOptionsSelected(false);
                };
                /**
                 * Sets the focused option of the selection-list.
                 * @param {?} option
                 * @return {?}
                 */
                MatSelectionList.prototype._setFocusedOption = function (option) {
                    this._keyManager.updateActiveItem(option);
                };
                /**
                 * Removes an option from the selection list and updates the active item.
                 * @param {?} option
                 * @return {?} Currently-active item.
                 */
                MatSelectionList.prototype._removeOptionFromList = function (option) {
                    /** @type {?} */
                    var optionIndex = this._getOptionIndex(option);
                    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {
                        // Check whether the option is the last item
                        if (optionIndex > 0) {
                            this._keyManager.updateActiveItem(optionIndex - 1);
                        }
                        else if (optionIndex === 0 && this.options.length > 1) {
                            this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));
                        }
                    }
                    return this._keyManager.activeItem;
                };
                /**
                 * Passes relevant key presses to our key manager.
                 * @param {?} event
                 * @return {?}
                 */
                MatSelectionList.prototype._keydown = function (event) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    /** @type {?} */
                    var manager = this._keyManager;
                    /** @type {?} */
                    var previousFocusIndex = manager.activeItemIndex;
                    /** @type {?} */
                    var hasModifier = Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["hasModifierKey"])(event);
                    switch (keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["SPACE"]:
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["ENTER"]:
                            if (!hasModifier) {
                                this._toggleFocusedOption();
                                // Always prevent space from scrolling the page since the list has focus
                                event.preventDefault();
                            }
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["HOME"]:
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["END"]:
                            if (!hasModifier) {
                                keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["HOME"] ? manager.setFirstItemActive() : manager.setLastItemActive();
                                event.preventDefault();
                            }
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["A"]:
                            if (Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["hasModifierKey"])(event, 'ctrlKey')) {
                                this.options.find(( /**
                                 * @param {?} option
                                 * @return {?}
                                 */function (/**
                                 * @param {?} option
                                 * @return {?}
                                 */ option) { return !option.selected; })) ? this.selectAll() : this.deselectAll();
                                event.preventDefault();
                            }
                            break;
                        default:
                            manager.onKeydown(event);
                    }
                    if ((keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["UP_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["DOWN_ARROW"]) && event.shiftKey &&
                        manager.activeItemIndex !== previousFocusIndex) {
                        this._toggleFocusedOption();
                    }
                };
                /**
                 * Reports a value change to the ControlValueAccessor
                 * @return {?}
                 */
                MatSelectionList.prototype._reportValueChange = function () {
                    // Stop reporting value changes after the list has been destroyed. This avoids
                    // cases where the list might wrongly reset its value once it is removed, but
                    // the form control is still live.
                    if (this.options && !this._isDestroyed) {
                        /** @type {?} */
                        var value = this._getSelectedOptionValues();
                        this._onChange(value);
                        this._value = value;
                    }
                };
                /**
                 * Emits a change event if the selected state of an option changed.
                 * @param {?} option
                 * @return {?}
                 */
                MatSelectionList.prototype._emitChangeEvent = function (option) {
                    this.selectionChange.emit(new MatSelectionListChange(this, option));
                };
                /**
                 * Implemented as part of ControlValueAccessor.
                 * @param {?} values
                 * @return {?}
                 */
                MatSelectionList.prototype.writeValue = function (values) {
                    this._value = values;
                    if (this.options) {
                        this._setOptionsFromValues(values || []);
                    }
                };
                /**
                 * Implemented as a part of ControlValueAccessor.
                 * @param {?} isDisabled
                 * @return {?}
                 */
                MatSelectionList.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                /**
                 * Implemented as part of ControlValueAccessor.
                 * @param {?} fn
                 * @return {?}
                 */
                MatSelectionList.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                /**
                 * Implemented as part of ControlValueAccessor.
                 * @param {?} fn
                 * @return {?}
                 */
                MatSelectionList.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                /**
                 * Sets the selected options based on the specified values.
                 * @private
                 * @param {?} values
                 * @return {?}
                 */
                MatSelectionList.prototype._setOptionsFromValues = function (values) {
                    var _this = this;
                    this.options.forEach(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option._setSelected(false); }));
                    values.forEach(( /**
                     * @param {?} value
                     * @return {?}
                     */function (/**
                     * @param {?} value
                     * @return {?}
                     */ value) {
                        /** @type {?} */
                        var correspondingOption = _this.options.find(( /**
                         * @param {?} option
                         * @return {?}
                         */function (/**
                         * @param {?} option
                         * @return {?}
                         */ option) {
                            // Skip options that are already in the model. This allows us to handle cases
                            // where the same primitive value is selected multiple times.
                            return option.selected ? false : _this.compareWith(option.value, value);
                        }));
                        if (correspondingOption) {
                            correspondingOption._setSelected(true);
                        }
                    }));
                };
                /**
                 * Returns the values of the selected options.
                 * @private
                 * @return {?}
                 */
                MatSelectionList.prototype._getSelectedOptionValues = function () {
                    return this.options.filter(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option.selected; })).map(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option.value; }));
                };
                /**
                 * Toggles the state of the currently focused option if enabled.
                 * @private
                 * @return {?}
                 */
                MatSelectionList.prototype._toggleFocusedOption = function () {
                    /** @type {?} */
                    var focusedIndex = this._keyManager.activeItemIndex;
                    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {
                        /** @type {?} */
                        var focusedOption = this.options.toArray()[focusedIndex];
                        if (focusedOption && !focusedOption.disabled) {
                            focusedOption.toggle();
                            // Emit a change event because the focused option changed its state through user
                            // interaction.
                            this._emitChangeEvent(focusedOption);
                        }
                    }
                };
                /**
                 * Sets the selected state on all of the options
                 * and emits an event if anything changed.
                 * @private
                 * @param {?} isSelected
                 * @return {?}
                 */
                MatSelectionList.prototype._setAllOptionsSelected = function (isSelected) {
                    // Keep track of whether anything changed, because we only want to
                    // emit the changed event when something actually changed.
                    /** @type {?} */
                    var hasChanged = false;
                    this.options.forEach(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) {
                        if (option._setSelected(isSelected)) {
                            hasChanged = true;
                        }
                    }));
                    if (hasChanged) {
                        this._reportValueChange();
                    }
                };
                /**
                 * Utility to ensure all indexes are valid.
                 * @private
                 * @param {?} index The index to be checked.
                 * @return {?} True if the index is valid for our list of options.
                 */
                MatSelectionList.prototype._isValidIndex = function (index) {
                    return index >= 0 && index < this.options.length;
                };
                /**
                 * Returns the index of the specified list option.
                 * @private
                 * @param {?} option
                 * @return {?}
                 */
                MatSelectionList.prototype._getOptionIndex = function (option) {
                    return this.options.toArray().indexOf(option);
                };
                /**
                 * Marks all the options to be checked in the next change detection run.
                 * @private
                 * @return {?}
                 */
                MatSelectionList.prototype._markOptionsForCheck = function () {
                    if (this.options) {
                        this.options.forEach(( /**
                         * @param {?} option
                         * @return {?}
                         */function (/**
                         * @param {?} option
                         * @return {?}
                         */ option) { return option._markForCheck(); }));
                    }
                };
                return MatSelectionList;
            }(_MatSelectionListMixinBase));
            MatSelectionList.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-selection-list',
                            exportAs: 'matSelectionList',
                            inputs: ['disableRipple'],
                            host: {
                                'role': 'listbox',
                                '[tabIndex]': 'tabIndex',
                                'class': 'mat-selection-list mat-list-base',
                                '(blur)': '_onTouched()',
                                '(keydown)': '_keydown($event)',
                                'aria-multiselectable': 'true',
                                '[attr.aria-disabled]': 'disabled.toString()',
                            },
                            template: '<ng-content></ng-content>',
                            styles: [".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:0}mat-action-list button{background:0 0;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:0}@media (-ms-high-contrast:active){.mat-selection-list:focus{outline-style:dotted}.mat-list-option:focus,.mat-list-option:hover,.mat-nav-list .mat-list-item:focus,.mat-nav-list .mat-list-item:hover,mat-action-list .mat-list-item:focus,mat-action-list .mat-list-item:hover{outline:dotted 1px}}@media (hover:none){.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover{background:0 0}}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
                        },] },
            ];
            /** @nocollapse */
            MatSelectionList.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"], args: ['tabindex',] }] }
            ]; };
            MatSelectionList.propDecorators = {
                options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatListOption, { descendants: true },] }],
                selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                compareWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatListModule = /** @class */ (function () {
                function MatListModule() {
                }
                return MatListModule;
            }());
            MatListModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatLineModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatRippleModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatCommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatPseudoCheckboxModule"], _angular_common__WEBPACK_IMPORTED_MODULE_9__["CommonModule"]],
                            exports: [
                                MatList,
                                MatNavList,
                                MatListItem,
                                MatListAvatarCssMatStyler,
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatLineModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatCommonModule"],
                                MatListIconCssMatStyler,
                                MatListSubheaderCssMatStyler,
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatPseudoCheckboxModule"],
                                MatSelectionList,
                                MatListOption,
                                _angular_material_divider__WEBPACK_IMPORTED_MODULE_10__["MatDividerModule"]
                            ],
                            declarations: [
                                MatList,
                                MatNavList,
                                MatListItem,
                                MatListAvatarCssMatStyler,
                                MatListIconCssMatStyler,
                                MatListSubheaderCssMatStyler,
                                MatSelectionList,
                                MatListOption
                            ],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=list.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/menu.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/menu.js ***!
          \********************************************************/
        /*! exports provided: MatMenu, MAT_MENU_DEFAULT_OPTIONS, _MatMenu, _MatMenuBase, MatMenuItem, MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_PANEL, _MatMenuDirectivesModule, MatMenuModule, matMenuAnimations, fadeInItems, transformMenu, MatMenuContent, ɵa22, ɵb22, ɵc22 */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatMenu", function () { return MatMenu; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_MENU_DEFAULT_OPTIONS", function () { return MAT_MENU_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_MatMenu", function () { return _MatMenu; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_MatMenuBase", function () { return _MatMenuBase; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatMenuItem", function () { return MatMenuItem; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatMenuTrigger", function () { return MatMenuTrigger; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_MENU_SCROLL_STRATEGY", function () { return MAT_MENU_SCROLL_STRATEGY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_MENU_PANEL", function () { return MAT_MENU_PANEL; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_MatMenuDirectivesModule", function () { return _MatMenuDirectivesModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatMenuModule", function () { return MatMenuModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matMenuAnimations", function () { return matMenuAnimations; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fadeInItems", function () { return fadeInItems; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMenu", function () { return transformMenu; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatMenuContent", function () { return MatMenuContent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa22", function () { return MAT_MENU_DEFAULT_OPTIONS_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb22", function () { return MAT_MENU_SCROLL_STRATEGY_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc22", function () { return MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER; });
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Animations used by the mat-menu component.
             * Animation duration and timing values are based on:
             * https://material.io/guidelines/components/menus.html#menus-usage
             * \@docs-private
             * @type {?}
             */
            var matMenuAnimations = {
                /**
                 * This animation controls the menu panel's entry and exit from the page.
                 *
                 * When the menu panel is added to the DOM, it scales in and fades in its border.
                 *
                 * When the menu panel is removed from the DOM, it simply fades out after a brief
                 * delay to display the ripple.
                 */
                transformMenu: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('transformMenu', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
                        opacity: 0,
                        transform: 'scale(0.8)'
                    })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('void => enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["group"])([
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["query"])('.mat-menu-content, .mat-mdc-menu-content', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('100ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
                            opacity: 1
                        }))),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('120ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ transform: 'scale(1)' })),
                    ])),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('100ms 25ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 0 })))
                ]),
                /**
                 * This animation fades in the background color and content of the menu panel
                 * after its containing element is scaled in.
                 */
                fadeInItems: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('fadeInItems', [
                    // TODO(crisbeto): this is inside the `transformMenu`
                    // now. Remove next time we do breaking changes.
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('showing', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 1 })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('void => *', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 0 }),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                    ])
                ])
            };
            /**
             * @deprecated
             * \@breaking-change 8.0.0
             * \@docs-private
             * @type {?}
             */
            var fadeInItems = matMenuAnimations.fadeInItems;
            /**
             * @deprecated
             * \@breaking-change 8.0.0
             * \@docs-private
             * @type {?}
             */
            var transformMenu = matMenuAnimations.transformMenu;
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Menu content that will be rendered lazily once the menu is opened.
             */
            var MatMenuContent = /** @class */ (function () {
                /**
                 * @param {?} _template
                 * @param {?} _componentFactoryResolver
                 * @param {?} _appRef
                 * @param {?} _injector
                 * @param {?} _viewContainerRef
                 * @param {?} _document
                 * @param {?=} _changeDetectorRef
                 */
                function MatMenuContent(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {
                    this._template = _template;
                    this._componentFactoryResolver = _componentFactoryResolver;
                    this._appRef = _appRef;
                    this._injector = _injector;
                    this._viewContainerRef = _viewContainerRef;
                    this._document = _document;
                    this._changeDetectorRef = _changeDetectorRef;
                    /**
                     * Emits when the menu content has been attached.
                     */
                    this._attached = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                }
                /**
                 * Attaches the content with a particular context.
                 * \@docs-private
                 * @param {?=} context
                 * @return {?}
                 */
                MatMenuContent.prototype.attach = function (context) {
                    if (context === void 0) { context = {}; }
                    if (!this._portal) {
                        this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["TemplatePortal"](this._template, this._viewContainerRef);
                    }
                    this.detach();
                    if (!this._outlet) {
                        this._outlet = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["DomPortalOutlet"](this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);
                    }
                    /** @type {?} */
                    var element = this._template.elementRef.nativeElement;
                    // Because we support opening the same menu from different triggers (which in turn have their
                    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we
                    // risk it staying attached to a pane that's no longer in the DOM.
                    ( /** @type {?} */(element.parentNode)).insertBefore(this._outlet.outletElement, element);
                    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu
                    // content via `createEmbeddedView` does not cause the content to be seen as "dirty"
                    // by Angular. This causes the `@ContentChildren` for menu items within the menu to
                    // not be updated by Angular. By explicitly marking for check here, we tell Angular that
                    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.
                    // @breaking-change 9.0.0 Make change detector ref required
                    if (this._changeDetectorRef) {
                        this._changeDetectorRef.markForCheck();
                    }
                    this._portal.attach(this._outlet, context);
                    this._attached.next();
                };
                /**
                 * Detaches the content.
                 * \@docs-private
                 * @return {?}
                 */
                MatMenuContent.prototype.detach = function () {
                    if (this._portal.isAttached) {
                        this._portal.detach();
                    }
                };
                /**
                 * @return {?}
                 */
                MatMenuContent.prototype.ngOnDestroy = function () {
                    if (this._outlet) {
                        this._outlet.dispose();
                    }
                };
                return MatMenuContent;
            }());
            MatMenuContent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: 'ng-template[matMenuContent]'
                        },] },
            ];
            /** @nocollapse */
            MatMenuContent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ComponentFactoryResolver"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ApplicationRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injector"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance
             * \@docs-private
             * @return {?}
             */
            function throwMatMenuMissingError() {
                throw Error("matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>");
            }
            /**
             * Throws an exception for the case when menu's x-position value isn't valid.
             * In other words, it doesn't match 'before' or 'after'.
             * \@docs-private
             * @return {?}
             */
            function throwMatMenuInvalidPositionX() {
                throw Error("xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>");
            }
            /**
             * Throws an exception for the case when menu's y-position value isn't valid.
             * In other words, it doesn't match 'above' or 'below'.
             * \@docs-private
             * @return {?}
             */
            function throwMatMenuInvalidPositionY() {
                throw Error("yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>");
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token used to provide the parent menu to menu-specific components.
             * \@docs-private
             * @type {?}
             */
            var MAT_MENU_PANEL = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('MAT_MENU_PANEL');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Boilerplate for applying mixins to MatMenuItem.
            /**
             * \@docs-private
             */
            var MatMenuItemBase = /** @class */ (function () {
                function MatMenuItemBase() {
                }
                return MatMenuItemBase;
            }());
            /** @type {?} */
            var _MatMenuItemMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["mixinDisabled"])(MatMenuItemBase));
            /**
             * This directive is intended to be used inside an mat-menu tag.
             * It exists mostly to set the role attribute.
             */
            var MatMenuItem = /** @class */ (function (_super) {
                __extends(MatMenuItem, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?=} document
                 * @param {?=} _focusMonitor
                 * @param {?=} _parentMenu
                 */
                function MatMenuItem(_elementRef, document, _focusMonitor, _parentMenu) {
                    var _this = 
                    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.
                    _super.call(this) || this;
                    _this._elementRef = _elementRef;
                    _this._focusMonitor = _focusMonitor;
                    _this._parentMenu = _parentMenu;
                    /**
                     * ARIA role for the menu item.
                     */
                    _this.role = 'menuitem';
                    /**
                     * Stream that emits when the menu item is hovered.
                     */
                    _this._hovered = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    /**
                     * Whether the menu item is highlighted.
                     */
                    _this._highlighted = false;
                    /**
                     * Whether the menu item acts as a trigger for a sub-menu.
                     */
                    _this._triggersSubmenu = false;
                    if (_focusMonitor) {
                        // Start monitoring the element so it gets the appropriate focused classes. We want
                        // to show the focus style for menu items only when the focus was not caused by a
                        // mouse or touch interaction.
                        _focusMonitor.monitor(_this._elementRef, false);
                    }
                    if (_parentMenu && _parentMenu.addItem) {
                        _parentMenu.addItem(_this);
                    }
                    _this._document = document;
                    return _this;
                }
                /**
                 * Focuses the menu item.
                 * @param {?=} origin
                 * @param {?=} options
                 * @return {?}
                 */
                MatMenuItem.prototype.focus = function (origin, options) {
                    if (origin === void 0) { origin = 'program'; }
                    if (this._focusMonitor) {
                        this._focusMonitor.focusVia(this._getHostElement(), origin, options);
                    }
                    else {
                        this._getHostElement().focus(options);
                    }
                };
                /**
                 * @return {?}
                 */
                MatMenuItem.prototype.ngOnDestroy = function () {
                    if (this._focusMonitor) {
                        this._focusMonitor.stopMonitoring(this._elementRef);
                    }
                    if (this._parentMenu && this._parentMenu.removeItem) {
                        this._parentMenu.removeItem(this);
                    }
                    this._hovered.complete();
                };
                /**
                 * Used to set the `tabindex`.
                 * @return {?}
                 */
                MatMenuItem.prototype._getTabIndex = function () {
                    return this.disabled ? '-1' : '0';
                };
                /**
                 * Returns the host DOM element.
                 * @return {?}
                 */
                MatMenuItem.prototype._getHostElement = function () {
                    return this._elementRef.nativeElement;
                };
                /**
                 * Prevents the default element actions if it is disabled.
                 * @param {?} event
                 * @return {?}
                 */
                // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
                // In Ivy the `host` bindings will be merged when this class is extended, whereas in
                // ViewEngine they're overwritten.
                // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
                // tslint:disable-next-line:no-host-decorator-in-concrete
                MatMenuItem.prototype._checkDisabled = function (event) {
                    if (this.disabled) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                };
                /**
                 * Emits to the hover stream.
                 * @return {?}
                 */
                // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
                // In Ivy the `host` bindings will be merged when this class is extended, whereas in
                // ViewEngine they're overwritten.
                // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
                // tslint:disable-next-line:no-host-decorator-in-concrete
                MatMenuItem.prototype._handleMouseEnter = function () {
                    this._hovered.next(this);
                };
                /**
                 * Gets the label to be used when determining whether the option should be focused.
                 * @return {?}
                 */
                MatMenuItem.prototype.getLabel = function () {
                    /** @type {?} */
                    var element = this._elementRef.nativeElement;
                    /** @type {?} */
                    var textNodeType = this._document ? this._document.TEXT_NODE : 3;
                    /** @type {?} */
                    var output = '';
                    if (element.childNodes) {
                        /** @type {?} */
                        var length = element.childNodes.length;
                        // Go through all the top-level text nodes and extract their text.
                        // We skip anything that's not a text node to prevent the text from
                        // being thrown off by something like an icon.
                        for (var i = 0; i < length; i++) {
                            if (element.childNodes[i].nodeType === textNodeType) {
                                output += element.childNodes[i].textContent;
                            }
                        }
                    }
                    return output.trim();
                };
                return MatMenuItem;
            }(_MatMenuItemMixinBase));
            MatMenuItem.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{ selector: '[mat-menu-item]',
                            exportAs: 'matMenuItem',
                            inputs: ['disabled', 'disableRipple'],
                            host: {
                                '[attr.role]': 'role',
                                'class': 'mat-menu-item',
                                '[class.mat-menu-item-highlighted]': '_highlighted',
                                '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',
                                '[attr.tabindex]': '_getTabIndex()',
                                '[attr.aria-disabled]': 'disabled.toString()',
                                '[attr.disabled]': 'disabled || null',
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                            template: "<ng-content></ng-content><div class=\"mat-menu-ripple\" matRipple [matRippleDisabled]=\"disableRipple || disabled\" [matRippleTrigger]=\"_getHostElement()\"></div>",
                        },] },
            ];
            /** @nocollapse */
            MatMenuItem.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__["FocusMonitor"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MAT_MENU_PANEL,] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
            ]; };
            MatMenuItem.propDecorators = {
                role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                _checkDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["HostListener"], args: ['click', ['$event'],] }],
                _handleMouseEnter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["HostListener"], args: ['mouseenter',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token to be used to override the default options for `mat-menu`.
             * @type {?}
             */
            var MAT_MENU_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mat-menu-default-options', {
                providedIn: 'root',
                factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function MAT_MENU_DEFAULT_OPTIONS_FACTORY() {
                return {
                    overlapTrigger: false,
                    xPosition: 'after',
                    yPosition: 'below',
                    backdropClass: 'cdk-overlay-transparent-backdrop',
                };
            }
            /**
             * Start elevation for the menu panel.
             * \@docs-private
             * @type {?}
             */
            var MAT_MENU_BASE_ELEVATION = 4;
            /**
             * Base class with all of the `MatMenu` functionality.
             */
            // tslint:disable-next-line:class-name
            var _MatMenuBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _ngZone
                 * @param {?} _defaultOptions
                 */
                function _MatMenuBase(_elementRef, _ngZone, _defaultOptions) {
                    this._elementRef = _elementRef;
                    this._ngZone = _ngZone;
                    this._defaultOptions = _defaultOptions;
                    this._xPosition = this._defaultOptions.xPosition;
                    this._yPosition = this._defaultOptions.yPosition;
                    /**
                     * Only the direct descendant menu items.
                     */
                    this._directDescendantItems = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["QueryList"]();
                    /**
                     * Subscription to tab events on the menu panel
                     */
                    this._tabSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    /**
                     * Config object to be passed into the menu's ngClass
                     */
                    this._classList = {};
                    /**
                     * Current state of the panel animation.
                     */
                    this._panelAnimationState = 'void';
                    /**
                     * Emits whenever an animation on the menu completes.
                     */
                    this._animationDone = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    /**
                     * Class to be added to the backdrop element.
                     */
                    this.backdropClass = this._defaultOptions.backdropClass;
                    this._overlapTrigger = this._defaultOptions.overlapTrigger;
                    this._hasBackdrop = this._defaultOptions.hasBackdrop;
                    /**
                     * Event emitted when the menu is closed.
                     */
                    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Event emitted when the menu is closed.
                     * @deprecated Switch to `closed` instead
                     * \@breaking-change 8.0.0
                     */
                    this.close = this.closed;
                }
                Object.defineProperty(_MatMenuBase.prototype, "xPosition", {
                    /**
                     * Position of the menu in the X axis.
                     * @return {?}
                     */
                    get: function () { return this._xPosition; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== 'before' && value !== 'after') {
                            throwMatMenuInvalidPositionX();
                        }
                        this._xPosition = value;
                        this.setPositionClasses();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(_MatMenuBase.prototype, "yPosition", {
                    /**
                     * Position of the menu in the Y axis.
                     * @return {?}
                     */
                    get: function () { return this._yPosition; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== 'above' && value !== 'below') {
                            throwMatMenuInvalidPositionY();
                        }
                        this._yPosition = value;
                        this.setPositionClasses();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(_MatMenuBase.prototype, "overlapTrigger", {
                    /**
                     * Whether the menu should overlap its trigger.
                     * @return {?}
                     */
                    get: function () { return this._overlapTrigger; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._overlapTrigger = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_7__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(_MatMenuBase.prototype, "hasBackdrop", {
                    /**
                     * Whether the menu has a backdrop.
                     * @return {?}
                     */
                    get: function () { return this._hasBackdrop; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_7__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(_MatMenuBase.prototype, "panelClass", {
                    /**
                     * This method takes classes set on the host mat-menu element and applies them on the
                     * menu template that displays in the overlay container.  Otherwise, it's difficult
                     * to style the containing menu from outside the component.
                     * @param {?} classes list of class names
                     * @return {?}
                     */
                    set: function (classes) {
                        var _this = this;
                        /** @type {?} */
                        var previousPanelClass = this._previousPanelClass;
                        if (previousPanelClass && previousPanelClass.length) {
                            previousPanelClass.split(' ').forEach(( /**
                             * @param {?} className
                             * @return {?}
                             */function (className) {
                                _this._classList[className] = false;
                            }));
                        }
                        this._previousPanelClass = classes;
                        if (classes && classes.length) {
                            classes.split(' ').forEach(( /**
                             * @param {?} className
                             * @return {?}
                             */function (className) {
                                _this._classList[className] = true;
                            }));
                            this._elementRef.nativeElement.className = '';
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(_MatMenuBase.prototype, "classList", {
                    /**
                     * This method takes classes set on the host mat-menu element and applies them on the
                     * menu template that displays in the overlay container.  Otherwise, it's difficult
                     * to style the containing menu from outside the component.
                     * @deprecated Use `panelClass` instead.
                     * \@breaking-change 8.0.0
                     * @return {?}
                     */
                    get: function () { return this.panelClass; },
                    /**
                     * @param {?} classes
                     * @return {?}
                     */
                    set: function (classes) { this.panelClass = classes; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                _MatMenuBase.prototype.ngOnInit = function () {
                    this.setPositionClasses();
                };
                /**
                 * @return {?}
                 */
                _MatMenuBase.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._updateDirectDescendants();
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__["FocusKeyManager"](this._directDescendantItems).withWrap().withTypeAhead();
                    this._tabSubscription = this._keyManager.tabOut.subscribe(( /**
                     * @return {?}
                     */function () { return _this.closed.emit('tab'); }));
                };
                /**
                 * @return {?}
                 */
                _MatMenuBase.prototype.ngOnDestroy = function () {
                    this._directDescendantItems.destroy();
                    this._tabSubscription.unsubscribe();
                    this.closed.complete();
                };
                /**
                 * Stream that emits whenever the hovered menu item changes.
                 * @return {?}
                 */
                _MatMenuBase.prototype._hovered = function () {
                    // Coerce the `changes` property because Angular types it as `Observable<any>`
                    /** @type {?} */
                    var itemChanges = ( /** @type {?} */(this._directDescendantItems.changes));
                    return itemChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["startWith"])(this._directDescendantItems), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["switchMap"])(( /**
                     * @param {?} items
                     * @return {?}
                     */function (/**
                     * @param {?} items
                     * @return {?}
                     */ items) { return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"]).apply(void 0, items.map(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return item._hovered; }))); })));
                };
                /*
                   * Registers a menu item with the menu.
                   * @docs-private
                   * @deprecated No longer being used. To be removed.
                   * @breaking-change 9.0.0
                   */
                /**
                 * @param {?} _item
                 * @return {?}
                 */
                _MatMenuBase.prototype.addItem = function (_item) { };
                /**
                 * Removes an item from the menu.
                 * \@docs-private
                 * @deprecated No longer being used. To be removed.
                 * \@breaking-change 9.0.0
                 * @param {?} _item
                 * @return {?}
                 */
                _MatMenuBase.prototype.removeItem = function (_item) { };
                /**
                 * Handle a keyboard event from the menu, delegating to the appropriate action.
                 * @param {?} event
                 * @return {?}
                 */
                _MatMenuBase.prototype._handleKeydown = function (event) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    /** @type {?} */
                    var manager = this._keyManager;
                    switch (keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["ESCAPE"]:
                            if (!Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["hasModifierKey"])(event)) {
                                event.preventDefault();
                                this.closed.emit('keydown');
                            }
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["LEFT_ARROW"]:
                            if (this.parentMenu && this.direction === 'ltr') {
                                this.closed.emit('keydown');
                            }
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["RIGHT_ARROW"]:
                            if (this.parentMenu && this.direction === 'rtl') {
                                this.closed.emit('keydown');
                            }
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["HOME"]:
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["END"]:
                            if (!Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["hasModifierKey"])(event)) {
                                keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["HOME"] ? manager.setFirstItemActive() : manager.setLastItemActive();
                                event.preventDefault();
                            }
                            break;
                        default:
                            if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["UP_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["DOWN_ARROW"]) {
                                manager.setFocusOrigin('keyboard');
                            }
                            manager.onKeydown(event);
                    }
                };
                /**
                 * Focus the first item in the menu.
                 * @param {?=} origin Action from which the focus originated. Used to set the correct styling.
                 * @return {?}
                 */
                _MatMenuBase.prototype.focusFirstItem = function (origin) {
                    if (origin === void 0) { origin = 'program'; }
                    /** @type {?} */
                    var manager = this._keyManager;
                    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.
                    if (this.lazyContent) {
                        this._ngZone.onStable.asObservable()
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1))
                            .subscribe(( /**
                     * @return {?}
                     */function () { return manager.setFocusOrigin(origin).setFirstItemActive(); }));
                    }
                    else {
                        manager.setFocusOrigin(origin).setFirstItemActive();
                    }
                    // If there's no active item at this point, it means that all the items are disabled.
                    // Move focus to the menu panel so keyboard events like Escape still work. Also this will
                    // give _some_ feedback to screen readers.
                    if (!manager.activeItem && this._directDescendantItems.length) {
                        /** @type {?} */
                        var element = this._directDescendantItems.first._getHostElement().parentElement;
                        // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't
                        // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either
                        // because the panel is inside an `ng-template`. We work around it by starting from one of
                        // the items and walking up the DOM.
                        while (element) {
                            if (element.getAttribute('role') === 'menu') {
                                element.focus();
                                break;
                            }
                            else {
                                element = element.parentElement;
                            }
                        }
                    }
                };
                /**
                 * Resets the active item in the menu. This is used when the menu is opened, allowing
                 * the user to start from the first option when pressing the down arrow.
                 * @return {?}
                 */
                _MatMenuBase.prototype.resetActiveItem = function () {
                    this._keyManager.setActiveItem(-1);
                };
                /**
                 * Sets the menu panel elevation.
                 * @param {?} depth Number of parent menus that come before the menu.
                 * @return {?}
                 */
                _MatMenuBase.prototype.setElevation = function (depth) {
                    // The elevation starts at the base and increases by one for each level.
                    /** @type {?} */
                    var newElevation = "mat-elevation-z" + (MAT_MENU_BASE_ELEVATION + depth);
                    /** @type {?} */
                    var customElevation = Object.keys(this._classList).find(( /**
                     * @param {?} c
                     * @return {?}
                     */function (/**
                     * @param {?} c
                     * @return {?}
                     */ c) { return c.startsWith('mat-elevation-z'); }));
                    if (!customElevation || customElevation === this._previousElevation) {
                        if (this._previousElevation) {
                            this._classList[this._previousElevation] = false;
                        }
                        this._classList[newElevation] = true;
                        this._previousElevation = newElevation;
                    }
                };
                /**
                 * Adds classes to the menu panel based on its position. Can be used by
                 * consumers to add specific styling based on the position.
                 * \@docs-private
                 * @param {?=} posX Position of the menu along the x axis.
                 * @param {?=} posY Position of the menu along the y axis.
                 * @return {?}
                 */
                _MatMenuBase.prototype.setPositionClasses = function (posX, posY) {
                    if (posX === void 0) { posX = this.xPosition; }
                    if (posY === void 0) { posY = this.yPosition; }
                    /** @type {?} */
                    var classes = this._classList;
                    classes['mat-menu-before'] = posX === 'before';
                    classes['mat-menu-after'] = posX === 'after';
                    classes['mat-menu-above'] = posY === 'above';
                    classes['mat-menu-below'] = posY === 'below';
                };
                /**
                 * Starts the enter animation.
                 * @return {?}
                 */
                _MatMenuBase.prototype._startAnimation = function () {
                    // @breaking-change 8.0.0 Combine with _resetAnimation.
                    this._panelAnimationState = 'enter';
                };
                /**
                 * Resets the panel animation to its initial state.
                 * @return {?}
                 */
                _MatMenuBase.prototype._resetAnimation = function () {
                    // @breaking-change 8.0.0 Combine with _startAnimation.
                    this._panelAnimationState = 'void';
                };
                /**
                 * Callback that is invoked when the panel animation completes.
                 * @param {?} event
                 * @return {?}
                 */
                _MatMenuBase.prototype._onAnimationDone = function (event) {
                    this._animationDone.next(event);
                    this._isAnimating = false;
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                _MatMenuBase.prototype._onAnimationStart = function (event) {
                    this._isAnimating = true;
                    // Scroll the content element to the top as soon as the animation starts. This is necessary,
                    // because we move focus to the first item while it's still being animated, which can throw
                    // the browser off when it determines the scroll position. Alternatively we can move focus
                    // when the animation is done, however moving focus asynchronously will interrupt screen
                    // readers which are in the process of reading out the menu already. We take the `element`
                    // from the `event` since we can't use a `ViewChild` to access the pane.
                    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {
                        event.element.scrollTop = 0;
                    }
                };
                /**
                 * Sets up a stream that will keep track of any newly-added menu items and will update the list
                 * of direct descendants. We collect the descendants this way, because `_allItems` can include
                 * items that are part of child menus, and using a custom way of registering items is unreliable
                 * when it comes to maintaining the item order.
                 * @private
                 * @return {?}
                 */
                _MatMenuBase.prototype._updateDirectDescendants = function () {
                    var _this = this;
                    this._allItems.changes
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["startWith"])(this._allItems))
                        .subscribe(( /**
                 * @param {?} items
                 * @return {?}
                 */function (items) {
                        _this._directDescendantItems.reset(items.filter(( /**
                         * @param {?} item
                         * @return {?}
                         */function (/**
                         * @param {?} item
                         * @return {?}
                         */ item) { return item._parentMenu === _this; })));
                        _this._directDescendantItems.notifyOnChanges();
                    }));
                };
                return _MatMenuBase;
            }());
            /** @nocollapse */
            _MatMenuBase.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MAT_MENU_DEFAULT_OPTIONS,] }] }
            ]; };
            _MatMenuBase.propDecorators = {
                _allItems: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [MatMenuItem, { descendants: true },] }],
                backdropClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                xPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                yPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                templateRef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"], { static: false },] }],
                items: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [MatMenuItem,] }],
                lazyContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"], args: [MatMenuContent, { static: false },] }],
                overlapTrigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                hasBackdrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                panelClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['class',] }],
                classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                close: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }]
            };
            /**
             * \@docs-private We show the "_MatMenu" class as "MatMenu" in the docs.
             */
            var MatMenu = /** @class */ (function (_super) {
                __extends(MatMenu, _super);
                function MatMenu() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatMenu;
            }(_MatMenuBase));
            // Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to
            // extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles
            // to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for
            // queries and DI to work correctly, while still not referencing the actual menu class.
            // Class responsibility is split up as follows:
            // * _MatMenuBase - provides all the functionality without any of the Angular metadata.
            // * MatMenu - keeps the same name symbol name as the current menu and
            // is used as a provider for DI and query purposes.
            // * _MatMenu - the actual menu component implementation with the Angular metadata that should
            // be tree shaken away for MDC.
            /**
             * \@docs-public MatMenu
             */
            // tslint:disable-next-line:class-name
            var _MatMenu = /** @class */ (function (_super) {
                __extends(_MatMenu, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} ngZone
                 * @param {?} defaultOptions
                 */
                function _MatMenu(elementRef, ngZone, defaultOptions) {
                    return _super.call(this, elementRef, ngZone, defaultOptions) || this;
                }
                return _MatMenu;
            }(MatMenu));
            _MatMenu.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{ selector: 'mat-menu',
                            template: "<ng-template><div class=\"mat-menu-panel\" [ngClass]=\"_classList\" (keydown)=\"_handleKeydown($event)\" (click)=\"closed.emit('click')\" [@transformMenu]=\"_panelAnimationState\" (@transformMenu.start)=\"_onAnimationStart($event)\" (@transformMenu.done)=\"_onAnimationDone($event)\" tabindex=\"-1\" role=\"menu\"><div class=\"mat-menu-content\"><ng-content></ng-content></div></div></ng-template>",
                            styles: [".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}@media (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}@media (-ms-high-contrast:active){.mat-menu-item-highlighted,.mat-menu-item.cdk-keyboard-focused,.mat-menu-item.cdk-program-focused{outline:dotted 1px}}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:'';display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}"],
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                            exportAs: 'matMenu',
                            animations: [
                                matMenuAnimations.transformMenu,
                                matMenuAnimations.fadeInItems
                            ],
                            providers: [
                                { provide: MAT_MENU_PANEL, useExisting: MatMenu },
                                { provide: MatMenu, useExisting: _MatMenu }
                            ]
                        },] },
            ];
            /** @nocollapse */
            _MatMenu.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MAT_MENU_DEFAULT_OPTIONS,] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that determines the scroll handling while the menu is open.
             * @type {?}
             */
            var MAT_MENU_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mat-menu-scroll-strategy');
            /**
             * \@docs-private
             * @param {?} overlay
             * @return {?}
             */
            function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {
                return ( /**
                 * @return {?}
                 */function () { return overlay.scrollStrategies.reposition(); });
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {
                provide: MAT_MENU_SCROLL_STRATEGY,
                deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_11__["Overlay"]],
                useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,
            };
            /**
             * Default top padding of the menu panel.
             * @type {?}
             */
            var MENU_PANEL_TOP_PADDING = 8;
            /**
             * Options for binding a passive event listener.
             * @type {?}
             */
            var passiveEventListenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__["normalizePassiveListenerOptions"])({ passive: true });
            // TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors
            /**
             * This directive is intended to be used in conjunction with an mat-menu tag.  It is
             * responsible for toggling the display of the provided menu instance.
             */
            var MatMenuTrigger = /** @class */ (function () {
                /**
                 * @param {?} _overlay
                 * @param {?} _element
                 * @param {?} _viewContainerRef
                 * @param {?} scrollStrategy
                 * @param {?} _parentMenu
                 * @param {?} _menuItemInstance
                 * @param {?} _dir
                 * @param {?=} _focusMonitor
                 */
                function MatMenuTrigger(_overlay, _element, _viewContainerRef, scrollStrategy, _parentMenu, _menuItemInstance, _dir, _focusMonitor) {
                    var _this = this;
                    this._overlay = _overlay;
                    this._element = _element;
                    this._viewContainerRef = _viewContainerRef;
                    this._parentMenu = _parentMenu;
                    this._menuItemInstance = _menuItemInstance;
                    this._dir = _dir;
                    this._focusMonitor = _focusMonitor;
                    this._overlayRef = null;
                    this._menuOpen = false;
                    this._closingActionsSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    this._hoverSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    this._menuCloseSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    /**
                     * Handles touch start events on the trigger.
                     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.
                     */
                    this._handleTouchStart = ( /**
                     * @return {?}
                     */function () { return _this._openedBy = 'touch'; });
                    // Tracking input type is necessary so it's possible to only auto-focus
                    // the first item of the list when the menu is opened via the keyboard
                    this._openedBy = null;
                    /**
                     * Whether focus should be restored when the menu is closed.
                     * Note that disabling this option can have accessibility implications
                     * and it's up to you to manage focus, if you decide to turn it off.
                     */
                    this.restoreFocus = true;
                    /**
                     * Event emitted when the associated menu is opened.
                     */
                    this.menuOpened = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Event emitted when the associated menu is opened.
                     * @deprecated Switch to `menuOpened` instead
                     * \@breaking-change 8.0.0
                     */
                    // tslint:disable-next-line:no-output-on-prefix
                    this.onMenuOpen = this.menuOpened;
                    /**
                     * Event emitted when the associated menu is closed.
                     */
                    this.menuClosed = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Event emitted when the associated menu is closed.
                     * @deprecated Switch to `menuClosed` instead
                     * \@breaking-change 8.0.0
                     */
                    // tslint:disable-next-line:no-output-on-prefix
                    this.onMenuClose = this.menuClosed;
                    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);
                    if (_menuItemInstance) {
                        _menuItemInstance._triggersSubmenu = this.triggersSubmenu();
                    }
                    this._scrollStrategy = scrollStrategy;
                }
                Object.defineProperty(MatMenuTrigger.prototype, "_deprecatedMatMenuTriggerFor", {
                    /**
                     * @deprecated
                     * \@breaking-change 8.0.0
                     * @return {?}
                     */
                    get: function () { return this.menu; },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) {
                        this.menu = v;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatMenuTrigger.prototype, "menu", {
                    /**
                     * References the menu instance that the trigger is associated with.
                     * @return {?}
                     */
                    get: function () { return this._menu; },
                    /**
                     * @param {?} menu
                     * @return {?}
                     */
                    set: function (menu) {
                        var _this = this;
                        if (menu === this._menu) {
                            return;
                        }
                        this._menu = menu;
                        this._menuCloseSubscription.unsubscribe();
                        if (menu) {
                            this._menuCloseSubscription = menu.close.asObservable().subscribe(( /**
                             * @param {?} reason
                             * @return {?}
                             */function (/**
                             * @param {?} reason
                             * @return {?}
                             */ reason) {
                                _this._destroyMenu();
                                // If a click closed the menu, we should close the entire chain of nested menus.
                                if ((reason === 'click' || reason === 'tab') && _this._parentMenu) {
                                    _this._parentMenu.closed.emit(reason);
                                }
                            }));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatMenuTrigger.prototype.ngAfterContentInit = function () {
                    this._checkMenu();
                    this._handleHover();
                };
                /**
                 * @return {?}
                 */
                MatMenuTrigger.prototype.ngOnDestroy = function () {
                    if (this._overlayRef) {
                        this._overlayRef.dispose();
                        this._overlayRef = null;
                    }
                    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);
                    this._menuCloseSubscription.unsubscribe();
                    this._closingActionsSubscription.unsubscribe();
                    this._hoverSubscription.unsubscribe();
                };
                Object.defineProperty(MatMenuTrigger.prototype, "menuOpen", {
                    /**
                     * Whether the menu is open.
                     * @return {?}
                     */
                    get: function () {
                        return this._menuOpen;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatMenuTrigger.prototype, "dir", {
                    /**
                     * The text direction of the containing app.
                     * @return {?}
                     */
                    get: function () {
                        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Whether the menu triggers a sub-menu or a top-level one.
                 * @return {?}
                 */
                MatMenuTrigger.prototype.triggersSubmenu = function () {
                    return !!(this._menuItemInstance && this._parentMenu);
                };
                /**
                 * Toggles the menu between the open and closed states.
                 * @return {?}
                 */
                MatMenuTrigger.prototype.toggleMenu = function () {
                    return this._menuOpen ? this.closeMenu() : this.openMenu();
                };
                /**
                 * Opens the menu.
                 * @return {?}
                 */
                MatMenuTrigger.prototype.openMenu = function () {
                    var _this = this;
                    if (this._menuOpen) {
                        return;
                    }
                    this._checkMenu();
                    /** @type {?} */
                    var overlayRef = this._createOverlay();
                    /** @type {?} */
                    var overlayConfig = overlayRef.getConfig();
                    this._setPosition(( /** @type {?} */(overlayConfig.positionStrategy)));
                    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :
                        this.menu.hasBackdrop;
                    overlayRef.attach(this._getPortal());
                    if (this.menu.lazyContent) {
                        this.menu.lazyContent.attach(this.menuData);
                    }
                    this._closingActionsSubscription = this._menuClosingActions().subscribe(( /**
                     * @return {?}
                     */function () { return _this.closeMenu(); }));
                    this._initMenu();
                    if (this.menu instanceof MatMenu) {
                        this.menu._startAnimation();
                    }
                };
                /**
                 * Closes the menu.
                 * @return {?}
                 */
                MatMenuTrigger.prototype.closeMenu = function () {
                    this.menu.close.emit();
                };
                /**
                 * Focuses the menu trigger.
                 * @param {?=} origin Source of the menu trigger's focus.
                 * @param {?=} options
                 * @return {?}
                 */
                MatMenuTrigger.prototype.focus = function (origin, options) {
                    if (origin === void 0) { origin = 'program'; }
                    if (this._focusMonitor) {
                        this._focusMonitor.focusVia(this._element, origin, options);
                    }
                    else {
                        this._element.nativeElement.focus(options);
                    }
                };
                /**
                 * Closes the menu and does the necessary cleanup.
                 * @private
                 * @return {?}
                 */
                MatMenuTrigger.prototype._destroyMenu = function () {
                    var _this = this;
                    if (!this._overlayRef || !this.menuOpen) {
                        return;
                    }
                    /** @type {?} */
                    var menu = this.menu;
                    this._closingActionsSubscription.unsubscribe();
                    this._overlayRef.detach();
                    if (menu instanceof MatMenu) {
                        menu._resetAnimation();
                        if (menu.lazyContent) {
                            // Wait for the exit animation to finish before detaching the content.
                            menu._animationDone
                                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(( /**
                         * @param {?} event
                         * @return {?}
                         */function (/**
                         * @param {?} event
                         * @return {?}
                         */ event) { return event.toState === 'void'; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1), 
                            // Interrupt if the content got re-attached.
                            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["takeUntil"])(menu.lazyContent._attached))
                                .subscribe({
                                next: ( /**
                                 * @return {?}
                                 */function () { return ( /** @type {?} */(menu.lazyContent)).detach(); }),
                                // No matter whether the content got re-attached, reset the menu.
                                complete: ( /**
                                 * @return {?}
                                 */function () { return _this._setIsMenuOpen(false); })
                            });
                        }
                        else {
                            this._setIsMenuOpen(false);
                        }
                    }
                    else {
                        this._setIsMenuOpen(false);
                        if (menu.lazyContent) {
                            menu.lazyContent.detach();
                        }
                    }
                    this._restoreFocus();
                };
                /**
                 * This method sets the menu state to open and focuses the first item if
                 * the menu was opened via the keyboard.
                 * @private
                 * @return {?}
                 */
                MatMenuTrigger.prototype._initMenu = function () {
                    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;
                    this.menu.direction = this.dir;
                    this._setMenuElevation();
                    this._setIsMenuOpen(true);
                    this.menu.focusFirstItem(this._openedBy || 'program');
                };
                /**
                 * Updates the menu elevation based on the amount of parent menus that it has.
                 * @private
                 * @return {?}
                 */
                MatMenuTrigger.prototype._setMenuElevation = function () {
                    if (this.menu.setElevation) {
                        /** @type {?} */
                        var depth = 0;
                        /** @type {?} */
                        var parentMenu = this.menu.parentMenu;
                        while (parentMenu) {
                            depth++;
                            parentMenu = parentMenu.parentMenu;
                        }
                        this.menu.setElevation(depth);
                    }
                };
                /**
                 * Restores focus to the element that was focused before the menu was open.
                 * @private
                 * @return {?}
                 */
                MatMenuTrigger.prototype._restoreFocus = function () {
                    // We should reset focus if the user is navigating using a keyboard or
                    // if we have a top-level trigger which might cause focus to be lost
                    // when clicking on the backdrop.
                    if (this.restoreFocus) {
                        if (!this._openedBy) {
                            // Note that the focus style will show up both for `program` and
                            // `keyboard` so we don't have to specify which one it is.
                            this.focus();
                        }
                        else if (!this.triggersSubmenu()) {
                            this.focus(this._openedBy);
                        }
                    }
                    this._openedBy = null;
                };
                // set state rather than toggle to support triggers sharing a menu
                /**
                 * @private
                 * @param {?} isOpen
                 * @return {?}
                 */
                MatMenuTrigger.prototype._setIsMenuOpen = function (isOpen) {
                    this._menuOpen = isOpen;
                    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();
                    if (this.triggersSubmenu()) {
                        this._menuItemInstance._highlighted = isOpen;
                    }
                };
                /**
                 * This method checks that a valid instance of MatMenu has been passed into
                 * matMenuTriggerFor. If not, an exception is thrown.
                 * @private
                 * @return {?}
                 */
                MatMenuTrigger.prototype._checkMenu = function () {
                    if (!this.menu) {
                        throwMatMenuMissingError();
                    }
                };
                /**
                 * This method creates the overlay from the provided menu's template and saves its
                 * OverlayRef so that it can be attached to the DOM when openMenu is called.
                 * @private
                 * @return {?}
                 */
                MatMenuTrigger.prototype._createOverlay = function () {
                    if (!this._overlayRef) {
                        /** @type {?} */
                        var config = this._getOverlayConfig();
                        this._subscribeToPositions(( /** @type {?} */(config.positionStrategy)));
                        this._overlayRef = this._overlay.create(config);
                        // Consume the `keydownEvents` in order to prevent them from going to another overlay.
                        // Ideally we'd also have our keyboard event logic in here, however doing so will
                        // break anybody that may have implemented the `MatMenuPanel` themselves.
                        this._overlayRef.keydownEvents().subscribe();
                    }
                    return this._overlayRef;
                };
                /**
                 * This method builds the configuration object needed to create the overlay, the OverlayState.
                 * @private
                 * @return {?} OverlayConfig
                 */
                MatMenuTrigger.prototype._getOverlayConfig = function () {
                    return new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_11__["OverlayConfig"]({
                        positionStrategy: this._overlay.position()
                            .flexibleConnectedTo(this._element)
                            .withLockedPosition()
                            .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),
                        backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',
                        scrollStrategy: this._scrollStrategy(),
                        direction: this._dir
                    });
                };
                /**
                 * Listens to changes in the position of the overlay and sets the correct classes
                 * on the menu based on the new position. This ensures the animation origin is always
                 * correct, even if a fallback position is used for the overlay.
                 * @private
                 * @param {?} position
                 * @return {?}
                 */
                MatMenuTrigger.prototype._subscribeToPositions = function (position) {
                    var _this = this;
                    if (this.menu.setPositionClasses) {
                        position.positionChanges.subscribe(( /**
                         * @param {?} change
                         * @return {?}
                         */function (/**
                         * @param {?} change
                         * @return {?}
                         */ change) {
                            /** @type {?} */
                            var posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
                            /** @type {?} */
                            var posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';
                            ( /** @type {?} */(_this.menu.setPositionClasses))(posX, posY);
                        }));
                    }
                };
                /**
                 * Sets the appropriate positions on a position strategy
                 * so the overlay connects with the trigger correctly.
                 * @private
                 * @param {?} positionStrategy Strategy whose position to update.
                 * @return {?}
                 */
                MatMenuTrigger.prototype._setPosition = function (positionStrategy) {
                    var _b = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'], originX = _b[0], originFallbackX = _b[1];
                    var _c = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], overlayY = _c[0], overlayFallbackY = _c[1];
                    var _d = [overlayY, overlayFallbackY], originY = _d[0], originFallbackY = _d[1];
                    var _e = [originX, originFallbackX], overlayX = _e[0], overlayFallbackX = _e[1];
                    /** @type {?} */
                    var offsetY = 0;
                    if (this.triggersSubmenu()) {
                        // When the menu is a sub-menu, it should always align itself
                        // to the edges of the trigger, instead of overlapping it.
                        overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';
                        originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';
                        offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;
                    }
                    else if (!this.menu.overlapTrigger) {
                        originY = overlayY === 'top' ? 'bottom' : 'top';
                        originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
                    }
                    positionStrategy.withPositions([
                        { originX: originX, originY: originY, overlayX: overlayX, overlayY: overlayY, offsetY: offsetY },
                        { originX: originFallbackX, originY: originY, overlayX: overlayFallbackX, overlayY: overlayY, offsetY: offsetY },
                        {
                            originX: originX,
                            originY: originFallbackY,
                            overlayX: overlayX,
                            overlayY: overlayFallbackY,
                            offsetY: -offsetY
                        },
                        {
                            originX: originFallbackX,
                            originY: originFallbackY,
                            overlayX: overlayFallbackX,
                            overlayY: overlayFallbackY,
                            offsetY: -offsetY
                        }
                    ]);
                };
                /**
                 * Returns a stream that emits whenever an action that should close the menu occurs.
                 * @private
                 * @return {?}
                 */
                MatMenuTrigger.prototype._menuClosingActions = function () {
                    var _this = this;
                    /** @type {?} */
                    var backdrop = ( /** @type {?} */(this._overlayRef)).backdropClick();
                    /** @type {?} */
                    var detachments = ( /** @type {?} */(this._overlayRef)).detachments();
                    /** @type {?} */
                    var parentClose = this._parentMenu ? this._parentMenu.closed : Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])();
                    /** @type {?} */
                    var hover = this._parentMenu ? this._parentMenu._hovered().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(( /**
                     * @param {?} active
                     * @return {?}
                     */function (/**
                     * @param {?} active
                     * @return {?}
                     */ active) { return active !== _this._menuItemInstance; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(( /**
                     * @return {?}
                     */function () { return _this._menuOpen; }))) : Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])();
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"])(backdrop, parentClose, hover, detachments);
                };
                /**
                 * Handles mouse presses on the trigger.
                 * @param {?} event
                 * @return {?}
                 */
                MatMenuTrigger.prototype._handleMousedown = function (event) {
                    if (!Object(_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__["isFakeMousedownFromScreenReader"])(event)) {
                        // Since right or middle button clicks won't trigger the `click` event,
                        // we shouldn't consider the menu as opened by mouse in those cases.
                        this._openedBy = event.button === 0 ? 'mouse' : null;
                        // Since clicking on the trigger won't close the menu if it opens a sub-menu,
                        // we should prevent focus from moving onto it via click to avoid the
                        // highlight from lingering on the menu item.
                        if (this.triggersSubmenu()) {
                            event.preventDefault();
                        }
                    }
                };
                /**
                 * Handles key presses on the trigger.
                 * @param {?} event
                 * @return {?}
                 */
                MatMenuTrigger.prototype._handleKeydown = function (event) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    if (this.triggersSubmenu() && ((keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["RIGHT_ARROW"] && this.dir === 'ltr') ||
                        (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["LEFT_ARROW"] && this.dir === 'rtl'))) {
                        this.openMenu();
                    }
                };
                /**
                 * Handles click events on the trigger.
                 * @param {?} event
                 * @return {?}
                 */
                MatMenuTrigger.prototype._handleClick = function (event) {
                    if (this.triggersSubmenu()) {
                        // Stop event propagation to avoid closing the parent menu.
                        event.stopPropagation();
                        this.openMenu();
                    }
                    else {
                        this.toggleMenu();
                    }
                };
                /**
                 * Handles the cases where the user hovers over the trigger.
                 * @private
                 * @return {?}
                 */
                MatMenuTrigger.prototype._handleHover = function () {
                    var _this = this;
                    // Subscribe to changes in the hovered item in order to toggle the panel.
                    if (!this.triggersSubmenu()) {
                        return;
                    }
                    this._hoverSubscription = this._parentMenu._hovered()
                        // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu
                        // with different data and triggers), we have to delay it by a tick to ensure that
                        // it won't be closed immediately after it is opened.
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(( /**
                 * @param {?} active
                 * @return {?}
                 */function (/**
                 * @param {?} active
                 * @return {?}
                 */ active) { return active === _this._menuItemInstance && !active.disabled; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["delay"])(0, rxjs__WEBPACK_IMPORTED_MODULE_4__["asapScheduler"]))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this._openedBy = 'mouse';
                        // If the same menu is used between multiple triggers, it might still be animating
                        // while the new trigger tries to re-open it. Wait for the animation to finish
                        // before doing so. Also interrupt if the user moves to another item.
                        if (_this.menu instanceof MatMenu && _this.menu._isAnimating) {
                            // We need the `delay(0)` here in order to avoid
                            // 'changed after checked' errors in some cases. See #12194.
                            _this.menu._animationDone
                                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["delay"])(0, rxjs__WEBPACK_IMPORTED_MODULE_4__["asapScheduler"]), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["takeUntil"])(_this._parentMenu._hovered()))
                                .subscribe(( /**
                         * @return {?}
                         */function () { return _this.openMenu(); }));
                        }
                        else {
                            _this.openMenu();
                        }
                    }));
                };
                /**
                 * Gets the portal that should be attached to the overlay.
                 * @private
                 * @return {?}
                 */
                MatMenuTrigger.prototype._getPortal = function () {
                    // Note that we can avoid this check by keeping the portal on the menu panel.
                    // While it would be cleaner, we'd have to introduce another required method on
                    // `MatMenuPanel`, making it harder to consume.
                    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {
                        this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["TemplatePortal"](this.menu.templateRef, this._viewContainerRef);
                    }
                    return this._portal;
                };
                return MatMenuTrigger;
            }());
            MatMenuTrigger.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: "[mat-menu-trigger-for], [matMenuTriggerFor]",
                            host: {
                                'class': 'mat-menu-trigger',
                                'aria-haspopup': 'true',
                                '[attr.aria-expanded]': 'menuOpen || null',
                                '(mousedown)': '_handleMousedown($event)',
                                '(keydown)': '_handleKeydown($event)',
                                '(click)': '_handleClick($event)',
                            },
                            exportAs: 'matMenuTrigger'
                        },] },
            ];
            /** @nocollapse */
            MatMenuTrigger.ctorParameters = function () { return [
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_11__["Overlay"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MAT_MENU_SCROLL_STRATEGY,] }] },
                { type: MatMenu, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] },
                { type: MatMenuItem, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Self"] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__["FocusMonitor"] }
            ]; };
            MatMenuTrigger.propDecorators = {
                _deprecatedMatMenuTriggerFor: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mat-menu-trigger-for',] }],
                menu: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['matMenuTriggerFor',] }],
                menuData: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['matMenuTriggerData',] }],
                restoreFocus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['matMenuTriggerRestoreFocus',] }],
                menuOpened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                onMenuOpen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                menuClosed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                onMenuClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`
             * to declare the menu-related directives.
             */
            // tslint:disable-next-line:class-name
            var _MatMenuDirectivesModule = /** @class */ (function () {
                function _MatMenuDirectivesModule() {
                }
                return _MatMenuDirectivesModule;
            }());
            _MatMenuDirectivesModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                            exports: [MatMenuTrigger, MatMenuContent, _angular_material_core__WEBPACK_IMPORTED_MODULE_6__["MatCommonModule"]],
                            declarations: [MatMenuTrigger, MatMenuContent],
                            providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]
                        },] },
            ];
            var MatMenuModule = /** @class */ (function () {
                function MatMenuModule() {
                }
                return MatMenuModule;
            }());
            MatMenuModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_6__["MatCommonModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_6__["MatRippleModule"],
                                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_11__["OverlayModule"],
                                _MatMenuDirectivesModule,
                            ],
                            exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],
                            declarations: [_MatMenu, MatMenuItem],
                            providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=menu.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/paginator.js": 
        /*!*************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/paginator.js ***!
          \*************************************************************/
        /*! exports provided: MatPaginatorModule, PageEvent, MatPaginator, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginatorIntl, MAT_PAGINATOR_INTL_PROVIDER */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatPaginatorModule", function () { return MatPaginatorModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageEvent", function () { return PageEvent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatPaginator", function () { return MatPaginator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_PAGINATOR_INTL_PROVIDER_FACTORY", function () { return MAT_PAGINATOR_INTL_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatPaginatorIntl", function () { return MatPaginatorIntl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_PAGINATOR_INTL_PROVIDER", function () { return MAT_PAGINATOR_INTL_PROVIDER; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm2015/button.js");
            /* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/select */ "./node_modules/@angular/material/esm2015/select.js");
            /* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/tooltip */ "./node_modules/@angular/material/esm2015/tooltip.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and
             * include it in a custom provider
             */
            var MatPaginatorIntl = /** @class */ (function () {
                function MatPaginatorIntl() {
                    /**
                     * Stream to emit from when labels are changed. Use this to notify components when the labels have
                     * changed after initialization.
                     */
                    this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    /**
                     * A label for the page size selector.
                     */
                    this.itemsPerPageLabel = 'Items per page:';
                    /**
                     * A label for the button that increments the current page.
                     */
                    this.nextPageLabel = 'Next page';
                    /**
                     * A label for the button that decrements the current page.
                     */
                    this.previousPageLabel = 'Previous page';
                    /**
                     * A label for the button that moves to the first page.
                     */
                    this.firstPageLabel = 'First page';
                    /**
                     * A label for the button that moves to the last page.
                     */
                    this.lastPageLabel = 'Last page';
                    /**
                     * A label for the range of items within the current page and the length of the whole list.
                     */
                    this.getRangeLabel = ( /**
                     * @param {?} page
                     * @param {?} pageSize
                     * @param {?} length
                     * @return {?}
                     */function (page, pageSize, length) {
                        if (length == 0 || pageSize == 0) {
                            return "0 of " + length;
                        }
                        length = Math.max(length, 0);
                        /** @type {?} */
                        var startIndex = page * pageSize;
                        // If the start index exceeds the list length, do not try and fix the end index to the end.
                        /** @type {?} */
                        var endIndex = startIndex < length ?
                            Math.min(startIndex + pageSize, length) :
                            startIndex + pageSize;
                        return startIndex + 1 + " \u2013 " + endIndex + " of " + length;
                    });
                }
                return MatPaginatorIntl;
            }());
            MatPaginatorIntl.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ MatPaginatorIntl.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function MatPaginatorIntl_Factory() { return new MatPaginatorIntl(); }, token: MatPaginatorIntl, providedIn: "root" });
            /**
             * \@docs-private
             * @param {?} parentIntl
             * @return {?}
             */
            function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {
                return parentIntl || new MatPaginatorIntl();
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_PAGINATOR_INTL_PROVIDER = {
                // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.
                provide: MatPaginatorIntl,
                deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"](), MatPaginatorIntl]],
                useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The default page size if there is no page size and there are no provided page size options.
             * @type {?}
             */
            var DEFAULT_PAGE_SIZE = 50;
            /**
             * Change event object that is emitted when the user selects a
             * different page size or navigates to another page.
             */
            var PageEvent = /** @class */ (function () {
                function PageEvent() {
                }
                return PageEvent;
            }());
            // Boilerplate for applying mixins to MatPaginator.
            /**
             * \@docs-private
             */
            var MatPaginatorBase = /** @class */ (function () {
                function MatPaginatorBase() {
                }
                return MatPaginatorBase;
            }());
            /** @type {?} */
            var _MatPaginatorBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinInitialized"])(MatPaginatorBase));
            /**
             * Component to provide navigation between paged information. Displays the size of the current
             * page, user-selectable options to change that size, what items are being shown, and
             * navigational button to go to the previous or next page.
             */
            var MatPaginator = /** @class */ (function (_super) {
                __extends(MatPaginator, _super);
                /**
                 * @param {?} _intl
                 * @param {?} _changeDetectorRef
                 */
                function MatPaginator(_intl, _changeDetectorRef) {
                    var _this = _super.call(this) || this;
                    _this._intl = _intl;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._pageIndex = 0;
                    _this._length = 0;
                    _this._pageSizeOptions = [];
                    _this._hidePageSize = false;
                    _this._showFirstLastButtons = false;
                    /**
                     * Event emitted when the paginator changes the page size or page index.
                     */
                    _this.page = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    _this._intlChanges = _intl.changes.subscribe(( /**
                     * @return {?}
                     */function () { return _this._changeDetectorRef.markForCheck(); }));
                    return _this;
                }
                Object.defineProperty(MatPaginator.prototype, "pageIndex", {
                    /**
                     * The zero-based page index of the displayed list of items. Defaulted to 0.
                     * @return {?}
                     */
                    get: function () { return this._pageIndex; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._pageIndex = Math.max(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(value), 0);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatPaginator.prototype, "length", {
                    /**
                     * The length of the total number of items that are being paginated. Defaulted to 0.
                     * @return {?}
                     */
                    get: function () { return this._length; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._length = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatPaginator.prototype, "pageSize", {
                    /**
                     * Number of items to display on a page. By default set to 50.
                     * @return {?}
                     */
                    get: function () { return this._pageSize; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._pageSize = Math.max(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(value), 0);
                        this._updateDisplayedPageSizeOptions();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatPaginator.prototype, "pageSizeOptions", {
                    /**
                     * The set of provided page size options to display to the user.
                     * @return {?}
                     */
                    get: function () { return this._pageSizeOptions; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._pageSizeOptions = (value || []).map(( /**
                         * @param {?} p
                         * @return {?}
                         */function (/**
                         * @param {?} p
                         * @return {?}
                         */ p) { return Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(p); }));
                        this._updateDisplayedPageSizeOptions();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatPaginator.prototype, "hidePageSize", {
                    /**
                     * Whether to hide the page size selection UI from the user.
                     * @return {?}
                     */
                    get: function () { return this._hidePageSize; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._hidePageSize = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatPaginator.prototype, "showFirstLastButtons", {
                    /**
                     * Whether to show the first/last buttons UI to the user.
                     * @return {?}
                     */
                    get: function () { return this._showFirstLastButtons; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._showFirstLastButtons = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatPaginator.prototype.ngOnInit = function () {
                    this._initialized = true;
                    this._updateDisplayedPageSizeOptions();
                    this._markInitialized();
                };
                /**
                 * @return {?}
                 */
                MatPaginator.prototype.ngOnDestroy = function () {
                    this._intlChanges.unsubscribe();
                };
                /**
                 * Advances to the next page if it exists.
                 * @return {?}
                 */
                MatPaginator.prototype.nextPage = function () {
                    if (!this.hasNextPage()) {
                        return;
                    }
                    /** @type {?} */
                    var previousPageIndex = this.pageIndex;
                    this.pageIndex++;
                    this._emitPageEvent(previousPageIndex);
                };
                /**
                 * Move back to the previous page if it exists.
                 * @return {?}
                 */
                MatPaginator.prototype.previousPage = function () {
                    if (!this.hasPreviousPage()) {
                        return;
                    }
                    /** @type {?} */
                    var previousPageIndex = this.pageIndex;
                    this.pageIndex--;
                    this._emitPageEvent(previousPageIndex);
                };
                /**
                 * Move to the first page if not already there.
                 * @return {?}
                 */
                MatPaginator.prototype.firstPage = function () {
                    // hasPreviousPage being false implies at the start
                    if (!this.hasPreviousPage()) {
                        return;
                    }
                    /** @type {?} */
                    var previousPageIndex = this.pageIndex;
                    this.pageIndex = 0;
                    this._emitPageEvent(previousPageIndex);
                };
                /**
                 * Move to the last page if not already there.
                 * @return {?}
                 */
                MatPaginator.prototype.lastPage = function () {
                    // hasNextPage being false implies at the end
                    if (!this.hasNextPage()) {
                        return;
                    }
                    /** @type {?} */
                    var previousPageIndex = this.pageIndex;
                    this.pageIndex = this.getNumberOfPages() - 1;
                    this._emitPageEvent(previousPageIndex);
                };
                /**
                 * Whether there is a previous page.
                 * @return {?}
                 */
                MatPaginator.prototype.hasPreviousPage = function () {
                    return this.pageIndex >= 1 && this.pageSize != 0;
                };
                /**
                 * Whether there is a next page.
                 * @return {?}
                 */
                MatPaginator.prototype.hasNextPage = function () {
                    /** @type {?} */
                    var maxPageIndex = this.getNumberOfPages() - 1;
                    return this.pageIndex < maxPageIndex && this.pageSize != 0;
                };
                /**
                 * Calculate the number of pages
                 * @return {?}
                 */
                MatPaginator.prototype.getNumberOfPages = function () {
                    if (!this.pageSize) {
                        return 0;
                    }
                    return Math.ceil(this.length / this.pageSize);
                };
                /**
                 * Changes the page size so that the first item displayed on the page will still be
                 * displayed using the new page size.
                 *
                 * For example, if the page size is 10 and on the second page (items indexed 10-19) then
                 * switching so that the page size is 5 will set the third page as the current page so
                 * that the 10th item will still be displayed.
                 * @param {?} pageSize
                 * @return {?}
                 */
                MatPaginator.prototype._changePageSize = function (pageSize) {
                    // Current page needs to be updated to reflect the new page size. Navigate to the page
                    // containing the previous page's first item.
                    /** @type {?} */
                    var startIndex = this.pageIndex * this.pageSize;
                    /** @type {?} */
                    var previousPageIndex = this.pageIndex;
                    this.pageIndex = Math.floor(startIndex / pageSize) || 0;
                    this.pageSize = pageSize;
                    this._emitPageEvent(previousPageIndex);
                };
                /**
                 * Checks whether the buttons for going forwards should be disabled.
                 * @return {?}
                 */
                MatPaginator.prototype._nextButtonsDisabled = function () {
                    return this.disabled || !this.hasNextPage();
                };
                /**
                 * Checks whether the buttons for going backwards should be disabled.
                 * @return {?}
                 */
                MatPaginator.prototype._previousButtonsDisabled = function () {
                    return this.disabled || !this.hasPreviousPage();
                };
                /**
                 * Updates the list of page size options to display to the user. Includes making sure that
                 * the page size is an option and that the list is sorted.
                 * @private
                 * @return {?}
                 */
                MatPaginator.prototype._updateDisplayedPageSizeOptions = function () {
                    if (!this._initialized) {
                        return;
                    }
                    // If no page size is provided, use the first page size option or the default page size.
                    if (!this.pageSize) {
                        this._pageSize = this.pageSizeOptions.length != 0 ?
                            this.pageSizeOptions[0] :
                            DEFAULT_PAGE_SIZE;
                    }
                    this._displayedPageSizeOptions = this.pageSizeOptions.slice();
                    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {
                        this._displayedPageSizeOptions.push(this.pageSize);
                    }
                    // Sort the numbers using a number-specific sort function.
                    this._displayedPageSizeOptions.sort(( /**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */function (a, b) { return a - b; }));
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Emits an event notifying that a change of the paginator's properties has been triggered.
                 * @private
                 * @param {?} previousPageIndex
                 * @return {?}
                 */
                MatPaginator.prototype._emitPageEvent = function (previousPageIndex) {
                    this.page.emit({
                        previousPageIndex: previousPageIndex,
                        pageIndex: this.pageIndex,
                        pageSize: this.pageSize,
                        length: this.length
                    });
                };
                return MatPaginator;
            }(_MatPaginatorBase));
            MatPaginator.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-paginator',
                            exportAs: 'matPaginator',
                            template: "<div class=\"mat-paginator-outer-container\"><div class=\"mat-paginator-container\"><div class=\"mat-paginator-page-size\" *ngIf=\"!hidePageSize\"><div class=\"mat-paginator-page-size-label\">{{_intl.itemsPerPageLabel}}</div><mat-form-field *ngIf=\"_displayedPageSizeOptions.length > 1\" [color]=\"color\" class=\"mat-paginator-page-size-select\"><mat-select [value]=\"pageSize\" [disabled]=\"disabled\" [aria-label]=\"_intl.itemsPerPageLabel\" (selectionChange)=\"_changePageSize($event.value)\"><mat-option *ngFor=\"let pageSizeOption of _displayedPageSizeOptions\" [value]=\"pageSizeOption\">{{pageSizeOption}}</mat-option></mat-select></mat-form-field><div *ngIf=\"_displayedPageSizeOptions.length <= 1\">{{pageSize}}</div></div><div class=\"mat-paginator-range-actions\"><div class=\"mat-paginator-range-label\">{{_intl.getRangeLabel(pageIndex, pageSize, length)}}</div><button mat-icon-button type=\"button\" class=\"mat-paginator-navigation-first\" (click)=\"firstPage()\" [attr.aria-label]=\"_intl.firstPageLabel\" [matTooltip]=\"_intl.firstPageLabel\" [matTooltipDisabled]=\"_previousButtonsDisabled()\" [matTooltipPosition]=\"'above'\" [disabled]=\"_previousButtonsDisabled()\" *ngIf=\"showFirstLastButtons\"><svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"/></svg></button> <button mat-icon-button type=\"button\" class=\"mat-paginator-navigation-previous\" (click)=\"previousPage()\" [attr.aria-label]=\"_intl.previousPageLabel\" [matTooltip]=\"_intl.previousPageLabel\" [matTooltipDisabled]=\"_previousButtonsDisabled()\" [matTooltipPosition]=\"'above'\" [disabled]=\"_previousButtonsDisabled()\"><svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/></svg></button> <button mat-icon-button type=\"button\" class=\"mat-paginator-navigation-next\" (click)=\"nextPage()\" [attr.aria-label]=\"_intl.nextPageLabel\" [matTooltip]=\"_intl.nextPageLabel\" [matTooltipDisabled]=\"_nextButtonsDisabled()\" [matTooltipPosition]=\"'above'\" [disabled]=\"_nextButtonsDisabled()\"><svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/></svg></button> <button mat-icon-button type=\"button\" class=\"mat-paginator-navigation-last\" (click)=\"lastPage()\" [attr.aria-label]=\"_intl.lastPageLabel\" [matTooltip]=\"_intl.lastPageLabel\" [matTooltipDisabled]=\"_nextButtonsDisabled()\" [matTooltipPosition]=\"'above'\" [disabled]=\"_nextButtonsDisabled()\" *ngIf=\"showFirstLastButtons\"><svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"/></svg></button></div></div></div>",
                            styles: [".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;min-height:56px;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}"],
                            inputs: ['disabled'],
                            host: {
                                'class': 'mat-paginator',
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        },] },
            ];
            /** @nocollapse */
            MatPaginator.ctorParameters = function () { return [
                { type: MatPaginatorIntl },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
            ]; };
            MatPaginator.propDecorators = {
                color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                pageIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                length: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                pageSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                pageSizeOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                hidePageSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                showFirstLastButtons: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                page: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatPaginatorModule = /** @class */ (function () {
                function MatPaginatorModule() {
                }
                return MatPaginatorModule;
            }());
            MatPaginatorModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"],
                                _angular_material_button__WEBPACK_IMPORTED_MODULE_5__["MatButtonModule"],
                                _angular_material_select__WEBPACK_IMPORTED_MODULE_6__["MatSelectModule"],
                                _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MatTooltipModule"],
                            ],
                            exports: [MatPaginator],
                            declarations: [MatPaginator],
                            providers: [MAT_PAGINATOR_INTL_PROVIDER],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=paginator.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/progress-bar.js": 
        /*!****************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/progress-bar.js ***!
          \****************************************************************/
        /*! exports provided: MatProgressBarModule, MAT_PROGRESS_BAR_LOCATION_FACTORY, MAT_PROGRESS_BAR_LOCATION, MatProgressBar */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatProgressBarModule", function () { return MatProgressBarModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_PROGRESS_BAR_LOCATION_FACTORY", function () { return MAT_PROGRESS_BAR_LOCATION_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_PROGRESS_BAR_LOCATION", function () { return MAT_PROGRESS_BAR_LOCATION; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatProgressBar", function () { return MatProgressBar; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Boilerplate for applying mixins to MatProgressBar.
            /**
             * \@docs-private
             */
            var MatProgressBarBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatProgressBarBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatProgressBarBase;
            }());
            /** @type {?} */
            var _MatProgressBarMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(MatProgressBarBase, 'primary');
            /**
             * Injection token used to provide the current location to `MatProgressBar`.
             * Used to handle server-side rendering and to stub out during unit tests.
             * \@docs-private
             * @type {?}
             */
            var MAT_PROGRESS_BAR_LOCATION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-progress-bar-location', { providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY });
            /**
             * \@docs-private
             * @return {?}
             */
            function MAT_PROGRESS_BAR_LOCATION_FACTORY() {
                /** @type {?} */
                var _document = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"]);
                /** @type {?} */
                var _location = _document ? _document.location : null;
                return {
                    // Note that this needs to be a function, rather than a property, because Angular
                    // will only resolve it once, but we want the current path on each call.
                    getPathname: ( /**
                     * @return {?}
                     */function () { return _location ? (_location.pathname + _location.search) : ''; })
                };
            }
            /**
             * Counter used to generate unique IDs for progress bars.
             * @type {?}
             */
            var progressbarId = 0;
            /**
             * `<mat-progress-bar>` component.
             */
            var MatProgressBar = /** @class */ (function (_super) {
                __extends(MatProgressBar, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} _ngZone
                 * @param {?=} _animationMode
                 * @param {?=} location
                 */
                function MatProgressBar(_elementRef, _ngZone, _animationMode, 
                /**
                 * @deprecated `location` parameter to be made required.
                 * @breaking-change 8.0.0
                 */
                location) {
                    var _this = _super.call(this, _elementRef) || this;
                    _this._elementRef = _elementRef;
                    _this._ngZone = _ngZone;
                    _this._animationMode = _animationMode;
                    /**
                     * Flag that indicates whether NoopAnimations mode is set to true.
                     */
                    _this._isNoopAnimation = false;
                    _this._value = 0;
                    _this._bufferValue = 0;
                    /**
                     * Event emitted when animation of the primary progress bar completes. This event will not
                     * be emitted when animations are disabled, nor will it be emitted for modes with continuous
                     * animations (indeterminate and query).
                     */
                    _this.animationEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Reference to animation end subscription to be unsubscribed on destroy.
                     */
                    _this._animationEndSubscription = rxjs__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
                    /**
                     * Mode of the progress bar.
                     *
                     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to
                     * 'determinate'.
                     * Mirrored to mode attribute.
                     */
                    _this.mode = 'determinate';
                    /**
                     * ID of the progress bar.
                     */
                    _this.progressbarId = "mat-progress-bar-" + progressbarId++;
                    // We need to prefix the SVG reference with the current path, otherwise they won't work
                    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,
                    // because named route URLs can contain parentheses (see #12338). Also we don't use since
                    // we can't tell the difference between whether
                    // the consumer is using the hash location strategy or not, because `Location` normalizes
                    // both `/#/foo/bar` and `/foo/bar` to the same thing.
                    /** @type {?} */
                    var path = location ? location.getPathname().split('#')[0] : '';
                    _this._rectangleFillValue = "url('" + path + "#" + _this.progressbarId + "')";
                    _this._isNoopAnimation = _animationMode === 'NoopAnimations';
                    return _this;
                }
                Object.defineProperty(MatProgressBar.prototype, "value", {
                    /**
                     * Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.
                     * @return {?}
                     */
                    get: function () { return this._value; },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) {
                        this._value = clamp(v || 0);
                        // When noop animation is set to true, trigger animationEnd directly.
                        if (this._isNoopAnimation) {
                            this._emitAnimationEnd();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatProgressBar.prototype, "bufferValue", {
                    /**
                     * Buffer value of the progress bar. Defaults to zero.
                     * @return {?}
                     */
                    get: function () { return this._bufferValue; },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) { this._bufferValue = clamp(v || 0); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Gets the current transform value for the progress bar's primary indicator.
                 * @return {?}
                 */
                MatProgressBar.prototype._primaryTransform = function () {
                    /** @type {?} */
                    var scale = this.value / 100;
                    return { transform: "scaleX(" + scale + ")" };
                };
                /**
                 * Gets the current transform value for the progress bar's buffer indicator. Only used if the
                 * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.
                 * @return {?}
                 */
                MatProgressBar.prototype._bufferTransform = function () {
                    if (this.mode === 'buffer') {
                        /** @type {?} */
                        var scale = this.bufferValue / 100;
                        return { transform: "scaleX(" + scale + ")" };
                    }
                    return undefined;
                };
                /**
                 * @return {?}
                 */
                MatProgressBar.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    if (!this._isNoopAnimation) {
                        // Run outside angular so change detection didn't get triggered on every transition end
                        // instead only on the animation that we care about (primary value bar's transitionend)
                        this._ngZone.runOutsideAngular((( /**
                         * @return {?}
                         */function () {
                            /** @type {?} */
                            var element = _this._primaryValueBar.nativeElement;
                            _this._animationEndSubscription =
                                (( /** @type {?} */(Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["fromEvent"])(element, 'transitionend'))))
                                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["filter"])((( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) { return e.target === element; }))))
                                    .subscribe(( /**
                             * @return {?}
                             */function () { return _this._ngZone.run(( /**
                                 * @return {?}
                                 */function () { return _this._emitAnimationEnd(); })); }));
                        })));
                    }
                };
                /**
                 * @return {?}
                 */
                MatProgressBar.prototype.ngOnDestroy = function () {
                    this._animationEndSubscription.unsubscribe();
                };
                /**
                 * Emit an animationEnd event if in determinate or buffer mode.
                 * @private
                 * @return {?}
                 */
                MatProgressBar.prototype._emitAnimationEnd = function () {
                    if (this.mode === 'determinate' || this.mode === 'buffer') {
                        this.animationEnd.next({ value: this.value });
                    }
                };
                return MatProgressBar;
            }(_MatProgressBarMixinBase));
            MatProgressBar.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-progress-bar',
                            exportAs: 'matProgressBar',
                            host: {
                                'role': 'progressbar',
                                'aria-valuemin': '0',
                                'aria-valuemax': '100',
                                '[attr.aria-valuenow]': '(mode === "indeterminate" || mode === "query") ? null : value',
                                '[attr.mode]': 'mode',
                                'class': 'mat-progress-bar',
                                '[class._mat-animation-noopable]': '_isNoopAnimation',
                            },
                            inputs: ['color'],
                            template: "<svg width=\"100%\" height=\"4\" focusable=\"false\" class=\"mat-progress-bar-background mat-progress-bar-element\"><defs><pattern [id]=\"progressbarId\" x=\"4\" y=\"0\" width=\"8\" height=\"4\" patternUnits=\"userSpaceOnUse\"><circle cx=\"2\" cy=\"2\" r=\"2\"/></pattern></defs><rect [attr.fill]=\"_rectangleFillValue\" width=\"100%\" height=\"100%\"/></svg><div class=\"mat-progress-bar-buffer mat-progress-bar-element\" [ngStyle]=\"_bufferTransform()\"></div><div class=\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\" [ngStyle]=\"_primaryTransform()\" #primaryValueBar></div><div class=\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\"></div>",
                            styles: [".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-background{display:none}}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after{animation:none;transition:none}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}"],
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        },] },
            ];
            /** @nocollapse */
            MatProgressBar.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__["ANIMATION_MODULE_TYPE"],] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_PROGRESS_BAR_LOCATION,] }] }
            ]; };
            MatProgressBar.propDecorators = {
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                bufferValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                _primaryValueBar: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['primaryValueBar', { static: false },] }],
                animationEnd: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                mode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * Clamps a value to be between two numbers, by default 0 and 100.
             * @param {?} v
             * @param {?=} min
             * @param {?=} max
             * @return {?}
             */
            function clamp(v, min, max) {
                if (min === void 0) { min = 0; }
                if (max === void 0) { max = 100; }
                return Math.max(min, Math.min(max, v));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatProgressBarModule = /** @class */ (function () {
                function MatProgressBarModule() {
                }
                return MatProgressBarModule;
            }());
            MatProgressBarModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"]],
                            exports: [MatProgressBar, _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"]],
                            declarations: [MatProgressBar],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=progress-bar.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/progress-spinner.js": 
        /*!********************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/progress-spinner.js ***!
          \********************************************************************/
        /*! exports provided: MatProgressSpinner, MatSpinner, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinnerModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatProgressSpinner", function () { return MatProgressSpinner; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSpinner", function () { return MatSpinner; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS", function () { return MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY", function () { return MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatProgressSpinnerModule", function () { return MatProgressSpinnerModule; });
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Base reference size of the spinner.
             * \@docs-private
             * @type {?}
             */
            var BASE_SIZE = 100;
            /**
             * Base reference stroke width of the spinner.
             * \@docs-private
             * @type {?}
             */
            var BASE_STROKE_WIDTH = 10;
            // Boilerplate for applying mixins to MatProgressSpinner.
            /**
             * \@docs-private
             */
            var MatProgressSpinnerBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatProgressSpinnerBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatProgressSpinnerBase;
            }());
            /** @type {?} */
            var _MatProgressSpinnerMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(MatProgressSpinnerBase, 'primary');
            /**
             * Injection token to be used to override the default options for `mat-progress-spinner`.
             * @type {?}
             */
            var MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mat-progress-spinner-default-options', {
                providedIn: 'root',
                factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {
                return { diameter: BASE_SIZE };
            }
            // .0001 percentage difference is necessary in order to avoid unwanted animation frames
            // for example because the animation duration is 4 seconds, .1% accounts to 4ms
            // which are enough to see the flicker described in
            // https://github.com/angular/components/issues/8984
            /** @type {?} */
            var INDETERMINATE_ANIMATION_TEMPLATE = "\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n";
            /**
             * `<mat-progress-spinner>` component.
             */
            var MatProgressSpinner = /** @class */ (function (_super) {
                __extends(MatProgressSpinner, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} platform
                 * @param {?} _document
                 * @param {?} animationMode
                 * @param {?=} defaults
                 */
                function MatProgressSpinner(_elementRef, platform, _document, animationMode, defaults) {
                    var _this = _super.call(this, _elementRef) || this;
                    _this._elementRef = _elementRef;
                    _this._document = _document;
                    _this._diameter = BASE_SIZE;
                    _this._value = 0;
                    _this._fallbackAnimation = false;
                    /**
                     * Mode of the progress circle
                     */
                    _this.mode = 'determinate';
                    /** @type {?} */
                    var trackedDiameters = MatProgressSpinner._diameters;
                    // The base size is already inserted via the component's structural styles. We still
                    // need to track it so we don't end up adding the same styles again.
                    if (!trackedDiameters.has(_document.head)) {
                        trackedDiameters.set(_document.head, new Set([BASE_SIZE]));
                    }
                    _this._fallbackAnimation = platform.EDGE || platform.TRIDENT;
                    _this._noopAnimations = animationMode === 'NoopAnimations' &&
                        (!!defaults && !defaults._forceAnimations);
                    if (defaults) {
                        if (defaults.diameter) {
                            _this.diameter = defaults.diameter;
                        }
                        if (defaults.strokeWidth) {
                            _this.strokeWidth = defaults.strokeWidth;
                        }
                    }
                    return _this;
                }
                Object.defineProperty(MatProgressSpinner.prototype, "diameter", {
                    /**
                     * The diameter of the progress spinner (will set width and height of svg).
                     * @return {?}
                     */
                    get: function () { return this._diameter; },
                    /**
                     * @param {?} size
                     * @return {?}
                     */
                    set: function (size) {
                        this._diameter = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceNumberProperty"])(size);
                        // If this is set before `ngOnInit`, the style root may not have been resolved yet.
                        if (!this._fallbackAnimation && this._styleRoot) {
                            this._attachStyleNode();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatProgressSpinner.prototype, "strokeWidth", {
                    /**
                     * Stroke width of the progress spinner.
                     * @return {?}
                     */
                    get: function () {
                        return this._strokeWidth || this.diameter / 10;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._strokeWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceNumberProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatProgressSpinner.prototype, "value", {
                    /**
                     * Value of the progress circle.
                     * @return {?}
                     */
                    get: function () {
                        return this.mode === 'determinate' ? this._value : 0;
                    },
                    /**
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        this._value = Math.max(0, Math.min(100, Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceNumberProperty"])(newValue)));
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatProgressSpinner.prototype.ngOnInit = function () {
                    /** @type {?} */
                    var element = this._elementRef.nativeElement;
                    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because
                    // Angular seems to create the element outside the shadow root and then moves it inside, if the
                    // node is inside an `ngIf` and a ShadowDom-encapsulated component.
                    this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;
                    this._attachStyleNode();
                    // On IE and Edge, we can't animate the `stroke-dashoffset`
                    // reliably so we fall back to a non-spec animation.
                    /** @type {?} */
                    var animationClass = "mat-progress-spinner-indeterminate" + (this._fallbackAnimation ? '-fallback' : '') + "-animation";
                    element.classList.add(animationClass);
                };
                Object.defineProperty(MatProgressSpinner.prototype, "_circleRadius", {
                    /**
                     * The radius of the spinner, adjusted for stroke width.
                     * @return {?}
                     */
                    get: function () {
                        return (this.diameter - BASE_STROKE_WIDTH) / 2;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatProgressSpinner.prototype, "_viewBox", {
                    /**
                     * The view box of the spinner's svg element.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var viewBox = this._circleRadius * 2 + this.strokeWidth;
                        return "0 0 " + viewBox + " " + viewBox;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatProgressSpinner.prototype, "_strokeCircumference", {
                    /**
                     * The stroke circumference of the svg circle.
                     * @return {?}
                     */
                    get: function () {
                        return 2 * Math.PI * this._circleRadius;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatProgressSpinner.prototype, "_strokeDashOffset", {
                    /**
                     * The dash offset of the svg circle.
                     * @return {?}
                     */
                    get: function () {
                        if (this.mode === 'determinate') {
                            return this._strokeCircumference * (100 - this._value) / 100;
                        }
                        // In fallback mode set the circle to 80% and rotate it with CSS.
                        if (this._fallbackAnimation && this.mode === 'indeterminate') {
                            return this._strokeCircumference * 0.2;
                        }
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatProgressSpinner.prototype, "_circleStrokeWidth", {
                    /**
                     * Stroke width of the circle in percent.
                     * @return {?}
                     */
                    get: function () {
                        return this.strokeWidth / this.diameter * 100;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Dynamically generates a style tag containing the correct animation for this diameter.
                 * @private
                 * @return {?}
                 */
                MatProgressSpinner.prototype._attachStyleNode = function () {
                    /** @type {?} */
                    var styleRoot = this._styleRoot;
                    /** @type {?} */
                    var currentDiameter = this._diameter;
                    /** @type {?} */
                    var diameters = MatProgressSpinner._diameters;
                    /** @type {?} */
                    var diametersForElement = diameters.get(styleRoot);
                    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {
                        /** @type {?} */
                        var styleTag = this._document.createElement('style');
                        styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');
                        styleTag.textContent = this._getAnimationText();
                        styleRoot.appendChild(styleTag);
                        if (!diametersForElement) {
                            diametersForElement = new Set();
                            diameters.set(styleRoot, diametersForElement);
                        }
                        diametersForElement.add(currentDiameter);
                    }
                };
                /**
                 * Generates animation styles adjusted for the spinner's diameter.
                 * @private
                 * @return {?}
                 */
                MatProgressSpinner.prototype._getAnimationText = function () {
                    return INDETERMINATE_ANIMATION_TEMPLATE
                        // Animation should begin at 5% and end at 80%
                        .replace(/START_VALUE/g, "" + 0.95 * this._strokeCircumference)
                        .replace(/END_VALUE/g, "" + 0.2 * this._strokeCircumference)
                        .replace(/DIAMETER/g, "" + this.diameter);
                };
                return MatProgressSpinner;
            }(_MatProgressSpinnerMixinBase));
            /**
             * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).
             * We need to keep track of which elements the diameters were attached to, because for
             * elements in the Shadow DOM the style tags are attached to the shadow root, rather
             * than the document head.
             */
            MatProgressSpinner._diameters = new WeakMap();
            MatProgressSpinner.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{ selector: 'mat-progress-spinner',
                            exportAs: 'matProgressSpinner',
                            host: {
                                'role': 'progressbar',
                                'class': 'mat-progress-spinner',
                                '[class._mat-animation-noopable]': "_noopAnimations",
                                '[style.width.px]': 'diameter',
                                '[style.height.px]': 'diameter',
                                '[attr.aria-valuemin]': 'mode === "determinate" ? 0 : null',
                                '[attr.aria-valuemax]': 'mode === "determinate" ? 100 : null',
                                '[attr.aria-valuenow]': 'mode === "determinate" ? value : null',
                                '[attr.mode]': 'mode',
                            },
                            inputs: ['color'],
                            template: "<svg [style.width.px]=\"diameter\" [style.height.px]=\"diameter\" [attr.viewBox]=\"_viewBox\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\" [ngSwitch]=\"mode === 'indeterminate'\"><circle *ngSwitchCase=\"true\" cx=\"50%\" cy=\"50%\" [attr.r]=\"_circleRadius\" [style.animation-name]=\"'mat-progress-spinner-stroke-rotate-' + diameter\" [style.stroke-dashoffset.px]=\"_strokeDashOffset\" [style.stroke-dasharray.px]=\"_strokeCircumference\" [style.stroke-width.%]=\"_circleStrokeWidth\"></circle><circle *ngSwitchCase=\"false\" cx=\"50%\" cy=\"50%\" [attr.r]=\"_circleRadius\" [style.stroke-dashoffset.px]=\"_strokeDashOffset\" [style.stroke-dasharray.px]=\"_strokeCircumference\" [style.stroke-width.%]=\"_circleStrokeWidth\"></circle></svg>",
                            styles: [".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}"],
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                        },] },
            ];
            /** @nocollapse */
            MatProgressSpinner.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["Platform"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__["ANIMATION_MODULE_TYPE"],] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }
            ]; };
            MatProgressSpinner.propDecorators = {
                diameter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                strokeWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                mode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
            };
            /**
             * `<mat-spinner>` component.
             *
             * This is a component definition to be used as a convenience reference to create an
             * indeterminate `<mat-progress-spinner>` instance.
             */
            var MatSpinner = /** @class */ (function (_super) {
                __extends(MatSpinner, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} platform
                 * @param {?} document
                 * @param {?} animationMode
                 * @param {?=} defaults
                 */
                function MatSpinner(elementRef, platform, document, animationMode, defaults) {
                    var _this = _super.call(this, elementRef, platform, document, animationMode, defaults) || this;
                    _this.mode = 'indeterminate';
                    return _this;
                }
                return MatSpinner;
            }(MatProgressSpinner));
            MatSpinner.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{ selector: 'mat-spinner',
                            host: {
                                'role': 'progressbar',
                                'mode': 'indeterminate',
                                'class': 'mat-spinner mat-progress-spinner',
                                '[class._mat-animation-noopable]': "_noopAnimations",
                                '[style.width.px]': 'diameter',
                                '[style.height.px]': 'diameter',
                            },
                            inputs: ['color'],
                            template: "<svg [style.width.px]=\"diameter\" [style.height.px]=\"diameter\" [attr.viewBox]=\"_viewBox\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\" [ngSwitch]=\"mode === 'indeterminate'\"><circle *ngSwitchCase=\"true\" cx=\"50%\" cy=\"50%\" [attr.r]=\"_circleRadius\" [style.animation-name]=\"'mat-progress-spinner-stroke-rotate-' + diameter\" [style.stroke-dashoffset.px]=\"_strokeDashOffset\" [style.stroke-dasharray.px]=\"_strokeCircumference\" [style.stroke-width.%]=\"_circleStrokeWidth\"></circle><circle *ngSwitchCase=\"false\" cx=\"50%\" cy=\"50%\" [attr.r]=\"_circleRadius\" [style.stroke-dashoffset.px]=\"_strokeDashOffset\" [style.stroke-dasharray.px]=\"_strokeCircumference\" [style.stroke-width.%]=\"_circleStrokeWidth\"></circle></svg>",
                            styles: [".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}"],
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                        },] },
            ];
            /** @nocollapse */
            MatSpinner.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["Platform"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__["ANIMATION_MODULE_TYPE"],] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }
            ]; };
            /**
             * Gets the shadow root of an element, if supported and the element is inside the Shadow DOM.
             * @param {?} element
             * @param {?} _document
             * @return {?}
             */
            function _getShadowRoot(element, _document) {
                // TODO(crisbeto): see whether we should move this into the CDK
                // feature detection utilities once #15616 gets merged in.
                if (typeof window !== 'undefined') {
                    /** @type {?} */
                    var head = _document.head;
                    // Check whether the browser supports Shadow DOM.
                    if (head && ((( /** @type {?} */(head))).createShadowRoot || head.attachShadow)) {
                        /** @type {?} */
                        var rootNode = element.getRootNode ? element.getRootNode() : null;
                        // We need to take the `ShadowRoot` off of `window`, because the built-in types are
                        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.
                        if (rootNode instanceof (( /** @type {?} */(window))).ShadowRoot) {
                            return rootNode;
                        }
                    }
                }
                return null;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatProgressSpinnerModule = /** @class */ (function () {
                function MatProgressSpinnerModule() {
                }
                return MatProgressSpinnerModule;
            }());
            MatProgressSpinnerModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]],
                            exports: [
                                MatProgressSpinner,
                                MatSpinner,
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"]
                            ],
                            declarations: [
                                MatProgressSpinner,
                                MatSpinner
                            ],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=progress-spinner.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/radio.js": 
        /*!*********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/radio.js ***!
          \*********************************************************/
        /*! exports provided: MatRadioModule, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioChange, MatRadioGroup, MatRadioButton */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatRadioModule", function () { return MatRadioModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_RADIO_DEFAULT_OPTIONS_FACTORY", function () { return MAT_RADIO_DEFAULT_OPTIONS_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_RADIO_DEFAULT_OPTIONS", function () { return MAT_RADIO_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR", function () { return MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatRadioChange", function () { return MatRadioChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatRadioGroup", function () { return MatRadioGroup; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatRadioButton", function () { return MatRadioButton; });
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAT_RADIO_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mat-radio-default-options', {
                providedIn: 'root',
                factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY
            });
            /**
             * @return {?}
             */
            function MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {
                return {
                    color: 'accent'
                };
            }
            // Increasing integer for generating unique ids for radio components.
            /** @type {?} */
            var nextUniqueId = 0;
            /**
             * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This
             * allows it to support [(ngModel)] and ngControl.
             * \@docs-private
             * @type {?}
             */
            var MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALUE_ACCESSOR"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MatRadioGroup; })),
                multi: true
            };
            /**
             * Change event object emitted by MatRadio and MatRadioGroup.
             */
            var MatRadioChange = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} value
                 */
                function MatRadioChange(source, value) {
                    this.source = source;
                    this.value = value;
                }
                return MatRadioChange;
            }());
            /**
             * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.
             */
            var MatRadioGroup = /** @class */ (function () {
                /**
                 * @param {?} _changeDetector
                 */
                function MatRadioGroup(_changeDetector) {
                    this._changeDetector = _changeDetector;
                    /**
                     * Selected value for the radio group.
                     */
                    this._value = null;
                    /**
                     * The HTML name attribute applied to radio buttons in this group.
                     */
                    this._name = "mat-radio-group-" + nextUniqueId++;
                    /**
                     * The currently selected radio button. Should match value.
                     */
                    this._selected = null;
                    /**
                     * Whether the `value` has been set to its initial value.
                     */
                    this._isInitialized = false;
                    /**
                     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'
                     */
                    this._labelPosition = 'after';
                    /**
                     * Whether the radio group is disabled.
                     */
                    this._disabled = false;
                    /**
                     * Whether the radio group is required.
                     */
                    this._required = false;
                    /**
                     * The method to be called in order to update ngModel
                     */
                    this._controlValueAccessorChangeFn = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * onTouch function registered via registerOnTouch (ControlValueAccessor).
                     * \@docs-private
                     */
                    this.onTouched = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * Event emitted when the group value changes.
                     * Change events are only emitted when the value changes due to user interaction with
                     * a radio button (the same behavior as `<input type-"radio">`).
                     */
                    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                }
                Object.defineProperty(MatRadioGroup.prototype, "name", {
                    /**
                     * Name of the radio button group. All radio buttons inside this group will use this name.
                     * @return {?}
                     */
                    get: function () { return this._name; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._name = value;
                        this._updateRadioButtonNames();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatRadioGroup.prototype, "labelPosition", {
                    /**
                     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'
                     * @return {?}
                     */
                    get: function () {
                        return this._labelPosition;
                    },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) {
                        this._labelPosition = v === 'before' ? 'before' : 'after';
                        this._markRadiosForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatRadioGroup.prototype, "value", {
                    /**
                     * Value for the radio-group. Should equal the value of the selected radio button if there is
                     * a corresponding radio button with a matching value. If there is not such a corresponding
                     * radio button, this value persists to be applied in case a new radio button is added with a
                     * matching value.
                     * @return {?}
                     */
                    get: function () { return this._value; },
                    /**
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        if (this._value !== newValue) {
                            // Set this before proceeding to ensure no circular loop occurs with selection.
                            this._value = newValue;
                            this._updateSelectedRadioFromValue();
                            this._checkSelectedRadioButton();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatRadioGroup.prototype._checkSelectedRadioButton = function () {
                    if (this._selected && !this._selected.checked) {
                        this._selected.checked = true;
                    }
                };
                Object.defineProperty(MatRadioGroup.prototype, "selected", {
                    /**
                     * The currently selected radio button. If set to a new radio button, the radio group value
                     * will be updated to match the new selected button.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    /**
                     * @param {?} selected
                     * @return {?}
                     */
                    set: function (selected) {
                        this._selected = selected;
                        this.value = selected ? selected.value : null;
                        this._checkSelectedRadioButton();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatRadioGroup.prototype, "disabled", {
                    /**
                     * Whether the radio group is disabled
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        this._markRadiosForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatRadioGroup.prototype, "required", {
                    /**
                     * Whether the radio group is required
                     * @return {?}
                     */
                    get: function () { return this._required; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        this._markRadiosForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Initialize properties once content children are available.
                 * This allows us to propagate relevant attributes to associated buttons.
                 * @return {?}
                 */
                MatRadioGroup.prototype.ngAfterContentInit = function () {
                    // Mark this component as initialized in AfterContentInit because the initial value can
                    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the
                    // NgModel occurs *after* the OnInit of the MatRadioGroup.
                    this._isInitialized = true;
                };
                /**
                 * Mark this group as being "touched" (for ngModel). Meant to be called by the contained
                 * radio buttons upon their blur.
                 * @return {?}
                 */
                MatRadioGroup.prototype._touch = function () {
                    if (this.onTouched) {
                        this.onTouched();
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                MatRadioGroup.prototype._updateRadioButtonNames = function () {
                    var _this = this;
                    if (this._radios) {
                        this._radios.forEach(( /**
                         * @param {?} radio
                         * @return {?}
                         */function (/**
                         * @param {?} radio
                         * @return {?}
                         */ radio) {
                            radio.name = _this.name;
                            radio._markForCheck();
                        }));
                    }
                };
                /**
                 * Updates the `selected` radio button from the internal _value state.
                 * @private
                 * @return {?}
                 */
                MatRadioGroup.prototype._updateSelectedRadioFromValue = function () {
                    var _this = this;
                    // If the value already matches the selected radio, do nothing.
                    /** @type {?} */
                    var isAlreadySelected = this._selected !== null && this._selected.value === this._value;
                    if (this._radios && !isAlreadySelected) {
                        this._selected = null;
                        this._radios.forEach(( /**
                         * @param {?} radio
                         * @return {?}
                         */function (/**
                         * @param {?} radio
                         * @return {?}
                         */ radio) {
                            radio.checked = _this.value === radio.value;
                            if (radio.checked) {
                                _this._selected = radio;
                            }
                        }));
                    }
                };
                /**
                 * Dispatch change event with current selection and group value.
                 * @return {?}
                 */
                MatRadioGroup.prototype._emitChangeEvent = function () {
                    if (this._isInitialized) {
                        this.change.emit(new MatRadioChange(( /** @type {?} */(this._selected)), this._value));
                    }
                };
                /**
                 * @return {?}
                 */
                MatRadioGroup.prototype._markRadiosForCheck = function () {
                    if (this._radios) {
                        this._radios.forEach(( /**
                         * @param {?} radio
                         * @return {?}
                         */function (/**
                         * @param {?} radio
                         * @return {?}
                         */ radio) { return radio._markForCheck(); }));
                    }
                };
                /**
                 * Sets the model value. Implemented as part of ControlValueAccessor.
                 * @param {?} value
                 * @return {?}
                 */
                MatRadioGroup.prototype.writeValue = function (value) {
                    this.value = value;
                    this._changeDetector.markForCheck();
                };
                /**
                 * Registers a callback to be triggered when the model value changes.
                 * Implemented as part of ControlValueAccessor.
                 * @param {?} fn Callback to be registered.
                 * @return {?}
                 */
                MatRadioGroup.prototype.registerOnChange = function (fn) {
                    this._controlValueAccessorChangeFn = fn;
                };
                /**
                 * Registers a callback to be triggered when the control is touched.
                 * Implemented as part of ControlValueAccessor.
                 * @param {?} fn Callback to be registered.
                 * @return {?}
                 */
                MatRadioGroup.prototype.registerOnTouched = function (fn) {
                    this.onTouched = fn;
                };
                /**
                 * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.
                 * @param {?} isDisabled Whether the control should be disabled.
                 * @return {?}
                 */
                MatRadioGroup.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                    this._changeDetector.markForCheck();
                };
                return MatRadioGroup;
            }());
            MatRadioGroup.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: 'mat-radio-group',
                            exportAs: 'matRadioGroup',
                            providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],
                            host: {
                                'role': 'radiogroup',
                                'class': 'mat-radio-group',
                            },
                        },] },
            ];
            /** @nocollapse */
            MatRadioGroup.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] }
            ]; };
            MatRadioGroup.propDecorators = {
                change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                _radios: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(( /**
                                         * @return {?}
                                         */function () { return MatRadioButton; })), { descendants: true },] }],
                color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
            };
            // Boilerplate for applying mixins to MatRadioButton.
            /**
             * \@docs-private
             */
            var MatRadioButtonBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatRadioButtonBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatRadioButtonBase;
            }());
            // As per Material design specifications the selection control radio should use the accent color
            // palette by default. https://material.io/guidelines/components/selection-controls.html
            /** @type {?} */
            var _MatRadioButtonMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinTabIndex"])(MatRadioButtonBase));
            /**
             * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.
             */
            var MatRadioButton = /** @class */ (function (_super) {
                __extends(MatRadioButton, _super);
                /**
                 * @param {?} radioGroup
                 * @param {?} elementRef
                 * @param {?} _changeDetector
                 * @param {?} _focusMonitor
                 * @param {?} _radioDispatcher
                 * @param {?=} _animationMode
                 * @param {?=} _providerOverride
                 */
                function MatRadioButton(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {
                    var _this = _super.call(this, elementRef) || this;
                    _this._changeDetector = _changeDetector;
                    _this._focusMonitor = _focusMonitor;
                    _this._radioDispatcher = _radioDispatcher;
                    _this._animationMode = _animationMode;
                    _this._providerOverride = _providerOverride;
                    _this._uniqueId = "mat-radio-" + ++nextUniqueId;
                    /**
                     * The unique ID for the radio button.
                     */
                    _this.id = _this._uniqueId;
                    /**
                     * Event emitted when the checked state of this radio button changes.
                     * Change events are only emitted when the value changes due to user interaction with
                     * the radio button (the same behavior as `<input type-"radio">`).
                     */
                    _this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Whether this radio is checked.
                     */
                    _this._checked = false;
                    /**
                     * Value assigned to this radio.
                     */
                    _this._value = null;
                    /**
                     * Unregister function for _radioDispatcher
                     */
                    _this._removeUniqueSelectionListener = ( /**
                     * @return {?}
                     */function () { });
                    // Assertions. Ideally these should be stripped out by the compiler.
                    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.
                    _this.radioGroup = radioGroup;
                    _this._removeUniqueSelectionListener =
                        _radioDispatcher.listen(( /**
                         * @param {?} id
                         * @param {?} name
                         * @return {?}
                         */function (id, name) {
                            if (id !== _this.id && name === _this.name) {
                                _this.checked = false;
                            }
                        }));
                    return _this;
                }
                Object.defineProperty(MatRadioButton.prototype, "checked", {
                    /**
                     * Whether this radio button is checked.
                     * @return {?}
                     */
                    get: function () { return this._checked; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newCheckedState = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        if (this._checked !== newCheckedState) {
                            this._checked = newCheckedState;
                            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {
                                this.radioGroup.selected = this;
                            }
                            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {
                                // When unchecking the selected radio button, update the selected radio
                                // property on the group.
                                this.radioGroup.selected = null;
                            }
                            if (newCheckedState) {
                                // Notify all radio buttons with the same name to un-check.
                                this._radioDispatcher.notify(this.id, this.name);
                            }
                            this._changeDetector.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatRadioButton.prototype, "value", {
                    /**
                     * The value of this radio button.
                     * @return {?}
                     */
                    get: function () { return this._value; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._value !== value) {
                            this._value = value;
                            if (this.radioGroup !== null) {
                                if (!this.checked) {
                                    // Update checked when the value changed to match the radio group's value
                                    this.checked = this.radioGroup.value === value;
                                }
                                if (this.checked) {
                                    this.radioGroup.selected = this;
                                }
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatRadioButton.prototype, "labelPosition", {
                    /**
                     * Whether the label should appear after or before the radio button. Defaults to 'after'
                     * @return {?}
                     */
                    get: function () {
                        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._labelPosition = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatRadioButton.prototype, "disabled", {
                    /**
                     * Whether the radio button is disabled.
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newDisabledState = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        if (this._disabled !== newDisabledState) {
                            this._disabled = newDisabledState;
                            this._changeDetector.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatRadioButton.prototype, "required", {
                    /**
                     * Whether the radio button is required.
                     * @return {?}
                     */
                    get: function () {
                        return this._required || (this.radioGroup && this.radioGroup.required);
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatRadioButton.prototype, "color", {
                    /**
                     * Theme color of the radio button.
                     * @return {?}
                     */
                    get: function () {
                        return this._color ||
                            (this.radioGroup && this.radioGroup.color) ||
                            this._providerOverride && this._providerOverride.color || 'accent';
                    },
                    /**
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) { this._color = newValue; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatRadioButton.prototype, "inputId", {
                    /**
                     * ID of the native input element inside `<mat-radio-button>`
                     * @return {?}
                     */
                    get: function () { return (this.id || this._uniqueId) + "-input"; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Focuses the radio button.
                 * @param {?=} options
                 * @return {?}
                 */
                MatRadioButton.prototype.focus = function (options) {
                    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);
                };
                /**
                 * Marks the radio button as needing checking for change detection.
                 * This method is exposed because the parent radio group will directly
                 * update bound properties of the radio button.
                 * @return {?}
                 */
                MatRadioButton.prototype._markForCheck = function () {
                    // When group value changes, the button will not be notified. Use `markForCheck` to explicit
                    // update radio button's status
                    this._changeDetector.markForCheck();
                };
                /**
                 * @return {?}
                 */
                MatRadioButton.prototype.ngOnInit = function () {
                    if (this.radioGroup) {
                        // If the radio is inside a radio group, determine if it should be checked
                        this.checked = this.radioGroup.value === this._value;
                        // Copy name from parent radio group
                        this.name = this.radioGroup.name;
                    }
                };
                /**
                 * @return {?}
                 */
                MatRadioButton.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    this._focusMonitor
                        .monitor(this._elementRef, true)
                        .subscribe(( /**
                 * @param {?} focusOrigin
                 * @return {?}
                 */function (/**
                 * @param {?} focusOrigin
                 * @return {?}
                 */ focusOrigin) {
                        if (!focusOrigin && _this.radioGroup) {
                            _this.radioGroup._touch();
                        }
                    }));
                };
                /**
                 * @return {?}
                 */
                MatRadioButton.prototype.ngOnDestroy = function () {
                    this._focusMonitor.stopMonitoring(this._elementRef);
                    this._removeUniqueSelectionListener();
                };
                /**
                 * Dispatch change event with current value.
                 * @private
                 * @return {?}
                 */
                MatRadioButton.prototype._emitChangeEvent = function () {
                    this.change.emit(new MatRadioChange(this, this._value));
                };
                /**
                 * @return {?}
                 */
                MatRadioButton.prototype._isRippleDisabled = function () {
                    return this.disableRipple || this.disabled;
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatRadioButton.prototype._onInputClick = function (event) {
                    // We have to stop propagation for click events on the visual hidden input element.
                    // By default, when a user clicks on a label element, a generated click event will be
                    // dispatched on the associated input element. Since we are using a label element as our
                    // root container, the click event on the `radio-button` will be executed twice.
                    // The real click event will bubble up, and the generated click event also tries to bubble up.
                    // This will lead to multiple click events.
                    // Preventing bubbling for the second event will solve that issue.
                    event.stopPropagation();
                };
                /**
                 * Triggered when the radio button received a click or the input recognized any change.
                 * Clicking on a label element, will trigger a change event on the associated input.
                 * @param {?} event
                 * @return {?}
                 */
                MatRadioButton.prototype._onInputChange = function (event) {
                    // We always have to stop propagation on the change event.
                    // Otherwise the change event, from the input element, will bubble up and
                    // emit its event object to the `change` output.
                    event.stopPropagation();
                    /** @type {?} */
                    var groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;
                    this.checked = true;
                    this._emitChangeEvent();
                    if (this.radioGroup) {
                        this.radioGroup._controlValueAccessorChangeFn(this.value);
                        if (groupValueChanged) {
                            this.radioGroup._emitChangeEvent();
                        }
                    }
                };
                return MatRadioButton;
            }(_MatRadioButtonMixinBase));
            MatRadioButton.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{ selector: 'mat-radio-button',
                            template: "<label [attr.for]=\"inputId\" class=\"mat-radio-label\" #label><div class=\"mat-radio-container\"><div class=\"mat-radio-outer-circle\"></div><div class=\"mat-radio-inner-circle\"></div><div mat-ripple class=\"mat-radio-ripple\" [matRippleTrigger]=\"label\" [matRippleDisabled]=\"_isRippleDisabled()\" [matRippleCentered]=\"true\" [matRippleRadius]=\"20\" [matRippleAnimation]=\"{enterDuration: 150}\"><div class=\"mat-ripple-element mat-radio-persistent-ripple\"></div></div><input #input class=\"mat-radio-input cdk-visually-hidden\" type=\"radio\" [id]=\"inputId\" [checked]=\"checked\" [disabled]=\"disabled\" [tabIndex]=\"tabIndex\" [attr.name]=\"name\" [attr.value]=\"value\" [required]=\"required\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" [attr.aria-describedby]=\"ariaDescribedby\" (change)=\"_onInputChange($event)\" (click)=\"_onInputClick($event)\"></div><div class=\"mat-radio-label-content\" [class.mat-radio-label-before]=\"labelPosition == 'before'\"><span style=\"display:none\">&nbsp;</span><ng-content></ng-content></div></label>",
                            styles: [".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple,.mat-radio-persistent-ripple{opacity:0}@media (hover:none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}@media (-ms-high-contrast:active){.mat-radio-disabled{opacity:.5}}"],
                            inputs: ['disableRipple', 'tabIndex'],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                            exportAs: 'matRadioButton',
                            host: {
                                'class': 'mat-radio-button',
                                '[class.mat-radio-checked]': 'checked',
                                '[class.mat-radio-disabled]': 'disabled',
                                '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
                                '[class.mat-primary]': 'color === "primary"',
                                '[class.mat-accent]': 'color === "accent"',
                                '[class.mat-warn]': 'color === "warn"',
                                // Needs to be -1 so the `focus` event still fires.
                                '[attr.tabindex]': '-1',
                                '[attr.id]': 'id',
                                '[attr.aria-label]': 'null',
                                '[attr.aria-labelledby]': 'null',
                                '[attr.aria-describedby]': 'null',
                                // Note: under normal conditions focus shouldn't land on this element, however it may be
                                // programmatically set, for example inside of a focus trap, in this case we want to forward
                                // the focus to the native element.
                                '(focus)': '_inputElement.nativeElement.focus()',
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatRadioButton.ctorParameters = function () { return [
                { type: MatRadioGroup, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] },
                { type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["UniqueSelectionDispatcher"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__["ANIMATION_MODULE_TYPE"],] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MAT_RADIO_DEFAULT_OPTIONS,] }] }
            ]; };
            MatRadioButton.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['aria-label',] }],
                ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['aria-labelledby',] }],
                ariaDescribedby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['aria-describedby',] }],
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                _inputElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['input', { static: false },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatRadioModule = /** @class */ (function () {
                function MatRadioModule() {
                }
                return MatRadioModule;
            }());
            MatRadioModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatRippleModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"]],
                            exports: [MatRadioGroup, MatRadioButton, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"]],
                            declarations: [MatRadioGroup, MatRadioButton],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=radio.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/select.js": 
        /*!**********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/select.js ***!
          \**********************************************************/
        /*! exports provided: MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSelectModule", function () { return MatSelectModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY", function () { return MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_MAX_HEIGHT", function () { return SELECT_PANEL_MAX_HEIGHT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_PADDING_X", function () { return SELECT_PANEL_PADDING_X; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_INDENT_PADDING_X", function () { return SELECT_PANEL_INDENT_PADDING_X; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_ITEM_HEIGHT_EM", function () { return SELECT_ITEM_HEIGHT_EM; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_MULTIPLE_PANEL_PADDING_X", function () { return SELECT_MULTIPLE_PANEL_PADDING_X; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_VIEWPORT_PADDING", function () { return SELECT_PANEL_VIEWPORT_PADDING; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SELECT_SCROLL_STRATEGY", function () { return MAT_SELECT_SCROLL_STRATEGY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SELECT_SCROLL_STRATEGY_PROVIDER", function () { return MAT_SELECT_SCROLL_STRATEGY_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSelectChange", function () { return MatSelectChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSelectTrigger", function () { return MatSelectTrigger; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSelect", function () { return MatSelect; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matSelectAnimations", function () { return matSelectAnimations; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformPanel", function () { return transformPanel; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fadeInContent", function () { return fadeInContent; });
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm2015/scrolling.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/form-field */ "./node_modules/@angular/material/esm2015/form-field.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The following are all the animations for the mat-select component, with each
             * const containing the metadata for one animation.
             *
             * The values below match the implementation of the AngularJS Material mat-select animation.
             * \@docs-private
             * @type {?}
             */
            var matSelectAnimations = {
                /**
                 * This animation ensures the select's overlay panel animation (transformPanel) is called when
                 * closing the select.
                 * This is needed due to https://github.com/angular/angular/issues/23302
                 */
                transformPanelWrap: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('transformPanelWrap', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["query"])('@transformPanel', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animateChild"])()], { optional: true }))
                ]),
                /**
                 * This animation transforms the select's overlay panel on and off the page.
                 *
                 * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it
                 * up to 100% on the Y axis, fades in its border, and translates slightly up and to the
                 * side to ensure the option text correctly overlaps the trigger text.
                 *
                 * When the panel is removed from the DOM, it simply fades out linearly.
                 */
                transformPanel: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('transformPanel', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
                        transform: 'scaleY(0.8)',
                        minWidth: '100%',
                        opacity: 0
                    })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('showing', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
                        opacity: 1,
                        minWidth: 'calc(100% + 32px)',
                        // 32px = 2 * 16px padding
                        transform: 'scaleY(1)'
                    })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('showing-multiple', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
                        opacity: 1,
                        minWidth: 'calc(100% + 64px)',
                        // 64px = 48px padding on the left + 16px padding on the right
                        transform: 'scaleY(1)'
                    })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('void => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('120ms cubic-bezier(0, 0, 0.2, 1)')),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('100ms 25ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 0 })))
                ]),
                /**
                 * This animation fades in the background color and text content of the
                 * select's options. It is time delayed to occur 100ms after the overlay
                 * panel has transformed in.
                 * @deprecated Not used anymore. To be removed.
                 * \@breaking-change 8.0.0
                 */
                fadeInContent: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('fadeInContent', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('showing', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 1 })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('void => showing', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 0 }),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                    ])
                ])
            };
            /**
             * @deprecated
             * \@breaking-change 8.0.0
             * \@docs-private
             * @type {?}
             */
            var transformPanel = matSelectAnimations.transformPanel;
            /**
             * @deprecated
             * \@breaking-change 8.0.0
             * \@docs-private
             * @type {?}
             */
            var fadeInContent = matSelectAnimations.fadeInContent;
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Returns an exception to be thrown when attempting to change a select's `multiple` option
             * after initialization.
             * \@docs-private
             * @return {?}
             */
            function getMatSelectDynamicMultipleError() {
                return Error('Cannot change `multiple` mode of select after initialization.');
            }
            /**
             * Returns an exception to be thrown when attempting to assign a non-array value to a select
             * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for
             * resetting the value.
             * \@docs-private
             * @return {?}
             */
            function getMatSelectNonArrayValueError() {
                return Error('Value must be an array in multiple-selection mode.');
            }
            /**
             * Returns an exception to be thrown when assigning a non-function value to the comparator
             * used to determine if a value corresponds to an option. Note that whether the function
             * actually takes two values and returns a boolean is not checked.
             * @return {?}
             */
            function getMatSelectNonFunctionValueError() {
                return Error('`compareWith` must be a function.');
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextUniqueId = 0;
            /**
             * The max height of the select's overlay panel
             * @type {?}
             */
            var SELECT_PANEL_MAX_HEIGHT = 256;
            /**
             * The panel's padding on the x-axis
             * @type {?}
             */
            var SELECT_PANEL_PADDING_X = 16;
            /**
             * The panel's x axis padding if it is indented (e.g. there is an option group).
             * @type {?}
             */
            var SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;
            /**
             * The height of the select items in `em` units.
             * @type {?}
             */
            var SELECT_ITEM_HEIGHT_EM = 3;
            // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.
            /**
             * Distance between the panel edge and the option text in
             * multi-selection mode.
             *
             * Calculated as:
             * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40
             * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.
             * The checkbox width is 16px.
             * @type {?}
             */
            var SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;
            /**
             * The select panel will only "fit" inside the viewport if it is positioned at
             * this value or more away from the viewport boundary.
             * @type {?}
             */
            var SELECT_PANEL_VIEWPORT_PADDING = 8;
            /**
             * Injection token that determines the scroll handling while a select is open.
             * @type {?}
             */
            var MAT_SELECT_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_8__["InjectionToken"]('mat-select-scroll-strategy');
            /**
             * \@docs-private
             * @param {?} overlay
             * @return {?}
             */
            function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
                return ( /**
                 * @return {?}
                 */function () { return overlay.scrollStrategies.reposition(); });
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {
                provide: MAT_SELECT_SCROLL_STRATEGY,
                deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"]],
                useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,
            };
            /**
             * Change event object that is emitted when the select value has changed.
             */
            var MatSelectChange = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} value
                 */
                function MatSelectChange(source, value) {
                    this.source = source;
                    this.value = value;
                }
                return MatSelectChange;
            }());
            // Boilerplate for applying mixins to MatSelect.
            /**
             * \@docs-private
             */
            var MatSelectBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _defaultErrorStateMatcher
                 * @param {?} _parentForm
                 * @param {?} _parentFormGroup
                 * @param {?} ngControl
                 */
                function MatSelectBase(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
                    this._elementRef = _elementRef;
                    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
                    this._parentForm = _parentForm;
                    this._parentFormGroup = _parentFormGroup;
                    this.ngControl = ngControl;
                }
                return MatSelectBase;
            }());
            /** @type {?} */
            var _MatSelectMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__["mixinDisabled"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__["mixinErrorState"])(MatSelectBase))));
            /**
             * Allows the user to customize the trigger that is displayed when the select has a value.
             */
            var MatSelectTrigger = /** @class */ (function () {
                function MatSelectTrigger() {
                }
                return MatSelectTrigger;
            }());
            MatSelectTrigger.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Directive"], args: [{
                            selector: 'mat-select-trigger'
                        },] },
            ];
            var MatSelect = /** @class */ (function (_super) {
                __extends(MatSelect, _super);
                /**
                 * @param {?} _viewportRuler
                 * @param {?} _changeDetectorRef
                 * @param {?} _ngZone
                 * @param {?} _defaultErrorStateMatcher
                 * @param {?} elementRef
                 * @param {?} _dir
                 * @param {?} _parentForm
                 * @param {?} _parentFormGroup
                 * @param {?} _parentFormField
                 * @param {?} ngControl
                 * @param {?} tabIndex
                 * @param {?} scrollStrategyFactory
                 * @param {?=} _liveAnnouncer
                 */
                function MatSelect(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {
                    var _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
                    _this._viewportRuler = _viewportRuler;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._ngZone = _ngZone;
                    _this._dir = _dir;
                    _this._parentFormField = _parentFormField;
                    _this.ngControl = ngControl;
                    _this._liveAnnouncer = _liveAnnouncer;
                    /**
                     * Whether or not the overlay panel is open.
                     */
                    _this._panelOpen = false;
                    /**
                     * Whether filling out the select is required in the form.
                     */
                    _this._required = false;
                    /**
                     * The scroll position of the overlay panel, calculated to center the selected option.
                     */
                    _this._scrollTop = 0;
                    /**
                     * Whether the component is in multiple selection mode.
                     */
                    _this._multiple = false;
                    /**
                     * Comparison function to specify which option is displayed. Defaults to object equality.
                     */
                    _this._compareWith = ( /**
                     * @param {?} o1
                     * @param {?} o2
                     * @return {?}
                     */function (o1, o2) { return o1 === o2; });
                    /**
                     * Unique id for this input.
                     */
                    _this._uid = "mat-select-" + nextUniqueId++;
                    /**
                     * Emits whenever the component is destroyed.
                     */
                    _this._destroy = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
                    /**
                     * The cached font-size of the trigger element.
                     */
                    _this._triggerFontSize = 0;
                    /**
                     * `View -> model callback called when value changes`
                     */
                    _this._onChange = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * `View -> model callback called when select has been touched`
                     */
                    _this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * The IDs of child options to be passed to the aria-owns attribute.
                     */
                    _this._optionIds = '';
                    /**
                     * The value of the select panel's transform-origin property.
                     */
                    _this._transformOrigin = 'top';
                    /**
                     * Emits when the panel element is finished transforming in.
                     */
                    _this._panelDoneAnimatingStream = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
                    /**
                     * The y-offset of the overlay panel in relation to the trigger's top start corner.
                     * This must be adjusted to align the selected option text over the trigger text.
                     * when the panel opens. Will change based on the y-position of the selected option.
                     */
                    _this._offsetY = 0;
                    /**
                     * This position config ensures that the top "start" corner of the overlay
                     * is aligned with with the top "start" of the origin by default (overlapping
                     * the trigger completely). If the panel cannot fit below the trigger, it
                     * will fall back to a position above the trigger.
                     */
                    _this._positions = [
                        {
                            originX: 'start',
                            originY: 'top',
                            overlayX: 'start',
                            overlayY: 'top',
                        },
                        {
                            originX: 'start',
                            originY: 'bottom',
                            overlayX: 'start',
                            overlayY: 'bottom',
                        },
                    ];
                    /**
                     * Whether the component is disabling centering of the active option over the trigger.
                     */
                    _this._disableOptionCentering = false;
                    _this._focused = false;
                    /**
                     * A name for this control that can be used by `mat-form-field`.
                     */
                    _this.controlType = 'mat-select';
                    /**
                     * Aria label of the select. If not specified, the placeholder will be used as label.
                     */
                    _this.ariaLabel = '';
                    /**
                     * Combined stream of all of the child options' change events.
                     */
                    _this.optionSelectionChanges = ( /** @type {?} */(Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["defer"])(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var options = _this.options;
                        if (options) {
                            return options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["startWith"])(options), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["switchMap"])(( /**
                             * @return {?}
                             */function () { return Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"]).apply(void 0, options.map(( /**
                             * @param {?} option
                             * @return {?}
                             */function (/**
                             * @param {?} option
                             * @return {?}
                             */ option) { return option.onSelectionChange; }))); })));
                        }
                        return _this._ngZone.onStable
                            .asObservable()
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["switchMap"])(( /**
                     * @return {?}
                     */function () { return _this.optionSelectionChanges; })));
                    }))));
                    /**
                     * Event emitted when the select panel has been toggled.
                     */
                    _this.openedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__["EventEmitter"]();
                    /**
                     * Event emitted when the select has been opened.
                     */
                    _this._openedStream = _this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["filter"])(( /**
                     * @param {?} o
                     * @return {?}
                     */function (/**
                     * @param {?} o
                     * @return {?}
                     */ o) { return o; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["map"])(( /**
                     * @return {?}
                     */function () { })));
                    /**
                     * Event emitted when the select has been closed.
                     */
                    _this._closedStream = _this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["filter"])(( /**
                     * @param {?} o
                     * @return {?}
                     */function (/**
                     * @param {?} o
                     * @return {?}
                     */ o) { return !o; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["map"])(( /**
                     * @return {?}
                     */function () { })));
                    /**
                     * Event emitted when the selected value has been changed by the user.
                     */
                    _this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__["EventEmitter"]();
                    /**
                     * Event that emits whenever the raw value of the select changes. This is here primarily
                     * to facilitate the two-way binding for the `value` input.
                     * \@docs-private
                     */
                    _this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__["EventEmitter"]();
                    if (_this.ngControl) {
                        // Note: we provide the value accessor through here, instead of
                        // the `providers` to avoid running into a circular import.
                        _this.ngControl.valueAccessor = _this;
                    }
                    _this._scrollStrategyFactory = scrollStrategyFactory;
                    _this._scrollStrategy = _this._scrollStrategyFactory();
                    _this.tabIndex = parseInt(tabIndex) || 0;
                    // Force setter to be called in case id was not specified.
                    _this.id = _this.id;
                    return _this;
                }
                Object.defineProperty(MatSelect.prototype, "focused", {
                    /**
                     * Whether the select is focused.
                     * @return {?}
                     */
                    get: function () {
                        return this._focused || this._panelOpen;
                    },
                    /**
                     * @deprecated Setter to be removed as this property is intended to be readonly.
                     * \@breaking-change 8.0.0
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._focused = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSelect.prototype, "placeholder", {
                    /**
                     * Placeholder to be shown if no value has been selected.
                     * @return {?}
                     */
                    get: function () { return this._placeholder; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._placeholder = value;
                        this.stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSelect.prototype, "required", {
                    /**
                     * Whether the component is required.
                     * @return {?}
                     */
                    get: function () { return this._required; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                        this.stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSelect.prototype, "multiple", {
                    /**
                     * Whether the user should be allowed to select multiple options.
                     * @return {?}
                     */
                    get: function () { return this._multiple; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._selectionModel) {
                            throw getMatSelectDynamicMultipleError();
                        }
                        this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSelect.prototype, "disableOptionCentering", {
                    /**
                     * Whether to center the active option over the trigger.
                     * @return {?}
                     */
                    get: function () { return this._disableOptionCentering; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disableOptionCentering = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSelect.prototype, "compareWith", {
                    /**
                     * Function to compare the option values with the selected values. The first argument
                     * is a value from an option. The second is a value from the selection. A boolean
                     * should be returned.
                     * @return {?}
                     */
                    get: function () { return this._compareWith; },
                    /**
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        if (typeof fn !== 'function') {
                            throw getMatSelectNonFunctionValueError();
                        }
                        this._compareWith = fn;
                        if (this._selectionModel) {
                            // A different comparator means the selection could change.
                            this._initializeSelection();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSelect.prototype, "value", {
                    /**
                     * Value of the select control.
                     * @return {?}
                     */
                    get: function () { return this._value; },
                    /**
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        if (newValue !== this._value) {
                            this.writeValue(newValue);
                            this._value = newValue;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSelect.prototype, "id", {
                    /**
                     * Unique id of the element.
                     * @return {?}
                     */
                    get: function () { return this._id; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._id = value || this._uid;
                        this.stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatSelect.prototype.ngOnInit = function () {
                    var _this = this;
                    this._selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__["SelectionModel"](this.multiple);
                    this.stateChanges.next();
                    // We need `distinctUntilChanged` here, because some browsers will
                    // fire the animation end event twice for the same animation. See:
                    // https://github.com/angular/angular/issues/24084
                    this._panelDoneAnimatingStream
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["distinctUntilChanged"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroy))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        if (_this.panelOpen) {
                            _this._scrollTop = 0;
                            _this.openedChange.emit(true);
                        }
                        else {
                            _this.openedChange.emit(false);
                            _this.overlayDir.offsetX = 0;
                            _this._changeDetectorRef.markForCheck();
                        }
                    }));
                    this._viewportRuler.change()
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroy))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        if (_this._panelOpen) {
                            _this._triggerRect = _this.trigger.nativeElement.getBoundingClientRect();
                            _this._changeDetectorRef.markForCheck();
                        }
                    }));
                };
                /**
                 * @return {?}
                 */
                MatSelect.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._initKeyManager();
                    this._selectionModel.onChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        event.added.forEach(( /**
                         * @param {?} option
                         * @return {?}
                         */function (/**
                         * @param {?} option
                         * @return {?}
                         */ option) { return option.select(); }));
                        event.removed.forEach(( /**
                         * @param {?} option
                         * @return {?}
                         */function (/**
                         * @param {?} option
                         * @return {?}
                         */ option) { return option.deselect(); }));
                    }));
                    this.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._resetOptions();
                        _this._initializeSelection();
                    }));
                };
                /**
                 * @return {?}
                 */
                MatSelect.prototype.ngDoCheck = function () {
                    if (this.ngControl) {
                        this.updateErrorState();
                    }
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                MatSelect.prototype.ngOnChanges = function (changes) {
                    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let
                    // the parent form field know to run change detection when the disabled state changes.
                    if (changes['disabled']) {
                        this.stateChanges.next();
                    }
                    if (changes['typeaheadDebounceInterval'] && this._keyManager) {
                        this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);
                    }
                };
                /**
                 * @return {?}
                 */
                MatSelect.prototype.ngOnDestroy = function () {
                    this._destroy.next();
                    this._destroy.complete();
                    this.stateChanges.complete();
                };
                /**
                 * Toggles the overlay panel open or closed.
                 * @return {?}
                 */
                MatSelect.prototype.toggle = function () {
                    this.panelOpen ? this.close() : this.open();
                };
                /**
                 * Opens the overlay panel.
                 * @return {?}
                 */
                MatSelect.prototype.open = function () {
                    var _this = this;
                    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {
                        return;
                    }
                    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();
                    // Note: The computed font-size will be a string pixel value (e.g. "16px").
                    // `parseInt` ignores the trailing 'px' and converts this to a number.
                    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');
                    this._panelOpen = true;
                    this._keyManager.withHorizontalOrientation(null);
                    this._calculateOverlayPosition();
                    this._highlightCorrectOption();
                    this._changeDetectorRef.markForCheck();
                    // Set the font size on the panel element once it exists.
                    this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1)).subscribe(( /**
                     * @return {?}
                     */function () {
                        if (_this._triggerFontSize && _this.overlayDir.overlayRef &&
                            _this.overlayDir.overlayRef.overlayElement) {
                            _this.overlayDir.overlayRef.overlayElement.style.fontSize = _this._triggerFontSize + "px";
                        }
                    }));
                };
                /**
                 * Closes the overlay panel and focuses the host element.
                 * @return {?}
                 */
                MatSelect.prototype.close = function () {
                    if (this._panelOpen) {
                        this._panelOpen = false;
                        this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');
                        this._changeDetectorRef.markForCheck();
                        this._onTouched();
                    }
                };
                /**
                 * Sets the select's value. Part of the ControlValueAccessor interface
                 * required to integrate with Angular's core forms API.
                 *
                 * @param {?} value New value to be written to the model.
                 * @return {?}
                 */
                MatSelect.prototype.writeValue = function (value) {
                    if (this.options) {
                        this._setSelectionByValue(value);
                    }
                };
                /**
                 * Saves a callback function to be invoked when the select's value
                 * changes from user input. Part of the ControlValueAccessor interface
                 * required to integrate with Angular's core forms API.
                 *
                 * @param {?} fn Callback to be triggered when the value changes.
                 * @return {?}
                 */
                MatSelect.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                /**
                 * Saves a callback function to be invoked when the select is blurred
                 * by the user. Part of the ControlValueAccessor interface required
                 * to integrate with Angular's core forms API.
                 *
                 * @param {?} fn Callback to be triggered when the component has been touched.
                 * @return {?}
                 */
                MatSelect.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                /**
                 * Disables the select. Part of the ControlValueAccessor interface required
                 * to integrate with Angular's core forms API.
                 *
                 * @param {?} isDisabled Sets whether the component is disabled.
                 * @return {?}
                 */
                MatSelect.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                    this._changeDetectorRef.markForCheck();
                    this.stateChanges.next();
                };
                Object.defineProperty(MatSelect.prototype, "panelOpen", {
                    /**
                     * Whether or not the overlay panel is open.
                     * @return {?}
                     */
                    get: function () {
                        return this._panelOpen;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSelect.prototype, "selected", {
                    /**
                     * The currently selected option.
                     * @return {?}
                     */
                    get: function () {
                        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSelect.prototype, "triggerValue", {
                    /**
                     * The value displayed in the trigger.
                     * @return {?}
                     */
                    get: function () {
                        if (this.empty) {
                            return '';
                        }
                        if (this._multiple) {
                            /** @type {?} */
                            var selectedOptions = this._selectionModel.selected.map(( /**
                             * @param {?} option
                             * @return {?}
                             */function (/**
                             * @param {?} option
                             * @return {?}
                             */ option) { return option.viewValue; }));
                            if (this._isRtl()) {
                                selectedOptions.reverse();
                            }
                            // TODO(crisbeto): delimiter should be configurable for proper localization.
                            return selectedOptions.join(', ');
                        }
                        return this._selectionModel.selected[0].viewValue;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Whether the element is in RTL mode.
                 * @return {?}
                 */
                MatSelect.prototype._isRtl = function () {
                    return this._dir ? this._dir.value === 'rtl' : false;
                };
                /**
                 * Handles all keydown events on the select.
                 * @param {?} event
                 * @return {?}
                 */
                MatSelect.prototype._handleKeydown = function (event) {
                    if (!this.disabled) {
                        this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);
                    }
                };
                /**
                 * Handles keyboard events while the select is closed.
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                MatSelect.prototype._handleClosedKeydown = function (event) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    /** @type {?} */
                    var isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["DOWN_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["UP_ARROW"] ||
                        keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["LEFT_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["RIGHT_ARROW"];
                    /** @type {?} */
                    var isOpenKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["ENTER"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["SPACE"];
                    /** @type {?} */
                    var manager = this._keyManager;
                    // Open the select on ALT + arrow key to match the native <select>
                    if ((isOpenKey && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["hasModifierKey"])(event)) || ((this.multiple || event.altKey) && isArrowKey)) {
                        event.preventDefault(); // prevents the page from scrolling down when pressing space
                        this.open();
                    }
                    else if (!this.multiple) {
                        /** @type {?} */
                        var previouslySelectedOption = this.selected;
                        if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["HOME"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["END"]) {
                            keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["HOME"] ? manager.setFirstItemActive() : manager.setLastItemActive();
                            event.preventDefault();
                        }
                        else {
                            manager.onKeydown(event);
                        }
                        /** @type {?} */
                        var selectedOption = this.selected;
                        // Since the value has changed, we need to announce it ourselves.
                        // @breaking-change 8.0.0 remove null check for _liveAnnouncer.
                        if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {
                            // We set a duration on the live announcement, because we want the live element to be
                            // cleared after a while so that users can't navigate to it using the arrow keys.
                            this._liveAnnouncer.announce((( /** @type {?} */(selectedOption))).viewValue, 10000);
                        }
                    }
                };
                /**
                 * Handles keyboard events when the selected is open.
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                MatSelect.prototype._handleOpenKeydown = function (event) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    /** @type {?} */
                    var isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["DOWN_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["UP_ARROW"];
                    /** @type {?} */
                    var manager = this._keyManager;
                    if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["HOME"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["END"]) {
                        event.preventDefault();
                        keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["HOME"] ? manager.setFirstItemActive() : manager.setLastItemActive();
                    }
                    else if (isArrowKey && event.altKey) {
                        // Close the select on ALT + arrow key to match the native <select>
                        event.preventDefault();
                        this.close();
                    }
                    else if ((keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["ENTER"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["SPACE"]) && manager.activeItem &&
                        !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["hasModifierKey"])(event)) {
                        event.preventDefault();
                        manager.activeItem._selectViaInteraction();
                    }
                    else if (this._multiple && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["A"] && event.ctrlKey) {
                        event.preventDefault();
                        /** @type {?} */
                        var hasDeselectedOptions_1 = this.options.some(( /**
                         * @param {?} opt
                         * @return {?}
                         */function (/**
                         * @param {?} opt
                         * @return {?}
                         */ opt) { return !opt.disabled && !opt.selected; }));
                        this.options.forEach(( /**
                         * @param {?} option
                         * @return {?}
                         */function (/**
                         * @param {?} option
                         * @return {?}
                         */ option) {
                            if (!option.disabled) {
                                hasDeselectedOptions_1 ? option.select() : option.deselect();
                            }
                        }));
                    }
                    else {
                        /** @type {?} */
                        var previouslyFocusedIndex = manager.activeItemIndex;
                        manager.onKeydown(event);
                        if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&
                            manager.activeItemIndex !== previouslyFocusedIndex) {
                            manager.activeItem._selectViaInteraction();
                        }
                    }
                };
                /**
                 * @return {?}
                 */
                MatSelect.prototype._onFocus = function () {
                    if (!this.disabled) {
                        this._focused = true;
                        this.stateChanges.next();
                    }
                };
                /**
                 * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
                 * "blur" to the panel when it opens, causing a false positive.
                 * @return {?}
                 */
                MatSelect.prototype._onBlur = function () {
                    this._focused = false;
                    if (!this.disabled && !this.panelOpen) {
                        this._onTouched();
                        this._changeDetectorRef.markForCheck();
                        this.stateChanges.next();
                    }
                };
                /**
                 * Callback that is invoked when the overlay panel has been attached.
                 * @return {?}
                 */
                MatSelect.prototype._onAttached = function () {
                    var _this = this;
                    this.overlayDir.positionChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._changeDetectorRef.detectChanges();
                        _this._calculateOverlayOffsetX();
                        _this.panel.nativeElement.scrollTop = _this._scrollTop;
                    }));
                };
                /**
                 * Returns the theme to be used on the panel.
                 * @return {?}
                 */
                MatSelect.prototype._getPanelTheme = function () {
                    return this._parentFormField ? "mat-" + this._parentFormField.color : '';
                };
                Object.defineProperty(MatSelect.prototype, "empty", {
                    /**
                     * Whether the select has a value.
                     * @return {?}
                     */
                    get: function () {
                        return !this._selectionModel || this._selectionModel.isEmpty();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @private
                 * @return {?}
                 */
                MatSelect.prototype._initializeSelection = function () {
                    var _this = this;
                    // Defer setting the value in order to avoid the "Expression
                    // has changed after it was checked" errors from Angular.
                    Promise.resolve().then(( /**
                     * @return {?}
                     */function () {
                        _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value);
                        _this.stateChanges.next();
                    }));
                };
                /**
                 * Sets the selected option based on a value. If no option can be
                 * found with the designated value, the select trigger is cleared.
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                MatSelect.prototype._setSelectionByValue = function (value) {
                    var _this = this;
                    if (this.multiple && value) {
                        if (!Array.isArray(value)) {
                            throw getMatSelectNonArrayValueError();
                        }
                        this._selectionModel.clear();
                        value.forEach(( /**
                         * @param {?} currentValue
                         * @return {?}
                         */function (currentValue) { return _this._selectValue(currentValue); }));
                        this._sortValues();
                    }
                    else {
                        this._selectionModel.clear();
                        /** @type {?} */
                        var correspondingOption = this._selectValue(value);
                        // Shift focus to the active item. Note that we shouldn't do this in multiple
                        // mode, because we don't know what option the user interacted with last.
                        if (correspondingOption) {
                            this._keyManager.setActiveItem(correspondingOption);
                        }
                        else if (!this.panelOpen) {
                            // Otherwise reset the highlighted option. Note that we only want to do this while
                            // closed, because doing it while open can shift the user's focus unnecessarily.
                            this._keyManager.setActiveItem(-1);
                        }
                    }
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Finds and selects and option based on its value.
                 * @private
                 * @param {?} value
                 * @return {?} Option that has the corresponding value.
                 */
                MatSelect.prototype._selectValue = function (value) {
                    var _this = this;
                    /** @type {?} */
                    var correspondingOption = this.options.find(( /**
                     * @param {?} option
                     * @return {?}
                     */function (option) {
                        try {
                            // Treat null as a special reset value.
                            return option.value != null && _this._compareWith(option.value, value);
                        }
                        catch (error) {
                            if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_8__["isDevMode"])()) {
                                // Notify developers of errors in their comparator.
                                console.warn(error);
                            }
                            return false;
                        }
                    }));
                    if (correspondingOption) {
                        this._selectionModel.select(correspondingOption);
                    }
                    return correspondingOption;
                };
                /**
                 * Sets up a key manager to listen to keyboard events on the overlay panel.
                 * @private
                 * @return {?}
                 */
                MatSelect.prototype._initKeyManager = function () {
                    var _this = this;
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["ActiveDescendantKeyManager"](this.options)
                        .withTypeAhead(this.typeaheadDebounceInterval)
                        .withVerticalOrientation()
                        .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')
                        .withAllowedModifierKeys(['shiftKey']);
                    this._keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @return {?}
                     */function () {
                        // Restore focus to the trigger before closing. Ensures that the focus
                        // position won't be lost if the user got focus into the overlay.
                        _this.focus();
                        _this.close();
                    }));
                    this._keyManager.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @return {?}
                     */function () {
                        if (_this._panelOpen && _this.panel) {
                            _this._scrollActiveOptionIntoView();
                        }
                        else if (!_this._panelOpen && !_this.multiple && _this._keyManager.activeItem) {
                            _this._keyManager.activeItem._selectViaInteraction();
                        }
                    }));
                };
                /**
                 * Drops current option subscriptions and IDs and resets from scratch.
                 * @private
                 * @return {?}
                 */
                MatSelect.prototype._resetOptions = function () {
                    var _this = this;
                    /** @type {?} */
                    var changedOrDestroyed = Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"])(this.options.changes, this._destroy);
                    this.optionSelectionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(changedOrDestroyed)).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        _this._onSelect(event.source, event.isUserInput);
                        if (event.isUserInput && !_this.multiple && _this._panelOpen) {
                            _this.close();
                            _this.focus();
                        }
                    }));
                    // Listen to changes in the internal state of the options and react accordingly.
                    // Handles cases like the labels of the selected options changing.
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"]).apply(void 0, this.options.map(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option._stateChanges; }))).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(changedOrDestroyed))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this._changeDetectorRef.markForCheck();
                        _this.stateChanges.next();
                    }));
                    this._setOptionIds();
                };
                /**
                 * Invoked when an option is clicked.
                 * @private
                 * @param {?} option
                 * @param {?} isUserInput
                 * @return {?}
                 */
                MatSelect.prototype._onSelect = function (option, isUserInput) {
                    /** @type {?} */
                    var wasSelected = this._selectionModel.isSelected(option);
                    if (option.value == null && !this._multiple) {
                        option.deselect();
                        this._selectionModel.clear();
                        this._propagateChanges(option.value);
                    }
                    else {
                        if (wasSelected !== option.selected) {
                            option.selected ? this._selectionModel.select(option) :
                                this._selectionModel.deselect(option);
                        }
                        if (isUserInput) {
                            this._keyManager.setActiveItem(option);
                        }
                        if (this.multiple) {
                            this._sortValues();
                            if (isUserInput) {
                                // In case the user selected the option with their mouse, we
                                // want to restore focus back to the trigger, in order to
                                // prevent the select keyboard controls from clashing with
                                // the ones from `mat-option`.
                                this.focus();
                            }
                        }
                    }
                    if (wasSelected !== this._selectionModel.isSelected(option)) {
                        this._propagateChanges();
                    }
                    this.stateChanges.next();
                };
                /**
                 * Sorts the selected values in the selected based on their order in the panel.
                 * @private
                 * @return {?}
                 */
                MatSelect.prototype._sortValues = function () {
                    var _this = this;
                    if (this.multiple) {
                        /** @type {?} */
                        var options_1 = this.options.toArray();
                        this._selectionModel.sort(( /**
                         * @param {?} a
                         * @param {?} b
                         * @return {?}
                         */function (a, b) {
                            return _this.sortComparator ? _this.sortComparator(a, b, options_1) :
                                options_1.indexOf(a) - options_1.indexOf(b);
                        }));
                        this.stateChanges.next();
                    }
                };
                /**
                 * Emits change event to set the model value.
                 * @private
                 * @param {?=} fallbackValue
                 * @return {?}
                 */
                MatSelect.prototype._propagateChanges = function (fallbackValue) {
                    /** @type {?} */
                    var valueToEmit = null;
                    if (this.multiple) {
                        valueToEmit = (( /** @type {?} */(this.selected))).map(( /**
                         * @param {?} option
                         * @return {?}
                         */function (/**
                         * @param {?} option
                         * @return {?}
                         */ option) { return option.value; }));
                    }
                    else {
                        valueToEmit = this.selected ? (( /** @type {?} */(this.selected))).value : fallbackValue;
                    }
                    this._value = valueToEmit;
                    this.valueChange.emit(valueToEmit);
                    this._onChange(valueToEmit);
                    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Records option IDs to pass to the aria-owns property.
                 * @private
                 * @return {?}
                 */
                MatSelect.prototype._setOptionIds = function () {
                    this._optionIds = this.options.map(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option.id; })).join(' ');
                };
                /**
                 * Highlights the selected item. If no option is selected, it will highlight
                 * the first item instead.
                 * @private
                 * @return {?}
                 */
                MatSelect.prototype._highlightCorrectOption = function () {
                    if (this._keyManager) {
                        if (this.empty) {
                            this._keyManager.setFirstItemActive();
                        }
                        else {
                            this._keyManager.setActiveItem(this._selectionModel.selected[0]);
                        }
                    }
                };
                /**
                 * Scrolls the active option into view.
                 * @private
                 * @return {?}
                 */
                MatSelect.prototype._scrollActiveOptionIntoView = function () {
                    /** @type {?} */
                    var activeOptionIndex = this._keyManager.activeItemIndex || 0;
                    /** @type {?} */
                    var labelCount = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__["_countGroupLabelsBeforeOption"])(activeOptionIndex, this.options, this.optionGroups);
                    this.panel.nativeElement.scrollTop = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__["_getOptionScrollPosition"])(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);
                };
                /**
                 * Focuses the select element.
                 * @param {?=} options
                 * @return {?}
                 */
                MatSelect.prototype.focus = function (options) {
                    this._elementRef.nativeElement.focus(options);
                };
                /**
                 * Gets the index of the provided option in the option list.
                 * @private
                 * @param {?} option
                 * @return {?}
                 */
                MatSelect.prototype._getOptionIndex = function (option) {
                    return this.options.reduce(( /**
                     * @param {?} result
                     * @param {?} current
                     * @param {?} index
                     * @return {?}
                     */function (result, current, index) {
                        return result === undefined ? (option === current ? index : undefined) : result;
                    }), undefined);
                };
                /**
                 * Calculates the scroll position and x- and y-offsets of the overlay panel.
                 * @private
                 * @return {?}
                 */
                MatSelect.prototype._calculateOverlayPosition = function () {
                    /** @type {?} */
                    var itemHeight = this._getItemHeight();
                    /** @type {?} */
                    var items = this._getItemCount();
                    /** @type {?} */
                    var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);
                    /** @type {?} */
                    var scrollContainerHeight = items * itemHeight;
                    // The farthest the panel can be scrolled before it hits the bottom
                    /** @type {?} */
                    var maxScroll = scrollContainerHeight - panelHeight;
                    // If no value is selected we open the popup to the first item.
                    /** @type {?} */
                    var selectedOptionOffset = this.empty ? 0 : ( /** @type {?} */(this._getOptionIndex(this._selectionModel.selected[0])));
                    selectedOptionOffset += Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_10__["_countGroupLabelsBeforeOption"])(selectedOptionOffset, this.options, this.optionGroups);
                    // We must maintain a scroll buffer so the selected option will be scrolled to the
                    // center of the overlay panel rather than the top.
                    /** @type {?} */
                    var scrollBuffer = panelHeight / 2;
                    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);
                    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);
                    this._checkOverlayWithinViewport(maxScroll);
                };
                /**
                 * Calculates the scroll position of the select's overlay panel.
                 *
                 * Attempts to center the selected option in the panel. If the option is
                 * too high or too low in the panel to be scrolled to the center, it clamps the
                 * scroll position to the min or max scroll positions respectively.
                 * @param {?} selectedIndex
                 * @param {?} scrollBuffer
                 * @param {?} maxScroll
                 * @return {?}
                 */
                MatSelect.prototype._calculateOverlayScroll = function (selectedIndex, scrollBuffer, maxScroll) {
                    /** @type {?} */
                    var itemHeight = this._getItemHeight();
                    /** @type {?} */
                    var optionOffsetFromScrollTop = itemHeight * selectedIndex;
                    /** @type {?} */
                    var halfOptionHeight = itemHeight / 2;
                    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the
                    // scroll container, then subtracts the scroll buffer to scroll the option down to
                    // the center of the overlay panel. Half the option height must be re-added to the
                    // scrollTop so the option is centered based on its middle, not its top edge.
                    /** @type {?} */
                    var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;
                    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);
                };
                /**
                 * Returns the aria-label of the select component.
                 * @return {?}
                 */
                MatSelect.prototype._getAriaLabel = function () {
                    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the
                    // `aria-labelledby` value by setting the ariaLabel to the placeholder.
                    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;
                };
                /**
                 * Returns the aria-labelledby of the select component.
                 * @return {?}
                 */
                MatSelect.prototype._getAriaLabelledby = function () {
                    if (this.ariaLabelledby) {
                        return this.ariaLabelledby;
                    }
                    // Note: we use `_getAriaLabel` here, because we want to check whether there's a
                    // computed label. `this.ariaLabel` is only the user-specified label.
                    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||
                        this._getAriaLabel()) {
                        return null;
                    }
                    return this._parentFormField._labelId || null;
                };
                /**
                 * Determines the `aria-activedescendant` to be set on the host.
                 * @return {?}
                 */
                MatSelect.prototype._getAriaActiveDescendant = function () {
                    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {
                        return this._keyManager.activeItem.id;
                    }
                    return null;
                };
                /**
                 * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.
                 * This must be adjusted to align the selected option text over the trigger text when
                 * the panel opens. Will change based on LTR or RTL text direction. Note that the offset
                 * can't be calculated until the panel has been attached, because we need to know the
                 * content width in order to constrain the panel within the viewport.
                 * @private
                 * @return {?}
                 */
                MatSelect.prototype._calculateOverlayOffsetX = function () {
                    /** @type {?} */
                    var overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();
                    /** @type {?} */
                    var viewportSize = this._viewportRuler.getViewportSize();
                    /** @type {?} */
                    var isRtl = this._isRtl();
                    /** @type {?} */
                    var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :
                        SELECT_PANEL_PADDING_X * 2;
                    /** @type {?} */
                    var offsetX;
                    // Adjust the offset, depending on the option padding.
                    if (this.multiple) {
                        offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;
                    }
                    else {
                        /** @type {?} */
                        var selected = this._selectionModel.selected[0] || this.options.first;
                        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;
                    }
                    // Invert the offset in LTR.
                    if (!isRtl) {
                        offsetX *= -1;
                    }
                    // Determine how much the select overflows on each side.
                    /** @type {?} */
                    var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));
                    /** @type {?} */
                    var rightOverflow = overlayRect.right + offsetX - viewportSize.width
                        + (isRtl ? 0 : paddingWidth);
                    // If the element overflows on either side, reduce the offset to allow it to fit.
                    if (leftOverflow > 0) {
                        offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;
                    }
                    else if (rightOverflow > 0) {
                        offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;
                    }
                    // Set the offset directly in order to avoid having to go through change detection and
                    // potentially triggering "changed after it was checked" errors. Round the value to avoid
                    // blurry content in some browsers.
                    this.overlayDir.offsetX = Math.round(offsetX);
                    this.overlayDir.overlayRef.updatePosition();
                };
                /**
                 * Calculates the y-offset of the select's overlay panel in relation to the
                 * top start corner of the trigger. It has to be adjusted in order for the
                 * selected option to be aligned over the trigger when the panel opens.
                 * @private
                 * @param {?} selectedIndex
                 * @param {?} scrollBuffer
                 * @param {?} maxScroll
                 * @return {?}
                 */
                MatSelect.prototype._calculateOverlayOffsetY = function (selectedIndex, scrollBuffer, maxScroll) {
                    /** @type {?} */
                    var itemHeight = this._getItemHeight();
                    /** @type {?} */
                    var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;
                    /** @type {?} */
                    var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);
                    /** @type {?} */
                    var optionOffsetFromPanelTop;
                    // Disable offset if requested by user by returning 0 as value to offset
                    if (this._disableOptionCentering) {
                        return 0;
                    }
                    if (this._scrollTop === 0) {
                        optionOffsetFromPanelTop = selectedIndex * itemHeight;
                    }
                    else if (this._scrollTop === maxScroll) {
                        /** @type {?} */
                        var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;
                        /** @type {?} */
                        var selectedDisplayIndex = selectedIndex - firstDisplayedIndex;
                        // The first item is partially out of the viewport. Therefore we need to calculate what
                        // portion of it is shown in the viewport and account for it in our offset.
                        /** @type {?} */
                        var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;
                        // Because the panel height is longer than the height of the options alone,
                        // there is always extra padding at the top or bottom of the panel. When
                        // scrolled to the very bottom, this padding is at the top of the panel and
                        // must be added to the offset.
                        optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;
                    }
                    else {
                        // If the option was scrolled to the middle of the panel using a scroll buffer,
                        // its offset will be the scroll buffer minus the half height that was added to
                        // center it.
                        optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;
                    }
                    // The final offset is the option's offset from the top, adjusted for the height difference,
                    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.
                    // The value is rounded to prevent some browsers from blurring the content.
                    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);
                };
                /**
                 * Checks that the attempted overlay position will fit within the viewport.
                 * If it will not fit, tries to adjust the scroll position and the associated
                 * y-offset so the panel can open fully on-screen. If it still won't fit,
                 * sets the offset back to 0 to allow the fallback position to take over.
                 * @private
                 * @param {?} maxScroll
                 * @return {?}
                 */
                MatSelect.prototype._checkOverlayWithinViewport = function (maxScroll) {
                    /** @type {?} */
                    var itemHeight = this._getItemHeight();
                    /** @type {?} */
                    var viewportSize = this._viewportRuler.getViewportSize();
                    /** @type {?} */
                    var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;
                    /** @type {?} */
                    var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;
                    /** @type {?} */
                    var panelHeightTop = Math.abs(this._offsetY);
                    /** @type {?} */
                    var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);
                    /** @type {?} */
                    var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;
                    if (panelHeightBottom > bottomSpaceAvailable) {
                        this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);
                    }
                    else if (panelHeightTop > topSpaceAvailable) {
                        this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);
                    }
                    else {
                        this._transformOrigin = this._getOriginBasedOnOption();
                    }
                };
                /**
                 * Adjusts the overlay panel up to fit in the viewport.
                 * @private
                 * @param {?} panelHeightBottom
                 * @param {?} bottomSpaceAvailable
                 * @return {?}
                 */
                MatSelect.prototype._adjustPanelUp = function (panelHeightBottom, bottomSpaceAvailable) {
                    // Browsers ignore fractional scroll offsets, so we need to round.
                    /** @type {?} */
                    var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);
                    // Scrolls the panel up by the distance it was extending past the boundary, then
                    // adjusts the offset by that amount to move the panel up into the viewport.
                    this._scrollTop -= distanceBelowViewport;
                    this._offsetY -= distanceBelowViewport;
                    this._transformOrigin = this._getOriginBasedOnOption();
                    // If the panel is scrolled to the very top, it won't be able to fit the panel
                    // by scrolling, so set the offset to 0 to allow the fallback position to take
                    // effect.
                    if (this._scrollTop <= 0) {
                        this._scrollTop = 0;
                        this._offsetY = 0;
                        this._transformOrigin = "50% bottom 0px";
                    }
                };
                /**
                 * Adjusts the overlay panel down to fit in the viewport.
                 * @private
                 * @param {?} panelHeightTop
                 * @param {?} topSpaceAvailable
                 * @param {?} maxScroll
                 * @return {?}
                 */
                MatSelect.prototype._adjustPanelDown = function (panelHeightTop, topSpaceAvailable, maxScroll) {
                    // Browsers ignore fractional scroll offsets, so we need to round.
                    /** @type {?} */
                    var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);
                    // Scrolls the panel down by the distance it was extending past the boundary, then
                    // adjusts the offset by that amount to move the panel down into the viewport.
                    this._scrollTop += distanceAboveViewport;
                    this._offsetY += distanceAboveViewport;
                    this._transformOrigin = this._getOriginBasedOnOption();
                    // If the panel is scrolled to the very bottom, it won't be able to fit the
                    // panel by scrolling, so set the offset to 0 to allow the fallback position
                    // to take effect.
                    if (this._scrollTop >= maxScroll) {
                        this._scrollTop = maxScroll;
                        this._offsetY = 0;
                        this._transformOrigin = "50% top 0px";
                        return;
                    }
                };
                /**
                 * Sets the transform origin point based on the selected option.
                 * @private
                 * @return {?}
                 */
                MatSelect.prototype._getOriginBasedOnOption = function () {
                    /** @type {?} */
                    var itemHeight = this._getItemHeight();
                    /** @type {?} */
                    var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;
                    /** @type {?} */
                    var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;
                    return "50% " + originY + "px 0px";
                };
                /**
                 * Calculates the amount of items in the select. This includes options and group labels.
                 * @private
                 * @return {?}
                 */
                MatSelect.prototype._getItemCount = function () {
                    return this.options.length + this.optionGroups.length;
                };
                /**
                 * Calculates the height of the select's options.
                 * @private
                 * @return {?}
                 */
                MatSelect.prototype._getItemHeight = function () {
                    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;
                };
                /**
                 * Implemented as part of MatFormFieldControl.
                 * \@docs-private
                 * @param {?} ids
                 * @return {?}
                 */
                MatSelect.prototype.setDescribedByIds = function (ids) {
                    this._ariaDescribedby = ids.join(' ');
                };
                /**
                 * Implemented as part of MatFormFieldControl.
                 * \@docs-private
                 * @return {?}
                 */
                MatSelect.prototype.onContainerClick = function () {
                    this.focus();
                    this.open();
                };
                Object.defineProperty(MatSelect.prototype, "shouldLabelFloat", {
                    /**
                     * Implemented as part of MatFormFieldControl.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._panelOpen || !this.empty;
                    },
                    enumerable: true,
                    configurable: true
                });
                return MatSelect;
            }(_MatSelectMixinBase));
            MatSelect.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Component"], args: [{ selector: 'mat-select',
                            exportAs: 'matSelect',
                            template: "<div cdk-overlay-origin class=\"mat-select-trigger\" aria-hidden=\"true\" (click)=\"toggle()\" #origin=\"cdkOverlayOrigin\" #trigger><div class=\"mat-select-value\" [ngSwitch]=\"empty\"><span class=\"mat-select-placeholder\" *ngSwitchCase=\"true\">{{placeholder || '\u00A0'}}</span> <span class=\"mat-select-value-text\" *ngSwitchCase=\"false\" [ngSwitch]=\"!!customTrigger\"><span *ngSwitchDefault>{{triggerValue || '\u00A0'}}</span><ng-content select=\"mat-select-trigger\" *ngSwitchCase=\"true\"></ng-content></span></div><div class=\"mat-select-arrow-wrapper\"><div class=\"mat-select-arrow\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\" [cdkConnectedOverlayScrollStrategy]=\"_scrollStrategy\" [cdkConnectedOverlayOrigin]=\"origin\" [cdkConnectedOverlayOpen]=\"panelOpen\" [cdkConnectedOverlayPositions]=\"_positions\" [cdkConnectedOverlayMinWidth]=\"_triggerRect?.width\" [cdkConnectedOverlayOffsetY]=\"_offsetY\" (backdropClick)=\"close()\" (attach)=\"_onAttached()\" (detach)=\"close()\"><div class=\"mat-select-panel-wrap\" [@transformPanelWrap]><div #panel class=\"mat-select-panel {{ _getPanelTheme() }}\" [ngClass]=\"panelClass\" [@transformPanel]=\"multiple ? 'showing-multiple' : 'showing'\" (@transformPanel.done)=\"_panelDoneAnimatingStream.next($event.toState)\" [style.transformOrigin]=\"_transformOrigin\" [style.font-size.px]=\"_triggerFontSize\" (keydown)=\"_handleKeydown($event)\"><ng-content></ng-content></div></div></ng-template>",
                            styles: [".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}"],
                            inputs: ['disabled', 'disableRipple', 'tabIndex'],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                'role': 'listbox',
                                '[attr.id]': 'id',
                                '[attr.tabindex]': 'tabIndex',
                                '[attr.aria-label]': '_getAriaLabel()',
                                '[attr.aria-labelledby]': '_getAriaLabelledby()',
                                '[attr.aria-required]': 'required.toString()',
                                '[attr.aria-disabled]': 'disabled.toString()',
                                '[attr.aria-invalid]': 'errorState',
                                '[attr.aria-owns]': 'panelOpen ? _optionIds : null',
                                '[attr.aria-multiselectable]': 'multiple',
                                '[attr.aria-describedby]': '_ariaDescribedby || null',
                                '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',
                                '[class.mat-select-disabled]': 'disabled',
                                '[class.mat-select-invalid]': 'errorState',
                                '[class.mat-select-required]': 'required',
                                '[class.mat-select-empty]': 'empty',
                                'class': 'mat-select',
                                '(keydown)': '_handleKeydown($event)',
                                '(focus)': '_onFocus()',
                                '(blur)': '_onBlur()',
                            },
                            animations: [
                                matSelectAnimations.transformPanelWrap,
                                matSelectAnimations.transformPanel
                            ],
                            providers: [
                                { provide: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__["MatFormFieldControl"], useExisting: MatSelect },
                                { provide: _angular_material_core__WEBPACK_IMPORTED_MODULE_10__["MAT_OPTION_PARENT_COMPONENT"], useExisting: MatSelect }
                            ],
                        },] },
            ];
            /** @nocollapse */
            MatSelect.ctorParameters = function () { return [
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_7__["ViewportRuler"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["NgZone"] },
                { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_10__["ErrorStateMatcher"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ElementRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_9__["NgForm"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_9__["FormGroupDirective"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }] },
                { type: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__["MatFormField"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_9__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Attribute"], args: ['tabindex',] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Inject"], args: [MAT_SELECT_SCROLL_STRATEGY,] }] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["LiveAnnouncer"] }
            ]; };
            MatSelect.propDecorators = {
                trigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewChild"], args: ['trigger', { static: false },] }],
                panel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewChild"], args: ['panel', { static: false },] }],
                overlayDir: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewChild"], args: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["CdkConnectedOverlay"], { static: false },] }],
                options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ContentChildren"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_10__["MatOption"], { descendants: true },] }],
                optionGroups: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ContentChildren"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_10__["MatOptgroup"],] }],
                panelClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                customTrigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ContentChild"], args: [MatSelectTrigger, { static: false },] }],
                placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                multiple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                disableOptionCentering: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                compareWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"], args: ['aria-label',] }],
                ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"], args: ['aria-labelledby',] }],
                errorStateMatcher: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                typeaheadDebounceInterval: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                sortComparator: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                openedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"] }],
                _openedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"], args: ['opened',] }],
                _closedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"], args: ['closed',] }],
                selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"] }],
                valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatSelectModule = /** @class */ (function () {
                function MatSelectModule() {
                }
                return MatSelectModule;
            }());
            MatSelectModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_14__["CommonModule"],
                                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_10__["MatOptionModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_10__["MatCommonModule"],
                            ],
                            exports: [_angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__["MatFormFieldModule"], MatSelect, MatSelectTrigger, _angular_material_core__WEBPACK_IMPORTED_MODULE_10__["MatOptionModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_10__["MatCommonModule"]],
                            declarations: [MatSelect, MatSelectTrigger],
                            providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=select.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/sidenav.js": 
        /*!***********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/sidenav.js ***!
          \***********************************************************/
        /*! exports provided: MatSidenavModule, throwMatDuplicatedDrawerError, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MAT_DRAWER_DEFAULT_AUTOSIZE, MatDrawerContent, MatDrawer, MatDrawerContainer, MatSidenavContent, MatSidenav, MatSidenavContainer, matDrawerAnimations */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSidenavModule", function () { return MatSidenavModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwMatDuplicatedDrawerError", function () { return throwMatDuplicatedDrawerError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY", function () { return MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DRAWER_DEFAULT_AUTOSIZE", function () { return MAT_DRAWER_DEFAULT_AUTOSIZE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDrawerContent", function () { return MatDrawerContent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDrawer", function () { return MatDrawer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDrawerContainer", function () { return MatDrawerContainer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSidenavContent", function () { return MatSidenavContent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSidenav", function () { return MatSidenav; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSidenavContainer", function () { return MatSidenavContainer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matDrawerAnimations", function () { return matDrawerAnimations; });
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm2015/scrolling.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Animations used by the Material drawers.
             * \@docs-private
             * @type {?}
             */
            var matDrawerAnimations = {
                /**
                 * Animation that slides a drawer in and out.
                 */
                transformDrawer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('transform', [
                    // We remove the `transform` here completely, rather than setting it to zero, because:
                    // 1. Having a transform can cause elements with ripples or an animated
                    //    transform to shift around in Chrome with an RTL layout (see #10023).
                    // 2. 3d transforms causes text to appear blurry on IE and Edge.
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('open, open-instant', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
                        'transform': 'none',
                        'visibility': 'visible',
                    })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
                        // Avoids the shadow showing up when closed in SSR.
                        'box-shadow': 'none',
                        'visibility': 'hidden',
                    })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('void => open-instant', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('0ms')),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('void <=> open, open-instant => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))
                ])
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Throws an exception when two MatDrawer are matching the same position.
             * \@docs-private
             * @param {?} position
             * @return {?}
             */
            function throwMatDuplicatedDrawerError(position) {
                throw Error("A drawer was already declared for 'position=\"" + position + "\"'");
            }
            /**
             * Configures whether drawers should use auto sizing by default.
             * @type {?}
             */
            var MAT_DRAWER_DEFAULT_AUTOSIZE = new _angular_core__WEBPACK_IMPORTED_MODULE_8__["InjectionToken"]('MAT_DRAWER_DEFAULT_AUTOSIZE', {
                providedIn: 'root',
                factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {
                return false;
            }
            var MatDrawerContent = /** @class */ (function (_super) {
                __extends(MatDrawerContent, _super);
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _container
                 * @param {?} elementRef
                 * @param {?} scrollDispatcher
                 * @param {?} ngZone
                 */
                function MatDrawerContent(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {
                    var _this = _super.call(this, elementRef, scrollDispatcher, ngZone) || this;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._container = _container;
                    return _this;
                }
                /**
                 * @return {?}
                 */
                MatDrawerContent.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._container._contentMarginChanges.subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._changeDetectorRef.markForCheck();
                    }));
                };
                return MatDrawerContent;
            }(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_6__["CdkScrollable"]));
            MatDrawerContent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Component"], args: [{ selector: 'mat-drawer-content',
                            template: '<ng-content></ng-content>',
                            host: {
                                'class': 'mat-drawer-content',
                                '[style.margin-left.px]': '_container._contentMargins.left',
                                '[style.margin-right.px]': '_container._contentMargins.right',
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewEncapsulation"].None,
                        },] },
            ];
            /** @nocollapse */
            MatDrawerContent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectorRef"] },
                { type: MatDrawerContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_8__["forwardRef"])(( /**
                                                 * @return {?}
                                                 */function () { return MatDrawerContainer; })),] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ElementRef"] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_6__["ScrollDispatcher"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["NgZone"] }
            ]; };
            /**
             * This component corresponds to a drawer that can be opened on the drawer container.
             */
            var MatDrawer = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _focusTrapFactory
                 * @param {?} _focusMonitor
                 * @param {?} _platform
                 * @param {?} _ngZone
                 * @param {?} _doc
                 */
                function MatDrawer(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc) {
                    var _this = this;
                    this._elementRef = _elementRef;
                    this._focusTrapFactory = _focusTrapFactory;
                    this._focusMonitor = _focusMonitor;
                    this._platform = _platform;
                    this._ngZone = _ngZone;
                    this._doc = _doc;
                    this._elementFocusedBeforeDrawerWasOpened = null;
                    /**
                     * Whether the drawer is initialized. Used for disabling the initial animation.
                     */
                    this._enableAnimations = false;
                    this._position = 'start';
                    this._mode = 'over';
                    this._disableClose = false;
                    this._autoFocus = true;
                    /**
                     * Emits whenever the drawer has started animating.
                     */
                    this._animationStarted = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    /**
                     * Emits whenever the drawer is done animating.
                     */
                    this._animationEnd = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    /**
                     * Current state of the sidenav animation.
                     */
                    // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator
                    // metadata is not inherited by child classes, instead the host binding data is defined in a way
                    // that can be inherited.
                    // tslint:disable:no-host-decorator-in-concrete
                    this._animationState = 'void';
                    /**
                     * Event emitted when the drawer open state is changed.
                     */
                    this.openedChange =
                        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).
                        new _angular_core__WEBPACK_IMPORTED_MODULE_8__["EventEmitter"](/* isAsync */ true);
                    /**
                     * Emits when the component is destroyed.
                     */
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    /**
                     * Event emitted when the drawer's position changes.
                     */
                    // tslint:disable-next-line:no-output-on-prefix
                    this.onPositionChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_8__["EventEmitter"]();
                    /**
                     * An observable that emits when the drawer mode changes. This is used by the drawer container to
                     * to know when to when the mode changes so it can adapt the margins on the content.
                     */
                    this._modeChanged = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    this._opened = false;
                    this.openedChange.subscribe(( /**
                     * @param {?} opened
                     * @return {?}
                     */function (opened) {
                        if (opened) {
                            if (_this._doc) {
                                _this._elementFocusedBeforeDrawerWasOpened = ( /** @type {?} */(_this._doc.activeElement));
                            }
                            if (_this._isFocusTrapEnabled && _this._focusTrap) {
                                _this._trapFocus();
                            }
                        }
                        else {
                            _this._restoreFocus();
                        }
                    }));
                    /**
                     * Listen to `keydown` events outside the zone so that change detection is not run every
                     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed
                     * and we don't have close disabled.
                     */
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        (( /** @type {?} */(Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["fromEvent"])(_this._elementRef.nativeElement, 'keydown')))).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                         * @param {?} event
                         * @return {?}
                         */function (/**
                         * @param {?} event
                         * @return {?}
                         */ event) {
                            return event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["ESCAPE"] && !_this.disableClose && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["hasModifierKey"])(event);
                        })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(_this._destroyed)).subscribe(( /**
                         * @param {?} event
                         * @return {?}
                         */function (/**
                         * @param {?} event
                         * @return {?}
                         */ event) { return _this._ngZone.run(( /**
                         * @return {?}
                         */function () {
                            _this.close();
                            event.stopPropagation();
                            event.preventDefault();
                        })); }));
                    }));
                    // We need a Subject with distinctUntilChanged, because the `done` event
                    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084
                    this._animationEnd.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["distinctUntilChanged"])(( /**
                     * @param {?} x
                     * @param {?} y
                     * @return {?}
                     */function (x, y) {
                        return x.fromState === y.fromState && x.toState === y.toState;
                    }))).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        var fromState = event.fromState, toState = event.toState;
                        if ((toState.indexOf('open') === 0 && fromState === 'void') ||
                            (toState === 'void' && fromState.indexOf('open') === 0)) {
                            _this.openedChange.emit(_this._opened);
                        }
                    }));
                }
                Object.defineProperty(MatDrawer.prototype, "position", {
                    /**
                     * The side that the drawer is attached to.
                     * @return {?}
                     */
                    get: function () { return this._position; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        // Make sure we have a valid value.
                        value = value === 'end' ? 'end' : 'start';
                        if (value != this._position) {
                            this._position = value;
                            this.onPositionChanged.emit();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDrawer.prototype, "mode", {
                    /**
                     * Mode of the drawer; one of 'over', 'push' or 'side'.
                     * @return {?}
                     */
                    get: function () { return this._mode; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._mode = value;
                        this._updateFocusTrapState();
                        this._modeChanged.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDrawer.prototype, "disableClose", {
                    /**
                     * Whether the drawer can be closed with the escape key or by clicking on the backdrop.
                     * @return {?}
                     */
                    get: function () { return this._disableClose; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._disableClose = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDrawer.prototype, "autoFocus", {
                    /**
                     * Whether the drawer should focus the first focusable element automatically when opened.
                     * @return {?}
                     */
                    get: function () { return this._autoFocus; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._autoFocus = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDrawer.prototype, "_openedStream", {
                    /**
                     * Event emitted when the drawer has been opened.
                     * @return {?}
                     */
                    get: function () {
                        return this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                         * @param {?} o
                         * @return {?}
                         */function (/**
                         * @param {?} o
                         * @return {?}
                         */ o) { return o; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["map"])(( /**
                         * @return {?}
                         */function () { })));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDrawer.prototype, "openedStart", {
                    /**
                     * Event emitted when the drawer has started opening.
                     * @return {?}
                     */
                    get: function () {
                        return this._animationStarted.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                         * @param {?} e
                         * @return {?}
                         */function (/**
                         * @param {?} e
                         * @return {?}
                         */ e) { return e.fromState !== e.toState && e.toState.indexOf('open') === 0; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["map"])(( /**
                         * @return {?}
                         */function () { })));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDrawer.prototype, "_closedStream", {
                    /**
                     * Event emitted when the drawer has been closed.
                     * @return {?}
                     */
                    get: function () {
                        return this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                         * @param {?} o
                         * @return {?}
                         */function (/**
                         * @param {?} o
                         * @return {?}
                         */ o) { return !o; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["map"])(( /**
                         * @return {?}
                         */function () { })));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDrawer.prototype, "closedStart", {
                    /**
                     * Event emitted when the drawer has started closing.
                     * @return {?}
                     */
                    get: function () {
                        return this._animationStarted.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                         * @param {?} e
                         * @return {?}
                         */function (/**
                         * @param {?} e
                         * @return {?}
                         */ e) { return e.fromState !== e.toState && e.toState === 'void'; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["map"])(( /**
                         * @return {?}
                         */function () { })));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDrawer.prototype, "_isFocusTrapEnabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        // The focus trap is only enabled when the drawer is open in any mode other than side.
                        return this.opened && this.mode !== 'side';
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Traps focus inside the drawer.
                 * @private
                 * @return {?}
                 */
                MatDrawer.prototype._trapFocus = function () {
                    var _this = this;
                    if (!this.autoFocus) {
                        return;
                    }
                    this._focusTrap.focusInitialElementWhenReady().then(( /**
                     * @param {?} hasMovedFocus
                     * @return {?}
                     */function (/**
                     * @param {?} hasMovedFocus
                     * @return {?}
                     */ hasMovedFocus) {
                        // If there were no focusable elements, focus the sidenav itself so the keyboard navigation
                        // still works. We need to check that `focus` is a function due to Universal.
                        if (!hasMovedFocus && typeof _this._elementRef.nativeElement.focus === 'function') {
                            _this._elementRef.nativeElement.focus();
                        }
                    }));
                };
                /**
                 * If focus is currently inside the drawer, restores it to where it was before the drawer
                 * opened.
                 * @private
                 * @return {?}
                 */
                MatDrawer.prototype._restoreFocus = function () {
                    if (!this.autoFocus) {
                        return;
                    }
                    /** @type {?} */
                    var activeEl = this._doc && this._doc.activeElement;
                    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {
                        if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {
                            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);
                        }
                        else {
                            this._elementRef.nativeElement.blur();
                        }
                    }
                    this._elementFocusedBeforeDrawerWasOpened = null;
                    this._openedVia = null;
                };
                /**
                 * @return {?}
                 */
                MatDrawer.prototype.ngAfterContentInit = function () {
                    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
                    this._updateFocusTrapState();
                };
                /**
                 * @return {?}
                 */
                MatDrawer.prototype.ngAfterContentChecked = function () {
                    // Enable the animations after the lifecycle hooks have run, in order to avoid animating
                    // drawers that are open by default. When we're on the server, we shouldn't enable the
                    // animations, because we don't want the drawer to animate the first time the user sees
                    // the page.
                    if (this._platform.isBrowser) {
                        this._enableAnimations = true;
                    }
                };
                /**
                 * @return {?}
                 */
                MatDrawer.prototype.ngOnDestroy = function () {
                    if (this._focusTrap) {
                        this._focusTrap.destroy();
                    }
                    this._animationStarted.complete();
                    this._animationEnd.complete();
                    this._modeChanged.complete();
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                Object.defineProperty(MatDrawer.prototype, "opened", {
                    /**
                     * Whether the drawer is opened. We overload this because we trigger an event when it
                     * starts or end.
                     * @return {?}
                     */
                    get: function () { return this._opened; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this.toggle(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value)); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Open the drawer.
                 * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.
                 * Used for focus management after the sidenav is closed.
                 * @return {?}
                 */
                MatDrawer.prototype.open = function (openedVia) {
                    return this.toggle(true, openedVia);
                };
                /**
                 * Close the drawer.
                 * @return {?}
                 */
                MatDrawer.prototype.close = function () {
                    return this.toggle(false);
                };
                /**
                 * Toggle this drawer.
                 * @param {?=} isOpen Whether the drawer should be open.
                 * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.
                 * Used for focus management after the sidenav is closed.
                 * @return {?}
                 */
                MatDrawer.prototype.toggle = function (isOpen, openedVia) {
                    var _this = this;
                    if (isOpen === void 0) { isOpen = !this.opened; }
                    if (openedVia === void 0) { openedVia = 'program'; }
                    this._opened = isOpen;
                    if (isOpen) {
                        this._animationState = this._enableAnimations ? 'open' : 'open-instant';
                        this._openedVia = openedVia;
                    }
                    else {
                        this._animationState = 'void';
                        this._restoreFocus();
                    }
                    this._updateFocusTrapState();
                    return new Promise(( /**
                     * @param {?} resolve
                     * @return {?}
                     */function (/**
                     * @param {?} resolve
                     * @return {?}
                     */ resolve) {
                        _this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1)).subscribe(( /**
                         * @param {?} open
                         * @return {?}
                         */function (/**
                         * @param {?} open
                         * @return {?}
                         */ open) { return resolve(open ? 'open' : 'close'); }));
                    }));
                };
                Object.defineProperty(MatDrawer.prototype, "_width", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Updates the enabled state of the focus trap.
                 * @private
                 * @return {?}
                 */
                MatDrawer.prototype._updateFocusTrapState = function () {
                    if (this._focusTrap) {
                        this._focusTrap.enabled = this._isFocusTrapEnabled;
                    }
                };
                // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
                // In Ivy the `host` bindings will be merged when this class is extended, whereas in
                // ViewEngine they're overwritten.
                // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
                // tslint:disable-next-line:no-host-decorator-in-concrete
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatDrawer.prototype._animationStartListener = function (event) {
                    this._animationStarted.next(event);
                };
                // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
                // In Ivy the `host` bindings will be merged when this class is extended, whereas in
                // ViewEngine they're overwritten.
                // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
                // tslint:disable-next-line:no-host-decorator-in-concrete
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatDrawer.prototype._animationDoneListener = function (event) {
                    this._animationEnd.next(event);
                };
                return MatDrawer;
            }());
            MatDrawer.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Component"], args: [{ selector: 'mat-drawer',
                            exportAs: 'matDrawer',
                            template: "<div class=\"mat-drawer-inner-container\"><ng-content></ng-content></div>",
                            animations: [matDrawerAnimations.transformDrawer],
                            host: {
                                'class': 'mat-drawer',
                                // must prevent the browser from aligning text based on value
                                '[attr.align]': 'null',
                                '[class.mat-drawer-end]': 'position === "end"',
                                '[class.mat-drawer-over]': 'mode === "over"',
                                '[class.mat-drawer-push]': 'mode === "push"',
                                '[class.mat-drawer-side]': 'mode === "side"',
                                '[class.mat-drawer-opened]': 'opened',
                                'tabIndex': '-1',
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewEncapsulation"].None,
                        },] },
            ];
            /** @nocollapse */
            MatDrawer.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ElementRef"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusTrapFactory"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["DOCUMENT"],] }] }
            ]; };
            MatDrawer.propDecorators = {
                position: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                mode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                disableClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                autoFocus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                _animationState: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["HostBinding"], args: ['@transform',] }],
                openedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"] }],
                _openedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"], args: ['opened',] }],
                openedStart: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"] }],
                _closedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"], args: ['closed',] }],
                closedStart: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"] }],
                onPositionChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"], args: ['positionChanged',] }],
                opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                _animationStartListener: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["HostListener"], args: ['@transform.start', ['$event'],] }],
                _animationDoneListener: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["HostListener"], args: ['@transform.done', ['$event'],] }]
            };
            /**
             * `<mat-drawer-container>` component.
             *
             * This is the parent component to one or two `<mat-drawer>`s that validates the state internally
             * and coordinates the backdrop and content styling.
             */
            var MatDrawerContainer = /** @class */ (function () {
                /**
                 * @param {?} _dir
                 * @param {?} _element
                 * @param {?} _ngZone
                 * @param {?} _changeDetectorRef
                 * @param {?} viewportRuler
                 * @param {?=} defaultAutosize
                 * @param {?=} _animationMode
                 */
                function MatDrawerContainer(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize, _animationMode) {
                    var _this = this;
                    if (defaultAutosize === void 0) { defaultAutosize = false; }
                    this._dir = _dir;
                    this._element = _element;
                    this._ngZone = _ngZone;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._animationMode = _animationMode;
                    /**
                     * Event emitted when the drawer backdrop is clicked.
                     */
                    this.backdropClick = new _angular_core__WEBPACK_IMPORTED_MODULE_8__["EventEmitter"]();
                    /**
                     * Emits when the component is destroyed.
                     */
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    /**
                     * Emits on every ngDoCheck. Used for debouncing reflows.
                     */
                    this._doCheckSubject = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    /**
                     * Margins to be applied to the content. These are used to push / shrink the drawer content when a
                     * drawer is open. We use margin rather than transform even for push mode because transform breaks
                     * fixed position elements inside of the transformed element.
                     */
                    this._contentMargins = { left: null, right: null };
                    this._contentMarginChanges = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    // If a `Dir` directive exists up the tree, listen direction changes
                    // and update the left/right properties to point to the proper start/end.
                    if (_dir) {
                        _dir.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroyed)).subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._validateDrawers();
                            _this.updateContentMargins();
                        }));
                    }
                    // Since the minimum width of the sidenav depends on the viewport width,
                    // we need to recompute the margins if the viewport changes.
                    viewportRuler.change()
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroyed))
                        .subscribe(( /**
                 * @return {?}
                 */function () { return _this.updateContentMargins(); }));
                    this._autosize = defaultAutosize;
                }
                Object.defineProperty(MatDrawerContainer.prototype, "start", {
                    /**
                     * The drawer child with the `start` position.
                     * @return {?}
                     */
                    get: function () { return this._start; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDrawerContainer.prototype, "end", {
                    /**
                     * The drawer child with the `end` position.
                     * @return {?}
                     */
                    get: function () { return this._end; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDrawerContainer.prototype, "autosize", {
                    /**
                     * Whether to automatically resize the container whenever
                     * the size of any of its drawers changes.
                     *
                     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring
                     * the drawers on every change detection cycle. Can be configured globally via the
                     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.
                     * @return {?}
                     */
                    get: function () { return this._autosize; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._autosize = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDrawerContainer.prototype, "hasBackdrop", {
                    /**
                     * Whether the drawer container should have a backdrop while one of the sidenavs is open.
                     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`
                     * mode as well.
                     * @return {?}
                     */
                    get: function () {
                        if (this._backdropOverride == null) {
                            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';
                        }
                        return this._backdropOverride;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._backdropOverride = value == null ? null : Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatDrawerContainer.prototype, "scrollable", {
                    /**
                     * Reference to the CdkScrollable instance that wraps the scrollable content.
                     * @return {?}
                     */
                    get: function () {
                        return this._userContent || this._content;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatDrawerContainer.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._drawers.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["startWith"])(null)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._validateDrawers();
                        _this._drawers.forEach(( /**
                         * @param {?} drawer
                         * @return {?}
                         */function (drawer) {
                            _this._watchDrawerToggle(drawer);
                            _this._watchDrawerPosition(drawer);
                            _this._watchDrawerMode(drawer);
                        }));
                        if (!_this._drawers.length ||
                            _this._isDrawerOpen(_this._start) ||
                            _this._isDrawerOpen(_this._end)) {
                            _this.updateContentMargins();
                        }
                        _this._changeDetectorRef.markForCheck();
                    }));
                    this._doCheckSubject.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["debounceTime"])(10), // Arbitrary debounce time, less than a frame at 60fps
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @return {?}
                     */function () { return _this.updateContentMargins(); }));
                };
                /**
                 * @return {?}
                 */
                MatDrawerContainer.prototype.ngOnDestroy = function () {
                    this._contentMarginChanges.complete();
                    this._doCheckSubject.complete();
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * Calls `open` of both start and end drawers
                 * @return {?}
                 */
                MatDrawerContainer.prototype.open = function () {
                    this._drawers.forEach(( /**
                     * @param {?} drawer
                     * @return {?}
                     */function (/**
                     * @param {?} drawer
                     * @return {?}
                     */ drawer) { return drawer.open(); }));
                };
                /**
                 * Calls `close` of both start and end drawers
                 * @return {?}
                 */
                MatDrawerContainer.prototype.close = function () {
                    this._drawers.forEach(( /**
                     * @param {?} drawer
                     * @return {?}
                     */function (/**
                     * @param {?} drawer
                     * @return {?}
                     */ drawer) { return drawer.close(); }));
                };
                /**
                 * Recalculates and updates the inline styles for the content. Note that this should be used
                 * sparingly, because it causes a reflow.
                 * @return {?}
                 */
                MatDrawerContainer.prototype.updateContentMargins = function () {
                    var _this = this;
                    // 1. For drawers in `over` mode, they don't affect the content.
                    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the
                    //    left margin (for left drawer) or right margin (for right the drawer).
                    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by
                    //    adding to the left or right margin and simultaneously subtracting the same amount of
                    //    margin from the other side.
                    /** @type {?} */
                    var left = 0;
                    /** @type {?} */
                    var right = 0;
                    if (this._left && this._left.opened) {
                        if (this._left.mode == 'side') {
                            left += this._left._width;
                        }
                        else if (this._left.mode == 'push') {
                            /** @type {?} */
                            var width = this._left._width;
                            left += width;
                            right -= width;
                        }
                    }
                    if (this._right && this._right.opened) {
                        if (this._right.mode == 'side') {
                            right += this._right._width;
                        }
                        else if (this._right.mode == 'push') {
                            /** @type {?} */
                            var width = this._right._width;
                            right += width;
                            left -= width;
                        }
                    }
                    // If either `right` or `left` is zero, don't set a style to the element. This
                    // allows users to specify a custom size via CSS class in SSR scenarios where the
                    // measured widths will always be zero. Note that we reset to `null` here, rather
                    // than below, in order to ensure that the types in the `if` below are consistent.
                    left = left || ( /** @type {?} */(null));
                    right = right || ( /** @type {?} */(null));
                    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {
                        this._contentMargins = { left: left, right: right };
                        // Pull back into the NgZone since in some cases we could be outside. We need to be careful
                        // to do it only when something changed, otherwise we can end up hitting the zone too often.
                        this._ngZone.run(( /**
                         * @return {?}
                         */function () { return _this._contentMarginChanges.next(_this._contentMargins); }));
                    }
                };
                /**
                 * @return {?}
                 */
                MatDrawerContainer.prototype.ngDoCheck = function () {
                    var _this = this;
                    // If users opted into autosizing, do a check every change detection cycle.
                    if (this._autosize && this._isPushed()) {
                        // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () { return _this._doCheckSubject.next(); }));
                    }
                };
                /**
                 * Subscribes to drawer events in order to set a class on the main container element when the
                 * drawer is open and the backdrop is visible. This ensures any overflow on the container element
                 * is properly hidden.
                 * @private
                 * @param {?} drawer
                 * @return {?}
                 */
                MatDrawerContainer.prototype._watchDrawerToggle = function (drawer) {
                    var _this = this;
                    drawer._animationStarted.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) { return event.fromState !== event.toState; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._drawers.changes))
                        .subscribe(( /**
                 * @param {?} event
                 * @return {?}
                 */function (event) {
                        // Set the transition class on the container so that the animations occur. This should not
                        // be set initially because animations should only be triggered via a change in state.
                        if (event.toState !== 'open-instant' && _this._animationMode !== 'NoopAnimations') {
                            _this._element.nativeElement.classList.add('mat-drawer-transition');
                        }
                        _this.updateContentMargins();
                        _this._changeDetectorRef.markForCheck();
                    }));
                    if (drawer.mode !== 'side') {
                        drawer.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._drawers.changes)).subscribe(( /**
                         * @return {?}
                         */function () { return _this._setContainerClass(drawer.opened); }));
                    }
                };
                /**
                 * Subscribes to drawer onPositionChanged event in order to
                 * re-validate drawers when the position changes.
                 * @private
                 * @param {?} drawer
                 * @return {?}
                 */
                MatDrawerContainer.prototype._watchDrawerPosition = function (drawer) {
                    var _this = this;
                    if (!drawer) {
                        return;
                    }
                    // NOTE: We need to wait for the microtask queue to be empty before validating,
                    // since both drawers may be swapping positions at the same time.
                    drawer.onPositionChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._drawers.changes)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._ngZone.onMicrotaskEmpty.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1)).subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._validateDrawers();
                        }));
                    }));
                };
                /**
                 * Subscribes to changes in drawer mode so we can run change detection.
                 * @private
                 * @param {?} drawer
                 * @return {?}
                 */
                MatDrawerContainer.prototype._watchDrawerMode = function (drawer) {
                    var _this = this;
                    if (drawer) {
                        drawer._modeChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"])(this._drawers.changes, this._destroyed)))
                            .subscribe(( /**
                     * @return {?}
                     */function () {
                            _this.updateContentMargins();
                            _this._changeDetectorRef.markForCheck();
                        }));
                    }
                };
                /**
                 * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.
                 * @private
                 * @param {?} isAdd
                 * @return {?}
                 */
                MatDrawerContainer.prototype._setContainerClass = function (isAdd) {
                    /** @type {?} */
                    var classList = this._element.nativeElement.classList;
                    /** @type {?} */
                    var className = 'mat-drawer-container-has-open';
                    if (isAdd) {
                        classList.add(className);
                    }
                    else {
                        classList.remove(className);
                    }
                };
                /**
                 * Validate the state of the drawer children components.
                 * @private
                 * @return {?}
                 */
                MatDrawerContainer.prototype._validateDrawers = function () {
                    var _this = this;
                    this._start = this._end = null;
                    // Ensure that we have at most one start and one end drawer.
                    this._drawers.forEach(( /**
                     * @param {?} drawer
                     * @return {?}
                     */function (/**
                     * @param {?} drawer
                     * @return {?}
                     */ drawer) {
                        if (drawer.position == 'end') {
                            if (_this._end != null) {
                                throwMatDuplicatedDrawerError('end');
                            }
                            _this._end = drawer;
                        }
                        else {
                            if (_this._start != null) {
                                throwMatDuplicatedDrawerError('start');
                            }
                            _this._start = drawer;
                        }
                    }));
                    this._right = this._left = null;
                    // Detect if we're LTR or RTL.
                    if (this._dir && this._dir.value === 'rtl') {
                        this._left = this._end;
                        this._right = this._start;
                    }
                    else {
                        this._left = this._start;
                        this._right = this._end;
                    }
                };
                /**
                 * Whether the container is being pushed to the side by one of the drawers.
                 * @private
                 * @return {?}
                 */
                MatDrawerContainer.prototype._isPushed = function () {
                    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||
                        (this._isDrawerOpen(this._end) && this._end.mode != 'over');
                };
                /**
                 * @return {?}
                 */
                MatDrawerContainer.prototype._onBackdropClicked = function () {
                    this.backdropClick.emit();
                    this._closeModalDrawer();
                };
                /**
                 * @return {?}
                 */
                MatDrawerContainer.prototype._closeModalDrawer = function () {
                    var _this = this;
                    // Close all open drawers where closing is not disabled and the mode is not `side`.
                    [this._start, this._end]
                        .filter(( /**
                 * @param {?} drawer
                 * @return {?}
                 */function (/**
                 * @param {?} drawer
                 * @return {?}
                 */ drawer) { return drawer && !drawer.disableClose && _this._canHaveBackdrop(drawer); }))
                        .forEach(( /**
                 * @param {?} drawer
                 * @return {?}
                 */function (/**
                 * @param {?} drawer
                 * @return {?}
                 */ drawer) { return ( /** @type {?} */(drawer)).close(); }));
                };
                /**
                 * @return {?}
                 */
                MatDrawerContainer.prototype._isShowingBackdrop = function () {
                    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||
                        (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));
                };
                /**
                 * @private
                 * @param {?} drawer
                 * @return {?}
                 */
                MatDrawerContainer.prototype._canHaveBackdrop = function (drawer) {
                    return drawer.mode !== 'side' || !!this._backdropOverride;
                };
                /**
                 * @private
                 * @param {?} drawer
                 * @return {?}
                 */
                MatDrawerContainer.prototype._isDrawerOpen = function (drawer) {
                    return drawer != null && drawer.opened;
                };
                return MatDrawerContainer;
            }());
            MatDrawerContainer.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Component"], args: [{ selector: 'mat-drawer-container',
                            exportAs: 'matDrawerContainer',
                            template: "<div class=\"mat-drawer-backdrop\" (click)=\"_onBackdropClicked()\" *ngIf=\"hasBackdrop\" [class.mat-drawer-shown]=\"_isShowingBackdrop()\"></div><ng-content select=\"mat-drawer\"></ng-content><ng-content select=\"mat-drawer-content\"></ng-content><mat-drawer-content *ngIf=\"!_content\"><ng-content></ng-content></mat-drawer-content>",
                            styles: [".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}"],
                            host: {
                                'class': 'mat-drawer-container',
                                '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewEncapsulation"].None,
                        },] },
            ];
            /** @nocollapse */
            MatDrawerContainer.ctorParameters = function () { return [
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["NgZone"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectorRef"] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_6__["ViewportRuler"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Inject"], args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_11__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            MatDrawerContainer.propDecorators = {
                _drawers: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ContentChildren"], args: [MatDrawer,] }],
                _content: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ContentChild"], args: [MatDrawerContent, { static: false },] }],
                _userContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewChild"], args: [MatDrawerContent, { static: false },] }],
                autosize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                hasBackdrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                backdropClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatSidenavContent = /** @class */ (function (_super) {
                __extends(MatSidenavContent, _super);
                /**
                 * @param {?} changeDetectorRef
                 * @param {?} container
                 * @param {?} elementRef
                 * @param {?} scrollDispatcher
                 * @param {?} ngZone
                 */
                function MatSidenavContent(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {
                    return _super.call(this, changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) || this;
                }
                return MatSidenavContent;
            }(MatDrawerContent));
            MatSidenavContent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Component"], args: [{ selector: 'mat-sidenav-content',
                            template: '<ng-content></ng-content>',
                            host: {
                                'class': 'mat-drawer-content mat-sidenav-content',
                                '[style.margin-left.px]': '_container._contentMargins.left',
                                '[style.margin-right.px]': '_container._contentMargins.right',
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewEncapsulation"].None,
                        },] },
            ];
            /** @nocollapse */
            MatSidenavContent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectorRef"] },
                { type: MatSidenavContainer, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_8__["forwardRef"])(( /**
                                                 * @return {?}
                                                 */function () { return MatSidenavContainer; })),] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ElementRef"] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_6__["ScrollDispatcher"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["NgZone"] }
            ]; };
            var MatSidenav = /** @class */ (function (_super) {
                __extends(MatSidenav, _super);
                function MatSidenav() {
                    var _this = _super.apply(this, arguments) || this;
                    _this._fixedInViewport = false;
                    _this._fixedTopGap = 0;
                    _this._fixedBottomGap = 0;
                    return _this;
                }
                Object.defineProperty(MatSidenav.prototype, "fixedInViewport", {
                    /**
                     * Whether the sidenav is fixed in the viewport.
                     * @return {?}
                     */
                    get: function () { return this._fixedInViewport; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._fixedInViewport = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSidenav.prototype, "fixedTopGap", {
                    /**
                     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed
                     * mode.
                     * @return {?}
                     */
                    get: function () { return this._fixedTopGap; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._fixedTopGap = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSidenav.prototype, "fixedBottomGap", {
                    /**
                     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in
                     * fixed mode.
                     * @return {?}
                     */
                    get: function () { return this._fixedBottomGap; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._fixedBottomGap = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                return MatSidenav;
            }(MatDrawer));
            MatSidenav.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Component"], args: [{ selector: 'mat-sidenav',
                            exportAs: 'matSidenav',
                            template: "<div class=\"mat-drawer-inner-container\"><ng-content></ng-content></div>",
                            animations: [matDrawerAnimations.transformDrawer],
                            host: {
                                'class': 'mat-drawer mat-sidenav',
                                'tabIndex': '-1',
                                // must prevent the browser from aligning text based on value
                                '[attr.align]': 'null',
                                '[class.mat-drawer-end]': 'position === "end"',
                                '[class.mat-drawer-over]': 'mode === "over"',
                                '[class.mat-drawer-push]': 'mode === "push"',
                                '[class.mat-drawer-side]': 'mode === "side"',
                                '[class.mat-drawer-opened]': 'opened',
                                '[class.mat-sidenav-fixed]': 'fixedInViewport',
                                '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',
                                '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewEncapsulation"].None,
                        },] },
            ];
            MatSidenav.propDecorators = {
                fixedInViewport: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                fixedTopGap: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                fixedBottomGap: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }]
            };
            var MatSidenavContainer = /** @class */ (function (_super) {
                __extends(MatSidenavContainer, _super);
                function MatSidenavContainer() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatSidenavContainer;
            }(MatDrawerContainer));
            MatSidenavContainer.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Component"], args: [{ selector: 'mat-sidenav-container',
                            exportAs: 'matSidenavContainer',
                            template: "<div class=\"mat-drawer-backdrop\" (click)=\"_onBackdropClicked()\" *ngIf=\"hasBackdrop\" [class.mat-drawer-shown]=\"_isShowingBackdrop()\"></div><ng-content select=\"mat-sidenav\"></ng-content><ng-content select=\"mat-sidenav-content\"></ng-content><mat-sidenav-content *ngIf=\"!_content\" cdkScrollable><ng-content></ng-content></mat-sidenav-content>",
                            styles: [".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}"],
                            host: {
                                'class': 'mat-drawer-container mat-sidenav-container',
                                '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewEncapsulation"].None,
                        },] },
            ];
            MatSidenavContainer.propDecorators = {
                _drawers: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ContentChildren"], args: [MatSidenav,] }],
                _content: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ContentChild"], args: [MatSidenavContent, { static: false },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatSidenavModule = /** @class */ (function () {
                function MatSidenavModule() {
                }
                return MatSidenavModule;
            }());
            MatSidenavModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_12__["MatCommonModule"],
                                _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_6__["ScrollingModule"],
                                _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["PlatformModule"],
                            ],
                            exports: [
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_12__["MatCommonModule"],
                                MatDrawer,
                                MatDrawerContainer,
                                MatDrawerContent,
                                MatSidenav,
                                MatSidenavContainer,
                                MatSidenavContent,
                            ],
                            declarations: [
                                MatDrawer,
                                MatDrawerContainer,
                                MatDrawerContent,
                                MatSidenav,
                                MatSidenavContainer,
                                MatSidenavContent,
                            ],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=sidenav.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/slide-toggle.js": 
        /*!****************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/slide-toggle.js ***!
          \****************************************************************/
        /*! exports provided: _MatSlideToggleRequiredValidatorModule, MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MatSlideToggleRequiredValidator */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_MatSlideToggleRequiredValidatorModule", function () { return _MatSlideToggleRequiredValidatorModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSlideToggleModule", function () { return MatSlideToggleModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SLIDE_TOGGLE_VALUE_ACCESSOR", function () { return MAT_SLIDE_TOGGLE_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSlideToggleChange", function () { return MatSlideToggleChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSlideToggle", function () { return MatSlideToggle; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS", function () { return MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR", function () { return MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSlideToggleRequiredValidator", function () { return MatSlideToggleRequiredValidator; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/observers */ "./node_modules/@angular/cdk/esm2015/observers.js");
            /* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token to be used to override the default options for `mat-slide-toggle`.
             * @type {?}
             */
            var MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-slide-toggle-default-options', {
                providedIn: 'root',
                factory: ( /**
                 * @return {?}
                 */function () { return ({ disableToggleValue: false, disableDragValue: false }); })
            });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Increasing integer for generating unique ids for slide-toggle components.
            /** @type {?} */
            var nextUniqueId = 0;
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALUE_ACCESSOR"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MatSlideToggle; })),
                multi: true
            };
            /**
             * Change event object emitted by a MatSlideToggle.
             */
            var MatSlideToggleChange = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} checked
                 */
                function MatSlideToggleChange(source, checked) {
                    this.source = source;
                    this.checked = checked;
                }
                return MatSlideToggleChange;
            }());
            // Boilerplate for applying mixins to MatSlideToggle.
            /**
             * \@docs-private
             */
            var MatSlideToggleBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatSlideToggleBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatSlideToggleBase;
            }());
            /** @type {?} */
            var _MatSlideToggleMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinColor"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinDisabled"])(MatSlideToggleBase)), 'accent'));
            /**
             * Represents a slidable "switch" toggle that can be moved between on and off.
             */
            var MatSlideToggle = /** @class */ (function (_super) {
                __extends(MatSlideToggle, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} _focusMonitor
                 * @param {?} _changeDetectorRef
                 * @param {?} tabIndex
                 * @param {?} _ngZone
                 * @param {?} defaults
                 * @param {?=} _animationMode
                 * @param {?=} _dir
                 */
                function MatSlideToggle(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {
                    var _this = _super.call(this, elementRef) || this;
                    _this._focusMonitor = _focusMonitor;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._ngZone = _ngZone;
                    _this.defaults = defaults;
                    _this._animationMode = _animationMode;
                    _this._dir = _dir;
                    _this._onChange = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    _this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    _this._uniqueId = "mat-slide-toggle-" + ++nextUniqueId;
                    _this._required = false;
                    _this._checked = false;
                    /**
                     * Whether the thumb is currently being dragged.
                     */
                    _this._dragging = false;
                    /**
                     * Name value will be applied to the input element if present.
                     */
                    _this.name = null;
                    /**
                     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.
                     */
                    _this.id = _this._uniqueId;
                    /**
                     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.
                     */
                    _this.labelPosition = 'after';
                    /**
                     * Used to set the aria-label attribute on the underlying input element.
                     */
                    _this.ariaLabel = null;
                    /**
                     * Used to set the aria-labelledby attribute on the underlying input element.
                     */
                    _this.ariaLabelledby = null;
                    /**
                     * An event will be dispatched each time the slide-toggle changes its value.
                     */
                    _this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * An event will be dispatched each time the slide-toggle input is toggled.
                     * This event is always emitted when the user toggles the slide toggle, but this does not mean
                     * the slide toggle's value has changed. The event does not fire when the user drags to change
                     * the slide toggle value.
                     */
                    _this.toggleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * An event will be dispatched each time the slide-toggle is dragged.
                     * This event is always emitted when the user drags the slide toggle to make a change greater
                     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when
                     * the user toggles the slide toggle to change its value.
                     */
                    _this.dragChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    _this.tabIndex = parseInt(tabIndex) || 0;
                    return _this;
                }
                Object.defineProperty(MatSlideToggle.prototype, "required", {
                    /**
                     * Whether the slide-toggle is required.
                     * @return {?}
                     */
                    get: function () { return this._required; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlideToggle.prototype, "checked", {
                    /**
                     * Whether the slide-toggle element is checked or not.
                     * @return {?}
                     */
                    get: function () { return this._checked; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._checked = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlideToggle.prototype, "inputId", {
                    /**
                     * Returns the unique id for the visual hidden input.
                     * @return {?}
                     */
                    get: function () { return (this.id || this._uniqueId) + "-input"; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatSlideToggle.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._focusMonitor
                        .monitor(this._elementRef, true)
                        .subscribe(( /**
                 * @param {?} focusOrigin
                 * @return {?}
                 */function (/**
                 * @param {?} focusOrigin
                 * @return {?}
                 */ focusOrigin) {
                        if (!focusOrigin) {
                            // When a focused element becomes disabled, the browser *immediately* fires a blur event.
                            // Angular does not expect events to be raised during change detection, so any state
                            // change (such as a form control's 'ng-touched') will cause a changed-after-checked
                            // error. See https://github.com/angular/angular/issues/17793. To work around this,
                            // we defer telling the form control it has been touched until the next tick.
                            Promise.resolve().then(( /**
                             * @return {?}
                             */function () { return _this._onTouched(); }));
                        }
                    }));
                };
                /**
                 * @return {?}
                 */
                MatSlideToggle.prototype.ngOnDestroy = function () {
                    this._focusMonitor.stopMonitoring(this._elementRef);
                };
                /**
                 * Method being called whenever the underlying input emits a change event.
                 * @param {?} event
                 * @return {?}
                 */
                MatSlideToggle.prototype._onChangeEvent = function (event) {
                    // We always have to stop propagation on the change event.
                    // Otherwise the change event, from the input element, will bubble up and
                    // emit its event object to the component's `change` output.
                    event.stopPropagation();
                    if (!this._dragging) {
                        this.toggleChange.emit();
                    }
                    // Releasing the pointer over the `<label>` element while dragging triggers another
                    // click event on the `<label>` element. This means that the checked state of the underlying
                    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config
                    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value
                    // does not change, and the checked state of the underlying input needs to be changed back.
                    if (this._dragging || this.defaults.disableToggleValue) {
                        this._inputElement.nativeElement.checked = this.checked;
                        return;
                    }
                    // Sync the value from the underlying input element with the component instance.
                    this.checked = this._inputElement.nativeElement.checked;
                    // Emit our custom change event only if the underlying input emitted one. This ensures that
                    // there is no change event, when the checked state changes programmatically.
                    this._emitChangeEvent();
                };
                /**
                 * Method being called whenever the slide-toggle has been clicked.
                 * @param {?} event
                 * @return {?}
                 */
                MatSlideToggle.prototype._onInputClick = function (event) {
                    // We have to stop propagation for click events on the visual hidden input element.
                    // By default, when a user clicks on a label element, a generated click event will be
                    // dispatched on the associated input element. Since we are using a label element as our
                    // root container, the click event on the `slide-toggle` will be executed twice.
                    // The real click event will bubble up, and the generated click event also tries to bubble up.
                    // This will lead to multiple click events.
                    // Preventing bubbling for the second event will solve that issue.
                    event.stopPropagation();
                };
                /**
                 * Implemented as part of ControlValueAccessor.
                 * @param {?} value
                 * @return {?}
                 */
                MatSlideToggle.prototype.writeValue = function (value) {
                    this.checked = !!value;
                };
                /**
                 * Implemented as part of ControlValueAccessor.
                 * @param {?} fn
                 * @return {?}
                 */
                MatSlideToggle.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                /**
                 * Implemented as part of ControlValueAccessor.
                 * @param {?} fn
                 * @return {?}
                 */
                MatSlideToggle.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                /**
                 * Implemented as a part of ControlValueAccessor.
                 * @param {?} isDisabled
                 * @return {?}
                 */
                MatSlideToggle.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Focuses the slide-toggle.
                 * @param {?=} options
                 * @return {?}
                 */
                MatSlideToggle.prototype.focus = function (options) {
                    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);
                };
                /**
                 * Toggles the checked state of the slide-toggle.
                 * @return {?}
                 */
                MatSlideToggle.prototype.toggle = function () {
                    this.checked = !this.checked;
                    this._onChange(this.checked);
                };
                /**
                 * Emits a change event on the `change` output. Also notifies the FormControl about the change.
                 * @private
                 * @return {?}
                 */
                MatSlideToggle.prototype._emitChangeEvent = function () {
                    this._onChange(this.checked);
                    this.change.emit(new MatSlideToggleChange(this, this.checked));
                };
                /**
                 * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.
                 * @private
                 * @param {?} distance
                 * @return {?}
                 */
                MatSlideToggle.prototype._getDragPercentage = function (distance) {
                    /** @type {?} */
                    var percentage = (distance / this._thumbBarWidth) * 100;
                    // When the toggle was initially checked, then we have to start the drag at the end.
                    if (this._previousChecked) {
                        percentage += 100;
                    }
                    return Math.max(0, Math.min(percentage, 100));
                };
                /**
                 * @return {?}
                 */
                MatSlideToggle.prototype._onDragStart = function () {
                    if (!this.disabled && !this._dragging) {
                        /** @type {?} */
                        var thumbEl = this._thumbEl.nativeElement;
                        this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;
                        thumbEl.classList.add('mat-dragging');
                        this._previousChecked = this.checked;
                        this._dragging = true;
                    }
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatSlideToggle.prototype._onDrag = function (event) {
                    if (this._dragging) {
                        /** @type {?} */
                        var direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;
                        this._dragPercentage = this._getDragPercentage(event.deltaX * direction);
                        // Calculate the moved distance based on the thumb bar width.
                        /** @type {?} */
                        var dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;
                        this._thumbEl.nativeElement.style.transform = "translate3d(" + dragX + "px, 0, 0)";
                    }
                };
                /**
                 * @return {?}
                 */
                MatSlideToggle.prototype._onDragEnd = function () {
                    var _this = this;
                    if (this._dragging) {
                        /** @type {?} */
                        var newCheckedValue = this._dragPercentage > 50;
                        if (newCheckedValue !== this.checked) {
                            this.dragChange.emit();
                            if (!this.defaults.disableDragValue) {
                                this.checked = newCheckedValue;
                                this._emitChangeEvent();
                            }
                        }
                        // The drag should be stopped outside of the current event handler, otherwise the
                        // click event will be fired before it and will revert the drag change.
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () { return setTimeout(( /**
                         * @return {?}
                         */function () {
                            if (_this._dragging) {
                                _this._dragging = false;
                                _this._thumbEl.nativeElement.classList.remove('mat-dragging');
                                // Reset the transform because the component will take care
                                // of the thumb position after drag.
                                _this._thumbEl.nativeElement.style.transform = '';
                            }
                        })); }));
                    }
                };
                /**
                 * Method being called whenever the label text changes.
                 * @return {?}
                 */
                MatSlideToggle.prototype._onLabelTextChange = function () {
                    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the
                    // slide-toggle component will be only marked for check, but no actual change detection runs
                    // automatically. Instead of going back into the zone in order to trigger a change detection
                    // which causes *all* components to be checked (if explicitly marked or not using OnPush),
                    // we only trigger an explicit change detection for the slide-toggle view and its children.
                    this._changeDetectorRef.detectChanges();
                };
                return MatSlideToggle;
            }(_MatSlideToggleMixinBase));
            MatSlideToggle.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-slide-toggle',
                            exportAs: 'matSlideToggle',
                            host: {
                                'class': 'mat-slide-toggle',
                                '[id]': 'id',
                                // Needs to be `-1` so it can still receive programmatic focus.
                                '[attr.tabindex]': 'disabled ? null : -1',
                                '[attr.aria-label]': 'null',
                                '[attr.aria-labelledby]': 'null',
                                '[class.mat-checked]': 'checked',
                                '[class.mat-disabled]': 'disabled',
                                '[class.mat-slide-toggle-label-before]': 'labelPosition == "before"',
                                '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
                                '(focus)': '_inputElement.nativeElement.focus()',
                            },
                            template: "<label [attr.for]=\"inputId\" class=\"mat-slide-toggle-label\" #label><div #toggleBar class=\"mat-slide-toggle-bar\" [class.mat-slide-toggle-bar-no-side-margin]=\"!labelContent.textContent || !labelContent.textContent.trim()\"><input #input class=\"mat-slide-toggle-input cdk-visually-hidden\" type=\"checkbox\" role=\"switch\" [id]=\"inputId\" [required]=\"required\" [tabIndex]=\"tabIndex\" [checked]=\"checked\" [disabled]=\"disabled\" [attr.name]=\"name\" [attr.aria-checked]=\"checked.toString()\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (change)=\"_onChangeEvent($event)\" (click)=\"_onInputClick($event)\"><div class=\"mat-slide-toggle-thumb-container\" #thumbContainer (slidestart)=\"_onDragStart()\" (slide)=\"_onDrag($event)\" (slideend)=\"_onDragEnd()\"><div class=\"mat-slide-toggle-thumb\"></div><div class=\"mat-slide-toggle-ripple\" mat-ripple [matRippleTrigger]=\"label\" [matRippleDisabled]=\"disableRipple || disabled\" [matRippleCentered]=\"true\" [matRippleRadius]=\"20\" [matRippleAnimation]=\"{enterDuration: 150}\"><div class=\"mat-ripple-element mat-slide-toggle-persistent-ripple\"></div></div></div></div><span class=\"mat-slide-toggle-content\" #labelContent (cdkObserveContent)=\"_onLabelTextChange()\"><span style=\"display:none\">&nbsp;</span><ng-content></ng-content></span></label>",
                            styles: [".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging{transition-duration:0s}.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}.mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:1px dotted;outline-offset:5px}}@media (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}"],
                            providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],
                            inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatSlideToggle.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"], args: ['tabindex',] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__["ANIMATION_MODULE_TYPE"],] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            MatSlideToggle.propDecorators = {
                _thumbEl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['thumbContainer', { static: false },] }],
                _thumbBarEl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['toggleBar', { static: false },] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['aria-label',] }],
                ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['aria-labelledby',] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                toggleChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                dragChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _inputElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['input', { static: false },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALIDATORS"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MatSlideToggleRequiredValidator; })),
                multi: true
            };
            /**
             * Validator for Material slide-toggle components with the required attribute in a
             * template-driven form. The default validator for required form controls asserts
             * that the control value is not undefined but that is not appropriate for a slide-toggle
             * where the value is always defined.
             *
             * Required slide-toggle form controls are valid when checked.
             */
            var MatSlideToggleRequiredValidator = /** @class */ (function (_super) {
                __extends(MatSlideToggleRequiredValidator, _super);
                function MatSlideToggleRequiredValidator() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatSlideToggleRequiredValidator;
            }(_angular_forms__WEBPACK_IMPORTED_MODULE_4__["CheckboxRequiredValidator"]));
            MatSlideToggleRequiredValidator.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: "mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]",
                            providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * This module is used by both original and MDC-based slide-toggle implementations.
             */
            // tslint:disable-next-line:class-name
            var _MatSlideToggleRequiredValidatorModule = /** @class */ (function () {
                function _MatSlideToggleRequiredValidatorModule() {
                }
                return _MatSlideToggleRequiredValidatorModule;
            }());
            _MatSlideToggleRequiredValidatorModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            exports: [MatSlideToggleRequiredValidator],
                            declarations: [MatSlideToggleRequiredValidator],
                        },] },
            ];
            var MatSlideToggleModule = /** @class */ (function () {
                function MatSlideToggleModule() {
                }
                return MatSlideToggleModule;
            }());
            MatSlideToggleModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [
                                _MatSlideToggleRequiredValidatorModule,
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatRippleModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"],
                                _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ObserversModule"],
                            ],
                            exports: [
                                _MatSlideToggleRequiredValidatorModule,
                                MatSlideToggle,
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"]
                            ],
                            declarations: [MatSlideToggle],
                            providers: [
                                { provide: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__["HAMMER_GESTURE_CONFIG"], useClass: _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["GestureConfig"] }
                            ],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=slide-toggle.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/slider.js": 
        /*!**********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/slider.js ***!
          \**********************************************************/
        /*! exports provided: MatSliderModule, MAT_SLIDER_VALUE_ACCESSOR, MatSliderChange, MatSlider */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSliderModule", function () { return MatSliderModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SLIDER_VALUE_ACCESSOR", function () { return MAT_SLIDER_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSliderChange", function () { return MatSliderChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSlider", function () { return MatSlider; });
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Visually, a 30px separation between tick marks looks best. This is very subjective but it is
             * the default separation we chose.
             * @type {?}
             */
            var MIN_AUTO_TICK_SEPARATION = 30;
            /**
             * The thumb gap size for a disabled slider.
             * @type {?}
             */
            var DISABLED_THUMB_GAP = 7;
            /**
             * The thumb gap size for a non-active slider at its minimum value.
             * @type {?}
             */
            var MIN_VALUE_NONACTIVE_THUMB_GAP = 7;
            /**
             * The thumb gap size for an active slider at its minimum value.
             * @type {?}
             */
            var MIN_VALUE_ACTIVE_THUMB_GAP = 10;
            /**
             * Provider Expression that allows mat-slider to register as a ControlValueAccessor.
             * This allows it to support [(ngModel)] and [formControl].
             * \@docs-private
             * @type {?}
             */
            var MAT_SLIDER_VALUE_ACCESSOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NG_VALUE_ACCESSOR"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return MatSlider; })),
                multi: true
            };
            /**
             * A simple change event emitted by the MatSlider component.
             */
            var MatSliderChange = /** @class */ (function () {
                function MatSliderChange() {
                }
                return MatSliderChange;
            }());
            // Boilerplate for applying mixins to MatSlider.
            /**
             * \@docs-private
             */
            var MatSliderBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatSliderBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatSliderBase;
            }());
            /** @type {?} */
            var _MatSliderMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["mixinColor"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["mixinDisabled"])(MatSliderBase), 'accent'));
            /**
             * Allows users to select from a range of values by moving the slider thumb. It is similar in
             * behavior to the native `<input type="range">` element.
             */
            var MatSlider = /** @class */ (function (_super) {
                __extends(MatSlider, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} _focusMonitor
                 * @param {?} _changeDetectorRef
                 * @param {?} _dir
                 * @param {?} tabIndex
                 * @param {?=} _animationMode
                 */
                function MatSlider(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _animationMode) {
                    var _this = _super.call(this, elementRef) || this;
                    _this._focusMonitor = _focusMonitor;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._dir = _dir;
                    _this._animationMode = _animationMode;
                    _this._invert = false;
                    _this._max = 100;
                    _this._min = 0;
                    _this._step = 1;
                    _this._thumbLabel = false;
                    _this._tickInterval = 0;
                    _this._value = null;
                    _this._vertical = false;
                    /**
                     * Event emitted when the slider value has changed.
                     */
                    _this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    /**
                     * Event emitted when the slider thumb moves.
                     */
                    _this.input = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    /**
                     * Emits when the raw value of the slider changes. This is here primarily
                     * to facilitate the two-way binding for the `value` input.
                     * \@docs-private
                     */
                    _this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                    /**
                     * onTouch function registered via registerOnTouch (ControlValueAccessor).
                     */
                    _this.onTouched = ( /**
                     * @return {?}
                     */function () { });
                    _this._percent = 0;
                    /**
                     * Whether or not the thumb is sliding.
                     * Used to determine if there should be a transition for the thumb and fill track.
                     */
                    _this._isSliding = false;
                    /**
                     * Whether or not the slider is active (clicked or sliding).
                     * Used to shrink and grow the thumb as according to the Material Design spec.
                     */
                    _this._isActive = false;
                    /**
                     * The size of a tick interval as a percentage of the size of the track.
                     */
                    _this._tickIntervalPercent = 0;
                    /**
                     * The dimensions of the slider.
                     */
                    _this._sliderDimensions = null;
                    _this._controlValueAccessorChangeFn = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * Subscription to the Directionality change EventEmitter.
                     */
                    _this._dirChangeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_8__["Subscription"].EMPTY;
                    _this.tabIndex = parseInt(tabIndex) || 0;
                    return _this;
                }
                Object.defineProperty(MatSlider.prototype, "invert", {
                    /**
                     * Whether the slider is inverted.
                     * @return {?}
                     */
                    get: function () { return this._invert; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._invert = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "max", {
                    /**
                     * The maximum value that the slider can have.
                     * @return {?}
                     */
                    get: function () { return this._max; },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) {
                        this._max = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(v, this._max);
                        this._percent = this._calculatePercentage(this._value);
                        // Since this also modifies the percentage, we need to let the change detection know.
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "min", {
                    /**
                     * The minimum value that the slider can have.
                     * @return {?}
                     */
                    get: function () { return this._min; },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) {
                        this._min = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(v, this._min);
                        // If the value wasn't explicitly set by the user, set it to the min.
                        if (this._value === null) {
                            this.value = this._min;
                        }
                        this._percent = this._calculatePercentage(this._value);
                        // Since this also modifies the percentage, we need to let the change detection know.
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "step", {
                    /**
                     * The values at which the thumb will snap.
                     * @return {?}
                     */
                    get: function () { return this._step; },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) {
                        this._step = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(v, this._step);
                        if (this._step % 1 !== 0) {
                            this._roundToDecimal = ( /** @type {?} */(this._step.toString().split('.').pop())).length;
                        }
                        // Since this could modify the label, we need to notify the change detection.
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "thumbLabel", {
                    /**
                     * Whether or not to show the thumb label.
                     * @return {?}
                     */
                    get: function () { return this._thumbLabel; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._thumbLabel = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "tickInterval", {
                    /**
                     * How often to show ticks. Relative to the step so that a tick always appears on a step.
                     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).
                     * @return {?}
                     */
                    get: function () { return this._tickInterval; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value === 'auto') {
                            this._tickInterval = 'auto';
                        }
                        else if (typeof value === 'number' || typeof value === 'string') {
                            this._tickInterval = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(value, ( /** @type {?} */(this._tickInterval)));
                        }
                        else {
                            this._tickInterval = 0;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "value", {
                    /**
                     * Value of the slider.
                     * @return {?}
                     */
                    get: function () {
                        // If the value needs to be read and it is still uninitialized, initialize it to the min.
                        if (this._value === null) {
                            this.value = this._min;
                        }
                        return this._value;
                    },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) {
                        if (v !== this._value) {
                            /** @type {?} */
                            var value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(v);
                            // While incrementing by a decimal we can end up with values like 33.300000000000004.
                            // Truncate it to ensure that it matches the label and to make it easier to work with.
                            if (this._roundToDecimal) {
                                value = parseFloat(value.toFixed(this._roundToDecimal));
                            }
                            this._value = value;
                            this._percent = this._calculatePercentage(this._value);
                            // Since this also modifies the percentage, we need to let the change detection know.
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "vertical", {
                    /**
                     * Whether the slider is vertical.
                     * @return {?}
                     */
                    get: function () { return this._vertical; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._vertical = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "displayValue", {
                    /**
                     * The value to be used for display purposes.
                     * @return {?}
                     */
                    get: function () {
                        if (this.displayWith) {
                            // Value is never null but since setters and getters cannot have
                            // different types, the value getter is also typed to return null.
                            return this.displayWith(( /** @type {?} */(this.value)));
                        }
                        // Note that this could be improved further by rounding something like 0.999 to 1 or
                        // 0.899 to 0.9, however it is very performance sensitive, because it gets called on
                        // every change detection cycle.
                        if (this._roundToDecimal && this.value && this.value % 1 !== 0) {
                            return this.value.toFixed(this._roundToDecimal);
                        }
                        return this.value || 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * set focus to the host element
                 * @param {?=} options
                 * @return {?}
                 */
                MatSlider.prototype.focus = function (options) {
                    this._focusHostElement(options);
                };
                /**
                 * blur the host element
                 * @return {?}
                 */
                MatSlider.prototype.blur = function () {
                    this._blurHostElement();
                };
                Object.defineProperty(MatSlider.prototype, "percent", {
                    /**
                     * The percentage of the slider that coincides with the value.
                     * @return {?}
                     */
                    get: function () { return this._clamp(this._percent); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "_invertAxis", {
                    /**
                     * Whether the axis of the slider is inverted.
                     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).
                     * @return {?}
                     */
                    get: function () {
                        // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to
                        // top. However from a y-axis standpoint this is inverted.
                        return this.vertical ? !this.invert : this.invert;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "_isMinValue", {
                    /**
                     * Whether the slider is at its minimum value.
                     * @return {?}
                     */
                    get: function () {
                        return this.percent === 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "_thumbGap", {
                    /**
                     * The amount of space to leave between the slider thumb and the track fill & track background
                     * elements.
                     * @return {?}
                     */
                    get: function () {
                        if (this.disabled) {
                            return DISABLED_THUMB_GAP;
                        }
                        if (this._isMinValue && !this.thumbLabel) {
                            return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;
                        }
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "_trackBackgroundStyles", {
                    /**
                     * CSS styles for the track background element.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var axis = this.vertical ? 'Y' : 'X';
                        /** @type {?} */
                        var scale = this.vertical ? "1, " + (1 - this.percent) + ", 1" : 1 - this.percent + ", 1, 1";
                        /** @type {?} */
                        var sign = this._shouldInvertMouseCoords() ? '-' : '';
                        return {
                            // scale3d avoids some rendering issues in Chrome. See #12071.
                            transform: "translate" + axis + "(" + sign + this._thumbGap + "px) scale3d(" + scale + ")"
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "_trackFillStyles", {
                    /**
                     * CSS styles for the track fill element.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var axis = this.vertical ? 'Y' : 'X';
                        /** @type {?} */
                        var scale = this.vertical ? "1, " + this.percent + ", 1" : this.percent + ", 1, 1";
                        /** @type {?} */
                        var sign = this._shouldInvertMouseCoords() ? '' : '-';
                        return {
                            // scale3d avoids some rendering issues in Chrome. See #12071.
                            transform: "translate" + axis + "(" + sign + this._thumbGap + "px) scale3d(" + scale + ")"
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "_ticksContainerStyles", {
                    /**
                     * CSS styles for the ticks container element.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var axis = this.vertical ? 'Y' : 'X';
                        // For a horizontal slider in RTL languages we push the ticks container off the left edge
                        // instead of the right edge to avoid causing a horizontal scrollbar to appear.
                        /** @type {?} */
                        var sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';
                        /** @type {?} */
                        var offset = this._tickIntervalPercent / 2 * 100;
                        return {
                            'transform': "translate" + axis + "(" + sign + offset + "%)"
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "_ticksStyles", {
                    /**
                     * CSS styles for the ticks element.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var tickSize = this._tickIntervalPercent * 100;
                        /** @type {?} */
                        var backgroundSize = this.vertical ? "2px " + tickSize + "%" : tickSize + "% 2px";
                        /** @type {?} */
                        var axis = this.vertical ? 'Y' : 'X';
                        // Depending on the direction we pushed the ticks container, push the ticks the opposite
                        // direction to re-center them but clip off the end edge. In RTL languages we need to flip the
                        // ticks 180 degrees so we're really cutting off the end edge abd not the start.
                        /** @type {?} */
                        var sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';
                        /** @type {?} */
                        var rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';
                        /** @type {?} */
                        var styles = {
                            'backgroundSize': backgroundSize,
                            // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.
                            'transform': "translateZ(0) translate" + axis + "(" + sign + tickSize / 2 + "%)" + rotate
                        };
                        if (this._isMinValue && this._thumbGap) {
                            /** @type {?} */
                            var side = this.vertical ?
                                (this._invertAxis ? 'Bottom' : 'Top') :
                                (this._invertAxis ? 'Right' : 'Left');
                            styles["padding" + side] = this._thumbGap + "px";
                        }
                        return styles;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSlider.prototype, "_thumbContainerStyles", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var axis = this.vertical ? 'Y' : 'X';
                        // For a horizontal slider in RTL languages we push the thumb container off the left edge
                        // instead of the right edge to avoid causing a horizontal scrollbar to appear.
                        /** @type {?} */
                        var invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;
                        /** @type {?} */
                        var offset = (invertOffset ? this.percent : 1 - this.percent) * 100;
                        return {
                            'transform': "translate" + axis + "(-" + offset + "%)"
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Whether mouse events should be converted to a slider position by calculating their distance
                 * from the right or bottom edge of the slider as opposed to the top or left.
                 * @return {?}
                 */
                MatSlider.prototype._shouldInvertMouseCoords = function () {
                    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;
                };
                /**
                 * The language direction for this slider element.
                 * @private
                 * @return {?}
                 */
                MatSlider.prototype._getDirection = function () {
                    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';
                };
                /**
                 * @return {?}
                 */
                MatSlider.prototype.ngOnInit = function () {
                    var _this = this;
                    this._focusMonitor
                        .monitor(this._elementRef, true)
                        .subscribe(( /**
                 * @param {?} origin
                 * @return {?}
                 */function (origin) {
                        _this._isActive = !!origin && origin !== 'keyboard';
                        _this._changeDetectorRef.detectChanges();
                    }));
                    if (this._dir) {
                        this._dirChangeSubscription = this._dir.change.subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._changeDetectorRef.markForCheck();
                        }));
                    }
                };
                /**
                 * @return {?}
                 */
                MatSlider.prototype.ngOnDestroy = function () {
                    this._focusMonitor.stopMonitoring(this._elementRef);
                    this._dirChangeSubscription.unsubscribe();
                };
                /**
                 * @return {?}
                 */
                MatSlider.prototype._onMouseenter = function () {
                    if (this.disabled) {
                        return;
                    }
                    // We save the dimensions of the slider here so we can use them to update the spacing of the
                    // ticks and determine where on the slider click and slide events happen.
                    this._sliderDimensions = this._getSliderDimensions();
                    this._updateTickIntervalPercent();
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatSlider.prototype._onMousedown = function (event) {
                    // Don't do anything if the slider is disabled or the
                    // user is using anything other than the main mouse button.
                    if (this.disabled || event.button !== 0) {
                        return;
                    }
                    /** @type {?} */
                    var oldValue = this.value;
                    this._isSliding = false;
                    this._focusHostElement();
                    this._updateValueFromPosition({ x: event.clientX, y: event.clientY });
                    // Emit a change and input event if the value changed.
                    if (oldValue != this.value) {
                        this._emitInputEvent();
                        this._emitChangeEvent();
                    }
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatSlider.prototype._onSlide = function (event) {
                    if (this.disabled) {
                        return;
                    }
                    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding
                    // state, call the slide start handler manually.
                    if (!this._isSliding) {
                        this._onSlideStart(null);
                    }
                    // Prevent the slide from selecting anything else.
                    event.preventDefault();
                    /** @type {?} */
                    var oldValue = this.value;
                    this._updateValueFromPosition({ x: event.center.x, y: event.center.y });
                    // Native range elements always emit `input` events when the value changed while sliding.
                    if (oldValue != this.value) {
                        this._emitInputEvent();
                    }
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatSlider.prototype._onSlideStart = function (event) {
                    if (this.disabled || this._isSliding) {
                        return;
                    }
                    // Simulate mouseenter in case this is a mobile device.
                    this._onMouseenter();
                    this._isSliding = true;
                    this._focusHostElement();
                    this._valueOnSlideStart = this.value;
                    if (event) {
                        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });
                        event.preventDefault();
                    }
                };
                /**
                 * @return {?}
                 */
                MatSlider.prototype._onSlideEnd = function () {
                    this._isSliding = false;
                    if (this._valueOnSlideStart != this.value && !this.disabled) {
                        this._emitChangeEvent();
                    }
                    this._valueOnSlideStart = null;
                };
                /**
                 * @return {?}
                 */
                MatSlider.prototype._onFocus = function () {
                    // We save the dimensions of the slider here so we can use them to update the spacing of the
                    // ticks and determine where on the slider click and slide events happen.
                    this._sliderDimensions = this._getSliderDimensions();
                    this._updateTickIntervalPercent();
                };
                /**
                 * @return {?}
                 */
                MatSlider.prototype._onBlur = function () {
                    this.onTouched();
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                MatSlider.prototype._onKeydown = function (event) {
                    if (this.disabled || Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["hasModifierKey"])(event)) {
                        return;
                    }
                    /** @type {?} */
                    var oldValue = this.value;
                    switch (event.keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_UP"]:
                            this._increment(10);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_DOWN"]:
                            this._increment(-10);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["END"]:
                            this.value = this.max;
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["HOME"]:
                            this.value = this.min;
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["LEFT_ARROW"]:
                            // NOTE: For a sighted user it would make more sense that when they press an arrow key on an
                            // inverted slider the thumb moves in that direction. However for a blind user, nothing
                            // about the slider indicates that it is inverted. They will expect left to be decrement,
                            // regardless of how it appears on the screen. For speakers ofRTL languages, they probably
                            // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for
                            // RTL. For inverted sliders we prefer a good a11y experience to having it "look right" for
                            // sighted users, therefore we do not swap the meaning.
                            this._increment(this._getDirection() == 'rtl' ? 1 : -1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]:
                            this._increment(1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["RIGHT_ARROW"]:
                            // See comment on LEFT_ARROW about the conditions under which we flip the meaning.
                            this._increment(this._getDirection() == 'rtl' ? -1 : 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"]:
                            this._increment(-1);
                            break;
                        default:
                            // Return if the key is not one that we explicitly handle to avoid calling preventDefault on
                            // it.
                            return;
                    }
                    if (oldValue != this.value) {
                        this._emitInputEvent();
                        this._emitChangeEvent();
                    }
                    this._isSliding = true;
                    event.preventDefault();
                };
                /**
                 * @return {?}
                 */
                MatSlider.prototype._onKeyup = function () {
                    this._isSliding = false;
                };
                /**
                 * Increments the slider by the given number of steps (negative number decrements).
                 * @private
                 * @param {?} numSteps
                 * @return {?}
                 */
                MatSlider.prototype._increment = function (numSteps) {
                    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);
                };
                /**
                 * Calculate the new value from the new physical location. The value will always be snapped.
                 * @private
                 * @param {?} pos
                 * @return {?}
                 */
                MatSlider.prototype._updateValueFromPosition = function (pos) {
                    if (!this._sliderDimensions) {
                        return;
                    }
                    /** @type {?} */
                    var offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;
                    /** @type {?} */
                    var size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;
                    /** @type {?} */
                    var posComponent = this.vertical ? pos.y : pos.x;
                    // The exact value is calculated from the event and used to find the closest snap value.
                    /** @type {?} */
                    var percent = this._clamp((posComponent - offset) / size);
                    if (this._shouldInvertMouseCoords()) {
                        percent = 1 - percent;
                    }
                    // Since the steps may not divide cleanly into the max value, if the user
                    // slid to 0 or 100 percent, we jump to the min/max value. This approach
                    // is slightly more intuitive than using `Math.ceil` below, because it
                    // follows the user's pointer closer.
                    if (percent === 0) {
                        this.value = this.min;
                    }
                    else if (percent === 1) {
                        this.value = this.max;
                    }
                    else {
                        /** @type {?} */
                        var exactValue = this._calculateValue(percent);
                        // This calculation finds the closest step by finding the closest
                        // whole number divisible by the step relative to the min.
                        /** @type {?} */
                        var closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;
                        // The value needs to snap to the min and max.
                        this.value = this._clamp(closestValue, this.min, this.max);
                    }
                };
                /**
                 * Emits a change event if the current value is different from the last emitted value.
                 * @private
                 * @return {?}
                 */
                MatSlider.prototype._emitChangeEvent = function () {
                    this._controlValueAccessorChangeFn(this.value);
                    this.valueChange.emit(this.value);
                    this.change.emit(this._createChangeEvent());
                };
                /**
                 * Emits an input event when the current value is different from the last emitted value.
                 * @private
                 * @return {?}
                 */
                MatSlider.prototype._emitInputEvent = function () {
                    this.input.emit(this._createChangeEvent());
                };
                /**
                 * Updates the amount of space between ticks as a percentage of the width of the slider.
                 * @private
                 * @return {?}
                 */
                MatSlider.prototype._updateTickIntervalPercent = function () {
                    if (!this.tickInterval || !this._sliderDimensions) {
                        return;
                    }
                    if (this.tickInterval == 'auto') {
                        /** @type {?} */
                        var trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;
                        /** @type {?} */
                        var pixelsPerStep = trackSize * this.step / (this.max - this.min);
                        /** @type {?} */
                        var stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);
                        /** @type {?} */
                        var pixelsPerTick = stepsPerTick * this.step;
                        this._tickIntervalPercent = pixelsPerTick / trackSize;
                    }
                    else {
                        this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);
                    }
                };
                /**
                 * Creates a slider change object from the specified value.
                 * @private
                 * @param {?=} value
                 * @return {?}
                 */
                MatSlider.prototype._createChangeEvent = function (value) {
                    if (value === void 0) { value = this.value; }
                    /** @type {?} */
                    var event = new MatSliderChange();
                    event.source = this;
                    event.value = value;
                    return event;
                };
                /**
                 * Calculates the percentage of the slider that a value is.
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                MatSlider.prototype._calculatePercentage = function (value) {
                    return ((value || 0) - this.min) / (this.max - this.min);
                };
                /**
                 * Calculates the value a percentage of the slider corresponds to.
                 * @private
                 * @param {?} percentage
                 * @return {?}
                 */
                MatSlider.prototype._calculateValue = function (percentage) {
                    return this.min + percentage * (this.max - this.min);
                };
                /**
                 * Return a number between two numbers.
                 * @private
                 * @param {?} value
                 * @param {?=} min
                 * @param {?=} max
                 * @return {?}
                 */
                MatSlider.prototype._clamp = function (value, min, max) {
                    if (min === void 0) { min = 0; }
                    if (max === void 0) { max = 1; }
                    return Math.max(min, Math.min(value, max));
                };
                /**
                 * Get the bounding client rect of the slider track element.
                 * The track is used rather than the native element to ignore the extra space that the thumb can
                 * take up.
                 * @private
                 * @return {?}
                 */
                MatSlider.prototype._getSliderDimensions = function () {
                    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;
                };
                /**
                 * Focuses the native element.
                 * Currently only used to allow a blur event to fire but will be used with keyboard input later.
                 * @private
                 * @param {?=} options
                 * @return {?}
                 */
                MatSlider.prototype._focusHostElement = function (options) {
                    this._elementRef.nativeElement.focus(options);
                };
                /**
                 * Blurs the native element.
                 * @private
                 * @return {?}
                 */
                MatSlider.prototype._blurHostElement = function () {
                    this._elementRef.nativeElement.blur();
                };
                /**
                 * Sets the model value. Implemented as part of ControlValueAccessor.
                 * @param {?} value
                 * @return {?}
                 */
                MatSlider.prototype.writeValue = function (value) {
                    this.value = value;
                };
                /**
                 * Registers a callback to be triggered when the value has changed.
                 * Implemented as part of ControlValueAccessor.
                 * @param {?} fn Callback to be registered.
                 * @return {?}
                 */
                MatSlider.prototype.registerOnChange = function (fn) {
                    this._controlValueAccessorChangeFn = fn;
                };
                /**
                 * Registers a callback to be triggered when the component is touched.
                 * Implemented as part of ControlValueAccessor.
                 * @param {?} fn Callback to be registered.
                 * @return {?}
                 */
                MatSlider.prototype.registerOnTouched = function (fn) {
                    this.onTouched = fn;
                };
                /**
                 * Sets whether the component should be disabled.
                 * Implemented as part of ControlValueAccessor.
                 * @param {?} isDisabled
                 * @return {?}
                 */
                MatSlider.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                return MatSlider;
            }(_MatSliderMixinBase));
            MatSlider.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{ selector: 'mat-slider',
                            exportAs: 'matSlider',
                            providers: [MAT_SLIDER_VALUE_ACCESSOR],
                            host: {
                                '(focus)': '_onFocus()',
                                '(blur)': '_onBlur()',
                                '(mousedown)': '_onMousedown($event)',
                                '(keydown)': '_onKeydown($event)',
                                '(keyup)': '_onKeyup()',
                                '(mouseenter)': '_onMouseenter()',
                                '(slide)': '_onSlide($event)',
                                '(slideend)': '_onSlideEnd()',
                                '(slidestart)': '_onSlideStart($event)',
                                // On Safari starting to slide temporarily triggers text selection mode which
                                // show the wrong cursor. We prevent it by stopping the `selectstart` event.
                                '(selectstart)': '$event.preventDefault()',
                                'class': 'mat-slider',
                                'role': 'slider',
                                '[tabIndex]': 'tabIndex',
                                '[attr.aria-disabled]': 'disabled',
                                '[attr.aria-valuemax]': 'max',
                                '[attr.aria-valuemin]': 'min',
                                '[attr.aria-valuenow]': 'value',
                                '[attr.aria-orientation]': 'vertical ? "vertical" : "horizontal"',
                                '[class.mat-slider-disabled]': 'disabled',
                                '[class.mat-slider-has-ticks]': 'tickInterval',
                                '[class.mat-slider-horizontal]': '!vertical',
                                '[class.mat-slider-axis-inverted]': '_invertAxis',
                                // Class binding which is only used by the test harness as there is no other
                                // way for the harness to detect if mouse coordinates need to be inverted.
                                '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',
                                '[class.mat-slider-sliding]': '_isSliding',
                                '[class.mat-slider-thumb-label-showing]': 'thumbLabel',
                                '[class.mat-slider-vertical]': 'vertical',
                                '[class.mat-slider-min-value]': '_isMinValue',
                                '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',
                                '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
                            },
                            template: "<div class=\"mat-slider-wrapper\" #sliderWrapper><div class=\"mat-slider-track-wrapper\"><div class=\"mat-slider-track-background\" [ngStyle]=\"_trackBackgroundStyles\"></div><div class=\"mat-slider-track-fill\" [ngStyle]=\"_trackFillStyles\"></div></div><div class=\"mat-slider-ticks-container\" [ngStyle]=\"_ticksContainerStyles\"><div class=\"mat-slider-ticks\" [ngStyle]=\"_ticksStyles\"></div></div><div class=\"mat-slider-thumb-container\" [ngStyle]=\"_thumbContainerStyles\"><div class=\"mat-slider-focus-ring\"></div><div class=\"mat-slider-thumb\"></div><div class=\"mat-slider-thumb-label\"><span class=\"mat-slider-thumb-label-text\">{{displayValue}}</span></div></div></div>",
                            styles: [".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:0;vertical-align:middle}.mat-slider.mat-slider-sliding:not(.mat-slider-disabled),.mat-slider:not(.mat-slider-disabled):active{cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(.7);transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),border-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform .4s cubic-bezier(.25,.8,.25,1),border-radius .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}@media (-ms-high-contrast:active){.mat-slider-thumb-label{outline:solid 1px}}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-sliding .mat-slider-thumb-container,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-track-fill{transition-duration:0s}.mat-slider-has-ticks .mat-slider-wrapper::after{content:'';position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}@media (-ms-high-contrast:active){.mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}@media (-ms-high-contrast:active){.mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-track-fill{transition:none}"],
                            inputs: ['disabled', 'color', 'tabIndex'],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatSlider.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_1__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Attribute"], args: ['tabindex',] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            MatSlider.propDecorators = {
                invert: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
                max: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
                min: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
                step: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
                thumbLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
                tickInterval: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
                displayWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
                vertical: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
                change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
                input: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
                valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
                _sliderWrapper: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"], args: ['sliderWrapper', { static: false },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatSliderModule = /** @class */ (function () {
                function MatSliderModule() {
                }
                return MatSliderModule;
            }());
            MatSliderModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_9__["CommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_6__["MatCommonModule"]],
                            exports: [MatSlider, _angular_material_core__WEBPACK_IMPORTED_MODULE_6__["MatCommonModule"]],
                            declarations: [MatSlider],
                            providers: [{ provide: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__["HAMMER_GESTURE_CONFIG"], useClass: _angular_material_core__WEBPACK_IMPORTED_MODULE_6__["GestureConfig"] }]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=slider.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/snack-bar.js": 
        /*!*************************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/snack-bar.js ***!
          \*************************************************************/
        /*! exports provided: MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSnackBarModule", function () { return MatSnackBarModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY", function () { return MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SNACK_BAR_DEFAULT_OPTIONS", function () { return MAT_SNACK_BAR_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSnackBar", function () { return MatSnackBar; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSnackBarContainer", function () { return MatSnackBarContainer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SNACK_BAR_DATA", function () { return MAT_SNACK_BAR_DATA; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSnackBarConfig", function () { return MatSnackBarConfig; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSnackBarRef", function () { return MatSnackBarRef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleSnackBar", function () { return SimpleSnackBar; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matSnackBarAnimations", function () { return matSnackBarAnimations; });
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm2015/button.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/layout */ "./node_modules/@angular/cdk/esm2015/layout.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Reference to a snack bar dispatched from the snack bar service.
             * @template T
             */
            var MatSnackBarRef = /** @class */ (function () {
                /**
                 * @param {?} containerInstance
                 * @param {?} _overlayRef
                 */
                function MatSnackBarRef(containerInstance, _overlayRef) {
                    var _this = this;
                    this._overlayRef = _overlayRef;
                    /**
                     * Subject for notifying the user that the snack bar has been dismissed.
                     */
                    this._afterDismissed = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                    /**
                     * Subject for notifying the user that the snack bar has opened and appeared.
                     */
                    this._afterOpened = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                    /**
                     * Subject for notifying the user that the snack bar action was called.
                     */
                    this._onAction = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                    /**
                     * Whether the snack bar was dismissed using the action button.
                     */
                    this._dismissedByAction = false;
                    this.containerInstance = containerInstance;
                    // Dismiss snackbar on action.
                    this.onAction().subscribe(( /**
                     * @return {?}
                     */function () { return _this.dismiss(); }));
                    containerInstance._onExit.subscribe(( /**
                     * @return {?}
                     */function () { return _this._finishDismiss(); }));
                }
                /**
                 * Dismisses the snack bar.
                 * @return {?}
                 */
                MatSnackBarRef.prototype.dismiss = function () {
                    if (!this._afterDismissed.closed) {
                        this.containerInstance.exit();
                    }
                    clearTimeout(this._durationTimeoutId);
                };
                /**
                 * Marks the snackbar action clicked.
                 * @return {?}
                 */
                MatSnackBarRef.prototype.dismissWithAction = function () {
                    if (!this._onAction.closed) {
                        this._dismissedByAction = true;
                        this._onAction.next();
                        this._onAction.complete();
                    }
                };
                /**
                 * Marks the snackbar action clicked.
                 * @deprecated Use `dismissWithAction` instead.
                 * \@breaking-change 8.0.0
                 * @return {?}
                 */
                MatSnackBarRef.prototype.closeWithAction = function () {
                    this.dismissWithAction();
                };
                /**
                 * Dismisses the snack bar after some duration
                 * @param {?} duration
                 * @return {?}
                 */
                MatSnackBarRef.prototype._dismissAfter = function (duration) {
                    var _this = this;
                    this._durationTimeoutId = setTimeout(( /**
                     * @return {?}
                     */function () { return _this.dismiss(); }), duration);
                };
                /**
                 * Marks the snackbar as opened
                 * @return {?}
                 */
                MatSnackBarRef.prototype._open = function () {
                    if (!this._afterOpened.closed) {
                        this._afterOpened.next();
                        this._afterOpened.complete();
                    }
                };
                /**
                 * Cleans up the DOM after closing.
                 * @private
                 * @return {?}
                 */
                MatSnackBarRef.prototype._finishDismiss = function () {
                    this._overlayRef.dispose();
                    if (!this._onAction.closed) {
                        this._onAction.complete();
                    }
                    this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });
                    this._afterDismissed.complete();
                    this._dismissedByAction = false;
                };
                /**
                 * Gets an observable that is notified when the snack bar is finished closing.
                 * @return {?}
                 */
                MatSnackBarRef.prototype.afterDismissed = function () {
                    return this._afterDismissed.asObservable();
                };
                /**
                 * Gets an observable that is notified when the snack bar has opened and appeared.
                 * @return {?}
                 */
                MatSnackBarRef.prototype.afterOpened = function () {
                    return this.containerInstance._onEnter;
                };
                /**
                 * Gets an observable that is notified when the snack bar action is called.
                 * @return {?}
                 */
                MatSnackBarRef.prototype.onAction = function () {
                    return this._onAction.asObservable();
                };
                return MatSnackBarRef;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used to access the data that was passed in to a snack bar.
             * @type {?}
             */
            var MAT_SNACK_BAR_DATA = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('MatSnackBarData');
            /**
             * Configuration used when opening a snack-bar.
             * @template D
             */
            var MatSnackBarConfig = /** @class */ (function () {
                function MatSnackBarConfig() {
                    /**
                     * The politeness level for the MatAriaLiveAnnouncer announcement.
                     */
                    this.politeness = 'assertive';
                    /**
                     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom
                     * component or template, the announcement message will default to the specified message.
                     */
                    this.announcementMessage = '';
                    /**
                     * The length of time in milliseconds to wait before automatically dismissing the snack bar.
                     */
                    this.duration = 0;
                    /**
                     * Data being injected into the child component.
                     */
                    this.data = null;
                    /**
                     * The horizontal position to place the snack bar.
                     */
                    this.horizontalPosition = 'center';
                    /**
                     * The vertical position to place the snack bar.
                     */
                    this.verticalPosition = 'bottom';
                }
                return MatSnackBarConfig;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * A component used to open as the default snack bar, matching material spec.
             * This should only be used internally by the snack bar service.
             */
            var SimpleSnackBar = /** @class */ (function () {
                /**
                 * @param {?} snackBarRef
                 * @param {?} data
                 */
                function SimpleSnackBar(snackBarRef, data) {
                    this.snackBarRef = snackBarRef;
                    this.data = data;
                }
                /**
                 * Performs the action on the snack bar.
                 * @return {?}
                 */
                SimpleSnackBar.prototype.action = function () {
                    this.snackBarRef.dismissWithAction();
                };
                Object.defineProperty(SimpleSnackBar.prototype, "hasAction", {
                    /**
                     * If the action button should be shown.
                     * @return {?}
                     */
                    get: function () {
                        return !!this.data.action;
                    },
                    enumerable: true,
                    configurable: true
                });
                return SimpleSnackBar;
            }());
            SimpleSnackBar.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'simple-snack-bar',
                            template: "<span>{{data.message}}</span><div class=\"mat-simple-snackbar-action\" *ngIf=\"hasAction\"><button mat-button (click)=\"action()\">{{data.action}}</button></div>",
                            styles: [".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                'class': 'mat-simple-snackbar',
                            }
                        },] },
            ];
            /** @nocollapse */
            SimpleSnackBar.ctorParameters = function () { return [
                { type: MatSnackBarRef },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MAT_SNACK_BAR_DATA,] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Animations used by the Material snack bar.
             * \@docs-private
             * @type {?}
             */
            var matSnackBarAnimations = {
                /**
                 * Animation that shows and hides a snack bar.
                 */
                snackBarState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["trigger"])('state', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["state"])('void, hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["style"])({
                        transform: 'scale(0.8)',
                        opacity: 0,
                    })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["state"])('visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["style"])({
                        transform: 'scale(1)',
                        opacity: 1,
                    })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["transition"])('* => visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["animate"])('150ms cubic-bezier(0, 0, 0.2, 1)')),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["transition"])('* => void, * => hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["animate"])('75ms cubic-bezier(0.4, 0.0, 1, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["style"])({
                        opacity: 0
                    }))),
                ])
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Internal component that wraps user-provided snack bar content.
             * \@docs-private
             */
            var MatSnackBarContainer = /** @class */ (function (_super) {
                __extends(MatSnackBarContainer, _super);
                /**
                 * @param {?} _ngZone
                 * @param {?} _elementRef
                 * @param {?} _changeDetectorRef
                 * @param {?} snackBarConfig
                 */
                function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {
                    var _this = _super.call(this) || this;
                    _this._ngZone = _ngZone;
                    _this._elementRef = _elementRef;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this.snackBarConfig = snackBarConfig;
                    /**
                     * Whether the component has been destroyed.
                     */
                    _this._destroyed = false;
                    /**
                     * Subject for notifying that the snack bar has exited from view.
                     */
                    _this._onExit = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                    /**
                     * Subject for notifying that the snack bar has finished entering the view.
                     */
                    _this._onEnter = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                    /**
                     * The state of the snack bar animations.
                     */
                    _this._animationState = 'void';
                    // Based on the ARIA spec, `alert` and `status` roles have an
                    // implicit `assertive` and `polite` politeness respectively.
                    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {
                        _this._role = 'alert';
                    }
                    else if (snackBarConfig.politeness === 'off') {
                        _this._role = null;
                    }
                    else {
                        _this._role = 'status';
                    }
                    return _this;
                }
                /**
                 * Attach a component portal as content to this snack bar container.
                 * @template T
                 * @param {?} portal
                 * @return {?}
                 */
                MatSnackBarContainer.prototype.attachComponentPortal = function (portal) {
                    this._assertNotAttached();
                    this._applySnackBarClasses();
                    return this._portalOutlet.attachComponentPortal(portal);
                };
                /**
                 * Attach a template portal as content to this snack bar container.
                 * @template C
                 * @param {?} portal
                 * @return {?}
                 */
                MatSnackBarContainer.prototype.attachTemplatePortal = function (portal) {
                    this._assertNotAttached();
                    this._applySnackBarClasses();
                    return this._portalOutlet.attachTemplatePortal(portal);
                };
                /**
                 * Handle end of animations, updating the state of the snackbar.
                 * @param {?} event
                 * @return {?}
                 */
                MatSnackBarContainer.prototype.onAnimationEnd = function (event) {
                    var fromState = event.fromState, toState = event.toState;
                    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {
                        this._completeExit();
                    }
                    if (toState === 'visible') {
                        // Note: we shouldn't use `this` inside the zone callback,
                        // because it can cause a memory leak.
                        /** @type {?} */
                        var onEnter_1 = this._onEnter;
                        this._ngZone.run(( /**
                         * @return {?}
                         */function () {
                            onEnter_1.next();
                            onEnter_1.complete();
                        }));
                    }
                };
                /**
                 * Begin animation of snack bar entrance into view.
                 * @return {?}
                 */
                MatSnackBarContainer.prototype.enter = function () {
                    if (!this._destroyed) {
                        this._animationState = 'visible';
                        this._changeDetectorRef.detectChanges();
                    }
                };
                /**
                 * Begin animation of the snack bar exiting from view.
                 * @return {?}
                 */
                MatSnackBarContainer.prototype.exit = function () {
                    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case
                    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to
                    // `MatSnackBar.open`).
                    this._animationState = 'hidden';
                    return this._onExit;
                };
                /**
                 * Makes sure the exit callbacks have been invoked when the element is destroyed.
                 * @return {?}
                 */
                MatSnackBarContainer.prototype.ngOnDestroy = function () {
                    this._destroyed = true;
                    this._completeExit();
                };
                /**
                 * Waits for the zone to settle before removing the element. Helps prevent
                 * errors where we end up removing an element which is in the middle of an animation.
                 * @private
                 * @return {?}
                 */
                MatSnackBarContainer.prototype._completeExit = function () {
                    var _this = this;
                    this._ngZone.onMicrotaskEmpty.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["take"])(1)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._onExit.next();
                        _this._onExit.complete();
                    }));
                };
                /**
                 * Applies the various positioning and user-configured CSS classes to the snack bar.
                 * @private
                 * @return {?}
                 */
                MatSnackBarContainer.prototype._applySnackBarClasses = function () {
                    /** @type {?} */
                    var element = this._elementRef.nativeElement;
                    /** @type {?} */
                    var panelClasses = this.snackBarConfig.panelClass;
                    if (panelClasses) {
                        if (Array.isArray(panelClasses)) {
                            // Note that we can't use a spread here, because IE doesn't support multiple arguments.
                            panelClasses.forEach(( /**
                             * @param {?} cssClass
                             * @return {?}
                             */function (/**
                             * @param {?} cssClass
                             * @return {?}
                             */ cssClass) { return element.classList.add(cssClass); }));
                        }
                        else {
                            element.classList.add(panelClasses);
                        }
                    }
                    if (this.snackBarConfig.horizontalPosition === 'center') {
                        element.classList.add('mat-snack-bar-center');
                    }
                    if (this.snackBarConfig.verticalPosition === 'top') {
                        element.classList.add('mat-snack-bar-top');
                    }
                };
                /**
                 * Asserts that no content is already attached to the container.
                 * @private
                 * @return {?}
                 */
                MatSnackBarContainer.prototype._assertNotAttached = function () {
                    if (this._portalOutlet.hasAttached()) {
                        throw Error('Attempting to attach snack bar content after content is already attached');
                    }
                };
                return MatSnackBarContainer;
            }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["BasePortalOutlet"]));
            MatSnackBarContainer.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'snack-bar-container',
                            template: "<ng-template cdkPortalOutlet></ng-template>",
                            styles: [".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}"],
                            // In Ivy embedded views will be change detected from their declaration place, rather than
                            // where they were stamped out. This means that we can't have the snack bar container be OnPush,
                            // because it might cause snack bars that were opened from a template not to be out of date.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            animations: [matSnackBarAnimations.snackBarState],
                            host: {
                                '[attr.role]': '_role',
                                'class': 'mat-snack-bar-container',
                                '[@state]': '_animationState',
                                '(@state.done)': 'onAnimationEnd($event)'
                            },
                        },] },
            ];
            /** @nocollapse */
            MatSnackBarContainer.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
                { type: MatSnackBarConfig }
            ]; };
            MatSnackBarContainer.propDecorators = {
                _portalOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["CdkPortalOutlet"], { static: true },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatSnackBarModule = /** @class */ (function () {
                function MatSnackBarModule() {
                }
                return MatSnackBarModule;
            }());
            MatSnackBarModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            imports: [
                                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__["OverlayModule"],
                                _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["PortalModule"],
                                _angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"],
                                _angular_material_button__WEBPACK_IMPORTED_MODULE_8__["MatButtonModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatCommonModule"],
                            ],
                            exports: [MatSnackBarContainer, _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatCommonModule"]],
                            declarations: [MatSnackBarContainer, SimpleSnackBar],
                            entryComponents: [MatSnackBarContainer, SimpleSnackBar],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used to specify default snack bar.
             * @type {?}
             */
            var MAT_SNACK_BAR_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mat-snack-bar-default-options', {
                providedIn: 'root',
                factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {
                return new MatSnackBarConfig();
            }
            /**
             * Service to dispatch Material Design snack bar messages.
             */
            var MatSnackBar = /** @class */ (function () {
                /**
                 * @param {?} _overlay
                 * @param {?} _live
                 * @param {?} _injector
                 * @param {?} _breakpointObserver
                 * @param {?} _parentSnackBar
                 * @param {?} _defaultConfig
                 */
                function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {
                    this._overlay = _overlay;
                    this._live = _live;
                    this._injector = _injector;
                    this._breakpointObserver = _breakpointObserver;
                    this._parentSnackBar = _parentSnackBar;
                    this._defaultConfig = _defaultConfig;
                    /**
                     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).
                     * If there is a parent snack-bar service, all operations should delegate to that parent
                     * via `_openedSnackBarRef`.
                     */
                    this._snackBarRefAtThisLevel = null;
                }
                Object.defineProperty(MatSnackBar.prototype, "_openedSnackBarRef", {
                    /**
                     * Reference to the currently opened snackbar at *any* level.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var parent = this._parentSnackBar;
                        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._parentSnackBar) {
                            this._parentSnackBar._openedSnackBarRef = value;
                        }
                        else {
                            this._snackBarRefAtThisLevel = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Creates and dispatches a snack bar with a custom component for the content, removing any
                 * currently opened snack bars.
                 *
                 * @template T
                 * @param {?} component Component to be instantiated.
                 * @param {?=} config Extra configuration for the snack bar.
                 * @return {?}
                 */
                MatSnackBar.prototype.openFromComponent = function (component, config) {
                    return ( /** @type {?} */(this._attach(component, config)));
                };
                /**
                 * Creates and dispatches a snack bar with a custom template for the content, removing any
                 * currently opened snack bars.
                 *
                 * @param {?} template Template to be instantiated.
                 * @param {?=} config Extra configuration for the snack bar.
                 * @return {?}
                 */
                MatSnackBar.prototype.openFromTemplate = function (template, config) {
                    return this._attach(template, config);
                };
                /**
                 * Opens a snackbar with a message and an optional action.
                 * @param {?} message The message to show in the snackbar.
                 * @param {?=} action The label for the snackbar action.
                 * @param {?=} config Additional configuration options for the snackbar.
                 * @return {?}
                 */
                MatSnackBar.prototype.open = function (message, action, config) {
                    if (action === void 0) { action = ''; }
                    /** @type {?} */
                    var _config = Object.assign({}, this._defaultConfig, config);
                    // Since the user doesn't have access to the component, we can
                    // override the data to pass in our own message and action.
                    _config.data = { message: message, action: action };
                    if (!_config.announcementMessage) {
                        _config.announcementMessage = message;
                    }
                    return this.openFromComponent(SimpleSnackBar, _config);
                };
                /**
                 * Dismisses the currently-visible snack bar.
                 * @return {?}
                 */
                MatSnackBar.prototype.dismiss = function () {
                    if (this._openedSnackBarRef) {
                        this._openedSnackBarRef.dismiss();
                    }
                };
                /**
                 * @return {?}
                 */
                MatSnackBar.prototype.ngOnDestroy = function () {
                    // Only dismiss the snack bar at the current level on destroy.
                    if (this._snackBarRefAtThisLevel) {
                        this._snackBarRefAtThisLevel.dismiss();
                    }
                };
                /**
                 * Attaches the snack bar container component to the overlay.
                 * @private
                 * @param {?} overlayRef
                 * @param {?} config
                 * @return {?}
                 */
                MatSnackBar.prototype._attachSnackBarContainer = function (overlayRef, config) {
                    /** @type {?} */
                    var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
                    /** @type {?} */
                    var injector = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["PortalInjector"](userInjector || this._injector, new WeakMap([
                        [MatSnackBarConfig, config]
                    ]));
                    /** @type {?} */
                    var containerPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["ComponentPortal"](MatSnackBarContainer, config.viewContainerRef, injector);
                    /** @type {?} */
                    var containerRef = overlayRef.attach(containerPortal);
                    containerRef.instance.snackBarConfig = config;
                    return containerRef.instance;
                };
                /**
                 * Places a new component or a template as the content of the snack bar container.
                 * @private
                 * @template T
                 * @param {?} content
                 * @param {?=} userConfig
                 * @return {?}
                 */
                MatSnackBar.prototype._attach = function (content, userConfig) {
                    /** @type {?} */
                    var config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);
                    /** @type {?} */
                    var overlayRef = this._createOverlay(config);
                    /** @type {?} */
                    var container = this._attachSnackBarContainer(overlayRef, config);
                    /** @type {?} */
                    var snackBarRef = new MatSnackBarRef(container, overlayRef);
                    if (content instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]) {
                        /** @type {?} */
                        var portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["TemplatePortal"](content, ( /** @type {?} */(null)), ( /** @type {?} */({
                            $implicit: config.data,
                            snackBarRef: snackBarRef
                        })));
                        snackBarRef.instance = container.attachTemplatePortal(portal);
                    }
                    else {
                        /** @type {?} */
                        var injector = this._createInjector(config, snackBarRef);
                        /** @type {?} */
                        var portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["ComponentPortal"](content, undefined, injector);
                        /** @type {?} */
                        var contentRef = container.attachComponentPortal(portal);
                        // We can't pass this via the injector, because the injector is created earlier.
                        snackBarRef.instance = contentRef.instance;
                    }
                    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as
                    // appropriate. This class is applied to the overlay element because the overlay must expand to
                    // fill the width of the screen for full width snackbars.
                    this._breakpointObserver.observe(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_10__["Breakpoints"].HandsetPortrait).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(overlayRef.detachments())).subscribe(( /**
                     * @param {?} state
                     * @return {?}
                     */function (/**
                     * @param {?} state
                     * @return {?}
                     */ state$$1) {
                        /** @type {?} */
                        var classList = overlayRef.overlayElement.classList;
                        /** @type {?} */
                        var className = 'mat-snack-bar-handset';
                        state$$1.matches ? classList.add(className) : classList.remove(className);
                    }));
                    this._animateSnackBar(snackBarRef, config);
                    this._openedSnackBarRef = snackBarRef;
                    return this._openedSnackBarRef;
                };
                /**
                 * Animates the old snack bar out and the new one in.
                 * @private
                 * @param {?} snackBarRef
                 * @param {?} config
                 * @return {?}
                 */
                MatSnackBar.prototype._animateSnackBar = function (snackBarRef, config) {
                    var _this = this;
                    // When the snackbar is dismissed, clear the reference to it.
                    snackBarRef.afterDismissed().subscribe(( /**
                     * @return {?}
                     */function () {
                        // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.
                        if (_this._openedSnackBarRef == snackBarRef) {
                            _this._openedSnackBarRef = null;
                        }
                        if (config.announcementMessage) {
                            _this._live.clear();
                        }
                    }));
                    if (this._openedSnackBarRef) {
                        // If a snack bar is already in view, dismiss it and enter the
                        // new snack bar after exit animation is complete.
                        this._openedSnackBarRef.afterDismissed().subscribe(( /**
                         * @return {?}
                         */function () {
                            snackBarRef.containerInstance.enter();
                        }));
                        this._openedSnackBarRef.dismiss();
                    }
                    else {
                        // If no snack bar is in view, enter the new snack bar.
                        snackBarRef.containerInstance.enter();
                    }
                    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.
                    if (config.duration && config.duration > 0) {
                        snackBarRef.afterOpened().subscribe(( /**
                         * @return {?}
                         */function () { return snackBarRef._dismissAfter(( /** @type {?} */(config.duration))); }));
                    }
                    if (config.announcementMessage) {
                        this._live.announce(config.announcementMessage, config.politeness);
                    }
                };
                /**
                 * Creates a new overlay and places it in the correct location.
                 * @private
                 * @param {?} config The user-specified snack bar config.
                 * @return {?}
                 */
                MatSnackBar.prototype._createOverlay = function (config) {
                    /** @type {?} */
                    var overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__["OverlayConfig"]();
                    overlayConfig.direction = config.direction;
                    /** @type {?} */
                    var positionStrategy = this._overlay.position().global();
                    // Set horizontal position.
                    /** @type {?} */
                    var isRtl = config.direction === 'rtl';
                    /** @type {?} */
                    var isLeft = (config.horizontalPosition === 'left' ||
                        (config.horizontalPosition === 'start' && !isRtl) ||
                        (config.horizontalPosition === 'end' && isRtl));
                    /** @type {?} */
                    var isRight = !isLeft && config.horizontalPosition !== 'center';
                    if (isLeft) {
                        positionStrategy.left('0');
                    }
                    else if (isRight) {
                        positionStrategy.right('0');
                    }
                    else {
                        positionStrategy.centerHorizontally();
                    }
                    // Set horizontal position.
                    if (config.verticalPosition === 'top') {
                        positionStrategy.top('0');
                    }
                    else {
                        positionStrategy.bottom('0');
                    }
                    overlayConfig.positionStrategy = positionStrategy;
                    return this._overlay.create(overlayConfig);
                };
                /**
                 * Creates an injector to be used inside of a snack bar component.
                 * @private
                 * @template T
                 * @param {?} config Config that was used to create the snack bar.
                 * @param {?} snackBarRef Reference to the snack bar.
                 * @return {?}
                 */
                MatSnackBar.prototype._createInjector = function (config, snackBarRef) {
                    /** @type {?} */
                    var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
                    return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["PortalInjector"](userInjector || this._injector, new WeakMap([
                        [MatSnackBarRef, snackBarRef],
                        [MAT_SNACK_BAR_DATA, config.data]
                    ]));
                };
                return MatSnackBar;
            }());
            MatSnackBar.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: MatSnackBarModule },] },
            ];
            /** @nocollapse */
            MatSnackBar.ctorParameters = function () { return [
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__["Overlay"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_9__["LiveAnnouncer"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"] },
                { type: _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_10__["BreakpointObserver"] },
                { type: MatSnackBar, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"] }] },
                { type: MatSnackBarConfig, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }
            ]; };
            /** @nocollapse */ MatSnackBar.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function MatSnackBar_Factory() { return new MatSnackBar(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__["Overlay"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_9__["LiveAnnouncer"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["INJECTOR"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_10__["BreakpointObserver"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(MatSnackBar, 12), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=snack-bar.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/sort.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/sort.js ***!
          \********************************************************/
        /*! exports provided: MatSortModule, MatSortHeader, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER, MatSort, matSortAnimations */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSortModule", function () { return MatSortModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSortHeader", function () { return MatSortHeader; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SORT_HEADER_INTL_PROVIDER_FACTORY", function () { return MAT_SORT_HEADER_INTL_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSortHeaderIntl", function () { return MatSortHeaderIntl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SORT_HEADER_INTL_PROVIDER", function () { return MAT_SORT_HEADER_INTL_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSort", function () { return MatSort; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matSortAnimations", function () { return matSortAnimations; });
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             * @param {?} id
             * @return {?}
             */
            function getSortDuplicateSortableIdError(id) {
                return Error("Cannot have two MatSortables with the same id (" + id + ").");
            }
            /**
             * \@docs-private
             * @return {?}
             */
            function getSortHeaderNotContainedWithinSortError() {
                return Error("MatSortHeader must be placed within a parent element with the MatSort directive.");
            }
            /**
             * \@docs-private
             * @return {?}
             */
            function getSortHeaderMissingIdError() {
                return Error("MatSortHeader must be provided with a unique id.");
            }
            /**
             * \@docs-private
             * @param {?} direction
             * @return {?}
             */
            function getSortInvalidDirectionError(direction) {
                return Error(direction + " is not a valid sort direction ('asc' or 'desc').");
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Boilerplate for applying mixins to MatSort.
            /**
             * \@docs-private
             */
            var MatSortBase = /** @class */ (function () {
                function MatSortBase() {
                }
                return MatSortBase;
            }());
            /** @type {?} */
            var _MatSortMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinInitialized"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinDisabled"])(MatSortBase));
            /**
             * Container for MatSortables to manage the sort state and provide default sort parameters.
             */
            var MatSort = /** @class */ (function (_super) {
                __extends(MatSort, _super);
                function MatSort() {
                    var _this = _super.apply(this, arguments) || this;
                    /**
                     * Collection of all registered sortables that this directive manages.
                     */
                    _this.sortables = new Map();
                    /**
                     * Used to notify any child components listening to state changes.
                     */
                    _this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
                    /**
                     * The direction to set when an MatSortable is initially sorted.
                     * May be overriden by the MatSortable's sort start.
                     */
                    _this.start = 'asc';
                    _this._direction = '';
                    /**
                     * Event emitted when the user changes either the active sort or sort direction.
                     */
                    _this.sortChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    return _this;
                }
                Object.defineProperty(MatSort.prototype, "direction", {
                    /**
                     * The sort direction of the currently active MatSortable.
                     * @return {?}
                     */
                    get: function () { return this._direction; },
                    /**
                     * @param {?} direction
                     * @return {?}
                     */
                    set: function (direction) {
                        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && direction && direction !== 'asc' && direction !== 'desc') {
                            throw getSortInvalidDirectionError(direction);
                        }
                        this._direction = direction;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatSort.prototype, "disableClear", {
                    /**
                     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.
                     * May be overriden by the MatSortable's disable clear input.
                     * @return {?}
                     */
                    get: function () { return this._disableClear; },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) { this._disableClear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(v); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Register function to be used by the contained MatSortables. Adds the MatSortable to the
                 * collection of MatSortables.
                 * @param {?} sortable
                 * @return {?}
                 */
                MatSort.prototype.register = function (sortable) {
                    if (!sortable.id) {
                        throw getSortHeaderMissingIdError();
                    }
                    if (this.sortables.has(sortable.id)) {
                        throw getSortDuplicateSortableIdError(sortable.id);
                    }
                    this.sortables.set(sortable.id, sortable);
                };
                /**
                 * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the
                 * collection of contained MatSortables.
                 * @param {?} sortable
                 * @return {?}
                 */
                MatSort.prototype.deregister = function (sortable) {
                    this.sortables.delete(sortable.id);
                };
                /**
                 * Sets the active sort id and determines the new sort direction.
                 * @param {?} sortable
                 * @return {?}
                 */
                MatSort.prototype.sort = function (sortable) {
                    if (this.active != sortable.id) {
                        this.active = sortable.id;
                        this.direction = sortable.start ? sortable.start : this.start;
                    }
                    else {
                        this.direction = this.getNextSortDirection(sortable);
                    }
                    this.sortChange.emit({ active: this.active, direction: this.direction });
                };
                /**
                 * Returns the next sort direction of the active sortable, checking for potential overrides.
                 * @param {?} sortable
                 * @return {?}
                 */
                MatSort.prototype.getNextSortDirection = function (sortable) {
                    if (!sortable) {
                        return '';
                    }
                    // Get the sort direction cycle with the potential sortable overrides.
                    /** @type {?} */
                    var disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;
                    /** @type {?} */
                    var sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);
                    // Get and return the next direction in the cycle
                    /** @type {?} */
                    var nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;
                    if (nextDirectionIndex >= sortDirectionCycle.length) {
                        nextDirectionIndex = 0;
                    }
                    return sortDirectionCycle[nextDirectionIndex];
                };
                /**
                 * @return {?}
                 */
                MatSort.prototype.ngOnInit = function () {
                    this._markInitialized();
                };
                /**
                 * @return {?}
                 */
                MatSort.prototype.ngOnChanges = function () {
                    this._stateChanges.next();
                };
                /**
                 * @return {?}
                 */
                MatSort.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                };
                return MatSort;
            }(_MatSortMixinBase));
            MatSort.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[matSort]',
                            exportAs: 'matSort',
                            inputs: ['disabled: matSortDisabled']
                        },] },
            ];
            MatSort.propDecorators = {
                active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matSortActive',] }],
                start: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matSortStart',] }],
                direction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matSortDirection',] }],
                disableClear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matSortDisableClear',] }],
                sortChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"], args: ['matSortChange',] }]
            };
            /**
             * Returns the sort direction cycle to use given the provided parameters of order and clear.
             * @param {?} start
             * @param {?} disableClear
             * @return {?}
             */
            function getSortDirectionCycle(start, disableClear) {
                /** @type {?} */
                var sortOrder = ['asc', 'desc'];
                if (start == 'desc') {
                    sortOrder.reverse();
                }
                if (!disableClear) {
                    sortOrder.push('');
                }
                return sortOrder;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var SORT_ANIMATION_TRANSITION = _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["AnimationDurations"].ENTERING + ' ' +
                _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["AnimationCurves"].STANDARD_CURVE;
            /**
             * Animations used by MatSort.
             * \@docs-private
             * @type {?}
             */
            var matSortAnimations = {
                /**
                 * Animation that moves the sort indicator.
                 */
                indicator: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('indicator', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(0px)' })),
                    // 10px is the height of the sort indicator, minus the width of the pointers
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(10px)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(SORT_ANIMATION_TRANSITION))
                ]),
                /**
                 * Animation that rotates the left pointer of the indicator based on the sorting direction.
                 */
                leftPointer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('leftPointer', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'rotate(-45deg)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'rotate(45deg)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(SORT_ANIMATION_TRANSITION))
                ]),
                /**
                 * Animation that rotates the right pointer of the indicator based on the sorting direction.
                 */
                rightPointer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('rightPointer', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'rotate(45deg)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'rotate(-45deg)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(SORT_ANIMATION_TRANSITION))
                ]),
                /**
                 * Animation that controls the arrow opacity.
                 */
                arrowOpacity: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('arrowOpacity', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('desc-to-active, asc-to-active, active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ opacity: 1 })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('desc-to-hint, asc-to-hint, hint', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ opacity: .54 })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ opacity: 0 })),
                    // Transition between all states except for immediate transitions
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('* => asc, * => desc, * => active, * => hint, * => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])('0ms')),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('* <=> *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(SORT_ANIMATION_TRANSITION)),
                ]),
                /**
                 * Animation for the translation of the arrow as a whole. States are separated into two
                 * groups: ones with animations and others that are immediate. Immediate states are asc, desc,
                 * peek, and active. The other states define a specific animation (source-to-destination)
                 * and are determined as a function of their prev user-perceived state and what the next state
                 * should be.
                 */
                arrowPosition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('arrowPosition', [
                    // Hidden Above => Hint Center
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('* => desc-to-hint, * => desc-to-active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["keyframes"])([
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(-25%)' }),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(0)' })
                    ]))),
                    // Hint Center => Hidden Below
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('* => hint-to-desc, * => active-to-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["keyframes"])([
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(0)' }),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(25%)' })
                    ]))),
                    // Hidden Below => Hint Center
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('* => asc-to-hint, * => asc-to-active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["keyframes"])([
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(25%)' }),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(0)' })
                    ]))),
                    // Hint Center => Hidden Above
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('* => hint-to-asc, * => active-to-asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["keyframes"])([
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(0)' }),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(-25%)' })
                    ]))),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(0)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('hint-to-desc, active-to-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(-25%)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('hint-to-asc, active-to-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translateY(25%)' })),
                ]),
                /**
                 * Necessary trigger that calls animate on children animations.
                 */
                allowChildren: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('allowChildren', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('* <=> *', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["query"])('@*', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animateChild"])(), { optional: true })
                    ])
                ]),
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and
             * include it in a custom provider.
             */
            var MatSortHeaderIntl = /** @class */ (function () {
                function MatSortHeaderIntl() {
                    /**
                     * Stream that emits whenever the labels here are changed. Use this to notify
                     * components if the labels have changed after initialization.
                     */
                    this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
                    /**
                     * ARIA label for the sorting button.
                     */
                    this.sortButtonLabel = ( /**
                     * @param {?} id
                     * @return {?}
                     */function (id) {
                        return "Change sorting for " + id;
                    });
                }
                return MatSortHeaderIntl;
            }());
            MatSortHeaderIntl.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ MatSortHeaderIntl.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: "root" });
            /**
             * \@docs-private
             * @param {?} parentIntl
             * @return {?}
             */
            function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {
                return parentIntl || new MatSortHeaderIntl();
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_SORT_HEADER_INTL_PROVIDER = {
                // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.
                provide: MatSortHeaderIntl,
                deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"](), MatSortHeaderIntl]],
                useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Boilerplate for applying mixins to the sort header.
            /**
             * \@docs-private
             */
            var MatSortHeaderBase = /** @class */ (function () {
                function MatSortHeaderBase() {
                }
                return MatSortHeaderBase;
            }());
            /** @type {?} */
            var _MatSortHeaderMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinDisabled"])(MatSortHeaderBase);
            /**
             * Applies sorting behavior (click to change sort) and styles to an element, including an
             * arrow to display the current sort direction.
             *
             * Must be provided with an id and contained within a parent MatSort directive.
             *
             * If used on header cells in a CdkTable, it will automatically default its id from its containing
             * column definition.
             */
            var MatSortHeader = /** @class */ (function (_super) {
                __extends(MatSortHeader, _super);
                /**
                 * @param {?} _intl
                 * @param {?} changeDetectorRef
                 * @param {?} _sort
                 * @param {?} _columnDef
                 */
                function MatSortHeader(_intl, changeDetectorRef, _sort, _columnDef) {
                    var _this = 
                    // Note that we use a string token for the `_columnDef`, because the value is provided both by
                    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,
                    // and we want to avoid having the sort header depending on the CDK table because
                    // of this single reference.
                    _super.call(this) || this;
                    _this._intl = _intl;
                    _this._sort = _sort;
                    _this._columnDef = _columnDef;
                    /**
                     * Flag set to true when the indicator should be displayed while the sort is not active. Used to
                     * provide an affordance that the header is sortable by showing on focus and hover.
                     */
                    _this._showIndicatorHint = false;
                    /**
                     * The direction the arrow should be facing according to the current state.
                     */
                    _this._arrowDirection = '';
                    /**
                     * Whether the view state animation should show the transition between the `from` and `to` states.
                     */
                    _this._disableViewStateAnimation = false;
                    /**
                     * Sets the position of the arrow that displays when sorted.
                     */
                    _this.arrowPosition = 'after';
                    if (!_sort) {
                        throw getSortHeaderNotContainedWithinSortError();
                    }
                    _this._rerenderSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["merge"])(_sort.sortChange, _sort._stateChanges, _intl.changes)
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        if (_this._isSorted()) {
                            _this._updateArrowDirection();
                        }
                        // If this header was recently active and now no longer sorted, animate away the arrow.
                        if (!_this._isSorted() && _this._viewState && _this._viewState.toState === 'active') {
                            _this._disableViewStateAnimation = false;
                            _this._setAnimationTransitionState({ fromState: 'active', toState: _this._arrowDirection });
                        }
                        changeDetectorRef.markForCheck();
                    }));
                    return _this;
                }
                Object.defineProperty(MatSortHeader.prototype, "disableClear", {
                    /**
                     * Overrides the disable clear value of the containing MatSort for this MatSortable.
                     * @return {?}
                     */
                    get: function () { return this._disableClear; },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) { this._disableClear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(v); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatSortHeader.prototype.ngOnInit = function () {
                    if (!this.id && this._columnDef) {
                        this.id = this._columnDef.name;
                    }
                    // Initialize the direction of the arrow and set the view state to be immediately that state.
                    this._updateArrowDirection();
                    this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });
                    this._sort.register(this);
                };
                /**
                 * @return {?}
                 */
                MatSortHeader.prototype.ngOnDestroy = function () {
                    this._sort.deregister(this);
                    this._rerenderSubscription.unsubscribe();
                };
                /**
                 * Sets the "hint" state such that the arrow will be semi-transparently displayed as a hint to the
                 * user showing what the active sort will become. If set to false, the arrow will fade away.
                 * @param {?} visible
                 * @return {?}
                 */
                MatSortHeader.prototype._setIndicatorHintVisible = function (visible) {
                    // No-op if the sort header is disabled - should not make the hint visible.
                    if (this._isDisabled() && visible) {
                        return;
                    }
                    this._showIndicatorHint = visible;
                    if (!this._isSorted()) {
                        this._updateArrowDirection();
                        if (this._showIndicatorHint) {
                            this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });
                        }
                        else {
                            this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });
                        }
                    }
                };
                /**
                 * Sets the animation transition view state for the arrow's position and opacity. If the
                 * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that
                 * no animation appears.
                 * @param {?} viewState
                 * @return {?}
                 */
                MatSortHeader.prototype._setAnimationTransitionState = function (viewState) {
                    this._viewState = viewState;
                    // If the animation for arrow position state (opacity/translation) should be disabled,
                    // remove the fromState so that it jumps right to the toState.
                    if (this._disableViewStateAnimation) {
                        this._viewState = { toState: viewState.toState };
                    }
                };
                /**
                 * Triggers the sort on this sort header and removes the indicator hint.
                 * @return {?}
                 */
                MatSortHeader.prototype._handleClick = function () {
                    if (this._isDisabled()) {
                        return;
                    }
                    this._sort.sort(this);
                    // Do not show the animation if the header was already shown in the right position.
                    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {
                        this._disableViewStateAnimation = true;
                    }
                    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into
                    // the direction it is facing.
                    /** @type {?} */
                    var viewState = this._isSorted() ?
                        { fromState: this._arrowDirection, toState: 'active' } :
                        { fromState: 'active', toState: this._arrowDirection };
                    this._setAnimationTransitionState(viewState);
                    this._showIndicatorHint = false;
                };
                /**
                 * Whether this MatSortHeader is currently sorted in either ascending or descending order.
                 * @return {?}
                 */
                MatSortHeader.prototype._isSorted = function () {
                    return this._sort.active == this.id &&
                        (this._sort.direction === 'asc' || this._sort.direction === 'desc');
                };
                /**
                 * Returns the animation state for the arrow direction (indicator and pointers).
                 * @return {?}
                 */
                MatSortHeader.prototype._getArrowDirectionState = function () {
                    return "" + (this._isSorted() ? 'active-' : '') + this._arrowDirection;
                };
                /**
                 * Returns the arrow position state (opacity, translation).
                 * @return {?}
                 */
                MatSortHeader.prototype._getArrowViewState = function () {
                    /** @type {?} */
                    var fromState = this._viewState.fromState;
                    return (fromState ? fromState + "-to-" : '') + this._viewState.toState;
                };
                /**
                 * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be
                 * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently
                 * active sorted direction. The reason this is updated through a function is because the direction
                 * should only be changed at specific times - when deactivated but the hint is displayed and when
                 * the sort is active and the direction changes. Otherwise the arrow's direction should linger
                 * in cases such as the sort becoming deactivated but we want to animate the arrow away while
                 * preserving its direction, even though the next sort direction is actually different and should
                 * only be changed once the arrow displays again (hint or activation).
                 * @return {?}
                 */
                MatSortHeader.prototype._updateArrowDirection = function () {
                    this._arrowDirection = this._isSorted() ?
                        this._sort.direction :
                        (this.start || this._sort.start);
                };
                /**
                 * @return {?}
                 */
                MatSortHeader.prototype._isDisabled = function () {
                    return this._sort.disabled || this.disabled;
                };
                /**
                 * Gets the aria-sort attribute that should be applied to this sort header. If this header
                 * is not sorted, returns null so that the attribute is removed from the host element. Aria spec
                 * says that the aria-sort property should only be present on one header at a time, so removing
                 * ensures this is true.
                 * @return {?}
                 */
                MatSortHeader.prototype._getAriaSortAttribute = function () {
                    if (!this._isSorted()) {
                        return null;
                    }
                    return this._sort.direction == 'asc' ? 'ascending' : 'descending';
                };
                /**
                 * Whether the arrow inside the sort header should be rendered.
                 * @return {?}
                 */
                MatSortHeader.prototype._renderArrow = function () {
                    return !this._isDisabled() || this._isSorted();
                };
                return MatSortHeader;
            }(_MatSortHeaderMixinBase));
            MatSortHeader.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: '[mat-sort-header]',
                            exportAs: 'matSortHeader',
                            template: "<div class=\"mat-sort-header-container\" [class.mat-sort-header-sorted]=\"_isSorted()\" [class.mat-sort-header-position-before]=\"arrowPosition == 'before'\"><button class=\"mat-sort-header-button\" type=\"button\" [attr.disabled]=\"_isDisabled() || null\" [attr.aria-label]=\"_intl.sortButtonLabel(id)\" (focus)=\"_setIndicatorHintVisible(true)\" (blur)=\"_setIndicatorHintVisible(false)\"><ng-content></ng-content></button><div class=\"mat-sort-header-arrow\" *ngIf=\"_renderArrow()\" [@arrowOpacity]=\"_getArrowViewState()\" [@arrowPosition]=\"_getArrowViewState()\" [@allowChildren]=\"_getArrowDirectionState()\" (@arrowPosition.start)=\"_disableViewStateAnimation = true\" (@arrowPosition.done)=\"_disableViewStateAnimation = false\"><div class=\"mat-sort-header-stem\"></div><div class=\"mat-sort-header-indicator\" [@indicator]=\"_getArrowDirectionState()\"><div class=\"mat-sort-header-pointer-left\" [@leftPointer]=\"_getArrowDirectionState()\"></div><div class=\"mat-sort-header-pointer-right\" [@rightPointer]=\"_getArrowDirectionState()\"></div><div class=\"mat-sort-header-pointer-middle\"></div></div></div></div>",
                            styles: [".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}"],
                            host: {
                                '(click)': '_handleClick()',
                                '(mouseenter)': '_setIndicatorHintVisible(true)',
                                '(mouseleave)': '_setIndicatorHintVisible(false)',
                                '[attr.aria-sort]': '_getAriaSortAttribute()',
                                '[class.mat-sort-header-disabled]': '_isDisabled()',
                            },
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                            inputs: ['disabled'],
                            animations: [
                                matSortAnimations.indicator,
                                matSortAnimations.leftPointer,
                                matSortAnimations.rightPointer,
                                matSortAnimations.arrowOpacity,
                                matSortAnimations.arrowPosition,
                                matSortAnimations.allowChildren,
                            ]
                        },] },
            ];
            /** @nocollapse */
            MatSortHeader.ctorParameters = function () { return [
                { type: MatSortHeaderIntl },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
                { type: MatSort, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] }
            ]; };
            MatSortHeader.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['mat-sort-header',] }],
                arrowPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                start: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                disableClear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatSortModule = /** @class */ (function () {
                function MatSortModule() {
                }
                return MatSortModule;
            }());
            MatSortModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]],
                            exports: [MatSort, MatSortHeader],
                            declarations: [MatSort, MatSortHeader],
                            providers: [MAT_SORT_HEADER_INTL_PROVIDER]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=sort.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/stepper.js": 
        /*!***********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/stepper.js ***!
          \***********************************************************/
        /*! exports provided: MatStepperModule, MatStepLabel, MatStep, MatStepper, MatHorizontalStepper, MatVerticalStepper, MatStepperNext, MatStepperPrevious, MatStepHeader, MAT_STEPPER_INTL_PROVIDER_FACTORY, MatStepperIntl, MAT_STEPPER_INTL_PROVIDER, matStepperAnimations, MatStepperIcon */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatStepperModule", function () { return MatStepperModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatStepLabel", function () { return MatStepLabel; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatStep", function () { return MatStep; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatStepper", function () { return MatStepper; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatHorizontalStepper", function () { return MatHorizontalStepper; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatVerticalStepper", function () { return MatVerticalStepper; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatStepperNext", function () { return MatStepperNext; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatStepperPrevious", function () { return MatStepperPrevious; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatStepHeader", function () { return MatStepHeader; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_STEPPER_INTL_PROVIDER_FACTORY", function () { return MAT_STEPPER_INTL_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatStepperIntl", function () { return MatStepperIntl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_STEPPER_INTL_PROVIDER", function () { return MAT_STEPPER_INTL_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matStepperAnimations", function () { return matStepperAnimations; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatStepperIcon", function () { return MatStepperIcon; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/stepper */ "./node_modules/@angular/cdk/esm2015/stepper.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm2015/button.js");
            /* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/icon */ "./node_modules/@angular/material/esm2015/icon.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatStepLabel = /** @class */ (function (_super) {
                __extends(MatStepLabel, _super);
                function MatStepLabel() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatStepLabel;
            }(_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__["CdkStepLabel"]));
            MatStepLabel.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[matStepLabel]',
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Stepper data that is required for internationalization.
             */
            var MatStepperIntl = /** @class */ (function () {
                function MatStepperIntl() {
                    /**
                     * Stream that emits whenever the labels here are changed. Use this to notify
                     * components if the labels have changed after initialization.
                     */
                    this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Label that is rendered below optional steps.
                     */
                    this.optionalLabel = 'Optional';
                }
                return MatStepperIntl;
            }());
            MatStepperIntl.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ MatStepperIntl.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function MatStepperIntl_Factory() { return new MatStepperIntl(); }, token: MatStepperIntl, providedIn: "root" });
            /**
             * \@docs-private
             * @param {?} parentIntl
             * @return {?}
             */
            function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl) {
                return parentIntl || new MatStepperIntl();
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_STEPPER_INTL_PROVIDER = {
                provide: MatStepperIntl,
                deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"](), MatStepperIntl]],
                useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatStepHeader = /** @class */ (function (_super) {
                __extends(MatStepHeader, _super);
                /**
                 * @param {?} _intl
                 * @param {?} _focusMonitor
                 * @param {?} _elementRef
                 * @param {?} changeDetectorRef
                 */
                function MatStepHeader(_intl, _focusMonitor, _elementRef, changeDetectorRef) {
                    var _this = _super.call(this, _elementRef) || this;
                    _this._intl = _intl;
                    _this._focusMonitor = _focusMonitor;
                    _focusMonitor.monitor(_elementRef, true);
                    _this._intlSubscription = _intl.changes.subscribe(( /**
                     * @return {?}
                     */function () { return changeDetectorRef.markForCheck(); }));
                    return _this;
                }
                /**
                 * @return {?}
                 */
                MatStepHeader.prototype.ngOnDestroy = function () {
                    this._intlSubscription.unsubscribe();
                    this._focusMonitor.stopMonitoring(this._elementRef);
                };
                /**
                 * Focuses the step header.
                 * @return {?}
                 */
                MatStepHeader.prototype.focus = function () {
                    this._focusMonitor.focusVia(this._elementRef, 'program');
                };
                /**
                 * Returns string label of given step if it is a text label.
                 * @return {?}
                 */
                MatStepHeader.prototype._stringLabel = function () {
                    return this.label instanceof MatStepLabel ? null : this.label;
                };
                /**
                 * Returns MatStepLabel if the label of given step is a template label.
                 * @return {?}
                 */
                MatStepHeader.prototype._templateLabel = function () {
                    return this.label instanceof MatStepLabel ? this.label : null;
                };
                /**
                 * Returns the host HTML element.
                 * @return {?}
                 */
                MatStepHeader.prototype._getHostElement = function () {
                    return this._elementRef.nativeElement;
                };
                /**
                 * Template context variables that are exposed to the `matStepperIcon` instances.
                 * @return {?}
                 */
                MatStepHeader.prototype._getIconContext = function () {
                    return {
                        index: this.index,
                        active: this.active,
                        optional: this.optional
                    };
                };
                /**
                 * @param {?} state
                 * @return {?}
                 */
                MatStepHeader.prototype._getDefaultTextForState = function (state$$1) {
                    if (state$$1 == 'number') {
                        return "" + (this.index + 1);
                    }
                    if (state$$1 == 'edit') {
                        return 'create';
                    }
                    if (state$$1 == 'error') {
                        return 'warning';
                    }
                    return state$$1;
                };
                return MatStepHeader;
            }(_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__["CdkStepHeader"]));
            MatStepHeader.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-step-header',
                            template: "<div class=\"mat-step-header-ripple\" matRipple [matRippleTrigger]=\"_getHostElement()\" [matRippleDisabled]=\"disableRipple\"></div><div class=\"mat-step-icon-state-{{state}} mat-step-icon\" [class.mat-step-icon-selected]=\"selected\"><div class=\"mat-step-icon-content\" [ngSwitch]=\"!!(iconOverrides && iconOverrides[state])\"><ng-container *ngSwitchCase=\"true\" [ngTemplateOutlet]=\"iconOverrides[state]\" [ngTemplateOutletContext]=\"_getIconContext()\"></ng-container><ng-container *ngSwitchDefault [ngSwitch]=\"state\"><span *ngSwitchCase=\"'number'\">{{_getDefaultTextForState(state)}}</span><mat-icon *ngSwitchDefault>{{_getDefaultTextForState(state)}}</mat-icon></ng-container></div></div><div class=\"mat-step-label\" [class.mat-step-label-active]=\"active\" [class.mat-step-label-selected]=\"selected\" [class.mat-step-label-error]=\"state == 'error'\"><ng-container *ngIf=\"_templateLabel()\" [ngTemplateOutlet]=\"_templateLabel()!.template\"></ng-container><div class=\"mat-step-text-label\" *ngIf=\"_stringLabel()\">{{label}}</div><div class=\"mat-step-optional\" *ngIf=\"optional && state != 'error'\">{{_intl.optionalLabel}}</div><div class=\"mat-step-sub-label-error\" *ngIf=\"state == 'error'\">{{errorMessage}}</div></div>",
                            styles: [".mat-step-header{overflow:hidden;outline:0;cursor:pointer;position:relative;box-sizing:content-box;-webkit-tap-highlight-color:transparent}.mat-step-optional,.mat-step-sub-label-error{font-size:12px}.mat-step-icon{border-radius:50%;height:24px;width:24px;flex-shrink:0;position:relative}.mat-step-icon .mat-icon,.mat-step-icon-content{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.mat-step-icon .mat-icon{font-size:16px;height:16px;width:16px}.mat-step-icon-state-error .mat-icon{font-size:24px;height:24px;width:24px}.mat-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle}.mat-step-text-label{text-overflow:ellipsis;overflow:hidden}.mat-step-header .mat-step-header-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}"],
                            host: {
                                'class': 'mat-step-header',
                                'role': 'tab',
                            },
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatStepHeader.ctorParameters = function () { return [
                { type: MatStepperIntl },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__["FocusMonitor"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
            ]; };
            MatStepHeader.propDecorators = {
                state: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                errorMessage: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                iconOverrides: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                index: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                optional: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                disableRipple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Animations used by the Material steppers.
             * \@docs-private
             * @type {?}
             */
            var matStepperAnimations = {
                /**
                 * Animation that transitions the step along the X axis in a horizontal stepper.
                 */
                horizontalStepTransition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('stepTransition', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('previous', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('current', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'none', visibility: 'visible' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('next', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('* => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])('500ms cubic-bezier(0.35, 0, 0.25, 1)'))
                ]),
                /**
                 * Animation that transitions the step along the Y axis in a vertical stepper.
                 */
                verticalStepTransition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('stepTransition', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('previous', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ height: '0px', visibility: 'hidden' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('next', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ height: '0px', visibility: 'hidden' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('current', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ height: '*', visibility: 'visible' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('* <=> current', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))
                ])
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Template to be used to override the icons inside the step header.
             */
            var MatStepperIcon = /** @class */ (function () {
                /**
                 * @param {?} templateRef
                 */
                function MatStepperIcon(templateRef) {
                    this.templateRef = templateRef;
                }
                return MatStepperIcon;
            }());
            MatStepperIcon.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'ng-template[matStepperIcon]',
                        },] },
            ];
            /** @nocollapse */
            MatStepperIcon.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }
            ]; };
            MatStepperIcon.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['matStepperIcon',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatStep = /** @class */ (function (_super) {
                __extends(MatStep, _super);
                /**
                 * \@breaking-change 8.0.0 remove the `?` after `stepperOptions`
                 * @param {?} stepper
                 * @param {?} _errorStateMatcher
                 * @param {?=} stepperOptions
                 */
                function MatStep(stepper, _errorStateMatcher, stepperOptions) {
                    var _this = _super.call(this, stepper, stepperOptions) || this;
                    _this._errorStateMatcher = _errorStateMatcher;
                    return _this;
                }
                /**
                 * Custom error state matcher that additionally checks for validity of interacted form.
                 * @param {?} control
                 * @param {?} form
                 * @return {?}
                 */
                MatStep.prototype.isErrorState = function (control, form) {
                    /** @type {?} */
                    var originalErrorState = this._errorStateMatcher.isErrorState(control, form);
                    // Custom error state checks for the validity of form that is not submitted or touched
                    // since user can trigger a form change by calling for another step without directly
                    // interacting with the current form.
                    /** @type {?} */
                    var customErrorState = !!(control && control.invalid && this.interacted);
                    return originalErrorState || customErrorState;
                };
                return MatStep;
            }(_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__["CdkStep"]));
            MatStep.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-step',
                            template: "<ng-template><ng-content></ng-content></ng-template>",
                            providers: [{ provide: _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["ErrorStateMatcher"], useExisting: MatStep }],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            exportAs: 'matStep',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatStep.ctorParameters = function () { return [
                { type: MatStepper, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                                                 * @return {?}
                                                 */function () { return MatStepper; })),] }] },
                { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["ErrorStateMatcher"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__["STEPPER_GLOBAL_OPTIONS"],] }] }
            ]; };
            MatStep.propDecorators = {
                stepLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatStepLabel, { static: false },] }]
            };
            var MatStepper = /** @class */ (function (_super) {
                __extends(MatStepper, _super);
                function MatStepper() {
                    var _this = _super.apply(this, arguments) || this;
                    /**
                     * Event emitted when the current step is done transitioning in.
                     */
                    _this.animationDone = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Consumer-specified template-refs to be used to override the header icons.
                     */
                    _this._iconOverrides = {};
                    /**
                     * Stream of animation `done` events when the body expands/collapses.
                     */
                    _this._animationDone = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    return _this;
                }
                /**
                 * @return {?}
                 */
                MatStepper.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._icons.forEach(( /**
                     * @param {?} __0
                     * @return {?}
                     */function (_b) {
                        var name = _b.name, templateRef = _b.templateRef;
                        return _this._iconOverrides[name] = templateRef;
                    }));
                    // Mark the component for change detection whenever the content children query changes
                    this._steps.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @return {?}
                     */function () { return _this._stateChanged(); }));
                    this._animationDone.pipe(
                    // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due
                    // to a bug in animations where the `.done` callback gets invoked twice on some browsers.
                    // See https://github.com/angular/angular/issues/24084
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["distinctUntilChanged"])(( /**
                     * @param {?} x
                     * @param {?} y
                     * @return {?}
                     */function (x, y) { return x.fromState === y.fromState && x.toState === y.toState; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        if ((( /** @type {?} */(event.toState))) === 'current') {
                            _this.animationDone.emit();
                        }
                    }));
                };
                return MatStepper;
            }(_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__["CdkStepper"]));
            MatStepper.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: '[matStepper]', providers: [{ provide: _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__["CdkStepper"], useExisting: MatStepper }] },] },
            ];
            MatStepper.propDecorators = {
                _stepHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChildren"], args: [MatStepHeader,] }],
                _steps: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatStep,] }],
                _icons: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatStepperIcon,] }],
                animationDone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                disableRipple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            var MatHorizontalStepper = /** @class */ (function (_super) {
                __extends(MatHorizontalStepper, _super);
                function MatHorizontalStepper() {
                    var _this = _super.apply(this, arguments) || this;
                    /**
                     * Whether the label should display in bottom or end position.
                     */
                    _this.labelPosition = 'end';
                    return _this;
                }
                return MatHorizontalStepper;
            }(MatStepper));
            MatHorizontalStepper.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-horizontal-stepper',
                            exportAs: 'matHorizontalStepper',
                            template: "<div class=\"mat-horizontal-stepper-header-container\"><ng-container *ngFor=\"let step of steps; let i = index; let isLast = last\"><mat-step-header class=\"mat-horizontal-stepper-header\" (click)=\"step.select()\" (keydown)=\"_onKeydown($event)\" [tabIndex]=\"_getFocusIndex() === i ? 0 : -1\" [id]=\"_getStepLabelId(i)\" [attr.aria-posinset]=\"i + 1\" [attr.aria-setsize]=\"steps.length\" [attr.aria-controls]=\"_getStepContentId(i)\" [attr.aria-selected]=\"selectedIndex == i\" [attr.aria-label]=\"step.ariaLabel || null\" [attr.aria-labelledby]=\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\" [index]=\"i\" [state]=\"_getIndicatorType(i, step.state)\" [label]=\"step.stepLabel || step.label\" [selected]=\"selectedIndex === i\" [active]=\"step.completed || selectedIndex === i || !linear\" [optional]=\"step.optional\" [errorMessage]=\"step.errorMessage\" [iconOverrides]=\"_iconOverrides\" [disableRipple]=\"disableRipple\"></mat-step-header><div *ngIf=\"!isLast\" class=\"mat-stepper-horizontal-line\"></div></ng-container></div><div class=\"mat-horizontal-content-container\"><div *ngFor=\"let step of steps; let i = index\" [attr.tabindex]=\"selectedIndex === i ? 0 : null\" class=\"mat-horizontal-stepper-content\" role=\"tabpanel\" [@stepTransition]=\"_getAnimationDirection(i)\" (@stepTransition.done)=\"_animationDone.next($event)\" [id]=\"_getStepContentId(i)\" [attr.aria-labelledby]=\"_getStepLabelId(i)\" [attr.aria-expanded]=\"selectedIndex === i\"><ng-container [ngTemplateOutlet]=\"step.content\"></ng-container></div></div>",
                            styles: [".mat-stepper-horizontal,.mat-stepper-vertical{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative;top:36px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{border-top-width:1px;border-top-style:solid;content:'';display:inline-block;height:0;position:absolute;top:36px;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto;padding:24px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;padding:24px;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:'';position:absolute;top:-16px;bottom:-16px;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}"],
                            inputs: ['selectedIndex'],
                            host: {
                                'class': 'mat-stepper-horizontal',
                                '[class.mat-stepper-label-position-end]': 'labelPosition == "end"',
                                '[class.mat-stepper-label-position-bottom]': 'labelPosition == "bottom"',
                                'aria-orientation': 'horizontal',
                                'role': 'tablist',
                            },
                            animations: [matStepperAnimations.horizontalStepTransition],
                            providers: [
                                { provide: MatStepper, useExisting: MatHorizontalStepper },
                                { provide: _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__["CdkStepper"], useExisting: MatHorizontalStepper }
                            ],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            MatHorizontalStepper.propDecorators = {
                labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            var MatVerticalStepper = /** @class */ (function (_super) {
                __extends(MatVerticalStepper, _super);
                /**
                 * @param {?} dir
                 * @param {?} changeDetectorRef
                 * @param {?=} elementRef
                 * @param {?=} _document
                 */
                function MatVerticalStepper(dir, changeDetectorRef, 
                // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.
                elementRef, _document) {
                    var _this = _super.call(this, dir, changeDetectorRef, elementRef, _document) || this;
                    _this._orientation = 'vertical';
                    return _this;
                }
                return MatVerticalStepper;
            }(MatStepper));
            MatVerticalStepper.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-vertical-stepper',
                            exportAs: 'matVerticalStepper',
                            template: "<div class=\"mat-step\" *ngFor=\"let step of steps; let i = index; let isLast = last\"><mat-step-header class=\"mat-vertical-stepper-header\" (click)=\"step.select()\" (keydown)=\"_onKeydown($event)\" [tabIndex]=\"_getFocusIndex() == i ? 0 : -1\" [id]=\"_getStepLabelId(i)\" [attr.aria-posinset]=\"i + 1\" [attr.aria-setsize]=\"steps.length\" [attr.aria-controls]=\"_getStepContentId(i)\" [attr.aria-selected]=\"selectedIndex === i\" [attr.aria-label]=\"step.ariaLabel || null\" [attr.aria-labelledby]=\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\" [index]=\"i\" [state]=\"_getIndicatorType(i, step.state)\" [label]=\"step.stepLabel || step.label\" [selected]=\"selectedIndex === i\" [active]=\"step.completed || selectedIndex === i || !linear\" [optional]=\"step.optional\" [errorMessage]=\"step.errorMessage\" [iconOverrides]=\"_iconOverrides\" [disableRipple]=\"disableRipple\"></mat-step-header><div class=\"mat-vertical-content-container\" [class.mat-stepper-vertical-line]=\"!isLast\"><div class=\"mat-vertical-stepper-content\" role=\"tabpanel\" [attr.tabindex]=\"selectedIndex === i ? 0 : null\" [@stepTransition]=\"_getAnimationDirection(i)\" (@stepTransition.done)=\"_animationDone.next($event)\" [id]=\"_getStepContentId(i)\" [attr.aria-labelledby]=\"_getStepLabelId(i)\" [attr.aria-expanded]=\"selectedIndex === i\"><div class=\"mat-vertical-content\"><ng-container [ngTemplateOutlet]=\"step.content\"></ng-container></div></div></div></div>",
                            styles: [".mat-stepper-horizontal,.mat-stepper-vertical{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative;top:36px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{border-top-width:1px;border-top-style:solid;content:'';display:inline-block;height:0;position:absolute;top:36px;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto;padding:24px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;padding:24px;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:'';position:absolute;top:-16px;bottom:-16px;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}"],
                            inputs: ['selectedIndex'],
                            host: {
                                'class': 'mat-stepper-vertical',
                                'aria-orientation': 'vertical',
                                'role': 'tablist',
                            },
                            animations: [matStepperAnimations.verticalStepTransition],
                            providers: [
                                { provide: MatStepper, useExisting: MatVerticalStepper },
                                { provide: _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__["CdkStepper"], useExisting: MatVerticalStepper }
                            ],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatVerticalStepper.ctorParameters = function () { return [
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["DOCUMENT"],] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Button that moves to the next step in a stepper workflow.
             */
            var MatStepperNext = /** @class */ (function (_super) {
                __extends(MatStepperNext, _super);
                function MatStepperNext() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatStepperNext;
            }(_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__["CdkStepperNext"]));
            MatStepperNext.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'button[matStepperNext]',
                            host: {
                                '[type]': 'type',
                            },
                            inputs: ['type']
                        },] },
            ];
            /**
             * Button that moves to the previous step in a stepper workflow.
             */
            var MatStepperPrevious = /** @class */ (function (_super) {
                __extends(MatStepperPrevious, _super);
                function MatStepperPrevious() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatStepperPrevious;
            }(_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__["CdkStepperPrevious"]));
            MatStepperPrevious.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'button[matStepperPrevious]',
                            host: {
                                '[type]': 'type',
                            },
                            inputs: ['type']
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatStepperModule = /** @class */ (function () {
                function MatStepperModule() {
                }
                return MatStepperModule;
            }());
            MatStepperModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatCommonModule"],
                                _angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"],
                                _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__["PortalModule"],
                                _angular_material_button__WEBPACK_IMPORTED_MODULE_10__["MatButtonModule"],
                                _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__["CdkStepperModule"],
                                _angular_material_icon__WEBPACK_IMPORTED_MODULE_11__["MatIconModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatRippleModule"],
                            ],
                            exports: [
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatCommonModule"],
                                MatHorizontalStepper,
                                MatVerticalStepper,
                                MatStep,
                                MatStepLabel,
                                MatStepper,
                                MatStepperNext,
                                MatStepperPrevious,
                                MatStepHeader,
                                MatStepperIcon,
                            ],
                            declarations: [
                                MatHorizontalStepper,
                                MatVerticalStepper,
                                MatStep,
                                MatStepLabel,
                                MatStepper,
                                MatStepperNext,
                                MatStepperPrevious,
                                MatStepHeader,
                                MatStepperIcon,
                            ],
                            providers: [MAT_STEPPER_INTL_PROVIDER, _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["ErrorStateMatcher"]],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=stepper.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/table.js": 
        /*!*********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/table.js ***!
          \*********************************************************/
        /*! exports provided: MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource, MatTextColumn */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTableModule", function () { return MatTableModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCellDef", function () { return MatCellDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatHeaderCellDef", function () { return MatHeaderCellDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatFooterCellDef", function () { return MatFooterCellDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatColumnDef", function () { return MatColumnDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatHeaderCell", function () { return MatHeaderCell; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatFooterCell", function () { return MatFooterCell; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatCell", function () { return MatCell; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTable", function () { return MatTable; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatHeaderRowDef", function () { return MatHeaderRowDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatFooterRowDef", function () { return MatFooterRowDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatRowDef", function () { return MatRowDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatHeaderRow", function () { return MatHeaderRow; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatFooterRow", function () { return MatFooterRow; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatRow", function () { return MatRow; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTableDataSource", function () { return MatTableDataSource; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTextColumn", function () { return MatTextColumn; });
            /* harmony import */ var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/table */ "./node_modules/@angular/cdk/esm2015/table.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Wrapper for the CdkTable with Material design styles.
             * @template T
             */
            var MatTable = /** @class */ (function (_super) {
                __extends(MatTable, _super);
                function MatTable() {
                    var _this = _super.apply(this, arguments) || this;
                    /**
                     * Overrides the sticky CSS class set by the `CdkTable`.
                     */
                    _this.stickyCssClass = 'mat-table-sticky';
                    return _this;
                }
                return MatTable;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkTable"]));
            MatTable.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'mat-table, table[mat-table]',
                            exportAs: 'matTable',
                            template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CDK_TABLE_TEMPLATE"],
                            styles: ["mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type,th.mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type,[dir=rtl] th.mat-header-cell:first-of-type{padding-left:0;padding-right:24px}td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type,th.mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type,[dir=rtl] th.mat-header-cell:last-of-type{padding-right:0;padding-left:24px}"],
                            host: {
                                'class': 'mat-table',
                            },
                            providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkTable"], useExisting: MatTable }],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            // See note on CdkTable for explanation on why this uses the default change detection strategy.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Cell definition for the mat-table.
             * Captures the template of a column's data row cell as well as cell-specific properties.
             */
            var MatCellDef = /** @class */ (function (_super) {
                __extends(MatCellDef, _super);
                function MatCellDef() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatCellDef;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkCellDef"]));
            MatCellDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[matCellDef]',
                            providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkCellDef"], useExisting: MatCellDef }]
                        },] },
            ];
            /**
             * Header cell definition for the mat-table.
             * Captures the template of a column's header cell and as well as cell-specific properties.
             */
            var MatHeaderCellDef = /** @class */ (function (_super) {
                __extends(MatHeaderCellDef, _super);
                function MatHeaderCellDef() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatHeaderCellDef;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkHeaderCellDef"]));
            MatHeaderCellDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[matHeaderCellDef]',
                            providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkHeaderCellDef"], useExisting: MatHeaderCellDef }]
                        },] },
            ];
            /**
             * Footer cell definition for the mat-table.
             * Captures the template of a column's footer cell and as well as cell-specific properties.
             */
            var MatFooterCellDef = /** @class */ (function (_super) {
                __extends(MatFooterCellDef, _super);
                function MatFooterCellDef() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatFooterCellDef;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkFooterCellDef"]));
            MatFooterCellDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[matFooterCellDef]',
                            providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkFooterCellDef"], useExisting: MatFooterCellDef }]
                        },] },
            ];
            /**
             * Column definition for the mat-table.
             * Defines a set of cells available for a table column.
             */
            var MatColumnDef = /** @class */ (function (_super) {
                __extends(MatColumnDef, _super);
                function MatColumnDef() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatColumnDef;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkColumnDef"]));
            MatColumnDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[matColumnDef]',
                            providers: [
                                { provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkColumnDef"], useExisting: MatColumnDef },
                                { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }
                            ],
                        },] },
            ];
            MatColumnDef.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matColumnDef',] }],
                sticky: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                stickyEnd: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * Header cell template container that adds the right classes and role.
             */
            var MatHeaderCell = /** @class */ (function (_super) {
                __extends(MatHeaderCell, _super);
                /**
                 * @param {?} columnDef
                 * @param {?} elementRef
                 */
                function MatHeaderCell(columnDef, elementRef) {
                    var _this = _super.call(this, columnDef, elementRef) || this;
                    elementRef.nativeElement.classList.add("mat-column-" + columnDef.cssClassFriendlyName);
                    return _this;
                }
                return MatHeaderCell;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkHeaderCell"]));
            MatHeaderCell.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'mat-header-cell, th[mat-header-cell]',
                            host: {
                                'class': 'mat-header-cell',
                                'role': 'columnheader',
                            },
                        },] },
            ];
            /** @nocollapse */
            MatHeaderCell.ctorParameters = function () { return [
                { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkColumnDef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * Footer cell template container that adds the right classes and role.
             */
            var MatFooterCell = /** @class */ (function (_super) {
                __extends(MatFooterCell, _super);
                /**
                 * @param {?} columnDef
                 * @param {?} elementRef
                 */
                function MatFooterCell(columnDef, elementRef) {
                    var _this = _super.call(this, columnDef, elementRef) || this;
                    elementRef.nativeElement.classList.add("mat-column-" + columnDef.cssClassFriendlyName);
                    return _this;
                }
                return MatFooterCell;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkFooterCell"]));
            MatFooterCell.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'mat-footer-cell, td[mat-footer-cell]',
                            host: {
                                'class': 'mat-footer-cell',
                                'role': 'gridcell',
                            },
                        },] },
            ];
            /** @nocollapse */
            MatFooterCell.ctorParameters = function () { return [
                { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkColumnDef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * Cell template container that adds the right classes and role.
             */
            var MatCell = /** @class */ (function (_super) {
                __extends(MatCell, _super);
                /**
                 * @param {?} columnDef
                 * @param {?} elementRef
                 */
                function MatCell(columnDef, elementRef) {
                    var _this = _super.call(this, columnDef, elementRef) || this;
                    elementRef.nativeElement.classList.add("mat-column-" + columnDef.cssClassFriendlyName);
                    return _this;
                }
                return MatCell;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkCell"]));
            MatCell.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'mat-cell, td[mat-cell]',
                            host: {
                                'class': 'mat-cell',
                                'role': 'gridcell',
                            },
                        },] },
            ];
            /** @nocollapse */
            MatCell.ctorParameters = function () { return [
                { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkColumnDef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Header row definition for the mat-table.
             * Captures the header row's template and other header properties such as the columns to display.
             */
            var MatHeaderRowDef = /** @class */ (function (_super) {
                __extends(MatHeaderRowDef, _super);
                function MatHeaderRowDef() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatHeaderRowDef;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkHeaderRowDef"]));
            MatHeaderRowDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[matHeaderRowDef]',
                            providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkHeaderRowDef"], useExisting: MatHeaderRowDef }],
                            inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],
                        },] },
            ];
            /**
             * Footer row definition for the mat-table.
             * Captures the footer row's template and other footer properties such as the columns to display.
             */
            var MatFooterRowDef = /** @class */ (function (_super) {
                __extends(MatFooterRowDef, _super);
                function MatFooterRowDef() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatFooterRowDef;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkFooterRowDef"]));
            MatFooterRowDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[matFooterRowDef]',
                            providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkFooterRowDef"], useExisting: MatFooterRowDef }],
                            inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],
                        },] },
            ];
            /**
             * Data row definition for the mat-table.
             * Captures the data row's template and other properties such as the columns to display and
             * a when predicate that describes when this row should be used.
             * @template T
             */
            var MatRowDef = /** @class */ (function (_super) {
                __extends(MatRowDef, _super);
                function MatRowDef() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatRowDef;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkRowDef"]));
            MatRowDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[matRowDef]',
                            providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkRowDef"], useExisting: MatRowDef }],
                            inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],
                        },] },
            ];
            /**
             * Footer template container that contains the cell outlet. Adds the right class and role.
             */
            var MatHeaderRow = /** @class */ (function (_super) {
                __extends(MatHeaderRow, _super);
                function MatHeaderRow() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatHeaderRow;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkHeaderRow"]));
            MatHeaderRow.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'mat-header-row, tr[mat-header-row]',
                            template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CDK_ROW_TEMPLATE"],
                            host: {
                                'class': 'mat-header-row',
                                'role': 'row',
                            },
                            // See note on CdkTable for explanation on why this uses the default change detection strategy.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            exportAs: 'matHeaderRow',
                            providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkHeaderRow"], useExisting: MatHeaderRow }],
                        },] },
            ];
            /**
             * Footer template container that contains the cell outlet. Adds the right class and role.
             */
            var MatFooterRow = /** @class */ (function (_super) {
                __extends(MatFooterRow, _super);
                function MatFooterRow() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatFooterRow;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkFooterRow"]));
            MatFooterRow.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'mat-footer-row, tr[mat-footer-row]',
                            template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CDK_ROW_TEMPLATE"],
                            host: {
                                'class': 'mat-footer-row',
                                'role': 'row',
                            },
                            // See note on CdkTable for explanation on why this uses the default change detection strategy.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            exportAs: 'matFooterRow',
                            providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkFooterRow"], useExisting: MatFooterRow }],
                        },] },
            ];
            /**
             * Data row template container that contains the cell outlet. Adds the right class and role.
             */
            var MatRow = /** @class */ (function (_super) {
                __extends(MatRow, _super);
                function MatRow() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatRow;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkRow"]));
            MatRow.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'mat-row, tr[mat-row]',
                            template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CDK_ROW_TEMPLATE"],
                            host: {
                                'class': 'mat-row',
                                'role': 'row',
                            },
                            // See note on CdkTable for explanation on why this uses the default change detection strategy.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            exportAs: 'matRow',
                            providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkRow"], useExisting: MatRow }],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Column that simply shows text content for the header and row cells. Assumes that the table
             * is using the native table implementation (`<table>`).
             *
             * By default, the name of this column will be the header text and data property accessor.
             * The header text can be overridden with the `headerText` input. Cell values can be overridden with
             * the `dataAccessor` input. Change the text justification to the start or end using the `justify`
             * input.
             * @template T
             */
            var MatTextColumn = /** @class */ (function (_super) {
                __extends(MatTextColumn, _super);
                function MatTextColumn() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatTextColumn;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkTextColumn"]));
            MatTextColumn.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'mat-text-column',
                            template: "\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  ",
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            // Change detection is intentionally not set to OnPush. This component's template will be provided
                            // to the table to be inserted into its view. This is problematic when change detection runs since
                            // the bindings in this template will be evaluated _after_ the table's view is evaluated, which
                            // mean's the template in the table's view will not have the updated value (and in fact will cause
                            // an ExpressionChangedAfterItHasBeenCheckedError).
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var EXPORTED_DECLARATIONS = [
                // Table
                MatTable,
                // Template defs
                MatHeaderCellDef,
                MatHeaderRowDef,
                MatColumnDef,
                MatCellDef,
                MatRowDef,
                MatFooterCellDef,
                MatFooterRowDef,
                // Cell directives
                MatHeaderCell,
                MatCell,
                MatFooterCell,
                // Row directives
                MatHeaderRow,
                MatRow,
                MatFooterRow,
                MatTextColumn,
            ];
            var MatTableModule = /** @class */ (function () {
                function MatTableModule() {
                }
                return MatTableModule;
            }());
            MatTableModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            imports: [
                                _angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["CdkTableModule"],
                                _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"],
                            ],
                            exports: EXPORTED_DECLARATIONS,
                            declarations: EXPORTED_DECLARATIONS,
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to
             * flaky browser support and the value not being defined in Closure's typings.
             * @type {?}
             */
            var MAX_SAFE_INTEGER = 9007199254740991;
            /**
             * Data source that accepts a client-side data array and includes native support of filtering,
             * sorting (using MatSort), and pagination (using MatPaginator).
             *
             * Allows for sort customization by overriding sortingDataAccessor, which defines how data
             * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,
             * which defines how row data is converted to a string for filter matching.
             *
             * **Note:** This class is meant to be a simple data source to help you get started. As such
             * it isn't equipped to handle some more advanced cases like robust i18n support or server-side
             * interactions. If your app needs to support more advanced use cases, consider implementing your
             * own `DataSource`.
             * @template T
             */
            var MatTableDataSource = /** @class */ (function (_super) {
                __extends(MatTableDataSource, _super);
                /**
                 * @param {?=} initialData
                 */
                function MatTableDataSource(initialData) {
                    if (initialData === void 0) { initialData = []; }
                    var _this = _super.call(this) || this;
                    /**
                     * Stream emitting render data to the table (depends on ordered data changes).
                     */
                    _this._renderData = new rxjs__WEBPACK_IMPORTED_MODULE_5__["BehaviorSubject"]([]);
                    /**
                     * Stream that emits when a new filter string is set on the data source.
                     */
                    _this._filter = new rxjs__WEBPACK_IMPORTED_MODULE_5__["BehaviorSubject"]('');
                    /**
                     * Used to react to internal changes of the paginator that are made by the data source itself.
                     */
                    _this._internalPageChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
                    /**
                     * Subscription to the changes that should trigger an update to the table's rendered rows, such
                     * as filtering, sorting, pagination, or base data changes.
                     */
                    _this._renderChangesSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
                    /**
                     * Data accessor function that is used for accessing data properties for sorting through
                     * the default sortData function.
                     * This default function assumes that the sort header IDs (which defaults to the column name)
                     * matches the data's properties (e.g. column Xyz represents data['Xyz']).
                     * May be set to a custom function for different behavior.
                     * @param data Data object that is being accessed.
                     * @param sortHeaderId The name of the column that represents the data.
                     */
                    _this.sortingDataAccessor = ( /**
                     * @param {?} data
                     * @param {?} sortHeaderId
                     * @return {?}
                     */function (data, sortHeaderId) {
                        /** @type {?} */
                        var value = (( /** @type {?} */(data)))[sortHeaderId];
                        if (Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["_isNumberValue"])(value)) {
                            /** @type {?} */
                            var numberValue = Number(value);
                            // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we
                            // leave them as strings. For more info: https://goo.gl/y5vbSg
                            return numberValue < MAX_SAFE_INTEGER ? numberValue : value;
                        }
                        return value;
                    });
                    /**
                     * Gets a sorted copy of the data array based on the state of the MatSort. Called
                     * after changes are made to the filtered data or when sort changes are emitted from MatSort.
                     * By default, the function retrieves the active sort and its direction and compares data
                     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation
                     * of data ordering.
                     * @param data The array of data that should be sorted.
                     * @param sort The connected MatSort that holds the current sort state.
                     */
                    _this.sortData = ( /**
                     * @param {?} data
                     * @param {?} sort
                     * @return {?}
                     */function (data, sort) {
                        /** @type {?} */
                        var active = sort.active;
                        /** @type {?} */
                        var direction = sort.direction;
                        if (!active || direction == '') {
                            return data;
                        }
                        return data.sort(( /**
                         * @param {?} a
                         * @param {?} b
                         * @return {?}
                         */function (a, b) {
                            /** @type {?} */
                            var valueA = _this.sortingDataAccessor(a, active);
                            /** @type {?} */
                            var valueB = _this.sortingDataAccessor(b, active);
                            // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if
                            // one value exists while the other doesn't. In this case, existing value should come last.
                            // This avoids inconsistent results when comparing values to undefined/null.
                            // If neither value exists, return 0 (equal).
                            /** @type {?} */
                            var comparatorResult = 0;
                            if (valueA != null && valueB != null) {
                                // Check if one value is greater than the other; if equal, comparatorResult should remain 0.
                                if (valueA > valueB) {
                                    comparatorResult = 1;
                                }
                                else if (valueA < valueB) {
                                    comparatorResult = -1;
                                }
                            }
                            else if (valueA != null) {
                                comparatorResult = 1;
                            }
                            else if (valueB != null) {
                                comparatorResult = -1;
                            }
                            return comparatorResult * (direction == 'asc' ? 1 : -1);
                        }));
                    });
                    /**
                     * Checks if a data object matches the data source's filter string. By default, each data object
                     * is converted to a string of its properties and returns true if the filter has
                     * at least one occurrence in that string. By default, the filter string has its whitespace
                     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of
                     * filter matching.
                     * @param data Data object used to check against the filter.
                     * @param filter Filter string that has been set on the data source.
                     * @return Whether the filter matches against the data
                     */
                    _this.filterPredicate = ( /**
                     * @param {?} data
                     * @param {?} filter
                     * @return {?}
                     */function (data, filter) {
                        // Transform the data into a lowercase string of all property values.
                        /** @type {?} */
                        var dataStr = Object.keys(data).reduce(( /**
                         * @param {?} currentTerm
                         * @param {?} key
                         * @return {?}
                         */function (currentTerm, key) {
                            // Use an obscure Unicode character to delimit the words in the concatenated string.
                            // This avoids matches where the values of two columns combined will match the user's query
                            // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something
                            // that has a very low chance of being typed in by somebody in a text field. This one in
                            // particular is "White up-pointing triangle with dot" from
                            // https://en.wikipedia.org/wiki/List_of_Unicode_characters
                            return currentTerm + (( /** @type {?} */(data)))[key] + '◬';
                        }), '').toLowerCase();
                        // Transform the filter by converting it to lowercase and removing whitespace.
                        /** @type {?} */
                        var transformedFilter = filter.trim().toLowerCase();
                        return dataStr.indexOf(transformedFilter) != -1;
                    });
                    _this._data = new rxjs__WEBPACK_IMPORTED_MODULE_5__["BehaviorSubject"](initialData);
                    _this._updateChangeSubscription();
                    return _this;
                }
                Object.defineProperty(MatTableDataSource.prototype, "data", {
                    /**
                     * Array of data that should be rendered by the table, where each object represents one row.
                     * @return {?}
                     */
                    get: function () { return this._data.value; },
                    /**
                     * @param {?} data
                     * @return {?}
                     */
                    set: function (data) { this._data.next(data); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatTableDataSource.prototype, "filter", {
                    /**
                     * Filter term that should be used to filter out objects from the data array. To override how
                     * data objects match to this filter string, provide a custom function for filterPredicate.
                     * @return {?}
                     */
                    get: function () { return this._filter.value; },
                    /**
                     * @param {?} filter
                     * @return {?}
                     */
                    set: function (filter) { this._filter.next(filter); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatTableDataSource.prototype, "sort", {
                    /**
                     * Instance of the MatSort directive used by the table to control its sorting. Sort changes
                     * emitted by the MatSort will trigger an update to the table's rendered data.
                     * @return {?}
                     */
                    get: function () { return this._sort; },
                    /**
                     * @param {?} sort
                     * @return {?}
                     */
                    set: function (sort) {
                        this._sort = sort;
                        this._updateChangeSubscription();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatTableDataSource.prototype, "paginator", {
                    /**
                     * Instance of the MatPaginator component used by the table to control what page of the data is
                     * displayed. Page changes emitted by the MatPaginator will trigger an update to the
                     * table's rendered data.
                     *
                     * Note that the data source uses the paginator's properties to calculate which page of data
                     * should be displayed. If the paginator receives its properties as template inputs,
                     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been
                     * initialized before assigning it to this data source.
                     * @return {?}
                     */
                    get: function () { return this._paginator; },
                    /**
                     * @param {?} paginator
                     * @return {?}
                     */
                    set: function (paginator) {
                        this._paginator = paginator;
                        this._updateChangeSubscription();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Subscribe to changes that should trigger an update to the table's rendered rows. When the
                 * changes occur, process the current state of the filter, sort, and pagination along with
                 * the provided base data and send it to the table for rendering.
                 * @return {?}
                 */
                MatTableDataSource.prototype._updateChangeSubscription = function () {
                    var _this = this;
                    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.
                    // The events should emit whenever the component emits a change or initializes, or if no
                    // component is provided, a stream with just a null event should be provided.
                    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the
                    // pipeline can progress to the next step. Note that the value from these streams are not used,
                    // they purely act as a signal to progress in the pipeline.
                    /** @type {?} */
                    var sortChange = this._sort ?
                        ( /** @type {?} */(Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(this._sort.sortChange, this._sort.initialized))) :
                        Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["of"])(null);
                    /** @type {?} */
                    var pageChange = this._paginator ?
                        ( /** @type {?} */(Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(this._paginator.page, this._internalPageChanges, this._paginator.initialized))) :
                        Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["of"])(null);
                    /** @type {?} */
                    var dataStream = this._data;
                    // Watch for base data or filter changes to provide a filtered set of data.
                    /** @type {?} */
                    var filteredData = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["combineLatest"])([dataStream, this._filter])
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["map"])(( /**
                 * @param {?} __0
                 * @return {?}
                 */function (_b) {
                        var data = _b[0];
                        return _this._filterData(data);
                    })));
                    // Watch for filtered data or sort changes to provide an ordered set of data.
                    /** @type {?} */
                    var orderedData = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["combineLatest"])([filteredData, sortChange])
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["map"])(( /**
                 * @param {?} __0
                 * @return {?}
                 */function (_b) {
                        var data = _b[0];
                        return _this._orderData(data);
                    })));
                    // Watch for ordered data or page changes to provide a paged set of data.
                    /** @type {?} */
                    var paginatedData = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["combineLatest"])([orderedData, pageChange])
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["map"])(( /**
                 * @param {?} __0
                 * @return {?}
                 */function (_b) {
                        var data = _b[0];
                        return _this._pageData(data);
                    })));
                    // Watched for paged data changes and send the result to the table to render.
                    this._renderChangesSubscription.unsubscribe();
                    this._renderChangesSubscription = paginatedData.subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (/**
                     * @param {?} data
                     * @return {?}
                     */ data) { return _this._renderData.next(data); }));
                };
                /**
                 * Returns a filtered data array where each filter object contains the filter string within
                 * the result of the filterTermAccessor function. If no filter is set, returns the data array
                 * as provided.
                 * @param {?} data
                 * @return {?}
                 */
                MatTableDataSource.prototype._filterData = function (data) {
                    var _this = this;
                    // If there is a filter string, filter out data that does not contain it.
                    // Each data object is converted to a string using the function defined by filterTermAccessor.
                    // May be overridden for customization.
                    this.filteredData =
                        !this.filter ? data : data.filter(( /**
                         * @param {?} obj
                         * @return {?}
                         */function (/**
                         * @param {?} obj
                         * @return {?}
                         */ obj) { return _this.filterPredicate(obj, _this.filter); }));
                    if (this.paginator) {
                        this._updatePaginator(this.filteredData.length);
                    }
                    return this.filteredData;
                };
                /**
                 * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the
                 * data array as provided. Uses the default data accessor for data lookup, unless a
                 * sortDataAccessor function is defined.
                 * @param {?} data
                 * @return {?}
                 */
                MatTableDataSource.prototype._orderData = function (data) {
                    // If there is no active sort or direction, return the data without trying to sort.
                    if (!this.sort) {
                        return data;
                    }
                    return this.sortData(data.slice(), this.sort);
                };
                /**
                 * Returns a paged slice of the provided data array according to the provided MatPaginator's page
                 * index and length. If there is no paginator provided, returns the data array as provided.
                 * @param {?} data
                 * @return {?}
                 */
                MatTableDataSource.prototype._pageData = function (data) {
                    if (!this.paginator) {
                        return data;
                    }
                    /** @type {?} */
                    var startIndex = this.paginator.pageIndex * this.paginator.pageSize;
                    return data.slice(startIndex, startIndex + this.paginator.pageSize);
                };
                /**
                 * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
                 * index does not exceed the paginator's last page. Values are changed in a resolved promise to
                 * guard against making property changes within a round of change detection.
                 * @param {?} filteredDataLength
                 * @return {?}
                 */
                MatTableDataSource.prototype._updatePaginator = function (filteredDataLength) {
                    var _this = this;
                    Promise.resolve().then(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var paginator = _this.paginator;
                        if (!paginator) {
                            return;
                        }
                        paginator.length = filteredDataLength;
                        // If the page index is set beyond the page, reduce it to the last page.
                        if (paginator.pageIndex > 0) {
                            /** @type {?} */
                            var lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;
                            /** @type {?} */
                            var newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);
                            if (newPageIndex !== paginator.pageIndex) {
                                paginator.pageIndex = newPageIndex;
                                // Since the paginator only emits after user-generated changes,
                                // we need our own stream so we know to should re-render the data.
                                _this._internalPageChanges.next();
                            }
                        }
                    }));
                };
                /**
                 * Used by the MatTable. Called when it connects to the data source.
                 * \@docs-private
                 * @return {?}
                 */
                MatTableDataSource.prototype.connect = function () { return this._renderData; };
                /**
                 * Used by the MatTable. Called when it is destroyed. No-op.
                 * \@docs-private
                 * @return {?}
                 */
                MatTableDataSource.prototype.disconnect = function () { };
                return MatTableDataSource;
            }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__["DataSource"]));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=table.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/tabs.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/tabs.js ***!
          \********************************************************/
        /*! exports provided: MatTabsModule, MatInkBar, _MAT_INK_BAR_POSITIONER, MatTabBody, _MatTabBodyBase, MatTabBodyPortal, MatTabHeader, _MatTabHeaderBase, MatTabLabelWrapper, MatTab, MatTabLabel, MatTabNav, MatTabLink, _MatTabNavBase, _MatTabLinkBase, MatTabContent, MatTabChangeEvent, MAT_TABS_CONFIG, _MatTabGroupBase, MatTabGroup, matTabsAnimations, ɵa24, ɵb24 */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTabsModule", function () { return MatTabsModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatInkBar", function () { return MatInkBar; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_MAT_INK_BAR_POSITIONER", function () { return _MAT_INK_BAR_POSITIONER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTabBody", function () { return MatTabBody; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_MatTabBodyBase", function () { return _MatTabBodyBase; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTabBodyPortal", function () { return MatTabBodyPortal; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTabHeader", function () { return MatTabHeader; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_MatTabHeaderBase", function () { return _MatTabHeaderBase; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTabLabelWrapper", function () { return MatTabLabelWrapper; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTab", function () { return MatTab; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTabLabel", function () { return MatTabLabel; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTabNav", function () { return MatTabNav; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTabLink", function () { return MatTabLink; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_MatTabNavBase", function () { return _MatTabNavBase; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_MatTabLinkBase", function () { return _MatTabLinkBase; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTabContent", function () { return MatTabContent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTabChangeEvent", function () { return MatTabChangeEvent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_TABS_CONFIG", function () { return MAT_TABS_CONFIG; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_MatTabGroupBase", function () { return _MatTabGroupBase; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTabGroup", function () { return MatTabGroup; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matTabsAnimations", function () { return matTabsAnimations; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa24", function () { return _MAT_INK_BAR_POSITIONER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb24", function () { return MatPaginatedTabHeader; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm2015/scrolling.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/cdk/observers */ "./node_modules/@angular/cdk/esm2015/observers.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token for the MatInkBar's Positioner.
             * @type {?}
             */
            var _MAT_INK_BAR_POSITIONER = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MatInkBarPositioner', {
                providedIn: 'root',
                factory: _MAT_INK_BAR_POSITIONER_FACTORY
            });
            /**
             * The default positioner function for the MatInkBar.
             * \@docs-private
             * @return {?}
             */
            function _MAT_INK_BAR_POSITIONER_FACTORY() {
                /** @type {?} */
                var method = ( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) { return ({
                    left: element ? (element.offsetLeft || 0) + 'px' : '0',
                    width: element ? (element.offsetWidth || 0) + 'px' : '0',
                }); });
                return method;
            }
            /**
             * The ink-bar is used to display and animate the line underneath the current active tab label.
             * \@docs-private
             */
            var MatInkBar = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _ngZone
                 * @param {?} _inkBarPositioner
                 * @param {?=} _animationMode
                 */
                function MatInkBar(_elementRef, _ngZone, _inkBarPositioner, _animationMode) {
                    this._elementRef = _elementRef;
                    this._ngZone = _ngZone;
                    this._inkBarPositioner = _inkBarPositioner;
                    this._animationMode = _animationMode;
                }
                /**
                 * Calculates the styles from the provided element in order to align the ink-bar to that element.
                 * Shows the ink bar if previously set as hidden.
                 * @param {?} element
                 * @return {?}
                 */
                MatInkBar.prototype.alignToElement = function (element) {
                    var _this = this;
                    this.show();
                    if (typeof requestAnimationFrame !== 'undefined') {
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () {
                            requestAnimationFrame(( /**
                             * @return {?}
                             */function () { return _this._setStyles(element); }));
                        }));
                    }
                    else {
                        this._setStyles(element);
                    }
                };
                /**
                 * Shows the ink bar.
                 * @return {?}
                 */
                MatInkBar.prototype.show = function () {
                    this._elementRef.nativeElement.style.visibility = 'visible';
                };
                /**
                 * Hides the ink bar.
                 * @return {?}
                 */
                MatInkBar.prototype.hide = function () {
                    this._elementRef.nativeElement.style.visibility = 'hidden';
                };
                /**
                 * Sets the proper styles to the ink bar element.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                MatInkBar.prototype._setStyles = function (element) {
                    /** @type {?} */
                    var positions = this._inkBarPositioner(element);
                    /** @type {?} */
                    var inkBar = this._elementRef.nativeElement;
                    inkBar.style.left = positions.left;
                    inkBar.style.width = positions.width;
                };
                return MatInkBar;
            }());
            MatInkBar.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'mat-ink-bar',
                            host: {
                                'class': 'mat-ink-bar',
                                '[class._mat-animation-noopable]': "_animationMode === 'NoopAnimations'",
                            },
                        },] },
            ];
            /** @nocollapse */
            MatInkBar.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_MAT_INK_BAR_POSITIONER,] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Decorates the `ng-template` tags and reads out the template from it.
             */
            var MatTabContent = /** @class */ (function () {
                /**
                 * @param {?} template
                 */
                function MatTabContent(template) {
                    this.template = template;
                }
                return MatTabContent;
            }());
            MatTabContent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: '[matTabContent]' },] },
            ];
            /** @nocollapse */
            MatTabContent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Used to flag tab labels for use with the portal directive
             */
            var MatTabLabel = /** @class */ (function (_super) {
                __extends(MatTabLabel, _super);
                function MatTabLabel() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatTabLabel;
            }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["CdkPortal"]));
            MatTabLabel.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-tab-label], [matTabLabel]',
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Boilerplate for applying mixins to MatTab.
            /**
             * \@docs-private
             */
            var MatTabBase = /** @class */ (function () {
                function MatTabBase() {
                }
                return MatTabBase;
            }());
            /** @type {?} */
            var _MatTabMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(MatTabBase);
            var MatTab = /** @class */ (function (_super) {
                __extends(MatTab, _super);
                /**
                 * @param {?} _viewContainerRef
                 */
                function MatTab(_viewContainerRef) {
                    var _this = _super.call(this) || this;
                    _this._viewContainerRef = _viewContainerRef;
                    /**
                     * Plain text label for the tab, used when there is no template label.
                     */
                    _this.textLabel = '';
                    /**
                     * Portal that will be the hosted content of the tab
                     */
                    _this._contentPortal = null;
                    /**
                     * Emits whenever the internal state of the tab changes.
                     */
                    _this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    /**
                     * The relatively indexed position where 0 represents the center, negative is left, and positive
                     * represents the right.
                     */
                    _this.position = null;
                    /**
                     * The initial relatively index origin of the tab if it was created and selected after there
                     * was already a selected tab. Provides context of what position the tab should originate from.
                     */
                    _this.origin = null;
                    /**
                     * Whether the tab is currently active.
                     */
                    _this.isActive = false;
                    return _this;
                }
                Object.defineProperty(MatTab.prototype, "content", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._contentPortal;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                MatTab.prototype.ngOnChanges = function (changes) {
                    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {
                        this._stateChanges.next();
                    }
                };
                /**
                 * @return {?}
                 */
                MatTab.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                };
                /**
                 * @return {?}
                 */
                MatTab.prototype.ngOnInit = function () {
                    this._contentPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["TemplatePortal"](this._explicitContent || this._implicitContent, this._viewContainerRef);
                };
                return MatTab;
            }(_MatTabMixinBase));
            MatTab.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-tab',
                            template: "<ng-template><ng-content></ng-content></ng-template>",
                            inputs: ['disabled'],
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            exportAs: 'matTab',
                        },] },
            ];
            /** @nocollapse */
            MatTab.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }
            ]; };
            MatTab.propDecorators = {
                templateLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatTabLabel, { static: false },] }],
                _explicitContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [MatTabContent, { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"], static: true },] }],
                _implicitContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"], { static: true },] }],
                textLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['label',] }],
                ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['aria-label',] }],
                ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['aria-labelledby',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Animations used by the Material tabs.
             * \@docs-private
             * @type {?}
             */
            var matTabsAnimations = {
                /**
                 * Animation translates a tab along the X axis.
                 */
                translateTab: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["trigger"])('translateTab', [
                    // Note: transitions to `none` instead of 0, because some browsers might blur the content.
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('center, void, left-origin-center, right-origin-center', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({ transform: 'none' })),
                    // If the tab is either on the left or right, we additionally add a `min-height` of 1px
                    // in order to ensure that the element has a height before its state changes. This is
                    // necessary because Chrome does seem to skip the transition in RTL mode if the element does
                    // not have a static height and is not rendered. See related issue: #9465
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('left', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('right', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('* => left, * => right, left => center, right => center', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('void => left-origin-center', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({ transform: 'translate3d(-100%, 0, 0)' }),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')
                    ]),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('void => right-origin-center', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({ transform: 'translate3d(100%, 0, 0)' }),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')
                    ])
                ])
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The portal host directive for the contents of the tab.
             * \@docs-private
             */
            var MatTabBodyPortal = /** @class */ (function (_super) {
                __extends(MatTabBodyPortal, _super);
                /**
                 * @param {?} componentFactoryResolver
                 * @param {?} viewContainerRef
                 * @param {?} _host
                 */
                function MatTabBodyPortal(componentFactoryResolver, viewContainerRef, _host) {
                    var _this = _super.call(this, componentFactoryResolver, viewContainerRef) || this;
                    _this._host = _host;
                    /**
                     * Subscription to events for when the tab body begins centering.
                     */
                    _this._centeringSub = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    /**
                     * Subscription to events for when the tab body finishes leaving from center position.
                     */
                    _this._leavingSub = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    return _this;
                }
                /**
                 * Set initial visibility or set up subscription for changing visibility.
                 * @return {?}
                 */
                MatTabBodyPortal.prototype.ngOnInit = function () {
                    var _this = this;
                    _super.prototype.ngOnInit.call(this);
                    this._centeringSub = this._host._beforeCentering
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["startWith"])(this._host._isCenterPosition(this._host._position)))
                        .subscribe(( /**
                 * @param {?} isCentering
                 * @return {?}
                 */function (isCentering) {
                        if (isCentering && !_this.hasAttached()) {
                            _this.attach(_this._host._content);
                        }
                    }));
                    this._leavingSub = this._host._afterLeavingCenter.subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.detach();
                    }));
                };
                /**
                 * Clean up centering subscription.
                 * @return {?}
                 */
                MatTabBodyPortal.prototype.ngOnDestroy = function () {
                    _super.prototype.ngOnDestroy.call(this);
                    this._centeringSub.unsubscribe();
                    this._leavingSub.unsubscribe();
                };
                return MatTabBodyPortal;
            }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["CdkPortalOutlet"]));
            MatTabBodyPortal.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[matTabBodyHost]'
                        },] },
            ];
            /** @nocollapse */
            MatTabBodyPortal.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
                { type: MatTabBody, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                                                 * @return {?}
                                                 */function () { return MatTabBody; })),] }] }
            ]; };
            /**
             * Base class with all of the `MatTabBody` functionality.
             * \@docs-private
             * @abstract
             */
            // tslint:disable-next-line:class-name
            var _MatTabBodyBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _dir
                 * @param {?} changeDetectorRef
                 */
                function _MatTabBodyBase(_elementRef, _dir, changeDetectorRef) {
                    var _this = this;
                    this._elementRef = _elementRef;
                    this._dir = _dir;
                    /**
                     * Subscription to the directionality change observable.
                     */
                    this._dirChangeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    /**
                     * Emits when an animation on the tab is complete.
                     */
                    this._translateTabComplete = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    /**
                     * Event emitted when the tab begins to animate towards the center as the active tab.
                     */
                    this._onCentering = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Event emitted before the centering of the tab begins.
                     */
                    this._beforeCentering = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Event emitted before the centering of the tab begins.
                     */
                    this._afterLeavingCenter = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Event emitted when the tab completes its animation towards the center.
                     */
                    this._onCentered = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](true);
                    // Note that the default value will always be overwritten by `MatTabBody`, but we need one
                    // anyway to prevent the animations module from throwing an error if the body is used on its own.
                    /**
                     * Duration for the tab's animation.
                     */
                    this.animationDuration = '500ms';
                    if (_dir) {
                        this._dirChangeSubscription = _dir.change.subscribe(( /**
                         * @param {?} dir
                         * @return {?}
                         */function (dir) {
                            _this._computePositionAnimationState(dir);
                            changeDetectorRef.markForCheck();
                        }));
                    }
                    // Ensure that we get unique animation events, because the `.done` callback can get
                    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.
                    this._translateTabComplete.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["distinctUntilChanged"])(( /**
                     * @param {?} x
                     * @param {?} y
                     * @return {?}
                     */function (x, y) {
                        return x.fromState === y.fromState && x.toState === y.toState;
                    }))).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        // If the transition to the center is complete, emit an event.
                        if (_this._isCenterPosition(event.toState) && _this._isCenterPosition(_this._position)) {
                            _this._onCentered.emit();
                        }
                        if (_this._isCenterPosition(event.fromState) && !_this._isCenterPosition(_this._position)) {
                            _this._afterLeavingCenter.emit();
                        }
                    }));
                }
                Object.defineProperty(_MatTabBodyBase.prototype, "position", {
                    /**
                     * The shifted index position of the tab body, where zero represents the active center tab.
                     * @param {?} position
                     * @return {?}
                     */
                    set: function (position) {
                        this._positionIndex = position;
                        this._computePositionAnimationState();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * After initialized, check if the content is centered and has an origin. If so, set the
                 * special position states that transition the tab from the left or right before centering.
                 * @return {?}
                 */
                _MatTabBodyBase.prototype.ngOnInit = function () {
                    if (this._position == 'center' && this.origin != null) {
                        this._position = this._computePositionFromOrigin();
                    }
                };
                /**
                 * @return {?}
                 */
                _MatTabBodyBase.prototype.ngOnDestroy = function () {
                    this._dirChangeSubscription.unsubscribe();
                    this._translateTabComplete.complete();
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                _MatTabBodyBase.prototype._onTranslateTabStarted = function (event) {
                    /** @type {?} */
                    var isCentering = this._isCenterPosition(event.toState);
                    this._beforeCentering.emit(isCentering);
                    if (isCentering) {
                        this._onCentering.emit(this._elementRef.nativeElement.clientHeight);
                    }
                };
                /**
                 * The text direction of the containing app.
                 * @return {?}
                 */
                _MatTabBodyBase.prototype._getLayoutDirection = function () {
                    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
                };
                /**
                 * Whether the provided position state is considered center, regardless of origin.
                 * @param {?} position
                 * @return {?}
                 */
                _MatTabBodyBase.prototype._isCenterPosition = function (position) {
                    return position == 'center' ||
                        position == 'left-origin-center' ||
                        position == 'right-origin-center';
                };
                /**
                 * Computes the position state that will be used for the tab-body animation trigger.
                 * @private
                 * @param {?=} dir
                 * @return {?}
                 */
                _MatTabBodyBase.prototype._computePositionAnimationState = function (dir) {
                    if (dir === void 0) { dir = this._getLayoutDirection(); }
                    if (this._positionIndex < 0) {
                        this._position = dir == 'ltr' ? 'left' : 'right';
                    }
                    else if (this._positionIndex > 0) {
                        this._position = dir == 'ltr' ? 'right' : 'left';
                    }
                    else {
                        this._position = 'center';
                    }
                };
                /**
                 * Computes the position state based on the specified origin position. This is used if the
                 * tab is becoming visible immediately after creation.
                 * @private
                 * @return {?}
                 */
                _MatTabBodyBase.prototype._computePositionFromOrigin = function () {
                    /** @type {?} */
                    var dir = this._getLayoutDirection();
                    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {
                        return 'left-origin-center';
                    }
                    return 'right-origin-center';
                };
                return _MatTabBodyBase;
            }());
            _MatTabBodyBase.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            // TODO(crisbeto): this selector can be removed when we update to Angular 9.0.
                            selector: 'do-not-use-abstract-mat-tab-body-base'
                        },] },
            ];
            /** @nocollapse */
            _MatTabBodyBase.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
            ]; };
            _MatTabBodyBase.propDecorators = {
                _onCentering: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _beforeCentering: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _afterLeavingCenter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _onCentered: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _content: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['content',] }],
                origin: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                animationDuration: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                position: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * Wrapper for the contents of a tab.
             * \@docs-private
             */
            var MatTabBody = /** @class */ (function (_super) {
                __extends(MatTabBody, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} dir
                 * @param {?} changeDetectorRef
                 */
                function MatTabBody(elementRef, dir, changeDetectorRef) {
                    return _super.call(this, elementRef, dir, changeDetectorRef) || this;
                }
                return MatTabBody;
            }(_MatTabBodyBase));
            MatTabBody.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-tab-body',
                            template: "<div class=\"mat-tab-body-content\" #content [@translateTab]=\"{ value: _position, params: {animationDuration: animationDuration} }\" (@translateTab.start)=\"_onTranslateTabStarted($event)\" (@translateTab.done)=\"_translateTabComplete.next($event)\"><ng-template matTabBodyHost></ng-template></div>",
                            styles: [".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            animations: [matTabsAnimations.translateTab],
                            host: {
                                'class': 'mat-tab-body',
                            }
                        },] },
            ];
            /** @nocollapse */
            MatTabBody.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
            ]; };
            MatTabBody.propDecorators = {
                _portalHost: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["PortalHostDirective"], { static: false },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Used to generate unique ID's for each tab component
             * @type {?}
             */
            var nextId = 0;
            /**
             * A simple change event emitted on focus or selection changes.
             */
            var MatTabChangeEvent = /** @class */ (function () {
                function MatTabChangeEvent() {
                }
                return MatTabChangeEvent;
            }());
            /**
             * Injection token that can be used to provide the default options the tabs module.
             * @type {?}
             */
            var MAT_TABS_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_TABS_CONFIG');
            // Boilerplate for applying mixins to MatTabGroup.
            /**
             * \@docs-private
             */
            var MatTabGroupMixinBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatTabGroupMixinBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatTabGroupMixinBase;
            }());
            /** @type {?} */
            var _MatTabGroupMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisableRipple"])(MatTabGroupMixinBase), 'primary');
            /**
             * Base class with all of the `MatTabGroupBase` functionality.
             * \@docs-private
             * @abstract
             */
            // tslint:disable-next-line:class-name
            var _MatTabGroupBase = /** @class */ (function (_super) {
                __extends(_MatTabGroupBase, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} _changeDetectorRef
                 * @param {?=} defaultConfig
                 * @param {?=} _animationMode
                 */
                function _MatTabGroupBase(elementRef, _changeDetectorRef, defaultConfig, _animationMode) {
                    var _this = _super.call(this, elementRef) || this;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._animationMode = _animationMode;
                    /**
                     * The tab index that should be selected after the content has been checked.
                     */
                    _this._indexToSelect = 0;
                    /**
                     * Snapshot of the height of the tab body wrapper before another tab is activated.
                     */
                    _this._tabBodyWrapperHeight = 0;
                    /**
                     * Subscription to tabs being added/removed.
                     */
                    _this._tabsSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    /**
                     * Subscription to changes in the tab labels.
                     */
                    _this._tabLabelSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    _this._dynamicHeight = false;
                    _this._selectedIndex = null;
                    /**
                     * Position of the tab header.
                     */
                    _this.headerPosition = 'above';
                    /**
                     * Output to enable support for two-way binding on `[(selectedIndex)]`
                     */
                    _this.selectedIndexChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Event emitted when focus has changed within a tab group.
                     */
                    _this.focusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Event emitted when the body animation has completed
                     */
                    _this.animationDone = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Event emitted when the tab selection has changed.
                     */
                    _this.selectedTabChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](true);
                    _this._groupId = nextId++;
                    _this.animationDuration = defaultConfig && defaultConfig.animationDuration ?
                        defaultConfig.animationDuration : '500ms';
                    return _this;
                }
                Object.defineProperty(_MatTabGroupBase.prototype, "dynamicHeight", {
                    /**
                     * Whether the tab group should grow to the size of the active tab.
                     * @return {?}
                     */
                    get: function () { return this._dynamicHeight; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._dynamicHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(_MatTabGroupBase.prototype, "selectedIndex", {
                    /**
                     * The index of the active tab.
                     * @return {?}
                     */
                    get: function () { return this._selectedIndex; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._indexToSelect = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceNumberProperty"])(value, null);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(_MatTabGroupBase.prototype, "animationDuration", {
                    /**
                     * Duration for the tab animation. Will be normalized to milliseconds if no units are set.
                     * @return {?}
                     */
                    get: function () { return this._animationDuration; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._animationDuration = /^\d+$/.test(value) ? value + 'ms' : value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(_MatTabGroupBase.prototype, "backgroundColor", {
                    /**
                     * Background color of the tab group.
                     * @return {?}
                     */
                    get: function () { return this._backgroundColor; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var nativeElement = this._elementRef.nativeElement;
                        nativeElement.classList.remove("mat-background-" + this.backgroundColor);
                        if (value) {
                            nativeElement.classList.add("mat-background-" + value);
                        }
                        this._backgroundColor = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * After the content is checked, this component knows what tabs have been defined
                 * and what the selected index should be. This is where we can know exactly what position
                 * each tab should be in according to the new selected index, and additionally we know how
                 * a new selected tab should transition in (from the left or right).
                 * @return {?}
                 */
                _MatTabGroupBase.prototype.ngAfterContentChecked = function () {
                    var _this = this;
                    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that
                    // the amount of tabs changes before the actual change detection runs.
                    /** @type {?} */
                    var indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);
                    // If there is a change in selected index, emit a change event. Should not trigger if
                    // the selected index has not yet been initialized.
                    if (this._selectedIndex != indexToSelect) {
                        /** @type {?} */
                        var isFirstRun_1 = this._selectedIndex == null;
                        if (!isFirstRun_1) {
                            this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));
                        }
                        // Changing these values after change detection has run
                        // since the checked content may contain references to them.
                        Promise.resolve().then(( /**
                         * @return {?}
                         */function () {
                            _this._tabs.forEach(( /**
                             * @param {?} tab
                             * @param {?} index
                             * @return {?}
                             */function (tab, index) { return tab.isActive = index === indexToSelect; }));
                            if (!isFirstRun_1) {
                                _this.selectedIndexChange.emit(indexToSelect);
                            }
                        }));
                    }
                    // Setup the position for each tab and optionally setup an origin on the next selected tab.
                    this._tabs.forEach(( /**
                     * @param {?} tab
                     * @param {?} index
                     * @return {?}
                     */function (tab, index) {
                        tab.position = index - indexToSelect;
                        // If there is already a selected tab, then set up an origin for the next selected tab
                        // if it doesn't have one already.
                        if (_this._selectedIndex != null && tab.position == 0 && !tab.origin) {
                            tab.origin = indexToSelect - _this._selectedIndex;
                        }
                    }));
                    if (this._selectedIndex !== indexToSelect) {
                        this._selectedIndex = indexToSelect;
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * @return {?}
                 */
                _MatTabGroupBase.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._subscribeToTabLabels();
                    // Subscribe to changes in the amount of tabs, in order to be
                    // able to re-render the content as new tabs are added or removed.
                    this._tabsSubscription = this._tabs.changes.subscribe(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var indexToSelect = _this._clampTabIndex(_this._indexToSelect);
                        // Maintain the previously-selected tab if a new tab is added or removed and there is no
                        // explicit change that selects a different tab.
                        if (indexToSelect === _this._selectedIndex) {
                            /** @type {?} */
                            var tabs = _this._tabs.toArray();
                            for (var i = 0; i < tabs.length; i++) {
                                if (tabs[i].isActive) {
                                    // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed
                                    // event, otherwise the consumer may end up in an infinite loop in some edge cases like
                                    // adding a tab within the `selectedIndexChange` event.
                                    _this._indexToSelect = _this._selectedIndex = i;
                                    break;
                                }
                            }
                        }
                        _this._subscribeToTabLabels();
                        _this._changeDetectorRef.markForCheck();
                    }));
                };
                /**
                 * @return {?}
                 */
                _MatTabGroupBase.prototype.ngOnDestroy = function () {
                    this._tabsSubscription.unsubscribe();
                    this._tabLabelSubscription.unsubscribe();
                };
                /**
                 * Re-aligns the ink bar to the selected tab element.
                 * @return {?}
                 */
                _MatTabGroupBase.prototype.realignInkBar = function () {
                    if (this._tabHeader) {
                        this._tabHeader._alignInkBarToSelectedTab();
                    }
                };
                /**
                 * @param {?} index
                 * @return {?}
                 */
                _MatTabGroupBase.prototype._focusChanged = function (index) {
                    this.focusChange.emit(this._createChangeEvent(index));
                };
                /**
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                _MatTabGroupBase.prototype._createChangeEvent = function (index) {
                    /** @type {?} */
                    var event = new MatTabChangeEvent;
                    event.index = index;
                    if (this._tabs && this._tabs.length) {
                        event.tab = this._tabs.toArray()[index];
                    }
                    return event;
                };
                /**
                 * Subscribes to changes in the tab labels. This is needed, because the \@Input for the label is
                 * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the
                 * binding to be updated, we need to subscribe to changes in it and trigger change detection
                 * manually.
                 * @private
                 * @return {?}
                 */
                _MatTabGroupBase.prototype._subscribeToTabLabels = function () {
                    var _this = this;
                    if (this._tabLabelSubscription) {
                        this._tabLabelSubscription.unsubscribe();
                    }
                    this._tabLabelSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"]).apply(void 0, this._tabs.map(( /**
                     * @param {?} tab
                     * @return {?}
                     */function (/**
                     * @param {?} tab
                     * @return {?}
                     */ tab) { return tab._stateChanges; }))).subscribe(( /**
                 * @return {?}
                 */function () { return _this._changeDetectorRef.markForCheck(); }));
                };
                /**
                 * Clamps the given index to the bounds of 0 and the tabs length.
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                _MatTabGroupBase.prototype._clampTabIndex = function (index) {
                    // Note the `|| 0`, which ensures that values like NaN can't get through
                    // and which would otherwise throw the component into an infinite loop
                    // (since Math.max(NaN, 0) === NaN).
                    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));
                };
                /**
                 * Returns a unique id for each tab label element
                 * @param {?} i
                 * @return {?}
                 */
                _MatTabGroupBase.prototype._getTabLabelId = function (i) {
                    return "mat-tab-label-" + this._groupId + "-" + i;
                };
                /**
                 * Returns a unique id for each tab content element
                 * @param {?} i
                 * @return {?}
                 */
                _MatTabGroupBase.prototype._getTabContentId = function (i) {
                    return "mat-tab-content-" + this._groupId + "-" + i;
                };
                /**
                 * Sets the height of the body wrapper to the height of the activating tab if dynamic
                 * height property is true.
                 * @param {?} tabHeight
                 * @return {?}
                 */
                _MatTabGroupBase.prototype._setTabBodyWrapperHeight = function (tabHeight) {
                    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {
                        return;
                    }
                    /** @type {?} */
                    var wrapper = this._tabBodyWrapper.nativeElement;
                    wrapper.style.height = this._tabBodyWrapperHeight + 'px';
                    // This conditional forces the browser to paint the height so that
                    // the animation to the new height can have an origin.
                    if (this._tabBodyWrapper.nativeElement.offsetHeight) {
                        wrapper.style.height = tabHeight + 'px';
                    }
                };
                /**
                 * Removes the height of the tab body wrapper.
                 * @return {?}
                 */
                _MatTabGroupBase.prototype._removeTabBodyWrapperHeight = function () {
                    /** @type {?} */
                    var wrapper = this._tabBodyWrapper.nativeElement;
                    this._tabBodyWrapperHeight = wrapper.clientHeight;
                    wrapper.style.height = '';
                    this.animationDone.emit();
                };
                /**
                 * Handle click events, setting new selected index if appropriate.
                 * @param {?} tab
                 * @param {?} tabHeader
                 * @param {?} index
                 * @return {?}
                 */
                _MatTabGroupBase.prototype._handleClick = function (tab, tabHeader, index) {
                    if (!tab.disabled) {
                        this.selectedIndex = tabHeader.focusIndex = index;
                    }
                };
                /**
                 * Retrieves the tabindex for the tab.
                 * @param {?} tab
                 * @param {?} idx
                 * @return {?}
                 */
                _MatTabGroupBase.prototype._getTabIndex = function (tab, idx) {
                    if (tab.disabled) {
                        return null;
                    }
                    return this.selectedIndex === idx ? 0 : -1;
                };
                return _MatTabGroupBase;
            }(_MatTabGroupMixinBase));
            _MatTabGroupBase.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            // TODO(crisbeto): this selector can be removed when we update to Angular 9.0.
                            selector: 'do-not-use-abstract-mat-tab-group-base'
                        },] },
            ];
            /** @nocollapse */
            _MatTabGroupBase.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_TABS_CONFIG,] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            _MatTabGroupBase.propDecorators = {
                dynamicHeight: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selectedIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                headerPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                animationDuration: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                backgroundColor: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                selectedIndexChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                focusChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                animationDone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                selectedTabChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
            };
            /**
             * Material design tab-group component. Supports basic tab pairs (label + content) and includes
             * animated ink-bar, keyboard navigation, and screen reader.
             * See: https://material.io/design/components/tabs.html
             */
            var MatTabGroup = /** @class */ (function (_super) {
                __extends(MatTabGroup, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} changeDetectorRef
                 * @param {?=} defaultConfig
                 * @param {?=} animationMode
                 */
                function MatTabGroup(elementRef, changeDetectorRef, defaultConfig, animationMode) {
                    return _super.call(this, elementRef, changeDetectorRef, defaultConfig, animationMode) || this;
                }
                return MatTabGroup;
            }(_MatTabGroupBase));
            MatTabGroup.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-tab-group',
                            exportAs: 'matTabGroup',
                            template: "<mat-tab-header #tabHeader [selectedIndex]=\"selectedIndex\" [disableRipple]=\"disableRipple\" (indexFocused)=\"_focusChanged($event)\" (selectFocusedIndex)=\"selectedIndex = $event\"><div class=\"mat-tab-label\" role=\"tab\" matTabLabelWrapper mat-ripple cdkMonitorElementFocus *ngFor=\"let tab of _tabs; let i = index\" [id]=\"_getTabLabelId(i)\" [attr.tabIndex]=\"_getTabIndex(tab, i)\" [attr.aria-posinset]=\"i + 1\" [attr.aria-setsize]=\"_tabs.length\" [attr.aria-controls]=\"_getTabContentId(i)\" [attr.aria-selected]=\"selectedIndex == i\" [attr.aria-label]=\"tab.ariaLabel || null\" [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\" [class.mat-tab-label-active]=\"selectedIndex == i\" [disabled]=\"tab.disabled\" [matRippleDisabled]=\"tab.disabled || disableRipple\" (click)=\"_handleClick(tab, tabHeader, i)\"><div class=\"mat-tab-label-content\"><ng-template [ngIf]=\"tab.templateLabel\"><ng-template [cdkPortalOutlet]=\"tab.templateLabel\"></ng-template></ng-template><ng-template [ngIf]=\"!tab.templateLabel\">{{tab.textLabel}}</ng-template></div></div></mat-tab-header><div class=\"mat-tab-body-wrapper\" [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\" #tabBodyWrapper><mat-tab-body role=\"tabpanel\" *ngFor=\"let tab of _tabs; let i = index\" [id]=\"_getTabContentId(i)\" [attr.aria-labelledby]=\"_getTabLabelId(i)\" [class.mat-tab-body-active]=\"selectedIndex == i\" [content]=\"tab.content\" [position]=\"tab.position\" [origin]=\"tab.origin\" [animationDuration]=\"animationDuration\" (_onCentered)=\"_removeTabBodyWrapperHeight()\" (_onCentering)=\"_setTabBodyWrapperHeight($event)\"></mat-tab-body></div>",
                            styles: [".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable.mat-tab-body-wrapper{transition:none;animation:none}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            inputs: ['color', 'disableRipple'],
                            host: {
                                'class': 'mat-tab-group',
                                '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',
                                '[class.mat-tab-group-inverted-header]': 'headerPosition === "below"',
                            },
                        },] },
            ];
            /** @nocollapse */
            MatTabGroup.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_TABS_CONFIG,] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            MatTabGroup.propDecorators = {
                _tabs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatTab,] }],
                _tabBodyWrapper: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['tabBodyWrapper', { static: false },] }],
                _tabHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['tabHeader', { static: false },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Boilerplate for applying mixins to MatTabLabelWrapper.
            /**
             * \@docs-private
             */
            var MatTabLabelWrapperBase = /** @class */ (function () {
                function MatTabLabelWrapperBase() {
                }
                return MatTabLabelWrapperBase;
            }());
            /** @type {?} */
            var _MatTabLabelWrapperMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(MatTabLabelWrapperBase);
            /**
             * Used in the `mat-tab-group` view to display tab labels.
             * \@docs-private
             */
            var MatTabLabelWrapper = /** @class */ (function (_super) {
                __extends(MatTabLabelWrapper, _super);
                /**
                 * @param {?} elementRef
                 */
                function MatTabLabelWrapper(elementRef) {
                    var _this = _super.call(this) || this;
                    _this.elementRef = elementRef;
                    return _this;
                }
                /**
                 * Sets focus on the wrapper element
                 * @return {?}
                 */
                MatTabLabelWrapper.prototype.focus = function () {
                    this.elementRef.nativeElement.focus();
                };
                /**
                 * @return {?}
                 */
                MatTabLabelWrapper.prototype.getOffsetLeft = function () {
                    return this.elementRef.nativeElement.offsetLeft;
                };
                /**
                 * @return {?}
                 */
                MatTabLabelWrapper.prototype.getOffsetWidth = function () {
                    return this.elementRef.nativeElement.offsetWidth;
                };
                return MatTabLabelWrapper;
            }(_MatTabLabelWrapperMixinBase));
            MatTabLabelWrapper.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[matTabLabelWrapper]',
                            inputs: ['disabled'],
                            host: {
                                '[class.mat-tab-disabled]': 'disabled',
                                '[attr.aria-disabled]': '!!disabled',
                            }
                        },] },
            ];
            /** @nocollapse */
            MatTabLabelWrapper.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Config used to bind passive event listeners
             * @type {?}
             */
            var passiveEventListenerOptions = ( /** @type {?} */(Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__["normalizePassiveListenerOptions"])({ passive: true })));
            /**
             * The distance in pixels that will be overshot when scrolling a tab label into view. This helps
             * provide a small affordance to the label next to it.
             * @type {?}
             */
            var EXAGGERATED_OVERSCROLL = 60;
            /**
             * Amount of milliseconds to wait before starting to scroll the header automatically.
             * Set a little conservatively in order to handle fake events dispatched on touch devices.
             * @type {?}
             */
            var HEADER_SCROLL_DELAY = 650;
            /**
             * Interval in milliseconds at which to scroll the header
             * while the user is holding their pointer.
             * @type {?}
             */
            var HEADER_SCROLL_INTERVAL = 100;
            /**
             * Base class for a tab header that supported pagination.
             * \@docs-private
             * @abstract
             */
            var MatPaginatedTabHeader = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _changeDetectorRef
                 * @param {?} _viewportRuler
                 * @param {?} _dir
                 * @param {?} _ngZone
                 * @param {?=} _platform
                 * @param {?=} _animationMode
                 */
                function MatPaginatedTabHeader(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone, _platform, _animationMode) {
                    var _this = this;
                    this._elementRef = _elementRef;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._viewportRuler = _viewportRuler;
                    this._dir = _dir;
                    this._ngZone = _ngZone;
                    this._platform = _platform;
                    this._animationMode = _animationMode;
                    /**
                     * The distance in pixels that the tab labels should be translated to the left.
                     */
                    this._scrollDistance = 0;
                    /**
                     * Whether the header should scroll to the selected index after the view has been checked.
                     */
                    this._selectedIndexChanged = false;
                    /**
                     * Emits when the component is destroyed.
                     */
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    /**
                     * Whether the controls for pagination should be displayed
                     */
                    this._showPaginationControls = false;
                    /**
                     * Whether the tab list can be scrolled more towards the end of the tab label list.
                     */
                    this._disableScrollAfter = true;
                    /**
                     * Whether the tab list can be scrolled more towards the beginning of the tab label list.
                     */
                    this._disableScrollBefore = true;
                    /**
                     * Stream that will stop the automated scrolling.
                     */
                    this._stopScrolling = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    this._selectedIndex = 0;
                    /**
                     * Event emitted when the option is selected.
                     */
                    this.selectFocusedIndex = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    /**
                     * Event emitted when a label is focused.
                     */
                    this.indexFocused = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.
                    _ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(_elementRef.nativeElement, 'mouseleave')
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(_this._destroyed))
                            .subscribe(( /**
                     * @return {?}
                     */function () {
                            _this._stopInterval();
                        }));
                    }));
                }
                Object.defineProperty(MatPaginatedTabHeader.prototype, "selectedIndex", {
                    /**
                     * The index of the active tab.
                     * @return {?}
                     */
                    get: function () { return this._selectedIndex; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceNumberProperty"])(value);
                        if (this._selectedIndex != value) {
                            this._selectedIndexChanged = true;
                            this._selectedIndex = value;
                            if (this._keyManager) {
                                this._keyManager.updateActiveItemIndex(value);
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    // We need to handle these events manually, because we want to bind passive event listeners.
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._destroyed))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this._handlePaginatorPress('before');
                    }));
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._destroyed))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this._handlePaginatorPress('after');
                    }));
                };
                /**
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    /** @type {?} */
                    var dirChange = this._dir ? this._dir.change : Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(null);
                    /** @type {?} */
                    var resize = this._viewportRuler.change(150);
                    /** @type {?} */
                    var realign = ( /**
                     * @return {?}
                     */function () {
                        _this.updatePagination();
                        _this._alignInkBarToSelectedTab();
                    });
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__["FocusKeyManager"](this._items)
                        .withHorizontalOrientation(this._getLayoutDirection())
                        .withWrap();
                    this._keyManager.updateActiveItem(0);
                    // Defer the first call in order to allow for slower browsers to lay out the elements.
                    // This helps in cases where the user lands directly on a page with paginated tabs.
                    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();
                    // On dir change or window resize, realign the ink bar and update the orientation of
                    // the key manager if the direction has changed.
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"])(dirChange, resize, this._items.changes).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @return {?}
                     */function () {
                        realign();
                        _this._keyManager.withHorizontalOrientation(_this._getLayoutDirection());
                    }));
                    // If there is a change in the focus key manager we need to emit the `indexFocused`
                    // event in order to provide a public event that notifies about focus changes. Also we realign
                    // the tabs container by scrolling the new focused tab into the visible section.
                    this._keyManager.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @param {?} newFocusIndex
                     * @return {?}
                     */function (/**
                     * @param {?} newFocusIndex
                     * @return {?}
                     */ newFocusIndex) {
                        _this.indexFocused.emit(newFocusIndex);
                        _this._setTabFocus(newFocusIndex);
                    }));
                };
                /**
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype.ngAfterContentChecked = function () {
                    // If the number of tab labels have changed, check if scrolling should be enabled
                    if (this._tabLabelCount != this._items.length) {
                        this.updatePagination();
                        this._tabLabelCount = this._items.length;
                        this._changeDetectorRef.markForCheck();
                    }
                    // If the selected index has changed, scroll to the label and check if the scrolling controls
                    // should be disabled.
                    if (this._selectedIndexChanged) {
                        this._scrollToLabel(this._selectedIndex);
                        this._checkScrollingControls();
                        this._alignInkBarToSelectedTab();
                        this._selectedIndexChanged = false;
                        this._changeDetectorRef.markForCheck();
                    }
                    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),
                    // then translate the header to reflect this.
                    if (this._scrollDistanceChanged) {
                        this._updateTabScrollPosition();
                        this._scrollDistanceChanged = false;
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                    this._stopScrolling.complete();
                };
                /**
                 * Handles keyboard events on the header.
                 * @param {?} event
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._handleKeydown = function (event) {
                    // We don't handle any key bindings with a modifier key.
                    if (Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["hasModifierKey"])(event)) {
                        return;
                    }
                    switch (event.keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["HOME"]:
                            this._keyManager.setFirstItemActive();
                            event.preventDefault();
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["END"]:
                            this._keyManager.setLastItemActive();
                            event.preventDefault();
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["ENTER"]:
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["SPACE"]:
                            this.selectFocusedIndex.emit(this.focusIndex);
                            this._itemSelected(event);
                            break;
                        default:
                            this._keyManager.onKeydown(event);
                    }
                };
                /**
                 * Callback for when the MutationObserver detects that the content has changed.
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._onContentChanges = function () {
                    var _this = this;
                    /** @type {?} */
                    var textContent = this._elementRef.nativeElement.textContent;
                    // We need to diff the text content of the header, because the MutationObserver callback
                    // will fire even if the text content didn't change which is inefficient and is prone
                    // to infinite loops if a poorly constructed expression is passed in (see #14249).
                    if (textContent !== this._currentTextContent) {
                        this._currentTextContent = textContent || '';
                        // The content observer runs outside the `NgZone` by default, which
                        // means that we need to bring the callback back in ourselves.
                        this._ngZone.run(( /**
                         * @return {?}
                         */function () {
                            _this.updatePagination();
                            _this._alignInkBarToSelectedTab();
                            _this._changeDetectorRef.markForCheck();
                        }));
                    }
                };
                /**
                 * Updates the view whether pagination should be enabled or not.
                 *
                 * WARNING: Calling this method can be very costly in terms of performance. It should be called
                 * as infrequently as possible from outside of the Tabs component as it causes a reflow of the
                 * page.
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype.updatePagination = function () {
                    this._checkPaginationEnabled();
                    this._checkScrollingControls();
                    this._updateTabScrollPosition();
                };
                Object.defineProperty(MatPaginatedTabHeader.prototype, "focusIndex", {
                    /**
                     * Tracks which element has focus; used for keyboard navigation
                     * @return {?}
                     */
                    get: function () {
                        return this._keyManager ? ( /** @type {?} */(this._keyManager.activeItemIndex)) : 0;
                    },
                    /**
                     * When the focus index is set, we must manually send focus to the correct label
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {
                            return;
                        }
                        this._keyManager.setActiveItem(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is
                 * providing a valid index and return true.
                 * @param {?} index
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._isValidIndex = function (index) {
                    if (!this._items) {
                        return true;
                    }
                    /** @type {?} */
                    var tab = this._items ? this._items.toArray()[index] : null;
                    return !!tab && !tab.disabled;
                };
                /**
                 * Sets focus on the HTML element for the label wrapper and scrolls it into the view if
                 * scrolling is enabled.
                 * @param {?} tabIndex
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._setTabFocus = function (tabIndex) {
                    if (this._showPaginationControls) {
                        this._scrollToLabel(tabIndex);
                    }
                    if (this._items && this._items.length) {
                        this._items.toArray()[tabIndex].focus();
                        // Do not let the browser manage scrolling to focus the element, this will be handled
                        // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width
                        // should be the full width minus the offset width.
                        /** @type {?} */
                        var containerEl = this._tabListContainer.nativeElement;
                        /** @type {?} */
                        var dir = this._getLayoutDirection();
                        if (dir == 'ltr') {
                            containerEl.scrollLeft = 0;
                        }
                        else {
                            containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;
                        }
                    }
                };
                /**
                 * The layout direction of the containing app.
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._getLayoutDirection = function () {
                    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
                };
                /**
                 * Performs the CSS transformation on the tab list that will cause the list to scroll.
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._updateTabScrollPosition = function () {
                    /** @type {?} */
                    var scrollDistance = this.scrollDistance;
                    /** @type {?} */
                    var platform = this._platform;
                    /** @type {?} */
                    var translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;
                    // Don't use `translate3d` here because we don't want to create a new layer. A new layer
                    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar
                    // and ripples will exceed the boundaries of the visible tab bar.
                    // See: https://github.com/angular/components/issues/10276
                    // We round the `transform` here, because transforms with sub-pixel precision cause some
                    // browsers to blur the content of the element.
                    this._tabList.nativeElement.style.transform = "translateX(" + Math.round(translateX) + "px)";
                    // Setting the `transform` on IE will change the scroll offset of the parent, causing the
                    // position to be thrown off in some cases. We have to reset it ourselves to ensure that
                    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing
                    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).
                    // @breaking-change 9.0.0 Remove null check for `platform` after it can no longer be undefined.
                    if (platform && (platform.TRIDENT || platform.EDGE)) {
                        this._tabListContainer.nativeElement.scrollLeft = 0;
                    }
                };
                Object.defineProperty(MatPaginatedTabHeader.prototype, "scrollDistance", {
                    /**
                     * Sets the distance in pixels that the tab header should be transformed in the X-axis.
                     * @return {?}
                     */
                    get: function () { return this._scrollDistance; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._scrollTo(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or
                 * the end of the list, respectively). The distance to scroll is computed to be a third of the
                 * length of the tab list view window.
                 *
                 * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
                 * should be called sparingly.
                 * @param {?} direction
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._scrollHeader = function (direction) {
                    /** @type {?} */
                    var viewLength = this._tabListContainer.nativeElement.offsetWidth;
                    // Move the scroll distance one-third the length of the tab list's viewport.
                    /** @type {?} */
                    var scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;
                    return this._scrollTo(this._scrollDistance + scrollAmount);
                };
                /**
                 * Handles click events on the pagination arrows.
                 * @param {?} direction
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._handlePaginatorClick = function (direction) {
                    this._stopInterval();
                    this._scrollHeader(direction);
                };
                /**
                 * Moves the tab list such that the desired tab label (marked by index) is moved into view.
                 *
                 * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
                 * should be called sparingly.
                 * @param {?} labelIndex
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._scrollToLabel = function (labelIndex) {
                    /** @type {?} */
                    var selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;
                    if (!selectedLabel) {
                        return;
                    }
                    // The view length is the visible width of the tab labels.
                    /** @type {?} */
                    var viewLength = this._tabListContainer.nativeElement.offsetWidth;
                    var _b = selectedLabel.elementRef.nativeElement, offsetLeft = _b.offsetLeft, offsetWidth = _b.offsetWidth;
                    /** @type {?} */
                    var labelBeforePos;
                    /** @type {?} */
                    var labelAfterPos;
                    if (this._getLayoutDirection() == 'ltr') {
                        labelBeforePos = offsetLeft;
                        labelAfterPos = labelBeforePos + offsetWidth;
                    }
                    else {
                        labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;
                        labelBeforePos = labelAfterPos - offsetWidth;
                    }
                    /** @type {?} */
                    var beforeVisiblePos = this.scrollDistance;
                    /** @type {?} */
                    var afterVisiblePos = this.scrollDistance + viewLength;
                    if (labelBeforePos < beforeVisiblePos) {
                        // Scroll header to move label to the before direction
                        this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;
                    }
                    else if (labelAfterPos > afterVisiblePos) {
                        // Scroll header to move label to the after direction
                        this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;
                    }
                };
                /**
                 * Evaluate whether the pagination controls should be displayed. If the scroll width of the
                 * tab list is wider than the size of the header container, then the pagination controls should
                 * be shown.
                 *
                 * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
                 * should be called sparingly.
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._checkPaginationEnabled = function () {
                    /** @type {?} */
                    var isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;
                    if (!isEnabled) {
                        this.scrollDistance = 0;
                    }
                    if (isEnabled !== this._showPaginationControls) {
                        this._changeDetectorRef.markForCheck();
                    }
                    this._showPaginationControls = isEnabled;
                };
                /**
                 * Evaluate whether the before and after controls should be enabled or disabled.
                 * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the
                 * before button. If the header is at the end of the list (scroll distance is equal to the
                 * maximum distance we can scroll), then disable the after button.
                 *
                 * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
                 * should be called sparingly.
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._checkScrollingControls = function () {
                    // Check if the pagination arrows should be activated.
                    this._disableScrollBefore = this.scrollDistance == 0;
                    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Determines what is the maximum length in pixels that can be set for the scroll distance. This
                 * is equal to the difference in width between the tab list container and tab header container.
                 *
                 * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
                 * should be called sparingly.
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._getMaxScrollDistance = function () {
                    /** @type {?} */
                    var lengthOfTabList = this._tabList.nativeElement.scrollWidth;
                    /** @type {?} */
                    var viewLength = this._tabListContainer.nativeElement.offsetWidth;
                    return (lengthOfTabList - viewLength) || 0;
                };
                /**
                 * Tells the ink-bar to align itself to the current label wrapper
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._alignInkBarToSelectedTab = function () {
                    /** @type {?} */
                    var selectedItem = this._items && this._items.length ?
                        this._items.toArray()[this.selectedIndex] : null;
                    /** @type {?} */
                    var selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;
                    if (selectedLabelWrapper) {
                        this._inkBar.alignToElement(selectedLabelWrapper);
                    }
                    else {
                        this._inkBar.hide();
                    }
                };
                /**
                 * Stops the currently-running paginator interval.
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._stopInterval = function () {
                    this._stopScrolling.next();
                };
                /**
                 * Handles the user pressing down on one of the paginators.
                 * Starts scrolling the header after a certain amount of time.
                 * @param {?} direction In which direction the paginator should be scrolled.
                 * @return {?}
                 */
                MatPaginatedTabHeader.prototype._handlePaginatorPress = function (direction) {
                    var _this = this;
                    // Avoid overlapping timers.
                    this._stopInterval();
                    // Start a timer after the delay and keep firing based on the interval.
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["timer"])(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)
                        // Keep the timer going until something tells it to stop or the component is destroyed.
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"])(this._stopScrolling, this._destroyed)))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        var _b = _this._scrollHeader(direction), maxScrollDistance = _b.maxScrollDistance, distance = _b.distance;
                        // Stop the timer if we've reached the start or the end.
                        if (distance === 0 || distance >= maxScrollDistance) {
                            _this._stopInterval();
                        }
                    }));
                };
                /**
                 * Scrolls the header to a given position.
                 * @private
                 * @param {?} position Position to which to scroll.
                 * @return {?} Information on the current scroll distance and the maximum.
                 */
                MatPaginatedTabHeader.prototype._scrollTo = function (position) {
                    /** @type {?} */
                    var maxScrollDistance = this._getMaxScrollDistance();
                    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));
                    // Mark that the scroll distance has changed so that after the view is checked, the CSS
                    // transformation can move the header.
                    this._scrollDistanceChanged = true;
                    this._checkScrollingControls();
                    return { maxScrollDistance: maxScrollDistance, distance: this._scrollDistance };
                };
                return MatPaginatedTabHeader;
            }());
            MatPaginatedTabHeader.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            // TODO(crisbeto): this selector can be removed when we update to Angular 9.0.
                            selector: 'do-not-use-abstract-mat-paginated-tab-header'
                        },] },
            ];
            /** @nocollapse */
            MatPaginatedTabHeader.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__["ViewportRuler"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__["Platform"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Base class with all of the `MatTabHeader` functionality.
             * \@docs-private
             * @abstract
             */
            // tslint:disable-next-line:class-name
            var _MatTabHeaderBase = /** @class */ (function (_super) {
                __extends(_MatTabHeaderBase, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} changeDetectorRef
                 * @param {?} viewportRuler
                 * @param {?} dir
                 * @param {?} ngZone
                 * @param {?} platform
                 * @param {?=} animationMode
                 */
                function _MatTabHeaderBase(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, 
                // @breaking-change 9.0.0 `_animationMode` parameter to be made required.
                animationMode) {
                    var _this = _super.call(this, elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) || this;
                    _this._disableRipple = false;
                    return _this;
                }
                Object.defineProperty(_MatTabHeaderBase.prototype, "disableRipple", {
                    /**
                     * Whether the ripple effect is disabled or not.
                     * @return {?}
                     */
                    get: function () { return this._disableRipple; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._disableRipple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @protected
                 * @param {?} event
                 * @return {?}
                 */
                _MatTabHeaderBase.prototype._itemSelected = function (event) {
                    event.preventDefault();
                };
                return _MatTabHeaderBase;
            }(MatPaginatedTabHeader));
            _MatTabHeaderBase.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            // TODO(crisbeto): this selector can be removed when we update to Angular 9.0.
                            selector: 'do-not-use-abstract-mat-tab-header-base'
                        },] },
            ];
            /** @nocollapse */
            _MatTabHeaderBase.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__["ViewportRuler"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__["Platform"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            _MatTabHeaderBase.propDecorators = {
                disableRipple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * The header of the tab group which displays a list of all the tabs in the tab group. Includes
             * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the
             * width of the header container, then arrows will be displayed to allow the user to scroll
             * left and right across the header.
             * \@docs-private
             */
            var MatTabHeader = /** @class */ (function (_super) {
                __extends(MatTabHeader, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} changeDetectorRef
                 * @param {?} viewportRuler
                 * @param {?} dir
                 * @param {?} ngZone
                 * @param {?} platform
                 * @param {?=} animationMode
                 */
                function MatTabHeader(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, 
                // @breaking-change 9.0.0 `_animationMode` parameter to be made required.
                animationMode) {
                    return _super.call(this, elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) || this;
                }
                return MatTabHeader;
            }(_MatTabHeaderBase));
            MatTabHeader.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'mat-tab-header',
                            template: "<div class=\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\" #previousPaginator aria-hidden=\"true\" mat-ripple [matRippleDisabled]=\"_disableScrollBefore || disableRipple\" [class.mat-tab-header-pagination-disabled]=\"_disableScrollBefore\" (click)=\"_handlePaginatorClick('before')\" (mousedown)=\"_handlePaginatorPress('before')\" (touchend)=\"_stopInterval()\"><div class=\"mat-tab-header-pagination-chevron\"></div></div><div class=\"mat-tab-label-container\" #tabListContainer (keydown)=\"_handleKeydown($event)\"><div #tabList class=\"mat-tab-list\" [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\" role=\"tablist\" (cdkObserveContent)=\"_onContentChanges()\"><div class=\"mat-tab-labels\"><ng-content></ng-content></div><mat-ink-bar></mat-ink-bar></div></div><div class=\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\" #nextPaginator aria-hidden=\"true\" mat-ripple [matRippleDisabled]=\"_disableScrollAfter || disableRipple\" [class.mat-tab-header-pagination-disabled]=\"_disableScrollAfter\" (mousedown)=\"_handlePaginatorPress('after')\" (click)=\"_handlePaginatorClick('after')\" (touchend)=\"_stopInterval()\"><div class=\"mat-tab-header-pagination-chevron\"></div></div>",
                            styles: [".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-labels{display:flex}[mat-align-tabs=center] .mat-tab-labels{justify-content:center}[mat-align-tabs=end] .mat-tab-labels{justify-content:flex-end}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}._mat-animation-noopable.mat-tab-list{transition:none;animation:none}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{min-width:72px}}"],
                            inputs: ['selectedIndex'],
                            outputs: ['selectFocusedIndex', 'indexFocused'],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                'class': 'mat-tab-header',
                                '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',
                                '[class.mat-tab-header-rtl]': "_getLayoutDirection() == 'rtl'",
                            },
                        },] },
            ];
            /** @nocollapse */
            MatTabHeader.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__["ViewportRuler"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__["Platform"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            MatTabHeader.propDecorators = {
                _items: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatTabLabelWrapper,] }],
                _inkBar: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatInkBar, { static: true },] }],
                _tabListContainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['tabListContainer', { static: true },] }],
                _tabList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['tabList', { static: true },] }],
                _nextPaginator: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['nextPaginator', { static: false },] }],
                _previousPaginator: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['previousPaginator', { static: false },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Base class with all of the `MatTabNav` functionality.
             * \@docs-private
             * @abstract
             */
            // tslint:disable-next-line:class-name
            var _MatTabNavBase = /** @class */ (function (_super) {
                __extends(_MatTabNavBase, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} dir
                 * @param {?} ngZone
                 * @param {?} changeDetectorRef
                 * @param {?} viewportRuler
                 * @param {?=} platform
                 * @param {?=} animationMode
                 */
                function _MatTabNavBase(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, 
                /**
                 * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.
                 */
                platform, animationMode) {
                    var _this = _super.call(this, elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) || this;
                    _this._disableRipple = false;
                    /**
                     * Theme color of the nav bar.
                     */
                    _this.color = 'primary';
                    return _this;
                }
                Object.defineProperty(_MatTabNavBase.prototype, "backgroundColor", {
                    /**
                     * Background color of the tab nav.
                     * @return {?}
                     */
                    get: function () { return this._backgroundColor; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var classList = this._elementRef.nativeElement.classList;
                        classList.remove("mat-background-" + this.backgroundColor);
                        if (value) {
                            classList.add("mat-background-" + value);
                        }
                        this._backgroundColor = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(_MatTabNavBase.prototype, "disableRipple", {
                    /**
                     * Whether the ripple effect is disabled or not.
                     * @return {?}
                     */
                    get: function () { return this._disableRipple; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._disableRipple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @protected
                 * @return {?}
                 */
                _MatTabNavBase.prototype._itemSelected = function () {
                    // noop
                };
                /**
                 * @return {?}
                 */
                _MatTabNavBase.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    // We need this to run before the `changes` subscription in parent to ensure that the
                    // selectedIndex is up-to-date by the time the super class starts looking for it.
                    this._items.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.updateActiveLink();
                    }));
                    _super.prototype.ngAfterContentInit.call(this);
                };
                /**
                 * Notifies the component that the active link has been changed.
                 * \@breaking-change 8.0.0 `element` parameter to be removed.
                 * @param {?=} _element
                 * @return {?}
                 */
                _MatTabNavBase.prototype.updateActiveLink = function (_element) {
                    if (!this._items) {
                        return;
                    }
                    /** @type {?} */
                    var items = this._items.toArray();
                    for (var i = 0; i < items.length; i++) {
                        if (items[i].active) {
                            this.selectedIndex = i;
                            this._changeDetectorRef.markForCheck();
                            return;
                        }
                    }
                    // The ink bar should hide itself if no items are active.
                    this.selectedIndex = -1;
                    this._inkBar.hide();
                };
                return _MatTabNavBase;
            }(MatPaginatedTabHeader));
            _MatTabNavBase.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            // TODO(crisbeto): this selector can be removed when we update to Angular 9.0.
                            selector: 'do-not-use-abstract-mat-tab-nav-base'
                        },] },
            ];
            /** @nocollapse */
            _MatTabNavBase.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__["ViewportRuler"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__["Platform"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            _MatTabNavBase.propDecorators = {
                backgroundColor: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                disableRipple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * Navigation component matching the styles of the tab group header.
             * Provides anchored navigation with animated ink bar.
             */
            var MatTabNav = /** @class */ (function (_super) {
                __extends(MatTabNav, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} dir
                 * @param {?} ngZone
                 * @param {?} changeDetectorRef
                 * @param {?} viewportRuler
                 * @param {?=} platform
                 * @param {?=} animationMode
                 */
                function MatTabNav(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, 
                /**
                 * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.
                 */
                platform, animationMode) {
                    return _super.call(this, elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode) || this;
                }
                return MatTabNav;
            }(_MatTabNavBase));
            MatTabNav.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: '[mat-tab-nav-bar]',
                            exportAs: 'matTabNavBar, matTabNav',
                            inputs: ['color'],
                            template: "<div class=\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\" #previousPaginator aria-hidden=\"true\" mat-ripple [matRippleDisabled]=\"_disableScrollBefore || disableRipple\" [class.mat-tab-header-pagination-disabled]=\"_disableScrollBefore\" (click)=\"_handlePaginatorClick('before')\" (mousedown)=\"_handlePaginatorPress('before')\" (touchend)=\"_stopInterval()\"><div class=\"mat-tab-header-pagination-chevron\"></div></div><div class=\"mat-tab-link-container\" #tabListContainer (keydown)=\"_handleKeydown($event)\"><div class=\"mat-tab-list\" #tabList (cdkObserveContent)=\"_onContentChanges()\"><div class=\"mat-tab-links\"><ng-content></ng-content></div><mat-ink-bar></mat-ink-bar></div></div><div class=\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\" #nextPaginator aria-hidden=\"true\" mat-ripple [matRippleDisabled]=\"_disableScrollAfter || disableRipple\" [class.mat-tab-header-pagination-disabled]=\"_disableScrollAfter\" (mousedown)=\"_handlePaginatorPress('after')\" (click)=\"_handlePaginatorClick('after')\" (touchend)=\"_stopInterval()\"><div class=\"mat-tab-header-pagination-chevron\"></div></div>",
                            styles: [".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-links{display:flex}[mat-align-tabs=center] .mat-tab-links{justify-content:center}[mat-align-tabs=end] .mat-tab-links{justify-content:flex-end}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-link-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:0}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-link:focus{outline:dotted 2px}}.mat-tab-link.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-link.mat-tab-disabled{opacity:.5}}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-link{opacity:1}}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media (max-width:599px){.mat-tab-link{min-width:72px}}"],
                            host: {
                                'class': 'mat-tab-nav-bar mat-tab-header',
                                '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',
                                '[class.mat-tab-header-rtl]': "_getLayoutDirection() == 'rtl'",
                                '[class.mat-primary]': 'color !== "warn" && color !== "accent"',
                                '[class.mat-accent]': 'color === "accent"',
                                '[class.mat-warn]': 'color === "warn"',
                            },
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        },] },
            ];
            /** @nocollapse */
            MatTabNav.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__["ViewportRuler"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__["Platform"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            MatTabNav.propDecorators = {
                _items: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                                         * @return {?}
                                         */function () { return MatTabLink; })), { descendants: true },] }],
                _inkBar: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatInkBar, { static: true },] }],
                _tabListContainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['tabListContainer', { static: true },] }],
                _tabList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['tabList', { static: true },] }],
                _nextPaginator: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['nextPaginator', { static: false },] }],
                _previousPaginator: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['previousPaginator', { static: false },] }]
            };
            // Boilerplate for applying mixins to MatTabLink.
            var MatTabLinkMixinBase = /** @class */ (function () {
                function MatTabLinkMixinBase() {
                }
                return MatTabLinkMixinBase;
            }());
            /** @type {?} */
            var _MatTabLinkMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(MatTabLinkMixinBase)));
            /**
             * Base class with all of the `MatTabLink` functionality.
             */
            // tslint:disable-next-line:class-name
            var _MatTabLinkBase = /** @class */ (function (_super) {
                __extends(_MatTabLinkBase, _super);
                /**
                 * @param {?} _tabNavBar
                 * @param {?} elementRef
                 * @param {?} globalRippleOptions
                 * @param {?} tabIndex
                 * @param {?} _focusMonitor
                 * @param {?=} animationMode
                 */
                function _MatTabLinkBase(_tabNavBar, elementRef, globalRippleOptions, tabIndex, _focusMonitor, animationMode) {
                    var _this = _super.call(this) || this;
                    _this._tabNavBar = _tabNavBar;
                    _this.elementRef = elementRef;
                    _this._focusMonitor = _focusMonitor;
                    /**
                     * Whether the tab link is active or not.
                     */
                    _this._isActive = false;
                    _this.rippleConfig = globalRippleOptions || {};
                    _this.tabIndex = parseInt(tabIndex) || 0;
                    if (animationMode === 'NoopAnimations') {
                        _this.rippleConfig.animation = { enterDuration: 0, exitDuration: 0 };
                    }
                    _focusMonitor.monitor(elementRef);
                    return _this;
                }
                Object.defineProperty(_MatTabLinkBase.prototype, "active", {
                    /**
                     * Whether the link is active.
                     * @return {?}
                     */
                    get: function () { return this._isActive; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._isActive) {
                            this._isActive = value;
                            this._tabNavBar.updateActiveLink(this.elementRef);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(_MatTabLinkBase.prototype, "rippleDisabled", {
                    /**
                     * Whether ripples are disabled on interaction.
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||
                            !!this.rippleConfig.disabled;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                _MatTabLinkBase.prototype.focus = function () {
                    this.elementRef.nativeElement.focus();
                };
                /**
                 * @return {?}
                 */
                _MatTabLinkBase.prototype.ngOnDestroy = function () {
                    this._focusMonitor.stopMonitoring(this.elementRef);
                };
                return _MatTabLinkBase;
            }(_MatTabLinkMixinBase));
            _MatTabLinkBase.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            // TODO(crisbeto): this selector can be removed when we update to Angular 9.0.
                            selector: 'do-not-use-abstract-mat-tab-link-base'
                        },] },
            ];
            /** @nocollapse */
            _MatTabLinkBase.ctorParameters = function () { return [
                { type: _MatTabNavBase },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MAT_RIPPLE_GLOBAL_OPTIONS"],] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"], args: ['tabindex',] }] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__["FocusMonitor"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            _MatTabLinkBase.propDecorators = {
                active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * Link inside of a `mat-tab-nav-bar`.
             */
            var MatTabLink = /** @class */ (function (_super) {
                __extends(MatTabLink, _super);
                /**
                 * @param {?} tabNavBar
                 * @param {?} elementRef
                 * @param {?} ngZone
                 * @param {?} platform
                 * @param {?} globalRippleOptions
                 * @param {?} tabIndex
                 * @param {?} focusMonitor
                 * @param {?=} animationMode
                 */
                function MatTabLink(tabNavBar, elementRef, ngZone, platform, globalRippleOptions, tabIndex, focusMonitor, animationMode) {
                    var _this = _super.call(this, tabNavBar, elementRef, globalRippleOptions, tabIndex, focusMonitor, animationMode) || this;
                    _this._tabLinkRipple = new _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["RippleRenderer"](_this, ngZone, elementRef, platform);
                    _this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);
                    return _this;
                }
                /**
                 * @return {?}
                 */
                MatTabLink.prototype.ngOnDestroy = function () {
                    _super.prototype.ngOnDestroy.call(this);
                    this._tabLinkRipple._removeTriggerEvents();
                };
                return MatTabLink;
            }(_MatTabLinkBase));
            MatTabLink.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[mat-tab-link], [matTabLink]',
                            exportAs: 'matTabLink',
                            inputs: ['disabled', 'disableRipple', 'tabIndex'],
                            host: {
                                'class': 'mat-tab-link',
                                '[attr.aria-current]': 'active ? "page" : null',
                                '[attr.aria-disabled]': 'disabled',
                                '[attr.tabIndex]': 'tabIndex',
                                '[class.mat-tab-disabled]': 'disabled',
                                '[class.mat-tab-label-active]': 'active',
                            }
                        },] },
            ];
            /** @nocollapse */
            MatTabLink.ctorParameters = function () { return [
                { type: MatTabNav },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__["Platform"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MAT_RIPPLE_GLOBAL_OPTIONS"],] }] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"], args: ['tabindex',] }] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__["FocusMonitor"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__["ANIMATION_MODULE_TYPE"],] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatTabsModule = /** @class */ (function () {
                function MatTabsModule() {
                }
                return MatTabsModule;
            }());
            MatTabsModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_14__["CommonModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"],
                                _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["PortalModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatRippleModule"],
                                _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_13__["ObserversModule"],
                                _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__["A11yModule"],
                            ],
                            // Don't export all components because some are only to be used internally.
                            exports: [
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"],
                                MatTabGroup,
                                MatTabLabel,
                                MatTab,
                                MatTabNav,
                                MatTabLink,
                                MatTabContent,
                            ],
                            declarations: [
                                MatTabGroup,
                                MatTabLabel,
                                MatTab,
                                MatInkBar,
                                MatTabLabelWrapper,
                                MatTabNav,
                                MatTabLink,
                                MatTabBody,
                                MatTabBodyPortal,
                                MatTabHeader,
                                MatTabContent,
                                ( /** @type {?} */(
                                // TODO(crisbeto): these can be removed once they're turned into selector-less directives.
                                MatPaginatedTabHeader)),
                                ( /** @type {?} */(_MatTabGroupBase)),
                                ( /** @type {?} */(_MatTabNavBase)),
                                ( /** @type {?} */(_MatTabBodyBase)),
                                ( /** @type {?} */(_MatTabHeaderBase)),
                                ( /** @type {?} */(_MatTabLinkBase)),
                            ],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=tabs.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/toolbar.js": 
        /*!***********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/toolbar.js ***!
          \***********************************************************/
        /*! exports provided: MatToolbarModule, throwToolbarMixedModesError, MatToolbarRow, MatToolbar */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatToolbarModule", function () { return MatToolbarModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwToolbarMixedModesError", function () { return throwToolbarMixedModesError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatToolbarRow", function () { return MatToolbarRow; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatToolbar", function () { return MatToolbar; });
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Boilerplate for applying mixins to MatToolbar.
            /**
             * \@docs-private
             */
            var MatToolbarBase = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 */
                function MatToolbarBase(_elementRef) {
                    this._elementRef = _elementRef;
                }
                return MatToolbarBase;
            }());
            /** @type {?} */
            var _MatToolbarMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(MatToolbarBase);
            var MatToolbarRow = /** @class */ (function () {
                function MatToolbarRow() {
                }
                return MatToolbarRow;
            }());
            MatToolbarRow.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                            selector: 'mat-toolbar-row',
                            exportAs: 'matToolbarRow',
                            host: { 'class': 'mat-toolbar-row' },
                        },] },
            ];
            var MatToolbar = /** @class */ (function (_super) {
                __extends(MatToolbar, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} _platform
                 * @param {?=} document
                 */
                function MatToolbar(elementRef, _platform, document) {
                    var _this = _super.call(this, elementRef) || this;
                    _this._platform = _platform;
                    // TODO: make the document a required param when doing breaking changes.
                    _this._document = document;
                    return _this;
                }
                /**
                 * @return {?}
                 */
                MatToolbar.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    if (!Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["isDevMode"])() || !this._platform.isBrowser) {
                        return;
                    }
                    this._checkToolbarMixedModes();
                    this._toolbarRows.changes.subscribe(( /**
                     * @return {?}
                     */function () { return _this._checkToolbarMixedModes(); }));
                };
                /**
                 * Throws an exception when developers are attempting to combine the different toolbar row modes.
                 * @private
                 * @return {?}
                 */
                MatToolbar.prototype._checkToolbarMixedModes = function () {
                    var _this = this;
                    if (!this._toolbarRows.length) {
                        return;
                    }
                    // Check if there are any other DOM nodes that can display content but aren't inside of
                    // a <mat-toolbar-row> element.
                    /** @type {?} */
                    var isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)
                        .filter(( /**
                 * @param {?} node
                 * @return {?}
                 */function (/**
                 * @param {?} node
                 * @return {?}
                 */ node) { return !(node.classList && node.classList.contains('mat-toolbar-row')); }))
                        .filter(( /**
                 * @param {?} node
                 * @return {?}
                 */function (/**
                 * @param {?} node
                 * @return {?}
                 */ node) { return node.nodeType !== (_this._document ? _this._document.COMMENT_NODE : 8); }))
                        .some(( /**
                 * @param {?} node
                 * @return {?}
                 */function (/**
                 * @param {?} node
                 * @return {?}
                 */ node) { return !!(node.textContent && node.textContent.trim()); }));
                    if (isCombinedUsage) {
                        throwToolbarMixedModesError();
                    }
                };
                return MatToolbar;
            }(_MatToolbarMixinBase));
            MatToolbar.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{ selector: 'mat-toolbar',
                            exportAs: 'matToolbar',
                            template: "<ng-content></ng-content><ng-content select=\"mat-toolbar-row\"></ng-content>",
                            styles: ["@media (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}"],
                            inputs: ['color'],
                            host: {
                                'class': 'mat-toolbar',
                                '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',
                                '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                        },] },
            ];
            /** @nocollapse */
            MatToolbar.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["Platform"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"],] }] }
            ]; };
            MatToolbar.propDecorators = {
                _toolbarRows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [MatToolbarRow,] }]
            };
            /**
             * Throws an exception when attempting to combine the different toolbar row modes.
             * \@docs-private
             * @return {?}
             */
            function throwToolbarMixedModesError() {
                throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +
                    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +
                    'inside of a `<mat-toolbar>` for a single row.');
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatToolbarModule = /** @class */ (function () {
                function MatToolbarModule() {
                }
                return MatToolbarModule;
            }());
            MatToolbarModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                            imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]],
                            exports: [MatToolbar, MatToolbarRow, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]],
                            declarations: [MatToolbar, MatToolbarRow],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=toolbar.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/tooltip.js": 
        /*!***********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/tooltip.js ***!
          \***********************************************************/
        /*! exports provided: MatTooltipModule, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, TooltipComponent, matTooltipAnimations */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTooltipModule", function () { return MatTooltipModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatTooltipInvalidPositionError", function () { return getMatTooltipInvalidPositionError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY", function () { return MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY", function () { return MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL_THROTTLE_MS", function () { return SCROLL_THROTTLE_MS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOOLTIP_PANEL_CLASS", function () { return TOOLTIP_PANEL_CLASS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY", function () { return MAT_TOOLTIP_SCROLL_STRATEGY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER", function () { return MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_DEFAULT_OPTIONS", function () { return MAT_TOOLTIP_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTooltip", function () { return MatTooltip; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipComponent", function () { return TooltipComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matTooltipAnimations", function () { return matTooltipAnimations; });
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/layout */ "./node_modules/@angular/cdk/esm2015/layout.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm2015/scrolling.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Animations used by MatTooltip.
             * \@docs-private
             * @type {?}
             */
            var matTooltipAnimations = {
                /**
                 * Animation that transitions a tooltip in and out.
                 */
                tooltipState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('state', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('initial, void, hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 0, transform: 'scale(0)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ transform: 'scale(1)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('200ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["keyframes"])([
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 0, transform: 'scale(0)', offset: 0 }),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 1, transform: 'scale(1)', offset: 1 })
                    ]))),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('100ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 0 }))),
                ])
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Time in ms to throttle repositioning after scroll events.
             * @type {?}
             */
            var SCROLL_THROTTLE_MS = 20;
            /**
             * CSS class that will be attached to the overlay panel.
             * @type {?}
             */
            var TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';
            /**
             * Creates an error to be thrown if the user supplied an invalid tooltip position.
             * \@docs-private
             * @param {?} position
             * @return {?}
             */
            function getMatTooltipInvalidPositionError(position) {
                return Error("Tooltip position \"" + position + "\" is invalid.");
            }
            /**
             * Injection token that determines the scroll handling while a tooltip is visible.
             * @type {?}
             */
            var MAT_TOOLTIP_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_10__["InjectionToken"]('mat-tooltip-scroll-strategy');
            /**
             * \@docs-private
             * @param {?} overlay
             * @return {?}
             */
            function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {
                return ( /**
                 * @return {?}
                 */function () { return overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS }); });
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {
                provide: MAT_TOOLTIP_SCROLL_STRATEGY,
                deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"]],
                useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,
            };
            /**
             * Injection token to be used to override the default options for `matTooltip`.
             * @type {?}
             */
            var MAT_TOOLTIP_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_10__["InjectionToken"]('mat-tooltip-default-options', {
                providedIn: 'root',
                factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {
                return {
                    showDelay: 0,
                    hideDelay: 0,
                    touchendHideDelay: 1500,
                };
            }
            /**
             * Directive that attaches a material design tooltip to the host element. Animates the showing and
             * hiding of a tooltip provided position (defaults to below the element).
             *
             * https://material.io/design/components/tooltips.html
             */
            var MatTooltip = /** @class */ (function () {
                /**
                 * @param {?} _overlay
                 * @param {?} _elementRef
                 * @param {?} _scrollDispatcher
                 * @param {?} _viewContainerRef
                 * @param {?} _ngZone
                 * @param {?} platform
                 * @param {?} _ariaDescriber
                 * @param {?} _focusMonitor
                 * @param {?} scrollStrategy
                 * @param {?} _dir
                 * @param {?} _defaultOptions
                 * @param {?=} hammerLoader
                 */
                function MatTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, hammerLoader) {
                    var _this = this;
                    this._overlay = _overlay;
                    this._elementRef = _elementRef;
                    this._scrollDispatcher = _scrollDispatcher;
                    this._viewContainerRef = _viewContainerRef;
                    this._ngZone = _ngZone;
                    this._ariaDescriber = _ariaDescriber;
                    this._focusMonitor = _focusMonitor;
                    this._dir = _dir;
                    this._defaultOptions = _defaultOptions;
                    this._position = 'below';
                    this._disabled = false;
                    /**
                     * The default delay in ms before showing the tooltip after show is called
                     */
                    this.showDelay = this._defaultOptions.showDelay;
                    /**
                     * The default delay in ms before hiding the tooltip after hide is called
                     */
                    this.hideDelay = this._defaultOptions.hideDelay;
                    this._message = '';
                    this._manualListeners = new Map();
                    /**
                     * Emits when the component is destroyed.
                     */
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
                    this._scrollStrategy = scrollStrategy;
                    /** @type {?} */
                    var element = _elementRef.nativeElement;
                    /** @type {?} */
                    var hasGestures = typeof window === 'undefined' || (( /** @type {?} */(window))).Hammer || hammerLoader;
                    // The mouse events shouldn't be bound on mobile devices, because they can prevent the
                    // first tap from firing its click event or can cause the tooltip to open for clicks.
                    if (!platform.IOS && !platform.ANDROID) {
                        this._manualListeners
                            .set('mouseenter', ( /**
                     * @return {?}
                     */function () { return _this.show(); }))
                            .set('mouseleave', ( /**
                     * @return {?}
                     */function () { return _this.hide(); }));
                    }
                    else if (!hasGestures) {
                        // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise
                        // there's no way for the user to trigger the tooltip on a touch device.
                        this._manualListeners.set('touchstart', ( /**
                         * @return {?}
                         */function () { return _this.show(); }));
                    }
                    this._manualListeners.forEach(( /**
                     * @param {?} listener
                     * @param {?} event
                     * @return {?}
                     */function (listener, event) { return element.addEventListener(event, listener); }));
                    _focusMonitor.monitor(_elementRef).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @param {?} origin
                     * @return {?}
                     */function (/**
                     * @param {?} origin
                     * @return {?}
                     */ origin) {
                        // Note that the focus monitor runs outside the Angular zone.
                        if (!origin) {
                            _ngZone.run(( /**
                             * @return {?}
                             */function () { return _this.hide(0); }));
                        }
                        else if (origin === 'keyboard') {
                            _ngZone.run(( /**
                             * @return {?}
                             */function () { return _this.show(); }));
                        }
                    }));
                    if (_defaultOptions && _defaultOptions.position) {
                        this.position = _defaultOptions.position;
                    }
                }
                Object.defineProperty(MatTooltip.prototype, "position", {
                    /**
                     * Allows the user to define the position of the tooltip relative to the parent element
                     * @return {?}
                     */
                    get: function () { return this._position; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._position) {
                            this._position = value;
                            if (this._overlayRef) {
                                this._updatePosition();
                                if (this._tooltipInstance) {
                                    ( /** @type {?} */(this._tooltipInstance)).show(0);
                                }
                                this._overlayRef.updatePosition();
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatTooltip.prototype, "disabled", {
                    /**
                     * Disables the display of the tooltip.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                        // If tooltip is disabled, hide immediately.
                        if (this._disabled) {
                            this.hide(0);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatTooltip.prototype, "message", {
                    /**
                     * The message to be displayed in the tooltip
                     * @return {?}
                     */
                    get: function () { return this._message; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        var _this = this;
                        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);
                        // If the message is not a string (e.g. number), convert it to a string and trim it.
                        this._message = value != null ? ("" + value).trim() : '';
                        if (!this._message && this._isTooltipVisible()) {
                            this.hide(0);
                        }
                        else {
                            this._updateTooltipMessage();
                            this._ngZone.runOutsideAngular(( /**
                             * @return {?}
                             */function () {
                                // The `AriaDescriber` has some functionality that avoids adding a description if it's the
                                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger
                                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the
                                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.
                                Promise.resolve().then(( /**
                                 * @return {?}
                                 */function () {
                                    _this._ariaDescriber.describe(_this._elementRef.nativeElement, _this.message);
                                }));
                            }));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatTooltip.prototype, "tooltipClass", {
                    /**
                     * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.
                     * @return {?}
                     */
                    get: function () { return this._tooltipClass; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._tooltipClass = value;
                        if (this._tooltipInstance) {
                            this._setTooltipClass(this._tooltipClass);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Setup styling-specific things
                 * @return {?}
                 */
                MatTooltip.prototype.ngOnInit = function () {
                    /** @type {?} */
                    var element = this._elementRef.nativeElement;
                    /** @type {?} */
                    var elementStyle = ( /** @type {?} */(element.style));
                    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
                        // When we bind a gesture event on an element (in this case `longpress`), HammerJS
                        // will add some inline styles by default, including `user-select: none`. This is
                        // problematic on iOS and in Safari, because it will prevent users from typing in inputs.
                        // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected
                        // behavior for text fields, we always clear the `user-select` to avoid such issues.
                        elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';
                    }
                    // Hammer applies `-webkit-user-drag: none` on all elements by default,
                    // which breaks the native drag&drop. If the consumer explicitly made
                    // the element draggable, clear the `-webkit-user-drag`.
                    if (element.draggable && elementStyle.webkitUserDrag === 'none') {
                        elementStyle.webkitUserDrag = '';
                    }
                };
                /**
                 * Dispose the tooltip when destroyed.
                 * @return {?}
                 */
                MatTooltip.prototype.ngOnDestroy = function () {
                    var _this = this;
                    if (this._overlayRef) {
                        this._overlayRef.dispose();
                        this._tooltipInstance = null;
                    }
                    // Clean up the event listeners set in the constructor
                    this._manualListeners.forEach(( /**
                     * @param {?} listener
                     * @param {?} event
                     * @return {?}
                     */function (listener, event) {
                        _this._elementRef.nativeElement.removeEventListener(event, listener);
                    }));
                    this._manualListeners.clear();
                    this._destroyed.next();
                    this._destroyed.complete();
                    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);
                    this._focusMonitor.stopMonitoring(this._elementRef);
                };
                /**
                 * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input
                 * @param {?=} delay
                 * @return {?}
                 */
                MatTooltip.prototype.show = function (delay) {
                    var _this = this;
                    if (delay === void 0) { delay = this.showDelay; }
                    if (this.disabled || !this.message || (this._isTooltipVisible() &&
                        !( /** @type {?} */(this._tooltipInstance))._showTimeoutId && !( /** @type {?} */(this._tooltipInstance))._hideTimeoutId)) {
                        return;
                    }
                    /** @type {?} */
                    var overlayRef = this._createOverlay();
                    this._detach();
                    this._portal = this._portal || new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["ComponentPortal"](TooltipComponent, this._viewContainerRef);
                    this._tooltipInstance = overlayRef.attach(this._portal).instance;
                    this._tooltipInstance.afterHidden()
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed))
                        .subscribe(( /**
                 * @return {?}
                 */function () { return _this._detach(); }));
                    this._setTooltipClass(this._tooltipClass);
                    this._updateTooltipMessage();
                    ( /** @type {?} */(this._tooltipInstance)).show(delay);
                };
                /**
                 * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input
                 * @param {?=} delay
                 * @return {?}
                 */
                MatTooltip.prototype.hide = function (delay) {
                    if (delay === void 0) { delay = this.hideDelay; }
                    if (this._tooltipInstance) {
                        this._tooltipInstance.hide(delay);
                    }
                };
                /**
                 * Shows/hides the tooltip
                 * @return {?}
                 */
                MatTooltip.prototype.toggle = function () {
                    this._isTooltipVisible() ? this.hide() : this.show();
                };
                /**
                 * Returns true if the tooltip is currently visible to the user
                 * @return {?}
                 */
                MatTooltip.prototype._isTooltipVisible = function () {
                    return !!this._tooltipInstance && this._tooltipInstance.isVisible();
                };
                /**
                 * Handles the keydown events on the host element.
                 * @param {?} e
                 * @return {?}
                 */
                MatTooltip.prototype._handleKeydown = function (e) {
                    if (this._isTooltipVisible() && e.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["ESCAPE"] && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["hasModifierKey"])(e)) {
                        e.preventDefault();
                        e.stopPropagation();
                        this.hide(0);
                    }
                };
                /**
                 * Handles the touchend events on the host element.
                 * @return {?}
                 */
                MatTooltip.prototype._handleTouchend = function () {
                    this.hide(this._defaultOptions.touchendHideDelay);
                };
                /**
                 * Create the overlay config and position strategy
                 * @private
                 * @return {?}
                 */
                MatTooltip.prototype._createOverlay = function () {
                    var _this = this;
                    if (this._overlayRef) {
                        return this._overlayRef;
                    }
                    /** @type {?} */
                    var scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);
                    // Create connected position strategy that listens for scroll events to reposition.
                    /** @type {?} */
                    var strategy = this._overlay.position()
                        .flexibleConnectedTo(this._elementRef)
                        .withTransformOriginOn('.mat-tooltip')
                        .withFlexibleDimensions(false)
                        .withViewportMargin(8)
                        .withScrollableContainers(scrollableAncestors);
                    strategy.positionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @param {?} change
                     * @return {?}
                     */function (/**
                     * @param {?} change
                     * @return {?}
                     */ change) {
                        if (_this._tooltipInstance) {
                            if (change.scrollableViewProperties.isOverlayClipped && _this._tooltipInstance.isVisible()) {
                                // After position changes occur and the overlay is clipped by
                                // a parent scrollable then close the tooltip.
                                _this._ngZone.run(( /**
                                 * @return {?}
                                 */function () { return _this.hide(0); }));
                            }
                        }
                    }));
                    this._overlayRef = this._overlay.create({
                        direction: this._dir,
                        positionStrategy: strategy,
                        panelClass: TOOLTIP_PANEL_CLASS,
                        scrollStrategy: this._scrollStrategy()
                    });
                    this._updatePosition();
                    this._overlayRef.detachments()
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed))
                        .subscribe(( /**
                 * @return {?}
                 */function () { return _this._detach(); }));
                    return this._overlayRef;
                };
                /**
                 * Detaches the currently-attached tooltip.
                 * @private
                 * @return {?}
                 */
                MatTooltip.prototype._detach = function () {
                    if (this._overlayRef && this._overlayRef.hasAttached()) {
                        this._overlayRef.detach();
                    }
                    this._tooltipInstance = null;
                };
                /**
                 * Updates the position of the current tooltip.
                 * @private
                 * @return {?}
                 */
                MatTooltip.prototype._updatePosition = function () {
                    /** @type {?} */
                    var position = ( /** @type {?} */(( /** @type {?} */(this._overlayRef)).getConfig().positionStrategy));
                    /** @type {?} */
                    var origin = this._getOrigin();
                    /** @type {?} */
                    var overlay = this._getOverlayPosition();
                    position.withPositions([
                        Object.assign({}, origin.main, overlay.main),
                        Object.assign({}, origin.fallback, overlay.fallback)
                    ]);
                };
                /**
                 * Returns the origin position and a fallback position based on the user's position preference.
                 * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).
                 * @return {?}
                 */
                MatTooltip.prototype._getOrigin = function () {
                    /** @type {?} */
                    var isLtr = !this._dir || this._dir.value == 'ltr';
                    /** @type {?} */
                    var position = this.position;
                    /** @type {?} */
                    var originPosition;
                    if (position == 'above' || position == 'below') {
                        originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };
                    }
                    else if (position == 'before' ||
                        (position == 'left' && isLtr) ||
                        (position == 'right' && !isLtr)) {
                        originPosition = { originX: 'start', originY: 'center' };
                    }
                    else if (position == 'after' ||
                        (position == 'right' && isLtr) ||
                        (position == 'left' && !isLtr)) {
                        originPosition = { originX: 'end', originY: 'center' };
                    }
                    else {
                        throw getMatTooltipInvalidPositionError(position);
                    }
                    var _b = this._invertPosition(originPosition.originX, originPosition.originY), x = _b.x, y = _b.y;
                    return {
                        main: originPosition,
                        fallback: { originX: x, originY: y }
                    };
                };
                /**
                 * Returns the overlay position and a fallback position based on the user's preference
                 * @return {?}
                 */
                MatTooltip.prototype._getOverlayPosition = function () {
                    /** @type {?} */
                    var isLtr = !this._dir || this._dir.value == 'ltr';
                    /** @type {?} */
                    var position = this.position;
                    /** @type {?} */
                    var overlayPosition;
                    if (position == 'above') {
                        overlayPosition = { overlayX: 'center', overlayY: 'bottom' };
                    }
                    else if (position == 'below') {
                        overlayPosition = { overlayX: 'center', overlayY: 'top' };
                    }
                    else if (position == 'before' ||
                        (position == 'left' && isLtr) ||
                        (position == 'right' && !isLtr)) {
                        overlayPosition = { overlayX: 'end', overlayY: 'center' };
                    }
                    else if (position == 'after' ||
                        (position == 'right' && isLtr) ||
                        (position == 'left' && !isLtr)) {
                        overlayPosition = { overlayX: 'start', overlayY: 'center' };
                    }
                    else {
                        throw getMatTooltipInvalidPositionError(position);
                    }
                    var _b = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY), x = _b.x, y = _b.y;
                    return {
                        main: overlayPosition,
                        fallback: { overlayX: x, overlayY: y }
                    };
                };
                /**
                 * Updates the tooltip message and repositions the overlay according to the new message length
                 * @private
                 * @return {?}
                 */
                MatTooltip.prototype._updateTooltipMessage = function () {
                    var _this = this;
                    // Must wait for the message to be painted to the tooltip so that the overlay can properly
                    // calculate the correct positioning based on the size of the text.
                    if (this._tooltipInstance) {
                        this._tooltipInstance.message = this.message;
                        this._tooltipInstance._markForCheck();
                        this._ngZone.onMicrotaskEmpty.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(( /**
                         * @return {?}
                         */function () {
                            if (_this._tooltipInstance) {
                                ( /** @type {?} */(_this._overlayRef)).updatePosition();
                            }
                        }));
                    }
                };
                /**
                 * Updates the tooltip class
                 * @private
                 * @param {?} tooltipClass
                 * @return {?}
                 */
                MatTooltip.prototype._setTooltipClass = function (tooltipClass) {
                    if (this._tooltipInstance) {
                        this._tooltipInstance.tooltipClass = tooltipClass;
                        this._tooltipInstance._markForCheck();
                    }
                };
                /**
                 * Inverts an overlay position.
                 * @private
                 * @param {?} x
                 * @param {?} y
                 * @return {?}
                 */
                MatTooltip.prototype._invertPosition = function (x, y) {
                    if (this.position === 'above' || this.position === 'below') {
                        if (y === 'top') {
                            y = 'bottom';
                        }
                        else if (y === 'bottom') {
                            y = 'top';
                        }
                    }
                    else {
                        if (x === 'end') {
                            x = 'start';
                        }
                        else if (x === 'start') {
                            x = 'end';
                        }
                    }
                    return { x: x, y: y };
                };
                return MatTooltip;
            }());
            MatTooltip.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Directive"], args: [{
                            selector: '[matTooltip]',
                            exportAs: 'matTooltip',
                            host: {
                                '(longpress)': 'show()',
                                '(keydown)': '_handleKeydown($event)',
                                '(touchend)': '_handleTouchend()',
                            },
                        },] },
            ];
            /** @nocollapse */
            MatTooltip.ctorParameters = function () { return [
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["ElementRef"] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__["ScrollDispatcher"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["ViewContainerRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["NgZone"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["AriaDescriber"] },
                { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Inject"], args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Inject"], args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Inject"], args: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_11__["HAMMER_LOADER"],] }] }
            ]; };
            MatTooltip.propDecorators = {
                position: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Input"], args: ['matTooltipPosition',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Input"], args: ['matTooltipDisabled',] }],
                showDelay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Input"], args: ['matTooltipShowDelay',] }],
                hideDelay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Input"], args: ['matTooltipHideDelay',] }],
                message: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Input"], args: ['matTooltip',] }],
                tooltipClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Input"], args: ['matTooltipClass',] }]
            };
            /**
             * Internal component that wraps the tooltip's content.
             * \@docs-private
             */
            var TooltipComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _breakpointObserver
                 */
                function TooltipComponent(_changeDetectorRef, _breakpointObserver) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._breakpointObserver = _breakpointObserver;
                    /**
                     * Property watched by the animation framework to show or hide the tooltip
                     */
                    this._visibility = 'initial';
                    /**
                     * Whether interactions on the page should close the tooltip
                     */
                    this._closeOnInteraction = false;
                    /**
                     * Subject for notifying that the tooltip has been hidden from the view
                     */
                    this._onHide = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
                    /**
                     * Stream that emits whether the user has a handset-sized display.
                     */
                    this._isHandset = this._breakpointObserver.observe(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_5__["Breakpoints"].Handset);
                }
                /**
                 * Shows the tooltip with an animation originating from the provided origin
                 * @param {?} delay Amount of milliseconds to the delay showing the tooltip.
                 * @return {?}
                 */
                TooltipComponent.prototype.show = function (delay) {
                    var _this = this;
                    // Cancel the delayed hide if it is scheduled
                    if (this._hideTimeoutId) {
                        clearTimeout(this._hideTimeoutId);
                        this._hideTimeoutId = null;
                    }
                    // Body interactions should cancel the tooltip if there is a delay in showing.
                    this._closeOnInteraction = true;
                    this._showTimeoutId = setTimeout(( /**
                     * @return {?}
                     */function () {
                        _this._visibility = 'visible';
                        _this._showTimeoutId = null;
                        // Mark for check so if any parent component has set the
                        // ChangeDetectionStrategy to OnPush it will be checked anyways
                        _this._markForCheck();
                    }), delay);
                };
                /**
                 * Begins the animation to hide the tooltip after the provided delay in ms.
                 * @param {?} delay Amount of milliseconds to delay showing the tooltip.
                 * @return {?}
                 */
                TooltipComponent.prototype.hide = function (delay) {
                    var _this = this;
                    // Cancel the delayed show if it is scheduled
                    if (this._showTimeoutId) {
                        clearTimeout(this._showTimeoutId);
                        this._showTimeoutId = null;
                    }
                    this._hideTimeoutId = setTimeout(( /**
                     * @return {?}
                     */function () {
                        _this._visibility = 'hidden';
                        _this._hideTimeoutId = null;
                        // Mark for check so if any parent component has set the
                        // ChangeDetectionStrategy to OnPush it will be checked anyways
                        _this._markForCheck();
                    }), delay);
                };
                /**
                 * Returns an observable that notifies when the tooltip has been hidden from view.
                 * @return {?}
                 */
                TooltipComponent.prototype.afterHidden = function () {
                    return this._onHide.asObservable();
                };
                /**
                 * Whether the tooltip is being displayed.
                 * @return {?}
                 */
                TooltipComponent.prototype.isVisible = function () {
                    return this._visibility === 'visible';
                };
                /**
                 * @return {?}
                 */
                TooltipComponent.prototype.ngOnDestroy = function () {
                    this._onHide.complete();
                };
                /**
                 * @return {?}
                 */
                TooltipComponent.prototype._animationStart = function () {
                    this._closeOnInteraction = false;
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                TooltipComponent.prototype._animationDone = function (event) {
                    /** @type {?} */
                    var toState = ( /** @type {?} */(event.toState));
                    if (toState === 'hidden' && !this.isVisible()) {
                        this._onHide.next();
                    }
                    if (toState === 'visible' || toState === 'hidden') {
                        this._closeOnInteraction = true;
                    }
                };
                /**
                 * Interactions on the HTML body should close the tooltip immediately as defined in the
                 * material design spec.
                 * https://material.io/design/components/tooltips.html#behavior
                 * @return {?}
                 */
                TooltipComponent.prototype._handleBodyInteraction = function () {
                    if (this._closeOnInteraction) {
                        this.hide(0);
                    }
                };
                /**
                 * Marks that the tooltip needs to be checked in the next change detection run.
                 * Mainly used for rendering the initial text before positioning a tooltip, which
                 * can be problematic in components with OnPush change detection.
                 * @return {?}
                 */
                TooltipComponent.prototype._markForCheck = function () {
                    this._changeDetectorRef.markForCheck();
                };
                return TooltipComponent;
            }());
            TooltipComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Component"], args: [{ selector: 'mat-tooltip-component',
                            template: "<div class=\"mat-tooltip\" [ngClass]=\"tooltipClass\" [class.mat-tooltip-handset]=\"(_isHandset | async)?.matches\" [@state]=\"_visibility\" (@state.start)=\"_animationStart()\" (@state.done)=\"_animationDone($event)\">{{message}}</div>",
                            styles: [".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_10__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_10__["ChangeDetectionStrategy"].OnPush,
                            animations: [matTooltipAnimations.tooltipState],
                            host: {
                                // Forces the element to have a layout in IE and Edge. This fixes issues where the element
                                // won't be rendered if the animations are disabled or there is no web animations polyfill.
                                '[style.zoom]': '_visibility === "visible" ? 1 : null',
                                '(body:click)': 'this._handleBodyInteraction()',
                                'aria-hidden': 'true',
                            }
                        },] },
            ];
            /** @nocollapse */
            TooltipComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["ChangeDetectorRef"] },
                { type: _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_5__["BreakpointObserver"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MatTooltipModule = /** @class */ (function () {
                function MatTooltipModule() {
                }
                return MatTooltipModule;
            }());
            MatTooltipModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["NgModule"], args: [{
                            imports: [
                                _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["A11yModule"],
                                _angular_common__WEBPACK_IMPORTED_MODULE_14__["CommonModule"],
                                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayModule"],
                                _angular_material_core__WEBPACK_IMPORTED_MODULE_15__["MatCommonModule"],
                            ],
                            exports: [MatTooltip, TooltipComponent, _angular_material_core__WEBPACK_IMPORTED_MODULE_15__["MatCommonModule"]],
                            declarations: [MatTooltip, TooltipComponent],
                            entryComponents: [TooltipComponent],
                            providers: [
                                MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,
                                { provide: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_11__["HAMMER_GESTURE_CONFIG"], useClass: _angular_material_core__WEBPACK_IMPORTED_MODULE_15__["GestureConfig"] },
                            ]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=tooltip.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/material/esm2015/tree.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/material/esm2015/tree.js ***!
          \********************************************************/
        /*! exports provided: MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTreeNode", function () { return MatTreeNode; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTreeNodeDef", function () { return MatTreeNodeDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatNestedTreeNode", function () { return MatNestedTreeNode; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTreeNodePadding", function () { return MatTreeNodePadding; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTree", function () { return MatTree; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTreeModule", function () { return MatTreeModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTreeNodeToggle", function () { return MatTreeNodeToggle; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTreeNodeOutlet", function () { return MatTreeNodeOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTreeFlattener", function () { return MatTreeFlattener; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTreeFlatDataSource", function () { return MatTreeFlatDataSource; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatTreeNestedDataSource", function () { return MatTreeNestedDataSource; });
            /* harmony import */ var _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/tree */ "./node_modules/@angular/cdk/esm2015/tree.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var _MatTreeNodeMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinDisabled"])(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTreeNode"]));
            /**
             * Wrapper for the CdkTree node with Material design styles.
             * @template T
             */
            var MatTreeNode = /** @class */ (function (_super) {
                __extends(MatTreeNode, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} _tree
                 * @param {?} tabIndex
                 */
                function MatTreeNode(_elementRef, _tree, tabIndex) {
                    var _this = _super.call(this, _elementRef, _tree) || this;
                    _this._elementRef = _elementRef;
                    _this._tree = _tree;
                    _this.role = 'treeitem';
                    _this.tabIndex = Number(tabIndex) || 0;
                    return _this;
                }
                return MatTreeNode;
            }(_MatTreeNodeMixinBase));
            MatTreeNode.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'mat-tree-node',
                            exportAs: 'matTreeNode',
                            inputs: ['disabled', 'tabIndex'],
                            host: {
                                '[attr.aria-expanded]': 'isExpanded',
                                '[attr.aria-level]': 'role === "treeitem" ? level : null',
                                '[attr.role]': 'role',
                                'class': 'mat-tree-node'
                            },
                            providers: [{ provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTreeNode"], useExisting: MatTreeNode }]
                        },] },
            ];
            /** @nocollapse */
            MatTreeNode.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTree"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"], args: ['tabindex',] }] }
            ]; };
            MatTreeNode.propDecorators = {
                role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * Wrapper for the CdkTree node definition with Material design styles.
             * @template T
             */
            var MatTreeNodeDef = /** @class */ (function (_super) {
                __extends(MatTreeNodeDef, _super);
                function MatTreeNodeDef() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatTreeNodeDef;
            }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTreeNodeDef"]));
            MatTreeNodeDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[matTreeNodeDef]',
                            inputs: [
                                'when: matTreeNodeDefWhen'
                            ],
                            providers: [{ provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTreeNodeDef"], useExisting: MatTreeNodeDef }]
                        },] },
            ];
            MatTreeNodeDef.propDecorators = {
                data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matTreeNode',] }]
            };
            /**
             * Wrapper for the CdkTree nested node with Material design styles.
             * @template T
             */
            var MatNestedTreeNode = /** @class */ (function (_super) {
                __extends(MatNestedTreeNode, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} _tree
                 * @param {?} _differs
                 * @param {?} tabIndex
                 */
                function MatNestedTreeNode(_elementRef, _tree, _differs, tabIndex) {
                    var _this = _super.call(this, _elementRef, _tree, _differs) || this;
                    _this._elementRef = _elementRef;
                    _this._tree = _tree;
                    _this._differs = _differs;
                    _this._disabled = false;
                    _this.tabIndex = Number(tabIndex) || 0;
                    return _this;
                }
                Object.defineProperty(MatNestedTreeNode.prototype, "disabled", {
                    /**
                     * Whether the node is disabled.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MatNestedTreeNode.prototype, "tabIndex", {
                    /**
                     * Tabindex for the node.
                     * @return {?}
                     */
                    get: function () { return this.disabled ? -1 : this._tabIndex; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        // If the specified tabIndex value is null or undefined, fall back to the default value.
                        this._tabIndex = value != null ? value : 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                // This is a workaround for https://github.com/angular/angular/issues/23091
                // In aot mode, the lifecycle hooks from parent class are not called.
                // TODO(tinayuangao): Remove when the angular issue #23091 is fixed
                /**
                 * @return {?}
                 */
                MatNestedTreeNode.prototype.ngAfterContentInit = function () {
                    _super.prototype.ngAfterContentInit.call(this);
                };
                /**
                 * @return {?}
                 */
                MatNestedTreeNode.prototype.ngOnDestroy = function () {
                    _super.prototype.ngOnDestroy.call(this);
                };
                return MatNestedTreeNode;
            }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkNestedTreeNode"]));
            MatNestedTreeNode.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'mat-nested-tree-node',
                            exportAs: 'matNestedTreeNode',
                            host: {
                                '[attr.aria-expanded]': 'isExpanded',
                                '[attr.role]': 'role',
                                'class': 'mat-nested-tree-node',
                            },
                            providers: [
                                { provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkNestedTreeNode"], useExisting: MatNestedTreeNode },
                                { provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTreeNode"], useExisting: MatNestedTreeNode },
                                { provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CDK_TREE_NODE_OUTLET_NODE"], useExisting: MatNestedTreeNode }
                            ]
                        },] },
            ];
            /** @nocollapse */
            MatNestedTreeNode.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTree"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"], args: ['tabindex',] }] }
            ]; };
            MatNestedTreeNode.propDecorators = {
                node: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matNestedTreeNode',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Wrapper for the CdkTree padding with Material design styles.
             * @template T
             */
            var MatTreeNodePadding = /** @class */ (function (_super) {
                __extends(MatTreeNodePadding, _super);
                function MatTreeNodePadding() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatTreeNodePadding;
            }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTreeNodePadding"]));
            MatTreeNodePadding.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[matTreeNodePadding]',
                            providers: [{ provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTreeNodePadding"], useExisting: MatTreeNodePadding }]
                        },] },
            ];
            MatTreeNodePadding.propDecorators = {
                level: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matTreeNodePadding',] }],
                indent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matTreeNodePaddingIndent',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes
             * inside the outlet.
             */
            var MatTreeNodeOutlet = /** @class */ (function () {
                /**
                 * @param {?} viewContainer
                 * @param {?=} _node
                 */
                function MatTreeNodeOutlet(viewContainer, _node) {
                    this.viewContainer = viewContainer;
                    this._node = _node;
                }
                return MatTreeNodeOutlet;
            }());
            MatTreeNodeOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[matTreeNodeOutlet]',
                            providers: [{
                                    provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTreeNodeOutlet"],
                                    useExisting: MatTreeNodeOutlet
                                }]
                        },] },
            ];
            /** @nocollapse */
            MatTreeNodeOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CDK_TREE_NODE_OUTLET_NODE"],] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Wrapper for the CdkTable with Material design styles.
             * @template T
             */
            var MatTree = /** @class */ (function (_super) {
                __extends(MatTree, _super);
                function MatTree() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return MatTree;
            }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTree"]));
            MatTree.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'mat-tree',
                            exportAs: 'matTree',
                            template: "<ng-container matTreeNodeOutlet></ng-container>",
                            host: {
                                'class': 'mat-tree',
                                'role': 'tree',
                            },
                            styles: [".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}"],
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            // See note on CdkTree for explanation on why this uses the default change detection strategy.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                            providers: [{ provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTree"], useExisting: MatTree }]
                        },] },
            ];
            MatTree.propDecorators = {
                _nodeOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [MatTreeNodeOutlet, { static: true },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Wrapper for the CdkTree's toggle with Material design styles.
             * @template T
             */
            var MatTreeNodeToggle = /** @class */ (function (_super) {
                __extends(MatTreeNodeToggle, _super);
                function MatTreeNodeToggle() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.recursive = false;
                    return _this;
                }
                return MatTreeNodeToggle;
            }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTreeNodeToggle"]));
            MatTreeNodeToggle.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[matTreeNodeToggle]',
                            providers: [{ provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTreeNodeToggle"], useExisting: MatTreeNodeToggle }]
                        },] },
            ];
            MatTreeNodeToggle.propDecorators = {
                recursive: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matTreeNodeToggleRecursive',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAT_TREE_DIRECTIVES = [
                MatNestedTreeNode,
                MatTreeNodeDef,
                MatTreeNodePadding,
                MatTreeNodeToggle,
                MatTree,
                MatTreeNode,
                MatTreeNodeOutlet
            ];
            var MatTreeModule = /** @class */ (function () {
                function MatTreeModule() {
                }
                return MatTreeModule;
            }());
            MatTreeModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            imports: [_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_0__["CdkTreeModule"], _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]],
                            exports: MAT_TREE_DIRECTIVES,
                            declarations: MAT_TREE_DIRECTIVES,
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Tree flattener to convert a normal type of node to node with children & level information.
             * Transform nested nodes of type `T` to flattened nodes of type `F`.
             *
             * For example, the input data of type `T` is nested, and contains its children data:
             *   SomeNode: {
             *     key: 'Fruits',
             *     children: [
             *       NodeOne: {
             *         key: 'Apple',
             *       },
             *       NodeTwo: {
             *        key: 'Pear',
             *      }
             *    ]
             *  }
             *  After flattener flatten the tree, the structure will become
             *  SomeNode: {
             *    key: 'Fruits',
             *    expandable: true,
             *    level: 1
             *  },
             *  NodeOne: {
             *    key: 'Apple',
             *    expandable: false,
             *    level: 2
             *  },
             *  NodeTwo: {
             *   key: 'Pear',
             *   expandable: false,
             *   level: 2
             * }
             * and the output flattened type is `F` with additional information.
             * @template T, F
             */
            var MatTreeFlattener = /** @class */ (function () {
                /**
                 * @param {?} transformFunction
                 * @param {?} getLevel
                 * @param {?} isExpandable
                 * @param {?} getChildren
                 */
                function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {
                    this.transformFunction = transformFunction;
                    this.getLevel = getLevel;
                    this.isExpandable = isExpandable;
                    this.getChildren = getChildren;
                }
                /**
                 * @param {?} node
                 * @param {?} level
                 * @param {?} resultNodes
                 * @param {?} parentMap
                 * @return {?}
                 */
                MatTreeFlattener.prototype._flattenNode = function (node, level, resultNodes, parentMap) {
                    var _this = this;
                    /** @type {?} */
                    var flatNode = this.transformFunction(node, level);
                    resultNodes.push(flatNode);
                    if (this.isExpandable(flatNode)) {
                        /** @type {?} */
                        var childrenNodes = this.getChildren(node);
                        if (childrenNodes) {
                            if (Array.isArray(childrenNodes)) {
                                this._flattenChildren(childrenNodes, level, resultNodes, parentMap);
                            }
                            else {
                                childrenNodes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["take"])(1)).subscribe(( /**
                                 * @param {?} children
                                 * @return {?}
                                 */function (/**
                                 * @param {?} children
                                 * @return {?}
                                 */ children) {
                                    _this._flattenChildren(children, level, resultNodes, parentMap);
                                }));
                            }
                        }
                    }
                    return resultNodes;
                };
                /**
                 * @param {?} children
                 * @param {?} level
                 * @param {?} resultNodes
                 * @param {?} parentMap
                 * @return {?}
                 */
                MatTreeFlattener.prototype._flattenChildren = function (children, level, resultNodes, parentMap) {
                    var _this = this;
                    children.forEach(( /**
                     * @param {?} child
                     * @param {?} index
                     * @return {?}
                     */function (child, index) {
                        /** @type {?} */
                        var childParentMap = parentMap.slice();
                        childParentMap.push(index != children.length - 1);
                        _this._flattenNode(child, level + 1, resultNodes, childParentMap);
                    }));
                };
                /**
                 * Flatten a list of node type T to flattened version of node F.
                 * Please note that type T may be nested, and the length of `structuredData` may be different
                 * from that of returned list `F[]`.
                 * @param {?} structuredData
                 * @return {?}
                 */
                MatTreeFlattener.prototype.flattenNodes = function (structuredData) {
                    var _this = this;
                    /** @type {?} */
                    var resultNodes = [];
                    structuredData.forEach(( /**
                     * @param {?} node
                     * @return {?}
                     */function (/**
                     * @param {?} node
                     * @return {?}
                     */ node) { return _this._flattenNode(node, 0, resultNodes, []); }));
                    return resultNodes;
                };
                /**
                 * Expand flattened node with current expansion status.
                 * The returned list may have different length.
                 * @param {?} nodes
                 * @param {?} treeControl
                 * @return {?}
                 */
                MatTreeFlattener.prototype.expandFlattenedNodes = function (nodes, treeControl) {
                    var _this = this;
                    /** @type {?} */
                    var results = [];
                    /** @type {?} */
                    var currentExpand = [];
                    currentExpand[0] = true;
                    nodes.forEach(( /**
                     * @param {?} node
                     * @return {?}
                     */function (/**
                     * @param {?} node
                     * @return {?}
                     */ node) {
                        /** @type {?} */
                        var expand = true;
                        for (var i = 0; i <= _this.getLevel(node); i++) {
                            expand = expand && currentExpand[i];
                        }
                        if (expand) {
                            results.push(node);
                        }
                        if (_this.isExpandable(node)) {
                            currentExpand[_this.getLevel(node) + 1] = treeControl.isExpanded(node);
                        }
                    }));
                    return results;
                };
                return MatTreeFlattener;
            }());
            /**
             * Data source for flat tree.
             * The data source need to handle expansion/collapsion of the tree node and change the data feed
             * to `MatTree`.
             * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted
             * to type `F` for `MatTree` to consume.
             * @template T, F
             */
            var MatTreeFlatDataSource = /** @class */ (function (_super) {
                __extends(MatTreeFlatDataSource, _super);
                /**
                 * @param {?} _treeControl
                 * @param {?} _treeFlattener
                 * @param {?=} initialData
                 */
                function MatTreeFlatDataSource(_treeControl, _treeFlattener, initialData) {
                    if (initialData === void 0) { initialData = []; }
                    var _this = _super.call(this) || this;
                    _this._treeControl = _treeControl;
                    _this._treeFlattener = _treeFlattener;
                    _this._flattenedData = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]([]);
                    _this._expandedData = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]([]);
                    _this._data = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"](initialData);
                    return _this;
                }
                Object.defineProperty(MatTreeFlatDataSource.prototype, "data", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._data.value; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._data.next(value);
                        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));
                        this._treeControl.dataNodes = this._flattenedData.value;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param {?} collectionViewer
                 * @return {?}
                 */
                MatTreeFlatDataSource.prototype.connect = function (collectionViewer) {
                    var _this = this;
                    /** @type {?} */
                    var changes = [
                        collectionViewer.viewChange,
                        this._treeControl.expansionModel.onChange,
                        this._flattenedData
                    ];
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["merge"]).apply(void 0, changes).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["map"])(( /**
                     * @return {?}
                     */function () {
                        _this._expandedData.next(_this._treeFlattener.expandFlattenedNodes(_this._flattenedData.value, _this._treeControl));
                        return _this._expandedData.value;
                    })));
                };
                /**
                 * @return {?}
                 */
                MatTreeFlatDataSource.prototype.disconnect = function () {
                    // no op
                };
                return MatTreeFlatDataSource;
            }(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__["DataSource"]));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Data source for nested tree.
             *
             * The data source for nested tree doesn't have to consider node flattener, or the way to expand
             * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.
             * @template T
             */
            var MatTreeNestedDataSource = /** @class */ (function (_super) {
                __extends(MatTreeNestedDataSource, _super);
                function MatTreeNestedDataSource() {
                    var _this = _super.apply(this, arguments) || this;
                    _this._data = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]([]);
                    return _this;
                }
                Object.defineProperty(MatTreeNestedDataSource.prototype, "data", {
                    /**
                     * Data for the nested tree
                     * @return {?}
                     */
                    get: function () { return this._data.value; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._data.next(value); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param {?} collectionViewer
                 * @return {?}
                 */
                MatTreeNestedDataSource.prototype.connect = function (collectionViewer) {
                    var _this = this;
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["merge"]).apply(void 0, [collectionViewer.viewChange, this._data]).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["map"])(( /**
                 * @return {?}
                 */function () {
                        return _this.data;
                    })));
                };
                /**
                 * @return {?}
                 */
                MatTreeNestedDataSource.prototype.disconnect = function () {
                    // no op
                };
                return MatTreeNestedDataSource;
            }(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__["DataSource"]));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=tree.js.map
            /***/ 
        }),
        /***/ "./src/app/core/material.module.ts": 
        /*!*****************************************!*\
          !*** ./src/app/core/material.module.ts ***!
          \*****************************************/
        /*! exports provided: MaterialModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaterialModule", function () { return MaterialModule; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/drag-drop */ "./node_modules/@angular/cdk/esm2015/drag-drop.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm2015/scrolling.js");
            /* harmony import */ var _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/stepper */ "./node_modules/@angular/cdk/esm2015/stepper.js");
            /* harmony import */ var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/table */ "./node_modules/@angular/cdk/esm2015/table.js");
            /* harmony import */ var _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/tree */ "./node_modules/@angular/cdk/esm2015/tree.js");
            /* harmony import */ var _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/autocomplete */ "./node_modules/@angular/material/esm2015/autocomplete.js");
            /* harmony import */ var _angular_material_badge__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/badge */ "./node_modules/@angular/material/esm2015/badge.js");
            /* harmony import */ var _angular_material_bottom_sheet__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/bottom-sheet */ "./node_modules/@angular/material/esm2015/bottom-sheet.js");
            /* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm2015/button.js");
            /* harmony import */ var _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/button-toggle */ "./node_modules/@angular/material/esm2015/button-toggle.js");
            /* harmony import */ var _angular_material_card__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/card */ "./node_modules/@angular/material/esm2015/card.js");
            /* harmony import */ var _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/material/checkbox */ "./node_modules/@angular/material/esm2015/checkbox.js");
            /* harmony import */ var _angular_material_chips__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/material/chips */ "./node_modules/@angular/material/esm2015/chips.js");
            /* harmony import */ var _angular_material_stepper__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/material/stepper */ "./node_modules/@angular/material/esm2015/stepper.js");
            /* harmony import */ var _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/material/datepicker */ "./node_modules/@angular/material/esm2015/datepicker.js");
            /* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm2015/dialog.js");
            /* harmony import */ var _angular_material_divider__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/material/divider */ "./node_modules/@angular/material/esm2015/divider.js");
            /* harmony import */ var _angular_material_expansion__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/material/expansion */ "./node_modules/@angular/material/esm2015/expansion.js");
            /* harmony import */ var _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/material/grid-list */ "./node_modules/@angular/material/esm2015/grid-list.js");
            /* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/material/icon */ "./node_modules/@angular/material/esm2015/icon.js");
            /* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/material/input */ "./node_modules/@angular/material/esm2015/input.js");
            /* harmony import */ var _angular_material_list__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @angular/material/list */ "./node_modules/@angular/material/esm2015/list.js");
            /* harmony import */ var _angular_material_menu__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @angular/material/menu */ "./node_modules/@angular/material/esm2015/menu.js");
            /* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
            /* harmony import */ var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @angular/material/paginator */ "./node_modules/@angular/material/esm2015/paginator.js");
            /* harmony import */ var _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @angular/material/progress-bar */ "./node_modules/@angular/material/esm2015/progress-bar.js");
            /* harmony import */ var _angular_material_progress_spinner__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @angular/material/progress-spinner */ "./node_modules/@angular/material/esm2015/progress-spinner.js");
            /* harmony import */ var _angular_material_radio__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @angular/material/radio */ "./node_modules/@angular/material/esm2015/radio.js");
            /* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @angular/material/select */ "./node_modules/@angular/material/esm2015/select.js");
            /* harmony import */ var _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @angular/material/sidenav */ "./node_modules/@angular/material/esm2015/sidenav.js");
            /* harmony import */ var _angular_material_slider__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @angular/material/slider */ "./node_modules/@angular/material/esm2015/slider.js");
            /* harmony import */ var _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @angular/material/slide-toggle */ "./node_modules/@angular/material/esm2015/slide-toggle.js");
            /* harmony import */ var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @angular/material/snack-bar */ "./node_modules/@angular/material/esm2015/snack-bar.js");
            /* harmony import */ var _angular_material_sort__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @angular/material/sort */ "./node_modules/@angular/material/esm2015/sort.js");
            /* harmony import */ var _angular_material_table__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @angular/material/table */ "./node_modules/@angular/material/esm2015/table.js");
            /* harmony import */ var _angular_material_tabs__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @angular/material/tabs */ "./node_modules/@angular/material/esm2015/tabs.js");
            /* harmony import */ var _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @angular/material/toolbar */ "./node_modules/@angular/material/esm2015/toolbar.js");
            /* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @angular/material/tooltip */ "./node_modules/@angular/material/esm2015/tooltip.js");
            /* harmony import */ var _angular_material_tree__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @angular/material/tree */ "./node_modules/@angular/material/esm2015/tree.js");
            var MaterialModule = /** @class */ (function () {
                function MaterialModule() {
                }
                return MaterialModule;
            }());
            MaterialModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
                    exports: [
                        _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__["A11yModule"],
                        _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_6__["CdkStepperModule"],
                        _angular_cdk_table__WEBPACK_IMPORTED_MODULE_7__["CdkTableModule"],
                        _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["CdkTreeModule"],
                        _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_3__["DragDropModule"],
                        _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_9__["MatAutocompleteModule"],
                        _angular_material_badge__WEBPACK_IMPORTED_MODULE_10__["MatBadgeModule"],
                        _angular_material_bottom_sheet__WEBPACK_IMPORTED_MODULE_11__["MatBottomSheetModule"],
                        _angular_material_button__WEBPACK_IMPORTED_MODULE_12__["MatButtonModule"],
                        _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_13__["MatButtonToggleModule"],
                        _angular_material_card__WEBPACK_IMPORTED_MODULE_14__["MatCardModule"],
                        _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_15__["MatCheckboxModule"],
                        _angular_material_chips__WEBPACK_IMPORTED_MODULE_16__["MatChipsModule"],
                        _angular_material_stepper__WEBPACK_IMPORTED_MODULE_17__["MatStepperModule"],
                        _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_18__["MatDatepickerModule"],
                        _angular_material_dialog__WEBPACK_IMPORTED_MODULE_19__["MatDialogModule"],
                        _angular_material_divider__WEBPACK_IMPORTED_MODULE_20__["MatDividerModule"],
                        _angular_material_expansion__WEBPACK_IMPORTED_MODULE_21__["MatExpansionModule"],
                        _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_22__["MatGridListModule"],
                        _angular_material_icon__WEBPACK_IMPORTED_MODULE_23__["MatIconModule"],
                        _angular_material_input__WEBPACK_IMPORTED_MODULE_24__["MatInputModule"],
                        _angular_material_list__WEBPACK_IMPORTED_MODULE_25__["MatListModule"],
                        _angular_material_menu__WEBPACK_IMPORTED_MODULE_26__["MatMenuModule"],
                        _angular_material_core__WEBPACK_IMPORTED_MODULE_27__["MatNativeDateModule"],
                        _angular_material_paginator__WEBPACK_IMPORTED_MODULE_28__["MatPaginatorModule"],
                        _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_29__["MatProgressBarModule"],
                        _angular_material_progress_spinner__WEBPACK_IMPORTED_MODULE_30__["MatProgressSpinnerModule"],
                        _angular_material_radio__WEBPACK_IMPORTED_MODULE_31__["MatRadioModule"],
                        _angular_material_core__WEBPACK_IMPORTED_MODULE_27__["MatRippleModule"],
                        _angular_material_select__WEBPACK_IMPORTED_MODULE_32__["MatSelectModule"],
                        _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_33__["MatSidenavModule"],
                        _angular_material_slider__WEBPACK_IMPORTED_MODULE_34__["MatSliderModule"],
                        _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_35__["MatSlideToggleModule"],
                        _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_36__["MatSnackBarModule"],
                        _angular_material_sort__WEBPACK_IMPORTED_MODULE_37__["MatSortModule"],
                        _angular_material_table__WEBPACK_IMPORTED_MODULE_38__["MatTableModule"],
                        _angular_material_tabs__WEBPACK_IMPORTED_MODULE_39__["MatTabsModule"],
                        _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_40__["MatToolbarModule"],
                        _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_41__["MatTooltipModule"],
                        _angular_material_tree__WEBPACK_IMPORTED_MODULE_42__["MatTreeModule"],
                        _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["PortalModule"],
                        _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["ScrollingModule"],
                    ],
                    declarations: []
                })
            ], MaterialModule);
            /***/ 
        })
    }]);
//# sourceMappingURL=default~access-log-access-log-module~casemanagement-casemanagement-module~contact-management-contact~b478bd8b-es2015.js.map
//# sourceMappingURL=default~access-log-access-log-module~casemanagement-casemanagement-module~contact-management-contact~b478bd8b-es5.js.map
//# sourceMappingURL=default~access-log-access-log-module~casemanagement-casemanagement-module~contact-management-contact~b478bd8b-es5.js.map